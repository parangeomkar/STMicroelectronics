
h743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d08c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  0800d324  0800d324  0001d324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d4d4  0800d4d4  0001d4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d4dc  0800d4dc  0001d4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d4e0  0800d4e0  0001d4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000034  20000000  0800d4e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000533c  20000034  0800d518  00020034  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20005370  0800d518  00025370  2**0
                  ALLOC
  9 .rxBuf        00001014  24000000  24000000  00030000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 11 .debug_info   00033ec6  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004441  00000000  00000000  00053f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000015e8  00000000  00000000  00058370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001490  00000000  00000000  00059958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003a010  00000000  00000000  0005ade8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001f108  00000000  00000000  00094df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00176efe  00000000  00000000  000b3f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0022adfe  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005c78  00000000  00000000  0022ae54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000034 	.word	0x20000034
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d30c 	.word	0x0800d30c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000038 	.word	0x20000038
 80002d4:	0800d30c 	.word	0x0800d30c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <initModelPredictiveControl>:
 * This function implements model predictive control (MPC)
 *
 */

int states[7] = {1,3,2,6,4,5,0};
void initModelPredictiveControl(){
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
	C1 = 10000*(1 - (0.75/(16130*0.0004)));
 80005d4:	4b59      	ldr	r3, [pc, #356]	; (800073c <initModelPredictiveControl+0x16c>)
 80005d6:	f242 2285 	movw	r2, #8837	; 0x2285
 80005da:	601a      	str	r2, [r3, #0]
	C2 = 10000*(1/(16130*0.0004));
 80005dc:	4b58      	ldr	r3, [pc, #352]	; (8000740 <initModelPredictiveControl+0x170>)
 80005de:	f240 620d 	movw	r2, #1549	; 0x60d
 80005e2:	601a      	str	r2, [r3, #0]

	for(i=0;i<6;i++){
 80005e4:	4b57      	ldr	r3, [pc, #348]	; (8000744 <initModelPredictiveControl+0x174>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	e09b      	b.n	8000724 <initModelPredictiveControl+0x154>
		Sa = states[i] & 0x01;
 80005ec:	4b55      	ldr	r3, [pc, #340]	; (8000744 <initModelPredictiveControl+0x174>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a55      	ldr	r2, [pc, #340]	; (8000748 <initModelPredictiveControl+0x178>)
 80005f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b53      	ldr	r3, [pc, #332]	; (800074c <initModelPredictiveControl+0x17c>)
 8000600:	701a      	strb	r2, [r3, #0]
		Sb = (states[i]>>1) & 0x01;
 8000602:	4b50      	ldr	r3, [pc, #320]	; (8000744 <initModelPredictiveControl+0x174>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a50      	ldr	r2, [pc, #320]	; (8000748 <initModelPredictiveControl+0x178>)
 8000608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800060c:	105b      	asrs	r3, r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b4e      	ldr	r3, [pc, #312]	; (8000750 <initModelPredictiveControl+0x180>)
 8000618:	701a      	strb	r2, [r3, #0]
		Sc = (states[i]>>2) & 0x01;
 800061a:	4b4a      	ldr	r3, [pc, #296]	; (8000744 <initModelPredictiveControl+0x174>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a4a      	ldr	r2, [pc, #296]	; (8000748 <initModelPredictiveControl+0x178>)
 8000620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000624:	109b      	asrs	r3, r3, #2
 8000626:	b2db      	uxtb	r3, r3
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b49      	ldr	r3, [pc, #292]	; (8000754 <initModelPredictiveControl+0x184>)
 8000630:	701a      	strb	r2, [r3, #0]

		Varray[i][0] = (V/100)*((2*Sa-Sb-Sc))/3;
 8000632:	4b49      	ldr	r3, [pc, #292]	; (8000758 <initModelPredictiveControl+0x188>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	4a49      	ldr	r2, [pc, #292]	; (800075c <initModelPredictiveControl+0x18c>)
 8000638:	fba2 2303 	umull	r2, r3, r2, r3
 800063c:	095b      	lsrs	r3, r3, #5
 800063e:	b29b      	uxth	r3, r3
 8000640:	4619      	mov	r1, r3
 8000642:	4b42      	ldr	r3, [pc, #264]	; (800074c <initModelPredictiveControl+0x17c>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	4a41      	ldr	r2, [pc, #260]	; (8000750 <initModelPredictiveControl+0x180>)
 800064a:	7812      	ldrb	r2, [r2, #0]
 800064c:	1a9b      	subs	r3, r3, r2
 800064e:	4a41      	ldr	r2, [pc, #260]	; (8000754 <initModelPredictiveControl+0x184>)
 8000650:	7812      	ldrb	r2, [r2, #0]
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	fb03 f301 	mul.w	r3, r3, r1
 8000658:	4a41      	ldr	r2, [pc, #260]	; (8000760 <initModelPredictiveControl+0x190>)
 800065a:	fb82 1203 	smull	r1, r2, r2, r3
 800065e:	17db      	asrs	r3, r3, #31
 8000660:	1ad1      	subs	r1, r2, r3
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <initModelPredictiveControl+0x174>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	ee07 1a90 	vmov	s15, r1
 800066a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800066e:	493d      	ldr	r1, [pc, #244]	; (8000764 <initModelPredictiveControl+0x194>)
 8000670:	4613      	mov	r3, r2
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	4413      	add	r3, r2
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	440b      	add	r3, r1
 800067a:	edc3 7a00 	vstr	s15, [r3]
		Varray[i][1] = (V/100)*((2*Sb-Sa-Sc))/3;
 800067e:	4b36      	ldr	r3, [pc, #216]	; (8000758 <initModelPredictiveControl+0x188>)
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	4a36      	ldr	r2, [pc, #216]	; (800075c <initModelPredictiveControl+0x18c>)
 8000684:	fba2 2303 	umull	r2, r3, r2, r3
 8000688:	095b      	lsrs	r3, r3, #5
 800068a:	b29b      	uxth	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	4b30      	ldr	r3, [pc, #192]	; (8000750 <initModelPredictiveControl+0x180>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	4a2d      	ldr	r2, [pc, #180]	; (800074c <initModelPredictiveControl+0x17c>)
 8000696:	7812      	ldrb	r2, [r2, #0]
 8000698:	1a9b      	subs	r3, r3, r2
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <initModelPredictiveControl+0x184>)
 800069c:	7812      	ldrb	r2, [r2, #0]
 800069e:	1a9b      	subs	r3, r3, r2
 80006a0:	fb03 f301 	mul.w	r3, r3, r1
 80006a4:	4a2e      	ldr	r2, [pc, #184]	; (8000760 <initModelPredictiveControl+0x190>)
 80006a6:	fb82 1203 	smull	r1, r2, r2, r3
 80006aa:	17db      	asrs	r3, r3, #31
 80006ac:	1ad1      	subs	r1, r2, r3
 80006ae:	4b25      	ldr	r3, [pc, #148]	; (8000744 <initModelPredictiveControl+0x174>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	ee07 1a90 	vmov	s15, r1
 80006b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ba:	492a      	ldr	r1, [pc, #168]	; (8000764 <initModelPredictiveControl+0x194>)
 80006bc:	4613      	mov	r3, r2
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	4413      	add	r3, r2
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	440b      	add	r3, r1
 80006c6:	3304      	adds	r3, #4
 80006c8:	edc3 7a00 	vstr	s15, [r3]
		Varray[i][2] = (V/100)*((2*Sc-Sb-Sa))/3;
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <initModelPredictiveControl+0x188>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	4a22      	ldr	r2, [pc, #136]	; (800075c <initModelPredictiveControl+0x18c>)
 80006d2:	fba2 2303 	umull	r2, r3, r2, r3
 80006d6:	095b      	lsrs	r3, r3, #5
 80006d8:	b29b      	uxth	r3, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <initModelPredictiveControl+0x184>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <initModelPredictiveControl+0x180>)
 80006e4:	7812      	ldrb	r2, [r2, #0]
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	4a18      	ldr	r2, [pc, #96]	; (800074c <initModelPredictiveControl+0x17c>)
 80006ea:	7812      	ldrb	r2, [r2, #0]
 80006ec:	1a9b      	subs	r3, r3, r2
 80006ee:	fb03 f301 	mul.w	r3, r3, r1
 80006f2:	4a1b      	ldr	r2, [pc, #108]	; (8000760 <initModelPredictiveControl+0x190>)
 80006f4:	fb82 1203 	smull	r1, r2, r2, r3
 80006f8:	17db      	asrs	r3, r3, #31
 80006fa:	1ad1      	subs	r1, r2, r3
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <initModelPredictiveControl+0x174>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	ee07 1a90 	vmov	s15, r1
 8000704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000708:	4916      	ldr	r1, [pc, #88]	; (8000764 <initModelPredictiveControl+0x194>)
 800070a:	4613      	mov	r3, r2
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4413      	add	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	440b      	add	r3, r1
 8000714:	3308      	adds	r3, #8
 8000716:	edc3 7a00 	vstr	s15, [r3]
	for(i=0;i<6;i++){
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <initModelPredictiveControl+0x174>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	3301      	adds	r3, #1
 8000720:	4a08      	ldr	r2, [pc, #32]	; (8000744 <initModelPredictiveControl+0x174>)
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <initModelPredictiveControl+0x174>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b05      	cmp	r3, #5
 800072a:	f77f af5f 	ble.w	80005ec <initModelPredictiveControl+0x1c>
	}
}
 800072e:	bf00      	nop
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	20000070 	.word	0x20000070
 8000740:	2000017c 	.word	0x2000017c
 8000744:	20000184 	.word	0x20000184
 8000748:	20000000 	.word	0x20000000
 800074c:	20000188 	.word	0x20000188
 8000750:	200000b6 	.word	0x200000b6
 8000754:	20000182 	.word	0x20000182
 8000758:	2000001e 	.word	0x2000001e
 800075c:	51eb851f 	.word	0x51eb851f
 8000760:	55555556 	.word	0x55555556
 8000764:	2000018c 	.word	0x2000018c

08000768 <modelPredictiveControl>:

int16_t lambda1 = 0;
void modelPredictiveControl(){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	computeSinCos();
 800076c:	f001 f808 	bl	8001780 <computeSinCos>
	parkTransform(Ia,Ib,Ic,&Idq);
 8000770:	4b97      	ldr	r3, [pc, #604]	; (80009d0 <modelPredictiveControl+0x268>)
 8000772:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000776:	4b97      	ldr	r3, [pc, #604]	; (80009d4 <modelPredictiveControl+0x26c>)
 8000778:	f9b3 1000 	ldrsh.w	r1, [r3]
 800077c:	4b96      	ldr	r3, [pc, #600]	; (80009d8 <modelPredictiveControl+0x270>)
 800077e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000782:	4b96      	ldr	r3, [pc, #600]	; (80009dc <modelPredictiveControl+0x274>)
 8000784:	f000 ff94 	bl	80016b0 <parkTransform>

	IdTemp = Idq.d/1230;
 8000788:	4b94      	ldr	r3, [pc, #592]	; (80009dc <modelPredictiveControl+0x274>)
 800078a:	ed93 7a00 	vldr	s14, [r3]
 800078e:	eddf 6a94 	vldr	s13, [pc, #592]	; 80009e0 <modelPredictiveControl+0x278>
 8000792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000796:	4b93      	ldr	r3, [pc, #588]	; (80009e4 <modelPredictiveControl+0x27c>)
 8000798:	edc3 7a00 	vstr	s15, [r3]
	IqTemp = Idq.q/1230;
 800079c:	4b8f      	ldr	r3, [pc, #572]	; (80009dc <modelPredictiveControl+0x274>)
 800079e:	ed93 7a01 	vldr	s14, [r3, #4]
 80007a2:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80009e0 <modelPredictiveControl+0x278>
 80007a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007aa:	4b8f      	ldr	r3, [pc, #572]	; (80009e8 <modelPredictiveControl+0x280>)
 80007ac:	edc3 7a00 	vstr	s15, [r3]

	cost = 100000;
 80007b0:	4b8e      	ldr	r3, [pc, #568]	; (80009ec <modelPredictiveControl+0x284>)
 80007b2:	4a8f      	ldr	r2, [pc, #572]	; (80009f0 <modelPredictiveControl+0x288>)
 80007b4:	601a      	str	r2, [r3, #0]


//	V = (Vbus/65);

	for(i=0;i<6;i++){
 80007b6:	4b8f      	ldr	r3, [pc, #572]	; (80009f4 <modelPredictiveControl+0x28c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	e17e      	b.n	8000abc <modelPredictiveControl+0x354>
		Va = Varray[i][0];
 80007be:	4b8d      	ldr	r3, [pc, #564]	; (80009f4 <modelPredictiveControl+0x28c>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	498d      	ldr	r1, [pc, #564]	; (80009f8 <modelPredictiveControl+0x290>)
 80007c4:	4613      	mov	r3, r2
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	4413      	add	r3, r2
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	440b      	add	r3, r1
 80007ce:	edd3 7a00 	vldr	s15, [r3]
 80007d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007d6:	ee17 3a90 	vmov	r3, s15
 80007da:	b21a      	sxth	r2, r3
 80007dc:	4b87      	ldr	r3, [pc, #540]	; (80009fc <modelPredictiveControl+0x294>)
 80007de:	801a      	strh	r2, [r3, #0]
		Vb = Varray[i][1];
 80007e0:	4b84      	ldr	r3, [pc, #528]	; (80009f4 <modelPredictiveControl+0x28c>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4984      	ldr	r1, [pc, #528]	; (80009f8 <modelPredictiveControl+0x290>)
 80007e6:	4613      	mov	r3, r2
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	4413      	add	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	440b      	add	r3, r1
 80007f0:	3304      	adds	r3, #4
 80007f2:	edd3 7a00 	vldr	s15, [r3]
 80007f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007fa:	ee17 3a90 	vmov	r3, s15
 80007fe:	b21a      	sxth	r2, r3
 8000800:	4b7f      	ldr	r3, [pc, #508]	; (8000a00 <modelPredictiveControl+0x298>)
 8000802:	801a      	strh	r2, [r3, #0]
		Vc = Varray[i][2];
 8000804:	4b7b      	ldr	r3, [pc, #492]	; (80009f4 <modelPredictiveControl+0x28c>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	497b      	ldr	r1, [pc, #492]	; (80009f8 <modelPredictiveControl+0x290>)
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	440b      	add	r3, r1
 8000814:	3308      	adds	r3, #8
 8000816:	edd3 7a00 	vldr	s15, [r3]
 800081a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800081e:	ee17 3a90 	vmov	r3, s15
 8000822:	b21a      	sxth	r2, r3
 8000824:	4b77      	ldr	r3, [pc, #476]	; (8000a04 <modelPredictiveControl+0x29c>)
 8000826:	801a      	strh	r2, [r3, #0]

		parkTransform(Va,Vb,Vc,&Vdq);
 8000828:	4b74      	ldr	r3, [pc, #464]	; (80009fc <modelPredictiveControl+0x294>)
 800082a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800082e:	4b74      	ldr	r3, [pc, #464]	; (8000a00 <modelPredictiveControl+0x298>)
 8000830:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000834:	4b73      	ldr	r3, [pc, #460]	; (8000a04 <modelPredictiveControl+0x29c>)
 8000836:	f9b3 2000 	ldrsh.w	r2, [r3]
 800083a:	4b73      	ldr	r3, [pc, #460]	; (8000a08 <modelPredictiveControl+0x2a0>)
 800083c:	f000 ff38 	bl	80016b0 <parkTransform>

		costTemp = 0;
 8000840:	4b72      	ldr	r3, [pc, #456]	; (8000a0c <modelPredictiveControl+0x2a4>)
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]

		for(j=0;j<1;j++){
 8000846:	4b72      	ldr	r3, [pc, #456]	; (8000a10 <modelPredictiveControl+0x2a8>)
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	e10f      	b.n	8000a6e <modelPredictiveControl+0x306>
			IdPred = (int)((C1*IdTemp) + (wr*IqTemp/2) + (C2*Vdq.d));
 800084e:	4b71      	ldr	r3, [pc, #452]	; (8000a14 <modelPredictiveControl+0x2ac>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	ee07 3a90 	vmov	s15, r3
 8000856:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800085a:	4b62      	ldr	r3, [pc, #392]	; (80009e4 <modelPredictiveControl+0x27c>)
 800085c:	edd3 7a00 	vldr	s15, [r3]
 8000860:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000864:	4b6c      	ldr	r3, [pc, #432]	; (8000a18 <modelPredictiveControl+0x2b0>)
 8000866:	edd3 6a00 	vldr	s13, [r3]
 800086a:	4b5f      	ldr	r3, [pc, #380]	; (80009e8 <modelPredictiveControl+0x280>)
 800086c:	edd3 7a00 	vldr	s15, [r3]
 8000870:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000874:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000878:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800087c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000880:	4b66      	ldr	r3, [pc, #408]	; (8000a1c <modelPredictiveControl+0x2b4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	ee07 3a90 	vmov	s15, r3
 8000888:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800088c:	4b5e      	ldr	r3, [pc, #376]	; (8000a08 <modelPredictiveControl+0x2a0>)
 800088e:	edd3 7a00 	vldr	s15, [r3]
 8000892:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800089a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800089e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008a2:	4b5f      	ldr	r3, [pc, #380]	; (8000a20 <modelPredictiveControl+0x2b8>)
 80008a4:	edc3 7a00 	vstr	s15, [r3]
			IqPred = (int)((C1*IqTemp) - (wr*IdTemp/2) + (C2*Vdq.q));
 80008a8:	4b5a      	ldr	r3, [pc, #360]	; (8000a14 <modelPredictiveControl+0x2ac>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	ee07 3a90 	vmov	s15, r3
 80008b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008b4:	4b4c      	ldr	r3, [pc, #304]	; (80009e8 <modelPredictiveControl+0x280>)
 80008b6:	edd3 7a00 	vldr	s15, [r3]
 80008ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008be:	4b56      	ldr	r3, [pc, #344]	; (8000a18 <modelPredictiveControl+0x2b0>)
 80008c0:	edd3 6a00 	vldr	s13, [r3]
 80008c4:	4b47      	ldr	r3, [pc, #284]	; (80009e4 <modelPredictiveControl+0x27c>)
 80008c6:	edd3 7a00 	vldr	s15, [r3]
 80008ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80008ce:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80008d2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80008d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008da:	4b50      	ldr	r3, [pc, #320]	; (8000a1c <modelPredictiveControl+0x2b4>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	ee07 3a90 	vmov	s15, r3
 80008e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80008e6:	4b48      	ldr	r3, [pc, #288]	; (8000a08 <modelPredictiveControl+0x2a0>)
 80008e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80008ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008fc:	4b49      	ldr	r3, [pc, #292]	; (8000a24 <modelPredictiveControl+0x2bc>)
 80008fe:	edc3 7a00 	vstr	s15, [r3]

			costTemp = lambda1*sqr(mod(IdPred))/100000 + sqr(mod((IqRef - IqPred)))/10000;
 8000902:	4b49      	ldr	r3, [pc, #292]	; (8000a28 <modelPredictiveControl+0x2c0>)
 8000904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000908:	ee07 3a90 	vmov	s15, r3
 800090c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000910:	4b43      	ldr	r3, [pc, #268]	; (8000a20 <modelPredictiveControl+0x2b8>)
 8000912:	edd3 7a00 	vldr	s15, [r3]
 8000916:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800091a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800091e:	dd03      	ble.n	8000928 <modelPredictiveControl+0x1c0>
 8000920:	4b3f      	ldr	r3, [pc, #252]	; (8000a20 <modelPredictiveControl+0x2b8>)
 8000922:	ed93 7a00 	vldr	s14, [r3]
 8000926:	e004      	b.n	8000932 <modelPredictiveControl+0x1ca>
 8000928:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <modelPredictiveControl+0x2b8>)
 800092a:	edd3 7a00 	vldr	s15, [r3]
 800092e:	eeb1 7a67 	vneg.f32	s14, s15
 8000932:	4b3b      	ldr	r3, [pc, #236]	; (8000a20 <modelPredictiveControl+0x2b8>)
 8000934:	edd3 7a00 	vldr	s15, [r3]
 8000938:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800093c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000940:	dd03      	ble.n	800094a <modelPredictiveControl+0x1e2>
 8000942:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <modelPredictiveControl+0x2b8>)
 8000944:	edd3 7a00 	vldr	s15, [r3]
 8000948:	e004      	b.n	8000954 <modelPredictiveControl+0x1ec>
 800094a:	4b35      	ldr	r3, [pc, #212]	; (8000a20 <modelPredictiveControl+0x2b8>)
 800094c:	edd3 7a00 	vldr	s15, [r3]
 8000950:	eef1 7a67 	vneg.f32	s15, s15
 8000954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800095c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000a2c <modelPredictiveControl+0x2c4>
 8000960:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000964:	4b32      	ldr	r3, [pc, #200]	; (8000a30 <modelPredictiveControl+0x2c8>)
 8000966:	ed93 7a00 	vldr	s14, [r3]
 800096a:	4b2e      	ldr	r3, [pc, #184]	; (8000a24 <modelPredictiveControl+0x2bc>)
 800096c:	edd3 7a00 	vldr	s15, [r3]
 8000970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000974:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800097c:	dd08      	ble.n	8000990 <modelPredictiveControl+0x228>
 800097e:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <modelPredictiveControl+0x2c8>)
 8000980:	ed93 7a00 	vldr	s14, [r3]
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <modelPredictiveControl+0x2bc>)
 8000986:	edd3 7a00 	vldr	s15, [r3]
 800098a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800098e:	e009      	b.n	80009a4 <modelPredictiveControl+0x23c>
 8000990:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <modelPredictiveControl+0x2c8>)
 8000992:	ed93 7a00 	vldr	s14, [r3]
 8000996:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <modelPredictiveControl+0x2bc>)
 8000998:	edd3 7a00 	vldr	s15, [r3]
 800099c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009a0:	eeb1 7a67 	vneg.f32	s14, s15
 80009a4:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <modelPredictiveControl+0x2c8>)
 80009a6:	ed93 6a00 	vldr	s12, [r3]
 80009aa:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <modelPredictiveControl+0x2bc>)
 80009ac:	edd3 7a00 	vldr	s15, [r3]
 80009b0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80009b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009bc:	dd3a      	ble.n	8000a34 <modelPredictiveControl+0x2cc>
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <modelPredictiveControl+0x2c8>)
 80009c0:	ed93 6a00 	vldr	s12, [r3]
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <modelPredictiveControl+0x2bc>)
 80009c6:	edd3 7a00 	vldr	s15, [r3]
 80009ca:	ee76 7a67 	vsub.f32	s15, s12, s15
 80009ce:	e03b      	b.n	8000a48 <modelPredictiveControl+0x2e0>
 80009d0:	200000ac 	.word	0x200000ac
 80009d4:	200001e0 	.word	0x200001e0
 80009d8:	2000020a 	.word	0x2000020a
 80009dc:	20000244 	.word	0x20000244
 80009e0:	4499c000 	.word	0x4499c000
 80009e4:	20000228 	.word	0x20000228
 80009e8:	20000204 	.word	0x20000204
 80009ec:	20000154 	.word	0x20000154
 80009f0:	000186a0 	.word	0x000186a0
 80009f4:	20000184 	.word	0x20000184
 80009f8:	2000018c 	.word	0x2000018c
 80009fc:	20000162 	.word	0x20000162
 8000a00:	2000020e 	.word	0x2000020e
 8000a04:	200001e6 	.word	0x200001e6
 8000a08:	20000168 	.word	0x20000168
 8000a0c:	200000b0 	.word	0x200000b0
 8000a10:	2000007c 	.word	0x2000007c
 8000a14:	20000070 	.word	0x20000070
 8000a18:	20000224 	.word	0x20000224
 8000a1c:	2000017c 	.word	0x2000017c
 8000a20:	2000015c 	.word	0x2000015c
 8000a24:	20000238 	.word	0x20000238
 8000a28:	20000050 	.word	0x20000050
 8000a2c:	47c35000 	.word	0x47c35000
 8000a30:	20000174 	.word	0x20000174
 8000a34:	4b30      	ldr	r3, [pc, #192]	; (8000af8 <modelPredictiveControl+0x390>)
 8000a36:	ed93 6a00 	vldr	s12, [r3]
 8000a3a:	4b30      	ldr	r3, [pc, #192]	; (8000afc <modelPredictiveControl+0x394>)
 8000a3c:	edd3 7a00 	vldr	s15, [r3]
 8000a40:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000a44:	eef1 7a67 	vneg.f32	s15, s15
 8000a48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a4c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8000b00 <modelPredictiveControl+0x398>
 8000a50:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8000a54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a5c:	ee17 2a90 	vmov	r2, s15
 8000a60:	4b28      	ldr	r3, [pc, #160]	; (8000b04 <modelPredictiveControl+0x39c>)
 8000a62:	601a      	str	r2, [r3, #0]
		for(j=0;j<1;j++){
 8000a64:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <modelPredictiveControl+0x3a0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	4a27      	ldr	r2, [pc, #156]	; (8000b08 <modelPredictiveControl+0x3a0>)
 8000a6c:	6013      	str	r3, [r2, #0]
 8000a6e:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <modelPredictiveControl+0x3a0>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f77f aeeb 	ble.w	800084e <modelPredictiveControl+0xe6>
		}

		if(costTemp < cost){
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <modelPredictiveControl+0x39c>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <modelPredictiveControl+0x3a4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	da16      	bge.n	8000ab2 <modelPredictiveControl+0x34a>
			optimalVector = i;
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <modelPredictiveControl+0x3a8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <modelPredictiveControl+0x3ac>)
 8000a8c:	701a      	strb	r2, [r3, #0]
			cost = costTemp;
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <modelPredictiveControl+0x39c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a1e      	ldr	r2, [pc, #120]	; (8000b0c <modelPredictiveControl+0x3a4>)
 8000a94:	6013      	str	r3, [r2, #0]
			IqTx = IqPred*123/1000;
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <modelPredictiveControl+0x394>)
 8000a98:	edd3 7a00 	vldr	s15, [r3]
 8000a9c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000b18 <modelPredictiveControl+0x3b0>
 8000aa0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000aa4:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8000b1c <modelPredictiveControl+0x3b4>
 8000aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000aac:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <modelPredictiveControl+0x3b8>)
 8000aae:	edc3 7a00 	vstr	s15, [r3]
	for(i=0;i<6;i++){
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <modelPredictiveControl+0x3a8>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <modelPredictiveControl+0x3a8>)
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <modelPredictiveControl+0x3a8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b05      	cmp	r3, #5
 8000ac2:	f77f ae7c 	ble.w	80007be <modelPredictiveControl+0x56>
		}
	}


	wt = (optimalVector)*60;
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <modelPredictiveControl+0x3ac>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	461a      	mov	r2, r3
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <modelPredictiveControl+0x3bc>)
 8000ad8:	801a      	strh	r2, [r3, #0]
	if(wt >= 360){
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <modelPredictiveControl+0x3bc>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000ae2:	d306      	bcc.n	8000af2 <modelPredictiveControl+0x38a>
		wt -= 360;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <modelPredictiveControl+0x3bc>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <modelPredictiveControl+0x3bc>)
 8000af0:	801a      	strh	r2, [r3, #0]
	}
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000174 	.word	0x20000174
 8000afc:	20000238 	.word	0x20000238
 8000b00:	461c4000 	.word	0x461c4000
 8000b04:	200000b0 	.word	0x200000b0
 8000b08:	2000007c 	.word	0x2000007c
 8000b0c:	20000154 	.word	0x20000154
 8000b10:	20000184 	.word	0x20000184
 8000b14:	20000242 	.word	0x20000242
 8000b18:	42f60000 	.word	0x42f60000
 8000b1c:	447a0000 	.word	0x447a0000
 8000b20:	200001e8 	.word	0x200001e8
 8000b24:	20000068 	.word	0x20000068

08000b28 <SVPWM>:
uint16_t xxx = 0;
/**
 * This function computes SVPWM timings for TIM1
 *
 */
void SVPWM(){
 8000b28:	b598      	push	{r3, r4, r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	if(run == 1){
 8000b2c:	4b8f      	ldr	r3, [pc, #572]	; (8000d6c <SVPWM+0x244>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	f040 81a1 	bne.w	8000e78 <SVPWM+0x350>
		n = ((uint8_t)(wt/60))+1;
 8000b36:	4b8e      	ldr	r3, [pc, #568]	; (8000d70 <SVPWM+0x248>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	4a8e      	ldr	r2, [pc, #568]	; (8000d74 <SVPWM+0x24c>)
 8000b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b40:	095b      	lsrs	r3, r3, #5
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	3301      	adds	r3, #1
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4b8b      	ldr	r3, [pc, #556]	; (8000d78 <SVPWM+0x250>)
 8000b4c:	701a      	strb	r2, [r3, #0]

		T1 = (uint16_t)(V*(sinLowRes(n*60 - wt))/(1667));
 8000b4e:	4b8b      	ldr	r3, [pc, #556]	; (8000d7c <SVPWM+0x254>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	461c      	mov	r4, r3
 8000b54:	4b88      	ldr	r3, [pc, #544]	; (8000d78 <SVPWM+0x250>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	4b82      	ldr	r3, [pc, #520]	; (8000d70 <SVPWM+0x248>)
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	b21b      	sxth	r3, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fd52 	bl	8001618 <sinLowRes>
 8000b74:	4603      	mov	r3, r0
 8000b76:	fb03 f304 	mul.w	r3, r3, r4
 8000b7a:	4a81      	ldr	r2, [pc, #516]	; (8000d80 <SVPWM+0x258>)
 8000b7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b80:	441a      	add	r2, r3
 8000b82:	1292      	asrs	r2, r2, #10
 8000b84:	17db      	asrs	r3, r3, #31
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b7d      	ldr	r3, [pc, #500]	; (8000d84 <SVPWM+0x25c>)
 8000b8e:	601a      	str	r2, [r3, #0]
		T2 = (uint16_t)(V*(sinLowRes(wt - ((n-1)*60)))/(1667));
 8000b90:	4b7a      	ldr	r3, [pc, #488]	; (8000d7c <SVPWM+0x254>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	461c      	mov	r4, r3
 8000b96:	4b78      	ldr	r3, [pc, #480]	; (8000d78 <SVPWM+0x250>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	011b      	lsls	r3, r3, #4
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	4b71      	ldr	r3, [pc, #452]	; (8000d70 <SVPWM+0x248>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	4413      	add	r3, r2
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 fd30 	bl	8001618 <sinLowRes>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	fb03 f304 	mul.w	r3, r3, r4
 8000bbe:	4a70      	ldr	r2, [pc, #448]	; (8000d80 <SVPWM+0x258>)
 8000bc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bc4:	441a      	add	r2, r3
 8000bc6:	1292      	asrs	r2, r2, #10
 8000bc8:	17db      	asrs	r3, r3, #31
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b6d      	ldr	r3, [pc, #436]	; (8000d88 <SVPWM+0x260>)
 8000bd2:	601a      	str	r2, [r3, #0]
		T0 = Ts - (T1+T2);
 8000bd4:	4b6d      	ldr	r3, [pc, #436]	; (8000d8c <SVPWM+0x264>)
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4b6a      	ldr	r3, [pc, #424]	; (8000d84 <SVPWM+0x25c>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	4b6a      	ldr	r3, [pc, #424]	; (8000d88 <SVPWM+0x260>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	1acb      	subs	r3, r1, r3
 8000be6:	4a6a      	ldr	r2, [pc, #424]	; (8000d90 <SVPWM+0x268>)
 8000be8:	6013      	str	r3, [r2, #0]

		switch(n){
 8000bea:	4b63      	ldr	r3, [pc, #396]	; (8000d78 <SVPWM+0x250>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	2b05      	cmp	r3, #5
 8000bf2:	f200 812b 	bhi.w	8000e4c <SVPWM+0x324>
 8000bf6:	a201      	add	r2, pc, #4	; (adr r2, 8000bfc <SVPWM+0xd4>)
 8000bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfc:	08000c15 	.word	0x08000c15
 8000c00:	08000c6b 	.word	0x08000c6b
 8000c04:	08000cc1 	.word	0x08000cc1
 8000c08:	08000d17 	.word	0x08000d17
 8000c0c:	08000da1 	.word	0x08000da1
 8000c10:	08000df7 	.word	0x08000df7
			case 1:
				Ta = T1 + T2 + (T0/2);
 8000c14:	4b5b      	ldr	r3, [pc, #364]	; (8000d84 <SVPWM+0x25c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b5b      	ldr	r3, [pc, #364]	; (8000d88 <SVPWM+0x260>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	4413      	add	r3, r2
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	4b5a      	ldr	r3, [pc, #360]	; (8000d90 <SVPWM+0x268>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	da00      	bge.n	8000c2e <SVPWM+0x106>
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	105b      	asrs	r3, r3, #1
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	4413      	add	r3, r2
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	4b57      	ldr	r3, [pc, #348]	; (8000d94 <SVPWM+0x26c>)
 8000c38:	801a      	strh	r2, [r3, #0]
				Tb = T2 + (T0/2);
 8000c3a:	4b55      	ldr	r3, [pc, #340]	; (8000d90 <SVPWM+0x268>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	da00      	bge.n	8000c44 <SVPWM+0x11c>
 8000c42:	3301      	adds	r3, #1
 8000c44:	105b      	asrs	r3, r3, #1
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	4b4f      	ldr	r3, [pc, #316]	; (8000d88 <SVPWM+0x260>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	4413      	add	r3, r2
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	4b51      	ldr	r3, [pc, #324]	; (8000d98 <SVPWM+0x270>)
 8000c54:	801a      	strh	r2, [r3, #0]
				Tc = (T0/2);
 8000c56:	4b4e      	ldr	r3, [pc, #312]	; (8000d90 <SVPWM+0x268>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	da00      	bge.n	8000c60 <SVPWM+0x138>
 8000c5e:	3301      	adds	r3, #1
 8000c60:	105b      	asrs	r3, r3, #1
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b4d      	ldr	r3, [pc, #308]	; (8000d9c <SVPWM+0x274>)
 8000c66:	801a      	strh	r2, [r3, #0]
				break;
 8000c68:	e0f9      	b.n	8000e5e <SVPWM+0x336>
			case 2:
				Ta = T1 + (T0/2);
 8000c6a:	4b49      	ldr	r3, [pc, #292]	; (8000d90 <SVPWM+0x268>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	da00      	bge.n	8000c74 <SVPWM+0x14c>
 8000c72:	3301      	adds	r3, #1
 8000c74:	105b      	asrs	r3, r3, #1
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	4b42      	ldr	r3, [pc, #264]	; (8000d84 <SVPWM+0x25c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	4413      	add	r3, r2
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b44      	ldr	r3, [pc, #272]	; (8000d94 <SVPWM+0x26c>)
 8000c84:	801a      	strh	r2, [r3, #0]
				Tb = T1 + T2 + (T0/2);
 8000c86:	4b3f      	ldr	r3, [pc, #252]	; (8000d84 <SVPWM+0x25c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b3e      	ldr	r3, [pc, #248]	; (8000d88 <SVPWM+0x260>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	4413      	add	r3, r2
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b3e      	ldr	r3, [pc, #248]	; (8000d90 <SVPWM+0x268>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	da00      	bge.n	8000ca0 <SVPWM+0x178>
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	105b      	asrs	r3, r3, #1
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	4b3b      	ldr	r3, [pc, #236]	; (8000d98 <SVPWM+0x270>)
 8000caa:	801a      	strh	r2, [r3, #0]
				Tc = (T0/2);
 8000cac:	4b38      	ldr	r3, [pc, #224]	; (8000d90 <SVPWM+0x268>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	da00      	bge.n	8000cb6 <SVPWM+0x18e>
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	105b      	asrs	r3, r3, #1
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <SVPWM+0x274>)
 8000cbc:	801a      	strh	r2, [r3, #0]
				break;
 8000cbe:	e0ce      	b.n	8000e5e <SVPWM+0x336>
			case 3:
				Ta = (T0/2);
 8000cc0:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <SVPWM+0x268>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	da00      	bge.n	8000cca <SVPWM+0x1a2>
 8000cc8:	3301      	adds	r3, #1
 8000cca:	105b      	asrs	r3, r3, #1
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	4b31      	ldr	r3, [pc, #196]	; (8000d94 <SVPWM+0x26c>)
 8000cd0:	801a      	strh	r2, [r3, #0]
				Tb = T1 + T2 + (T0/2);
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <SVPWM+0x25c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <SVPWM+0x260>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	4413      	add	r3, r2
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	4b2b      	ldr	r3, [pc, #172]	; (8000d90 <SVPWM+0x268>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	da00      	bge.n	8000cec <SVPWM+0x1c4>
 8000cea:	3301      	adds	r3, #1
 8000cec:	105b      	asrs	r3, r3, #1
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	4413      	add	r3, r2
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <SVPWM+0x270>)
 8000cf6:	801a      	strh	r2, [r3, #0]
				Tc = T2 + (T0/2);
 8000cf8:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <SVPWM+0x268>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	da00      	bge.n	8000d02 <SVPWM+0x1da>
 8000d00:	3301      	adds	r3, #1
 8000d02:	105b      	asrs	r3, r3, #1
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <SVPWM+0x260>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <SVPWM+0x274>)
 8000d12:	801a      	strh	r2, [r3, #0]
				break;
 8000d14:	e0a3      	b.n	8000e5e <SVPWM+0x336>
			case 4:
				Ta = (T0/2);
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <SVPWM+0x268>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	da00      	bge.n	8000d20 <SVPWM+0x1f8>
 8000d1e:	3301      	adds	r3, #1
 8000d20:	105b      	asrs	r3, r3, #1
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <SVPWM+0x26c>)
 8000d26:	801a      	strh	r2, [r3, #0]
				Tb = T1 + (T0/2);
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <SVPWM+0x268>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	da00      	bge.n	8000d32 <SVPWM+0x20a>
 8000d30:	3301      	adds	r3, #1
 8000d32:	105b      	asrs	r3, r3, #1
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <SVPWM+0x25c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	4413      	add	r3, r2
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <SVPWM+0x270>)
 8000d42:	801a      	strh	r2, [r3, #0]
				Tc = T1 + T2 + (T0/2);
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <SVPWM+0x25c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <SVPWM+0x260>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	4413      	add	r3, r2
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <SVPWM+0x268>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	da00      	bge.n	8000d5e <SVPWM+0x236>
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	105b      	asrs	r3, r3, #1
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	4413      	add	r3, r2
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <SVPWM+0x274>)
 8000d68:	801a      	strh	r2, [r3, #0]
				break;
 8000d6a:	e078      	b.n	8000e5e <SVPWM+0x336>
 8000d6c:	20000067 	.word	0x20000067
 8000d70:	20000068 	.word	0x20000068
 8000d74:	88888889 	.word	0x88888889
 8000d78:	20000066 	.word	0x20000066
 8000d7c:	2000001e 	.word	0x2000001e
 8000d80:	9d414457 	.word	0x9d414457
 8000d84:	20000054 	.word	0x20000054
 8000d88:	20000058 	.word	0x20000058
 8000d8c:	2000001c 	.word	0x2000001c
 8000d90:	2000005c 	.word	0x2000005c
 8000d94:	20000060 	.word	0x20000060
 8000d98:	20000062 	.word	0x20000062
 8000d9c:	20000064 	.word	0x20000064
			case 5:
				Ta = T2 + (T0/2);
 8000da0:	4b3b      	ldr	r3, [pc, #236]	; (8000e90 <SVPWM+0x368>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	da00      	bge.n	8000daa <SVPWM+0x282>
 8000da8:	3301      	adds	r3, #1
 8000daa:	105b      	asrs	r3, r3, #1
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <SVPWM+0x36c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	4413      	add	r3, r2
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4b37      	ldr	r3, [pc, #220]	; (8000e98 <SVPWM+0x370>)
 8000dba:	801a      	strh	r2, [r3, #0]
				Tb = (T0/2);
 8000dbc:	4b34      	ldr	r3, [pc, #208]	; (8000e90 <SVPWM+0x368>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	da00      	bge.n	8000dc6 <SVPWM+0x29e>
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	105b      	asrs	r3, r3, #1
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	4b34      	ldr	r3, [pc, #208]	; (8000e9c <SVPWM+0x374>)
 8000dcc:	801a      	strh	r2, [r3, #0]
				Tc = T1 + T2 + (T0/2);
 8000dce:	4b34      	ldr	r3, [pc, #208]	; (8000ea0 <SVPWM+0x378>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	4b2f      	ldr	r3, [pc, #188]	; (8000e94 <SVPWM+0x36c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	4413      	add	r3, r2
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	4b2c      	ldr	r3, [pc, #176]	; (8000e90 <SVPWM+0x368>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	da00      	bge.n	8000de8 <SVPWM+0x2c0>
 8000de6:	3301      	adds	r3, #1
 8000de8:	105b      	asrs	r3, r3, #1
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	4413      	add	r3, r2
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <SVPWM+0x37c>)
 8000df2:	801a      	strh	r2, [r3, #0]
				break;
 8000df4:	e033      	b.n	8000e5e <SVPWM+0x336>
			case 6:
				Ta = T1 + T2 + (T0/2);
 8000df6:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <SVPWM+0x378>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <SVPWM+0x36c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	4413      	add	r3, r2
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <SVPWM+0x368>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	da00      	bge.n	8000e10 <SVPWM+0x2e8>
 8000e0e:	3301      	adds	r3, #1
 8000e10:	105b      	asrs	r3, r3, #1
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <SVPWM+0x370>)
 8000e1a:	801a      	strh	r2, [r3, #0]
				Tb = (T0/2);
 8000e1c:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <SVPWM+0x368>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	da00      	bge.n	8000e26 <SVPWM+0x2fe>
 8000e24:	3301      	adds	r3, #1
 8000e26:	105b      	asrs	r3, r3, #1
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <SVPWM+0x374>)
 8000e2c:	801a      	strh	r2, [r3, #0]
				Tc = T1 + (T0/2);
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <SVPWM+0x368>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	da00      	bge.n	8000e38 <SVPWM+0x310>
 8000e36:	3301      	adds	r3, #1
 8000e38:	105b      	asrs	r3, r3, #1
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <SVPWM+0x378>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	4413      	add	r3, r2
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <SVPWM+0x37c>)
 8000e48:	801a      	strh	r2, [r3, #0]
				break;
 8000e4a:	e008      	b.n	8000e5e <SVPWM+0x336>
			default:
				Ta = 0;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <SVPWM+0x370>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	801a      	strh	r2, [r3, #0]
				Tb = 0;
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <SVPWM+0x374>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	801a      	strh	r2, [r3, #0]
				Tc = 0;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <SVPWM+0x37c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	801a      	strh	r2, [r3, #0]
		}

		TIM1->CCR1 = Ta;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <SVPWM+0x370>)
 8000e60:	881a      	ldrh	r2, [r3, #0]
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <SVPWM+0x380>)
 8000e64:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = Tb;
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <SVPWM+0x374>)
 8000e68:	881a      	ldrh	r2, [r3, #0]
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <SVPWM+0x380>)
 8000e6c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = Tc;
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <SVPWM+0x37c>)
 8000e70:	881a      	ldrh	r2, [r3, #0]
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <SVPWM+0x380>)
 8000e74:	63da      	str	r2, [r3, #60]	; 0x3c
	} else {
		TIM1->CCR1 = 0;
		TIM1->CCR2 = 0;
		TIM1->CCR3 = 0;
	}
}
 8000e76:	e008      	b.n	8000e8a <SVPWM+0x362>
		TIM1->CCR1 = 0;
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <SVPWM+0x380>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <SVPWM+0x380>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <SVPWM+0x380>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e8a:	bf00      	nop
 8000e8c:	bd98      	pop	{r3, r4, r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000005c 	.word	0x2000005c
 8000e94:	20000058 	.word	0x20000058
 8000e98:	20000060 	.word	0x20000060
 8000e9c:	20000062 	.word	0x20000062
 8000ea0:	20000054 	.word	0x20000054
 8000ea4:	20000064 	.word	0x20000064
 8000ea8:	40010000 	.word	0x40010000

08000eac <transferUART>:
 * This function transfers data over UART
 *
 */
int16_t arr[10000], idx;
uint32_t err,asdsda;
void transferUART(){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	if(startTx){
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <transferUART+0x70>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d02e      	beq.n	8000f16 <transferUART+0x6a>
			txData[0] = ((optimalVector + 30000)) & 0xff;
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <transferUART+0x74>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	3330      	adds	r3, #48	; 0x30
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <transferUART+0x78>)
 8000ec2:	701a      	strb	r2, [r3, #0]
			txData[1] = (((optimalVector + 30000)) >> 8) & 0xff;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <transferUART+0x74>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	f247 5330 	movw	r3, #30000	; 0x7530
 8000ece:	4413      	add	r3, r2
 8000ed0:	121b      	asrs	r3, r3, #8
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <transferUART+0x78>)
 8000ed6:	705a      	strb	r2, [r3, #1]

			txData[2] = ((thetaElec + 30000)) & 0xff;
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <transferUART+0x7c>)
 8000eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	3330      	adds	r3, #48	; 0x30
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <transferUART+0x78>)
 8000ee6:	709a      	strb	r2, [r3, #2]
			txData[3] = (((thetaElec + 30000)) >> 8) & 0xff;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <transferUART+0x7c>)
 8000eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	f247 5330 	movw	r3, #30000	; 0x7530
 8000ef4:	4413      	add	r3, r2
 8000ef6:	121b      	asrs	r3, r3, #8
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <transferUART+0x78>)
 8000efc:	70da      	strb	r2, [r3, #3]

			txData[4] = ((0 + 30000)) & 0xff;
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <transferUART+0x78>)
 8000f00:	2230      	movs	r2, #48	; 0x30
 8000f02:	711a      	strb	r2, [r3, #4]
			txData[5] = (((0 + 30000)) >> 8) & 0xff;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <transferUART+0x78>)
 8000f06:	2275      	movs	r2, #117	; 0x75
 8000f08:	715a      	strb	r2, [r3, #5]

			HAL_UART_Transmit(&huart3, txData,6,10);
 8000f0a:	230a      	movs	r3, #10
 8000f0c:	2206      	movs	r2, #6
 8000f0e:	4905      	ldr	r1, [pc, #20]	; (8000f24 <transferUART+0x78>)
 8000f10:	4806      	ldr	r0, [pc, #24]	; (8000f2c <transferUART+0x80>)
 8000f12:	f00a fe63 	bl	800bbdc <HAL_UART_Transmit>
//			startTx = 0;
//			testEnd = 0;
//			err = 0;
//		}
	}
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20005092 	.word	0x20005092
 8000f20:	20000242 	.word	0x20000242
 8000f24:	2000508c 	.word	0x2000508c
 8000f28:	20000080 	.word	0x20000080
 8000f2c:	200000bc 	.word	0x200000bc

08000f30 <receiveUART>:

/**
 * This function initializes UART DMA receive
 *
 */
void receiveUART(){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart3, comCode, 3);
 8000f34:	2203      	movs	r2, #3
 8000f36:	4903      	ldr	r1, [pc, #12]	; (8000f44 <receiveUART+0x14>)
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <receiveUART+0x18>)
 8000f3a:	f00a fee5 	bl	800bd08 <HAL_UART_Receive_DMA>
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	24001000 	.word	0x24001000
 8000f48:	200000bc 	.word	0x200000bc

08000f4c <handleRxCommands>:
/**
 * This function is a handler for received data
 *
 */

void handleRxCommands(){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

	if(comCode[0] == 101){
 8000f50:	4b3f      	ldr	r3, [pc, #252]	; (8001050 <handleRxCommands+0x104>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b65      	cmp	r3, #101	; 0x65
 8000f56:	d103      	bne.n	8000f60 <handleRxCommands+0x14>
		startTx = 1;
 8000f58:	4b3e      	ldr	r3, [pc, #248]	; (8001054 <handleRxCommands+0x108>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
	} else if(comCode[0] == 109){
		speedReq = comCode[1] + 256*comCode[2];
	} else if(comCode[0] == 110){
		HAL_NVIC_SystemReset();
	}
}
 8000f5e:	e075      	b.n	800104c <handleRxCommands+0x100>
	} else if(comCode[0] == 102){
 8000f60:	4b3b      	ldr	r3, [pc, #236]	; (8001050 <handleRxCommands+0x104>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b66      	cmp	r3, #102	; 0x66
 8000f66:	d103      	bne.n	8000f70 <handleRxCommands+0x24>
		startTx = 0;
 8000f68:	4b3a      	ldr	r3, [pc, #232]	; (8001054 <handleRxCommands+0x108>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
}
 8000f6e:	e06d      	b.n	800104c <handleRxCommands+0x100>
	} else if(comCode[0] == 103){
 8000f70:	4b37      	ldr	r3, [pc, #220]	; (8001050 <handleRxCommands+0x104>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b67      	cmp	r3, #103	; 0x67
 8000f76:	d102      	bne.n	8000f7e <handleRxCommands+0x32>
		stopMotor();
 8000f78:	f000 f8c6 	bl	8001108 <stopMotor>
}
 8000f7c:	e066      	b.n	800104c <handleRxCommands+0x100>
	} else if(comCode[0] == 104){
 8000f7e:	4b34      	ldr	r3, [pc, #208]	; (8001050 <handleRxCommands+0x104>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b68      	cmp	r3, #104	; 0x68
 8000f84:	d102      	bne.n	8000f8c <handleRxCommands+0x40>
		startMotor();
 8000f86:	f000 f8a7 	bl	80010d8 <startMotor>
}
 8000f8a:	e05f      	b.n	800104c <handleRxCommands+0x100>
	} else if(comCode[0] == 105){
 8000f8c:	4b30      	ldr	r3, [pc, #192]	; (8001050 <handleRxCommands+0x104>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b69      	cmp	r3, #105	; 0x69
 8000f92:	d10d      	bne.n	8000fb0 <handleRxCommands+0x64>
		sigma = comCode[1] + 256*comCode[2];
 8000f94:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <handleRxCommands+0x104>)
 8000f96:	785b      	ldrb	r3, [r3, #1]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <handleRxCommands+0x104>)
 8000f9c:	789b      	ldrb	r3, [r3, #2]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <handleRxCommands+0x10c>)
 8000fac:	801a      	strh	r2, [r3, #0]
}
 8000fae:	e04d      	b.n	800104c <handleRxCommands+0x100>
	} else if(comCode[0] == 106){
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <handleRxCommands+0x104>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b6a      	cmp	r3, #106	; 0x6a
 8000fb6:	d10d      	bne.n	8000fd4 <handleRxCommands+0x88>
		delta = comCode[1] + 256*comCode[2];
 8000fb8:	4b25      	ldr	r3, [pc, #148]	; (8001050 <handleRxCommands+0x104>)
 8000fba:	785b      	ldrb	r3, [r3, #1]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	4b24      	ldr	r3, [pc, #144]	; (8001050 <handleRxCommands+0x104>)
 8000fc0:	789b      	ldrb	r3, [r3, #2]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	4413      	add	r3, r2
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <handleRxCommands+0x110>)
 8000fd0:	801a      	strh	r2, [r3, #0]
}
 8000fd2:	e03b      	b.n	800104c <handleRxCommands+0x100>
	} else if(comCode[0] == 107){
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <handleRxCommands+0x104>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b6b      	cmp	r3, #107	; 0x6b
 8000fda:	d10d      	bne.n	8000ff8 <handleRxCommands+0xac>
		Kp = comCode[1] + 256*comCode[2];
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <handleRxCommands+0x104>)
 8000fde:	785b      	ldrb	r3, [r3, #1]
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <handleRxCommands+0x104>)
 8000fe4:	789b      	ldrb	r3, [r3, #2]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	4413      	add	r3, r2
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <handleRxCommands+0x114>)
 8000ff4:	801a      	strh	r2, [r3, #0]
}
 8000ff6:	e029      	b.n	800104c <handleRxCommands+0x100>
	} else if(comCode[0] == 108){
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <handleRxCommands+0x104>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b6c      	cmp	r3, #108	; 0x6c
 8000ffe:	d10d      	bne.n	800101c <handleRxCommands+0xd0>
		Ki = comCode[1] + 256*comCode[2];
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <handleRxCommands+0x104>)
 8001002:	785b      	ldrb	r3, [r3, #1]
 8001004:	b29a      	uxth	r2, r3
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <handleRxCommands+0x104>)
 8001008:	789b      	ldrb	r3, [r3, #2]
 800100a:	b29b      	uxth	r3, r3
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	b29b      	uxth	r3, r3
 8001010:	4413      	add	r3, r2
 8001012:	b29b      	uxth	r3, r3
 8001014:	b21a      	sxth	r2, r3
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <handleRxCommands+0x118>)
 8001018:	801a      	strh	r2, [r3, #0]
}
 800101a:	e017      	b.n	800104c <handleRxCommands+0x100>
	} else if(comCode[0] == 109){
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <handleRxCommands+0x104>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b6d      	cmp	r3, #109	; 0x6d
 8001022:	d10d      	bne.n	8001040 <handleRxCommands+0xf4>
		speedReq = comCode[1] + 256*comCode[2];
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <handleRxCommands+0x104>)
 8001026:	785b      	ldrb	r3, [r3, #1]
 8001028:	b29a      	uxth	r2, r3
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <handleRxCommands+0x104>)
 800102c:	789b      	ldrb	r3, [r3, #2]
 800102e:	b29b      	uxth	r3, r3
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	b29b      	uxth	r3, r3
 8001034:	4413      	add	r3, r2
 8001036:	b29b      	uxth	r3, r3
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <handleRxCommands+0x11c>)
 800103c:	801a      	strh	r2, [r3, #0]
}
 800103e:	e005      	b.n	800104c <handleRxCommands+0x100>
	} else if(comCode[0] == 110){
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <handleRxCommands+0x104>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b6e      	cmp	r3, #110	; 0x6e
 8001046:	d101      	bne.n	800104c <handleRxCommands+0x100>
		HAL_NVIC_SystemReset();
 8001048:	f003 fad7 	bl	80045fa <HAL_NVIC_SystemReset>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	24001000 	.word	0x24001000
 8001054:	20005092 	.word	0x20005092
 8001058:	200001e2 	.word	0x200001e2
 800105c:	2000020c 	.word	0x2000020c
 8001060:	20000220 	.word	0x20000220
 8001064:	2000014c 	.word	0x2000014c
 8001068:	20000022 	.word	0x20000022

0800106c <initalPositionSet>:
 * This function controls initial position of motor
 *
 */
uint16_t cnts = 0;
uint16_t executionCount = 101;
void initalPositionSet(){
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
	if(cnts < 1000){
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <initalPositionSet+0x4c>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001078:	d203      	bcs.n	8001082 <initalPositionSet+0x16>
		wt = 30;
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <initalPositionSet+0x50>)
 800107c:	221e      	movs	r2, #30
 800107e:	801a      	strh	r2, [r3, #0]
		thetaElec = 0;
		TIM3->CNT = 0;
		speed = 0;
		wr = 0;
	}
}
 8001080:	e015      	b.n	80010ae <initalPositionSet+0x42>
		wt = 0;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <initalPositionSet+0x50>)
 8001084:	2200      	movs	r2, #0
 8001086:	801a      	strh	r2, [r3, #0]
		thetaElecTemp = 0;
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <initalPositionSet+0x54>)
 800108a:	2200      	movs	r2, #0
 800108c:	801a      	strh	r2, [r3, #0]
		thetaMech = 0;
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <initalPositionSet+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	801a      	strh	r2, [r3, #0]
		thetaElec = 0;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <initalPositionSet+0x5c>)
 8001096:	2200      	movs	r2, #0
 8001098:	801a      	strh	r2, [r3, #0]
		TIM3->CNT = 0;
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <initalPositionSet+0x60>)
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
		speed = 0;
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <initalPositionSet+0x64>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	801a      	strh	r2, [r3, #0]
		wr = 0;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <initalPositionSet+0x68>)
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	2000006a 	.word	0x2000006a
 80010bc:	20000068 	.word	0x20000068
 80010c0:	20000152 	.word	0x20000152
 80010c4:	20000180 	.word	0x20000180
 80010c8:	20000080 	.word	0x20000080
 80010cc:	40000400 	.word	0x40000400
 80010d0:	20000214 	.word	0x20000214
 80010d4:	20000224 	.word	0x20000224

080010d8 <startMotor>:

/**
 * This function controls starting of motor with Blue button
 *
 */
void startMotor(){
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
	run = 1;
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <startMotor+0x24>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
	Iterm = 0;
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <startMotor+0x28>)
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
	sum = 0;
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <startMotor+0x2c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	801a      	strh	r2, [r3, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000067 	.word	0x20000067
 8001100:	2000006c 	.word	0x2000006c
 8001104:	20000158 	.word	0x20000158

08001108 <stopMotor>:

/**
 * This function controls stopping of motor with Blue button
 *
 */
void stopMotor(){
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	run = 0;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <stopMotor+0x14>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	20000067 	.word	0x20000067

08001120 <executeAll>:
/**
 * This function controls the execution and ADC measurement
 *
 */
uint16_t ex;
void executeAll(){
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	measureADC();
 8001124:	f000 f96c 	bl	8001400 <measureADC>

	if(run){
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <executeAll+0x84>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d02f      	beq.n	8001190 <executeAll+0x70>
		if(cnts < 2000){
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <executeAll+0x88>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001138:	d20c      	bcs.n	8001154 <executeAll+0x34>
			V = 300;
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <executeAll+0x8c>)
 800113c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001140:	801a      	strh	r2, [r3, #0]
			initalPositionSet();
 8001142:	f7ff ff93 	bl	800106c <initalPositionSet>
			cnts++;
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <executeAll+0x88>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	b29a      	uxth	r2, r3
 800114e:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <executeAll+0x88>)
 8001150:	801a      	strh	r2, [r3, #0]
 8001152:	e01a      	b.n	800118a <executeAll+0x6a>
		} else if(cnts >= 2000 && cnts < 3000){
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <executeAll+0x88>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800115c:	d30f      	bcc.n	800117e <executeAll+0x5e>
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <executeAll+0x88>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001166:	4293      	cmp	r3, r2
 8001168:	d809      	bhi.n	800117e <executeAll+0x5e>
			cnts++;
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <executeAll+0x88>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	3301      	adds	r3, #1
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <executeAll+0x88>)
 8001174:	801a      	strh	r2, [r3, #0]
			V = 0;
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <executeAll+0x8c>)
 8001178:	2200      	movs	r2, #0
 800117a:	801a      	strh	r2, [r3, #0]
 800117c:	e005      	b.n	800118a <executeAll+0x6a>
		} else {
			V = 700;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <executeAll+0x8c>)
 8001180:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001184:	801a      	strh	r2, [r3, #0]
//			testSVPWM();
			modelPredictiveControl();
 8001186:	f7ff faef 	bl	8000768 <modelPredictiveControl>
//			} else {
//				ex++;
//			}
		}

		transferUART();
 800118a:	f7ff fe8f 	bl	8000eac <transferUART>
 800118e:	e005      	b.n	800119c <executeAll+0x7c>
	} else {
		V = 0;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <executeAll+0x8c>)
 8001192:	2200      	movs	r2, #0
 8001194:	801a      	strh	r2, [r3, #0]
		cnts = 0;
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <executeAll+0x88>)
 8001198:	2200      	movs	r2, #0
 800119a:	801a      	strh	r2, [r3, #0]
	}

	SVPWM();
 800119c:	f7ff fcc4 	bl	8000b28 <SVPWM>
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000067 	.word	0x20000067
 80011a8:	2000006a 	.word	0x2000006a
 80011ac:	2000001e 	.word	0x2000001e

080011b0 <computePositionWithEncoder>:
/**
 * This function computes rotor position
 *
 */
uint16_t x = 1;
void computePositionWithEncoder(){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	thetaElec = 90 + 360*TIM3->CNT/300;
 80011b4:	4b81      	ldr	r3, [pc, #516]	; (80013bc <computePositionWithEncoder+0x20c>)
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80011bc:	fb02 f303 	mul.w	r3, r2, r3
 80011c0:	4a7f      	ldr	r2, [pc, #508]	; (80013c0 <computePositionWithEncoder+0x210>)
 80011c2:	fba2 2303 	umull	r2, r3, r2, r3
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	335a      	adds	r3, #90	; 0x5a
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	4b7c      	ldr	r3, [pc, #496]	; (80013c4 <computePositionWithEncoder+0x214>)
 80011d2:	801a      	strh	r2, [r3, #0]


	if(thetaElec >= 360){
 80011d4:	4b7b      	ldr	r3, [pc, #492]	; (80013c4 <computePositionWithEncoder+0x214>)
 80011d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011da:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80011de:	db09      	blt.n	80011f4 <computePositionWithEncoder+0x44>
		thetaElec -= 360;
 80011e0:	4b78      	ldr	r3, [pc, #480]	; (80013c4 <computePositionWithEncoder+0x214>)
 80011e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	4b74      	ldr	r3, [pc, #464]	; (80013c4 <computePositionWithEncoder+0x214>)
 80011f2:	801a      	strh	r2, [r3, #0]
	}

	if(thetaElec != thetaElecOld){
 80011f4:	4b73      	ldr	r3, [pc, #460]	; (80013c4 <computePositionWithEncoder+0x214>)
 80011f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011fa:	4b73      	ldr	r3, [pc, #460]	; (80013c8 <computePositionWithEncoder+0x218>)
 80011fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001200:	429a      	cmp	r2, r3
 8001202:	f000 80d2 	beq.w	80013aa <computePositionWithEncoder+0x1fa>
		dTheta = thetaElec - thetaElecOld;
 8001206:	4b6f      	ldr	r3, [pc, #444]	; (80013c4 <computePositionWithEncoder+0x214>)
 8001208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120c:	b29a      	uxth	r2, r3
 800120e:	4b6e      	ldr	r3, [pc, #440]	; (80013c8 <computePositionWithEncoder+0x218>)
 8001210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001214:	b29b      	uxth	r3, r3
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	b29b      	uxth	r3, r3
 800121a:	b21a      	sxth	r2, r3
 800121c:	4b6b      	ldr	r3, [pc, #428]	; (80013cc <computePositionWithEncoder+0x21c>)
 800121e:	801a      	strh	r2, [r3, #0]
		if(dTheta > 300){
 8001220:	4b6a      	ldr	r3, [pc, #424]	; (80013cc <computePositionWithEncoder+0x21c>)
 8001222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001226:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800122a:	dd0a      	ble.n	8001242 <computePositionWithEncoder+0x92>
			dTheta -= 360;
 800122c:	4b67      	ldr	r3, [pc, #412]	; (80013cc <computePositionWithEncoder+0x21c>)
 800122e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001232:	b29b      	uxth	r3, r3
 8001234:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001238:	b29b      	uxth	r3, r3
 800123a:	b21a      	sxth	r2, r3
 800123c:	4b63      	ldr	r3, [pc, #396]	; (80013cc <computePositionWithEncoder+0x21c>)
 800123e:	801a      	strh	r2, [r3, #0]
 8001240:	e00f      	b.n	8001262 <computePositionWithEncoder+0xb2>
		} else if (dTheta < -300){
 8001242:	4b62      	ldr	r3, [pc, #392]	; (80013cc <computePositionWithEncoder+0x21c>)
 8001244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001248:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 800124c:	da09      	bge.n	8001262 <computePositionWithEncoder+0xb2>
			dTheta += 360;
 800124e:	4b5f      	ldr	r3, [pc, #380]	; (80013cc <computePositionWithEncoder+0x21c>)
 8001250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001254:	b29b      	uxth	r3, r3
 8001256:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800125a:	b29b      	uxth	r3, r3
 800125c:	b21a      	sxth	r2, r3
 800125e:	4b5b      	ldr	r3, [pc, #364]	; (80013cc <computePositionWithEncoder+0x21c>)
 8001260:	801a      	strh	r2, [r3, #0]
		}

		thetaElecOld = thetaElec;
 8001262:	4b58      	ldr	r3, [pc, #352]	; (80013c4 <computePositionWithEncoder+0x214>)
 8001264:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001268:	4b57      	ldr	r3, [pc, #348]	; (80013c8 <computePositionWithEncoder+0x218>)
 800126a:	801a      	strh	r2, [r3, #0]

		speedTemp = dTheta*672/x;
 800126c:	4b57      	ldr	r3, [pc, #348]	; (80013cc <computePositionWithEncoder+0x21c>)
 800126e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001272:	461a      	mov	r2, r3
 8001274:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8001278:	fb03 f302 	mul.w	r3, r3, r2
 800127c:	4a54      	ldr	r2, [pc, #336]	; (80013d0 <computePositionWithEncoder+0x220>)
 800127e:	8812      	ldrh	r2, [r2, #0]
 8001280:	fb93 f3f2 	sdiv	r3, r3, r2
 8001284:	b21a      	sxth	r2, r3
 8001286:	4b53      	ldr	r3, [pc, #332]	; (80013d4 <computePositionWithEncoder+0x224>)
 8001288:	801a      	strh	r2, [r3, #0]

		x = 1;
 800128a:	4b51      	ldr	r3, [pc, #324]	; (80013d0 <computePositionWithEncoder+0x220>)
 800128c:	2201      	movs	r2, #1
 800128e:	801a      	strh	r2, [r3, #0]

		if(k>9){
 8001290:	4b51      	ldr	r3, [pc, #324]	; (80013d8 <computePositionWithEncoder+0x228>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	2b09      	cmp	r3, #9
 8001296:	d92c      	bls.n	80012f2 <computePositionWithEncoder+0x142>
			sum += (speedTemp - speedArr[e]);
 8001298:	4b4e      	ldr	r3, [pc, #312]	; (80013d4 <computePositionWithEncoder+0x224>)
 800129a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	4b4e      	ldr	r3, [pc, #312]	; (80013dc <computePositionWithEncoder+0x22c>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	4b4e      	ldr	r3, [pc, #312]	; (80013e0 <computePositionWithEncoder+0x230>)
 80012a8:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	4b4c      	ldr	r3, [pc, #304]	; (80013e4 <computePositionWithEncoder+0x234>)
 80012b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	b29b      	uxth	r3, r3
 80012be:	b21a      	sxth	r2, r3
 80012c0:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <computePositionWithEncoder+0x234>)
 80012c2:	801a      	strh	r2, [r3, #0]
			speedArr[e] = speedTemp;
 80012c4:	4b45      	ldr	r3, [pc, #276]	; (80013dc <computePositionWithEncoder+0x22c>)
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b42      	ldr	r3, [pc, #264]	; (80013d4 <computePositionWithEncoder+0x224>)
 80012cc:	f9b3 1000 	ldrsh.w	r1, [r3]
 80012d0:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <computePositionWithEncoder+0x230>)
 80012d2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			e++;
 80012d6:	4b41      	ldr	r3, [pc, #260]	; (80013dc <computePositionWithEncoder+0x22c>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	b29a      	uxth	r2, r3
 80012de:	4b3f      	ldr	r3, [pc, #252]	; (80013dc <computePositionWithEncoder+0x22c>)
 80012e0:	801a      	strh	r2, [r3, #0]

			if(e>9){
 80012e2:	4b3e      	ldr	r3, [pc, #248]	; (80013dc <computePositionWithEncoder+0x22c>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	2b09      	cmp	r3, #9
 80012e8:	d91f      	bls.n	800132a <computePositionWithEncoder+0x17a>
				e = 0;
 80012ea:	4b3c      	ldr	r3, [pc, #240]	; (80013dc <computePositionWithEncoder+0x22c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	801a      	strh	r2, [r3, #0]
 80012f0:	e01b      	b.n	800132a <computePositionWithEncoder+0x17a>
			}
		} else {
			sum += speedTemp;
 80012f2:	4b3c      	ldr	r3, [pc, #240]	; (80013e4 <computePositionWithEncoder+0x234>)
 80012f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <computePositionWithEncoder+0x224>)
 80012fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001300:	b29b      	uxth	r3, r3
 8001302:	4413      	add	r3, r2
 8001304:	b29b      	uxth	r3, r3
 8001306:	b21a      	sxth	r2, r3
 8001308:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <computePositionWithEncoder+0x234>)
 800130a:	801a      	strh	r2, [r3, #0]
			speedArr[k] = speedTemp;
 800130c:	4b32      	ldr	r3, [pc, #200]	; (80013d8 <computePositionWithEncoder+0x228>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <computePositionWithEncoder+0x224>)
 8001314:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001318:	4b31      	ldr	r3, [pc, #196]	; (80013e0 <computePositionWithEncoder+0x230>)
 800131a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			k++;
 800131e:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <computePositionWithEncoder+0x228>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	b29a      	uxth	r2, r3
 8001326:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <computePositionWithEncoder+0x228>)
 8001328:	801a      	strh	r2, [r3, #0]
		}

		speed = (19*speed + sum/10)/20;
 800132a:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <computePositionWithEncoder+0x238>)
 800132c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001330:	461a      	mov	r2, r3
 8001332:	4613      	mov	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4413      	add	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	441a      	add	r2, r3
 800133c:	4b29      	ldr	r3, [pc, #164]	; (80013e4 <computePositionWithEncoder+0x234>)
 800133e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001342:	492a      	ldr	r1, [pc, #168]	; (80013ec <computePositionWithEncoder+0x23c>)
 8001344:	fb81 0103 	smull	r0, r1, r1, r3
 8001348:	1089      	asrs	r1, r1, #2
 800134a:	17db      	asrs	r3, r3, #31
 800134c:	1acb      	subs	r3, r1, r3
 800134e:	b21b      	sxth	r3, r3
 8001350:	4413      	add	r3, r2
 8001352:	4a26      	ldr	r2, [pc, #152]	; (80013ec <computePositionWithEncoder+0x23c>)
 8001354:	fb82 1203 	smull	r1, r2, r2, r3
 8001358:	10d2      	asrs	r2, r2, #3
 800135a:	17db      	asrs	r3, r3, #31
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	b21a      	sxth	r2, r3
 8001360:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <computePositionWithEncoder+0x238>)
 8001362:	801a      	strh	r2, [r3, #0]
//		speed = (95*speed + 5*speedTemp)/100;

		wr = (float)speed*1047/10000;
 8001364:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <computePositionWithEncoder+0x238>)
 8001366:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001372:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80013f0 <computePositionWithEncoder+0x240>
 8001376:	ee27 7a87 	vmul.f32	s14, s15, s14
 800137a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80013f4 <computePositionWithEncoder+0x244>
 800137e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <computePositionWithEncoder+0x248>)
 8001384:	edc3 7a00 	vstr	s15, [r3]

		if(speedPIrate>9){
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <computePositionWithEncoder+0x24c>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	2b09      	cmp	r3, #9
 800138e:	d905      	bls.n	800139c <computePositionWithEncoder+0x1ec>
			SpeedPIController();
 8001390:	f000 fa54 	bl	800183c <SpeedPIController>
			speedPIrate = 0;
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <computePositionWithEncoder+0x24c>)
 8001396:	2200      	movs	r2, #0
 8001398:	801a      	strh	r2, [r3, #0]
		}

	} else {
		x++;
	}
}
 800139a:	e00c      	b.n	80013b6 <computePositionWithEncoder+0x206>
			speedPIrate++;
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <computePositionWithEncoder+0x24c>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <computePositionWithEncoder+0x24c>)
 80013a6:	801a      	strh	r2, [r3, #0]
}
 80013a8:	e005      	b.n	80013b6 <computePositionWithEncoder+0x206>
		x++;
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <computePositionWithEncoder+0x220>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	3301      	adds	r3, #1
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <computePositionWithEncoder+0x220>)
 80013b4:	801a      	strh	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40000400 	.word	0x40000400
 80013c0:	1b4e81b5 	.word	0x1b4e81b5
 80013c4:	20000080 	.word	0x20000080
 80013c8:	20000074 	.word	0x20000074
 80013cc:	200000b8 	.word	0x200000b8
 80013d0:	20000020 	.word	0x20000020
 80013d4:	200000b4 	.word	0x200000b4
 80013d8:	20000164 	.word	0x20000164
 80013dc:	2000023c 	.word	0x2000023c
 80013e0:	20000084 	.word	0x20000084
 80013e4:	20000158 	.word	0x20000158
 80013e8:	20000214 	.word	0x20000214
 80013ec:	66666667 	.word	0x66666667
 80013f0:	4482e000 	.word	0x4482e000
 80013f4:	461c4000 	.word	0x461c4000
 80013f8:	20000224 	.word	0x20000224
 80013fc:	20000082 	.word	0x20000082

08001400 <measureADC>:

/**
 * This function computes 2 phase currents and 2 BEMFs
 *
 */
void measureADC(){
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc3, Icd, 1);
 8001404:	2201      	movs	r2, #1
 8001406:	492a      	ldr	r1, [pc, #168]	; (80014b0 <measureADC+0xb0>)
 8001408:	482a      	ldr	r0, [pc, #168]	; (80014b4 <measureADC+0xb4>)
 800140a:	f001 ff87 	bl	800331c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc1, Iab, 2);
 800140e:	2202      	movs	r2, #2
 8001410:	4929      	ldr	r1, [pc, #164]	; (80014b8 <measureADC+0xb8>)
 8001412:	482a      	ldr	r0, [pc, #168]	; (80014bc <measureADC+0xbc>)
 8001414:	f001 ff82 	bl	800331c <HAL_ADC_Start_DMA>

	// Compute abc currents
	Ia = -(((int16_t)Iab[0])-1935);
 8001418:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <measureADC+0xb8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	b29a      	uxth	r2, r3
 800141e:	f240 738f 	movw	r3, #1935	; 0x78f
 8001422:	1a9b      	subs	r3, r3, r2
 8001424:	b29b      	uxth	r3, r3
 8001426:	b21a      	sxth	r2, r3
 8001428:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <measureADC+0xc0>)
 800142a:	801a      	strh	r2, [r3, #0]
	Ib = -((int16_t)Iab[1]-1935);
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <measureADC+0xb8>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	b29a      	uxth	r2, r3
 8001432:	f240 738f 	movw	r3, #1935	; 0x78f
 8001436:	1a9b      	subs	r3, r3, r2
 8001438:	b29b      	uxth	r3, r3
 800143a:	b21a      	sxth	r2, r3
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <measureADC+0xc4>)
 800143e:	801a      	strh	r2, [r3, #0]
	Ic = -((int16_t)Icd[0]-1930);
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <measureADC+0xb0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	b29a      	uxth	r2, r3
 8001446:	f240 738a 	movw	r3, #1930	; 0x78a
 800144a:	1a9b      	subs	r3, r3, r2
 800144c:	b29b      	uxth	r3, r3
 800144e:	b21a      	sxth	r2, r3
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <measureADC+0xc8>)
 8001452:	801a      	strh	r2, [r3, #0]

//	Vbus = ((int16_t)Icd[1]) + 1;

	if(startOCwatch && (Ia > 1000 || Ia < -1000
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <measureADC+0xcc>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d025      	beq.n	80014a8 <measureADC+0xa8>
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <measureADC+0xc0>)
 800145e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001462:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001466:	dc1d      	bgt.n	80014a4 <measureADC+0xa4>
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <measureADC+0xc0>)
 800146a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001472:	db17      	blt.n	80014a4 <measureADC+0xa4>
	  || Ib > 1000 || Ib < -1000
 8001474:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <measureADC+0xc4>)
 8001476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800147e:	dc11      	bgt.n	80014a4 <measureADC+0xa4>
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <measureADC+0xc4>)
 8001482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001486:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800148a:	db0b      	blt.n	80014a4 <measureADC+0xa4>
	  || Ic > 1000 || Ic < -1000)){
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <measureADC+0xc8>)
 800148e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001496:	dc05      	bgt.n	80014a4 <measureADC+0xa4>
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <measureADC+0xc8>)
 800149a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80014a2:	da01      	bge.n	80014a8 <measureADC+0xa8>
		stopMotor();
 80014a4:	f7ff fe30 	bl	8001108 <stopMotor>
	}

	// Compute rotor position
	computePositionWithEncoder();
 80014a8:	f7ff fe82 	bl	80011b0 <computePositionWithEncoder>
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	24001010 	.word	0x24001010
 80014b4:	20005244 	.word	0x20005244
 80014b8:	24001004 	.word	0x24001004
 80014bc:	200051e0 	.word	0x200051e0
 80014c0:	200000ac 	.word	0x200000ac
 80014c4:	200001e0 	.word	0x200001e0
 80014c8:	2000020a 	.word	0x2000020a
 80014cc:	20000172 	.word	0x20000172

080014d0 <limitTheta>:
 * This function limits the range of theta between 0 and 360 degrees
 *
 * @param short theta
 * @return short angle between 0 to 360 degrees
 */
short limitTheta(short theta){
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	80fb      	strh	r3, [r7, #6]
	if(theta < 0){
 80014da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	da1c      	bge.n	800151c <limitTheta+0x4c>
		return ((360+theta) - 360*(1+(theta/360)));
 80014e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e6:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <limitTheta+0x88>)
 80014e8:	fb82 1203 	smull	r1, r2, r2, r3
 80014ec:	441a      	add	r2, r3
 80014ee:	1212      	asrs	r2, r2, #8
 80014f0:	17db      	asrs	r3, r3, #31
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	3301      	adds	r3, #1
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	461a      	mov	r2, r3
 80014fc:	0052      	lsls	r2, r2, #1
 80014fe:	4413      	add	r3, r2
 8001500:	461a      	mov	r2, r3
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	425b      	negs	r3, r3
 800150a:	b29a      	uxth	r2, r3
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	4413      	add	r3, r2
 8001510:	b29b      	uxth	r3, r3
 8001512:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001516:	b29b      	uxth	r3, r3
 8001518:	b21b      	sxth	r3, r3
 800151a:	e017      	b.n	800154c <limitTheta+0x7c>
	} else {
		return (theta - 360*(theta/360));
 800151c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001520:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <limitTheta+0x88>)
 8001522:	fb82 1203 	smull	r1, r2, r2, r3
 8001526:	441a      	add	r2, r3
 8001528:	1212      	asrs	r2, r2, #8
 800152a:	17db      	asrs	r3, r3, #31
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	b21b      	sxth	r3, r3
 8001530:	b29b      	uxth	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	0052      	lsls	r2, r2, #1
 8001536:	4413      	add	r3, r2
 8001538:	461a      	mov	r2, r3
 800153a:	0112      	lsls	r2, r2, #4
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	425b      	negs	r3, r3
 8001542:	b29a      	uxth	r2, r3
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	4413      	add	r3, r2
 8001548:	b29b      	uxth	r3, r3
 800154a:	b21b      	sxth	r3, r3
	}
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	b60b60b7 	.word	0xb60b60b7

0800155c <sin2>:
 * This function computes sin(thetaElec) using LUT
 *
 * @param short thetaElec in degrees
 * @return short sin(x) range -512 to +512
 */
short sin2(short thetaElec){
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	80fb      	strh	r3, [r7, #6]
  thetaElec = limitTheta(thetaElec);
 8001566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ffb0 	bl	80014d0 <limitTheta>
 8001570:	4603      	mov	r3, r0
 8001572:	80fb      	strh	r3, [r7, #6]

  if(thetaElec <= 90){
 8001574:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001578:	2b5a      	cmp	r3, #90	; 0x5a
 800157a:	dc06      	bgt.n	800158a <sin2+0x2e>
    return sinTable[thetaElec];
 800157c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001580:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <sin2+0x94>)
 8001582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001586:	b21b      	sxth	r3, r3
 8001588:	e02d      	b.n	80015e6 <sin2+0x8a>
  } else if(thetaElec > 90 && thetaElec <=180){
 800158a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158e:	2b5a      	cmp	r3, #90	; 0x5a
 8001590:	dd0c      	ble.n	80015ac <sin2+0x50>
 8001592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001596:	2bb4      	cmp	r3, #180	; 0xb4
 8001598:	dc08      	bgt.n	80015ac <sin2+0x50>
    return sinTable[180 - thetaElec];
 800159a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800159e:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80015a2:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <sin2+0x94>)
 80015a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	e01c      	b.n	80015e6 <sin2+0x8a>
  } else if(thetaElec > 180 && thetaElec <= 270){
 80015ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b0:	2bb4      	cmp	r3, #180	; 0xb4
 80015b2:	dd0e      	ble.n	80015d2 <sin2+0x76>
 80015b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80015bc:	dc09      	bgt.n	80015d2 <sin2+0x76>
    return -sinTable[thetaElec - 180];
 80015be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c2:	3bb4      	subs	r3, #180	; 0xb4
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <sin2+0x94>)
 80015c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015ca:	425b      	negs	r3, r3
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	e009      	b.n	80015e6 <sin2+0x8a>
  } else {
    return -sinTable[360 - thetaElec];
 80015d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d6:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <sin2+0x94>)
 80015dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015e0:	425b      	negs	r3, r3
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	b21b      	sxth	r3, r3
  }
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	0800d324 	.word	0x0800d324

080015f4 <cos2>:
 * This function computes cos(theta) using LUT
 *
 * @param short theta in degrees
 * @return short cos(x) range -512 to +512
 */
short cos2(short theta){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	80fb      	strh	r3, [r7, #6]
  return sin2(theta+90);
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	335a      	adds	r3, #90	; 0x5a
 8001602:	b29b      	uxth	r3, r3
 8001604:	b21b      	sxth	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ffa8 	bl	800155c <sin2>
 800160c:	4603      	mov	r3, r0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <sinLowRes>:
 * This function computes sin(thetaElec) using LUT
 *
 * @param short thetaElec in degrees
 * @return short sin(x) range -512 to +512
 */
short sinLowRes(short thetaElec){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
  thetaElec = limitTheta(thetaElec);
 8001622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff52 	bl	80014d0 <limitTheta>
 800162c:	4603      	mov	r3, r0
 800162e:	80fb      	strh	r3, [r7, #6]

  if(thetaElec <= 90){
 8001630:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001634:	2b5a      	cmp	r3, #90	; 0x5a
 8001636:	dc06      	bgt.n	8001646 <sinLowRes+0x2e>
    return sinTableLowRes[thetaElec];
 8001638:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163c:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <sinLowRes+0x94>)
 800163e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001642:	b21b      	sxth	r3, r3
 8001644:	e02d      	b.n	80016a2 <sinLowRes+0x8a>
  } else if(thetaElec > 90 && thetaElec <=180){
 8001646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800164a:	2b5a      	cmp	r3, #90	; 0x5a
 800164c:	dd0c      	ble.n	8001668 <sinLowRes+0x50>
 800164e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001652:	2bb4      	cmp	r3, #180	; 0xb4
 8001654:	dc08      	bgt.n	8001668 <sinLowRes+0x50>
    return sinTableLowRes[180 - thetaElec];
 8001656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800165a:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800165e:	4a13      	ldr	r2, [pc, #76]	; (80016ac <sinLowRes+0x94>)
 8001660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001664:	b21b      	sxth	r3, r3
 8001666:	e01c      	b.n	80016a2 <sinLowRes+0x8a>
  } else if(thetaElec > 180 && thetaElec <= 270){
 8001668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166c:	2bb4      	cmp	r3, #180	; 0xb4
 800166e:	dd0e      	ble.n	800168e <sinLowRes+0x76>
 8001670:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001674:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001678:	dc09      	bgt.n	800168e <sinLowRes+0x76>
    return -sinTableLowRes[thetaElec - 180];
 800167a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167e:	3bb4      	subs	r3, #180	; 0xb4
 8001680:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <sinLowRes+0x94>)
 8001682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001686:	425b      	negs	r3, r3
 8001688:	b29b      	uxth	r3, r3
 800168a:	b21b      	sxth	r3, r3
 800168c:	e009      	b.n	80016a2 <sinLowRes+0x8a>
  } else {
    return -sinTableLowRes[360 - thetaElec];
 800168e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001692:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8001696:	4a05      	ldr	r2, [pc, #20]	; (80016ac <sinLowRes+0x94>)
 8001698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800169c:	425b      	negs	r3, r3
 800169e:	b29b      	uxth	r3, r3
 80016a0:	b21b      	sxth	r3, r3
  }
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	0800d3dc 	.word	0x0800d3dc

080016b0 <parkTransform>:

/**
 * This function computes Park transform
 *
 */
void parkTransform(short a, short b, short c, struct directQuad *Xdq){
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	4603      	mov	r3, r0
 80016ba:	81fb      	strh	r3, [r7, #14]
 80016bc:	460b      	mov	r3, r1
 80016be:	81bb      	strh	r3, [r7, #12]
 80016c0:	4613      	mov	r3, r2
 80016c2:	817b      	strh	r3, [r7, #10]
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <parkTransform+0xb4>)
 80016c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ca:	461a      	mov	r2, r3
 80016cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016d0:	fb03 f202 	mul.w	r2, r3, r2
 80016d4:	4b24      	ldr	r3, [pc, #144]	; (8001768 <parkTransform+0xb8>)
 80016d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016da:	4619      	mov	r1, r3
 80016dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016e0:	fb03 f301 	mul.w	r3, r3, r1
 80016e4:	441a      	add	r2, r3
 80016e6:	4b21      	ldr	r3, [pc, #132]	; (800176c <parkTransform+0xbc>)
 80016e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ec:	4619      	mov	r1, r3
 80016ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016f2:	fb03 f301 	mul.w	r3, r3, r1
 80016f6:	4413      	add	r3, r2
 80016f8:	ee07 3a90 	vmov	s15, r3
 80016fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001700:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001770 <parkTransform+0xc0>
 8001704:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	edc3 7a00 	vstr	s15, [r3]
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <parkTransform+0xc4>)
 8001710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001714:	461a      	mov	r2, r3
 8001716:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800171a:	fb03 f202 	mul.w	r2, r3, r2
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <parkTransform+0xc8>)
 8001720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001724:	4619      	mov	r1, r3
 8001726:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800172a:	fb03 f301 	mul.w	r3, r3, r1
 800172e:	441a      	add	r2, r3
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <parkTransform+0xcc>)
 8001732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001736:	4619      	mov	r1, r3
 8001738:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800173c:	fb03 f301 	mul.w	r3, r3, r1
 8001740:	4413      	add	r3, r2
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800174a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001770 <parkTransform+0xc0>
 800174e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	200001e4 	.word	0x200001e4
 8001768:	20000178 	.word	0x20000178
 800176c:	20000234 	.word	0x20000234
 8001770:	44400000 	.word	0x44400000
 8001774:	20000210 	.word	0x20000210
 8001778:	20000076 	.word	0x20000076
 800177c:	20000150 	.word	0x20000150

08001780 <computeSinCos>:

/**
 * This function computes sine & cosine values for given thetaElec to be used in park transform
 *
 */
void computeSinCos(){
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	sin000 = sin2(thetaElec);
 8001784:	4b26      	ldr	r3, [pc, #152]	; (8001820 <computeSinCos+0xa0>)
 8001786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fee6 	bl	800155c <sin2>
 8001790:	4603      	mov	r3, r0
 8001792:	461a      	mov	r2, r3
 8001794:	4b23      	ldr	r3, [pc, #140]	; (8001824 <computeSinCos+0xa4>)
 8001796:	801a      	strh	r2, [r3, #0]
	cos000 = cos2(thetaElec);
 8001798:	4b21      	ldr	r3, [pc, #132]	; (8001820 <computeSinCos+0xa0>)
 800179a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ff28 	bl	80015f4 <cos2>
 80017a4:	4603      	mov	r3, r0
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <computeSinCos+0xa8>)
 80017aa:	801a      	strh	r2, [r3, #0]
	sin120 = sin2(thetaElec+120);
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <computeSinCos+0xa0>)
 80017ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	3378      	adds	r3, #120	; 0x78
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fece 	bl	800155c <sin2>
 80017c0:	4603      	mov	r3, r0
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <computeSinCos+0xac>)
 80017c6:	801a      	strh	r2, [r3, #0]
	sin240 = sin2(thetaElec+240);
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <computeSinCos+0xa0>)
 80017ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	33f0      	adds	r3, #240	; 0xf0
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fec0 	bl	800155c <sin2>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <computeSinCos+0xb0>)
 80017e2:	801a      	strh	r2, [r3, #0]
	cos120 = cos2(thetaElec+120);
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <computeSinCos+0xa0>)
 80017e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	3378      	adds	r3, #120	; 0x78
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fefe 	bl	80015f4 <cos2>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <computeSinCos+0xb4>)
 80017fe:	801a      	strh	r2, [r3, #0]
	cos240 = cos2(thetaElec+240);
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <computeSinCos+0xa0>)
 8001802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001806:	b29b      	uxth	r3, r3
 8001808:	33f0      	adds	r3, #240	; 0xf0
 800180a:	b29b      	uxth	r3, r3
 800180c:	b21b      	sxth	r3, r3
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fef0 	bl	80015f4 <cos2>
 8001814:	4603      	mov	r3, r0
 8001816:	461a      	mov	r2, r3
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <computeSinCos+0xb8>)
 800181a:	801a      	strh	r2, [r3, #0]
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000080 	.word	0x20000080
 8001824:	200001e4 	.word	0x200001e4
 8001828:	20000210 	.word	0x20000210
 800182c:	20000234 	.word	0x20000234
 8001830:	20000178 	.word	0x20000178
 8001834:	20000150 	.word	0x20000150
 8001838:	20000076 	.word	0x20000076

0800183c <SpeedPIController>:
 *
 */

float Iterm = 0;
int16_t speedReq = 1000;
void SpeedPIController(){
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
	float Kp = 2;
 8001842:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001846:	607b      	str	r3, [r7, #4]
	float Ki = 0.1;
 8001848:	4b40      	ldr	r3, [pc, #256]	; (800194c <SpeedPIController+0x110>)
 800184a:	603b      	str	r3, [r7, #0]
	error = speedReq - speed;
 800184c:	4b40      	ldr	r3, [pc, #256]	; (8001950 <SpeedPIController+0x114>)
 800184e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001852:	b29a      	uxth	r2, r3
 8001854:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <SpeedPIController+0x118>)
 8001856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185a:	b29b      	uxth	r3, r3
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	b29b      	uxth	r3, r3
 8001860:	b21a      	sxth	r2, r3
 8001862:	4b3d      	ldr	r3, [pc, #244]	; (8001958 <SpeedPIController+0x11c>)
 8001864:	801a      	strh	r2, [r3, #0]
	Kterm = (float)(error)*Kp;
 8001866:	4b3c      	ldr	r3, [pc, #240]	; (8001958 <SpeedPIController+0x11c>)
 8001868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186c:	ee07 3a90 	vmov	s15, r3
 8001870:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001874:	edd7 7a01 	vldr	s15, [r7, #4]
 8001878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187c:	4b37      	ldr	r3, [pc, #220]	; (800195c <SpeedPIController+0x120>)
 800187e:	edc3 7a00 	vstr	s15, [r3]
	Iterm += (float)(error)*Ki;
 8001882:	4b35      	ldr	r3, [pc, #212]	; (8001958 <SpeedPIController+0x11c>)
 8001884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001890:	edd7 7a00 	vldr	s15, [r7]
 8001894:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001898:	4b31      	ldr	r3, [pc, #196]	; (8001960 <SpeedPIController+0x124>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a2:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <SpeedPIController+0x124>)
 80018a4:	edc3 7a00 	vstr	s15, [r3]

	if(Iterm > 3250){
 80018a8:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <SpeedPIController+0x124>)
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001964 <SpeedPIController+0x128>
 80018b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ba:	dd03      	ble.n	80018c4 <SpeedPIController+0x88>
		Iterm = 3250;
 80018bc:	4b28      	ldr	r3, [pc, #160]	; (8001960 <SpeedPIController+0x124>)
 80018be:	4a2a      	ldr	r2, [pc, #168]	; (8001968 <SpeedPIController+0x12c>)
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	e00c      	b.n	80018de <SpeedPIController+0xa2>
	} else if(Iterm < -3250){
 80018c4:	4b26      	ldr	r3, [pc, #152]	; (8001960 <SpeedPIController+0x124>)
 80018c6:	edd3 7a00 	vldr	s15, [r3]
 80018ca:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800196c <SpeedPIController+0x130>
 80018ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d6:	d502      	bpl.n	80018de <SpeedPIController+0xa2>
		Iterm = -3250;
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <SpeedPIController+0x124>)
 80018da:	4a25      	ldr	r2, [pc, #148]	; (8001970 <SpeedPIController+0x134>)
 80018dc:	601a      	str	r2, [r3, #0]
	}

	IqRef = (int16_t)(Kterm+Iterm);
 80018de:	4b1f      	ldr	r3, [pc, #124]	; (800195c <SpeedPIController+0x120>)
 80018e0:	ed93 7a00 	vldr	s14, [r3]
 80018e4:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <SpeedPIController+0x124>)
 80018e6:	edd3 7a00 	vldr	s15, [r3]
 80018ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f2:	ee17 3a90 	vmov	r3, s15
 80018f6:	b21b      	sxth	r3, r3
 80018f8:	ee07 3a90 	vmov	s15, r3
 80018fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001900:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <SpeedPIController+0x138>)
 8001902:	edc3 7a00 	vstr	s15, [r3]

	if(IqRef > 4500){
 8001906:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <SpeedPIController+0x138>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001978 <SpeedPIController+0x13c>
 8001910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001918:	dd03      	ble.n	8001922 <SpeedPIController+0xe6>
		IqRef = 4500;
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <SpeedPIController+0x138>)
 800191c:	4a17      	ldr	r2, [pc, #92]	; (800197c <SpeedPIController+0x140>)
 800191e:	601a      	str	r2, [r3, #0]
	} else if(IqRef < -4500){
		IqRef = -4500;
	}
}
 8001920:	e00d      	b.n	800193e <SpeedPIController+0x102>
	} else if(IqRef < -4500){
 8001922:	4b14      	ldr	r3, [pc, #80]	; (8001974 <SpeedPIController+0x138>)
 8001924:	edd3 7a00 	vldr	s15, [r3]
 8001928:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001980 <SpeedPIController+0x144>
 800192c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001934:	d400      	bmi.n	8001938 <SpeedPIController+0xfc>
}
 8001936:	e002      	b.n	800193e <SpeedPIController+0x102>
		IqRef = -4500;
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <SpeedPIController+0x138>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <SpeedPIController+0x148>)
 800193c:	601a      	str	r2, [r3, #0]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	3dcccccd 	.word	0x3dcccccd
 8001950:	20000022 	.word	0x20000022
 8001954:	20000214 	.word	0x20000214
 8001958:	20000212 	.word	0x20000212
 800195c:	200001ec 	.word	0x200001ec
 8001960:	2000006c 	.word	0x2000006c
 8001964:	454b2000 	.word	0x454b2000
 8001968:	454b2000 	.word	0x454b2000
 800196c:	c54b2000 	.word	0xc54b2000
 8001970:	c54b2000 	.word	0xc54b2000
 8001974:	20000174 	.word	0x20000174
 8001978:	458ca000 	.word	0x458ca000
 800197c:	458ca000 	.word	0x458ca000
 8001980:	c58ca000 	.word	0xc58ca000
 8001984:	c58ca000 	.word	0xc58ca000

08001988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800198e:	f000 fcc5 	bl	800231c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001992:	4b58      	ldr	r3, [pc, #352]	; (8001af4 <main+0x16c>)
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d11b      	bne.n	80019d6 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800199e:	f3bf 8f4f 	dsb	sy
}
 80019a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019a4:	f3bf 8f6f 	isb	sy
}
 80019a8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019aa:	4b52      	ldr	r3, [pc, #328]	; (8001af4 <main+0x16c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b2:	f3bf 8f4f 	dsb	sy
}
 80019b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019b8:	f3bf 8f6f 	isb	sy
}
 80019bc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019be:	4b4d      	ldr	r3, [pc, #308]	; (8001af4 <main+0x16c>)
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	4a4c      	ldr	r2, [pc, #304]	; (8001af4 <main+0x16c>)
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019ca:	f3bf 8f4f 	dsb	sy
}
 80019ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d0:	f3bf 8f6f 	isb	sy
}
 80019d4:	e000      	b.n	80019d8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019d6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80019d8:	4b46      	ldr	r3, [pc, #280]	; (8001af4 <main+0x16c>)
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d138      	bne.n	8001a56 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80019e4:	4b43      	ldr	r3, [pc, #268]	; (8001af4 <main+0x16c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80019ec:	f3bf 8f4f 	dsb	sy
}
 80019f0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80019f2:	4b40      	ldr	r3, [pc, #256]	; (8001af4 <main+0x16c>)
 80019f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019f8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	0b5b      	lsrs	r3, r3, #13
 80019fe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a02:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	08db      	lsrs	r3, r3, #3
 8001a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a0c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	015a      	lsls	r2, r3, #5
 8001a12:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001a16:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001a1c:	4935      	ldr	r1, [pc, #212]	; (8001af4 <main+0x16c>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	1e5a      	subs	r2, r3, #1
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1ef      	bne.n	8001a0e <main+0x86>
    } while(sets-- != 0U);
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1e5a      	subs	r2, r3, #1
 8001a32:	60ba      	str	r2, [r7, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1e5      	bne.n	8001a04 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001a38:	f3bf 8f4f 	dsb	sy
}
 8001a3c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001a3e:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <main+0x16c>)
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	4a2c      	ldr	r2, [pc, #176]	; (8001af4 <main+0x16c>)
 8001a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a48:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a4a:	f3bf 8f4f 	dsb	sy
}
 8001a4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a50:	f3bf 8f6f 	isb	sy
}
 8001a54:	e000      	b.n	8001a58 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001a56:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a58:	f001 f814 	bl	8002a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a5c:	f000 f856 	bl	8001b0c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a60:	f000 f8dc 	bl	8001c1c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a64:	f000 fbca 	bl	80021fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001a68:	f000 fba0 	bl	80021ac <MX_DMA_Init>
  MX_TIM1_Init();
 8001a6c:	f000 fa0e 	bl	8001e8c <MX_TIM1_Init>
  MX_ADC1_Init();
 8001a70:	f000 f91c 	bl	8001cac <MX_ADC1_Init>
  MX_ADC3_Init();
 8001a74:	f000 f9a4 	bl	8001dc0 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8001a78:	f000 fb4a 	bl	8002110 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001a7c:	f000 faf2 	bl	8002064 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001a80:	f000 f8f8 	bl	8001c74 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001a84:	213c      	movs	r1, #60	; 0x3c
 8001a86:	481c      	ldr	r0, [pc, #112]	; (8001af8 <main+0x170>)
 8001a88:	f008 fe48 	bl	800a71c <HAL_TIM_Encoder_Start>

	initModelPredictiveControl();
 8001a8c:	f7fe fda0 	bl	80005d0 <initModelPredictiveControl>


	// Calibrate ADCs
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001a90:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001a94:	2100      	movs	r1, #0
 8001a96:	4819      	ldr	r0, [pc, #100]	; (8001afc <main+0x174>)
 8001a98:	f002 fb54 	bl	8004144 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001a9c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4817      	ldr	r0, [pc, #92]	; (8001b00 <main+0x178>)
 8001aa4:	f002 fb4e 	bl	8004144 <HAL_ADCEx_Calibration_Start>

	// Enable MOSFET drivers
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aae:	4815      	ldr	r0, [pc, #84]	; (8001b04 <main+0x17c>)
 8001ab0:	f005 f8b8 	bl	8006c24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aba:	4812      	ldr	r0, [pc, #72]	; (8001b04 <main+0x17c>)
 8001abc:	f005 f8b2 	bl	8006c24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ac6:	480f      	ldr	r0, [pc, #60]	; (8001b04 <main+0x17c>)
 8001ac8:	f005 f8ac 	bl	8006c24 <HAL_GPIO_WritePin>

	//	 Start timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8001acc:	210c      	movs	r1, #12
 8001ace:	480e      	ldr	r0, [pc, #56]	; (8001b08 <main+0x180>)
 8001ad0:	f008 fc24 	bl	800a31c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	480c      	ldr	r0, [pc, #48]	; (8001b08 <main+0x180>)
 8001ad8:	f008 fb12 	bl	800a100 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001adc:	2104      	movs	r1, #4
 8001ade:	480a      	ldr	r0, [pc, #40]	; (8001b08 <main+0x180>)
 8001ae0:	f008 fb0e 	bl	800a100 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001ae4:	2108      	movs	r1, #8
 8001ae6:	4808      	ldr	r0, [pc, #32]	; (8001b08 <main+0x180>)
 8001ae8:	f008 fb0a 	bl	800a100 <HAL_TIM_PWM_Start>

	receiveUART();
 8001aec:	f7ff fa20 	bl	8000f30 <receiveUART>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <main+0x168>
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00
 8001af8:	20005194 	.word	0x20005194
 8001afc:	200051e0 	.word	0x200051e0
 8001b00:	20005244 	.word	0x20005244
 8001b04:	58020800 	.word	0x58020800
 8001b08:	20005320 	.word	0x20005320

08001b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b09c      	sub	sp, #112	; 0x70
 8001b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b16:	224c      	movs	r2, #76	; 0x4c
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f00b fbee 	bl	800d2fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	2220      	movs	r2, #32
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f00b fbe8 	bl	800d2fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	f005 f8b7 	bl	8006ca0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001b32:	2300      	movs	r3, #0
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <SystemClock_Config+0x104>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	4a35      	ldr	r2, [pc, #212]	; (8001c10 <SystemClock_Config+0x104>)
 8001b3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b40:	6193      	str	r3, [r2, #24]
 8001b42:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <SystemClock_Config+0x104>)
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	4b31      	ldr	r3, [pc, #196]	; (8001c14 <SystemClock_Config+0x108>)
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	4a30      	ldr	r2, [pc, #192]	; (8001c14 <SystemClock_Config+0x108>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001b58:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <SystemClock_Config+0x108>)
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	603b      	str	r3, [r7, #0]
 8001b62:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b64:	bf00      	nop
 8001b66:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <SystemClock_Config+0x104>)
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b72:	d1f8      	bne.n	8001b66 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001b74:	4b28      	ldr	r3, [pc, #160]	; (8001c18 <SystemClock_Config+0x10c>)
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	f023 0303 	bic.w	r3, r3, #3
 8001b7c:	4a26      	ldr	r2, [pc, #152]	; (8001c18 <SystemClock_Config+0x10c>)
 8001b7e:	f043 0302 	orr.w	r3, r3, #2
 8001b82:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001b84:	2303      	movs	r3, #3
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b92:	2340      	movs	r3, #64	; 0x40
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b96:	2302      	movs	r3, #2
 8001b98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001ba2:	2378      	movs	r3, #120	; 0x78
 8001ba4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001baa:	2304      	movs	r3, #4
 8001bac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001bb2:	230c      	movs	r3, #12
 8001bb4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f005 f8a6 	bl	8006d14 <HAL_RCC_OscConfig>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001bce:	f000 fbd3 	bl	8002378 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bd2:	233f      	movs	r3, #63	; 0x3f
 8001bd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001bde:	2308      	movs	r3, #8
 8001be0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001be2:	2340      	movs	r3, #64	; 0x40
 8001be4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001be6:	2340      	movs	r3, #64	; 0x40
 8001be8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001bf0:	2340      	movs	r3, #64	; 0x40
 8001bf2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	2104      	movs	r1, #4
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f005 fcb7 	bl	800756c <HAL_RCC_ClockConfig>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001c04:	f000 fbb8 	bl	8002378 <Error_Handler>
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3770      	adds	r7, #112	; 0x70
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	58024800 	.word	0x58024800
 8001c14:	58000400 	.word	0x58000400
 8001c18:	58024400 	.word	0x58024400

08001c1c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b0b0      	sub	sp, #192	; 0xc0
 8001c20:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	22bc      	movs	r2, #188	; 0xbc
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f00b fb67 	bl	800d2fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c2e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c32:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8001c38:	2313      	movs	r3, #19
 8001c3a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001c40:	2302      	movs	r3, #2
 8001c42:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001c44:	2302      	movs	r3, #2
 8001c46:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001c48:	23c0      	movs	r3, #192	; 0xc0
 8001c4a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001c4c:	2320      	movs	r3, #32
 8001c4e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f006 f811 	bl	8007c84 <HAL_RCCEx_PeriphCLKConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8001c68:	f000 fb86 	bl	8002378 <Error_Handler>
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	37c0      	adds	r7, #192	; 0xc0
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	2028      	movs	r0, #40	; 0x28
 8001c7e:	f002 fc94 	bl	80045aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c82:	2028      	movs	r0, #40	; 0x28
 8001c84:	f002 fcab 	bl	80045de <HAL_NVIC_EnableIRQ>
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	201b      	movs	r0, #27
 8001c8e:	f002 fc8c 	bl	80045aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001c92:	201b      	movs	r0, #27
 8001c94:	f002 fca3 	bl	80045de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	200c      	movs	r0, #12
 8001c9e:	f002 fc84 	bl	80045aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001ca2:	200c      	movs	r0, #12
 8001ca4:	f002 fc9b 	bl	80045de <HAL_NVIC_EnableIRQ>
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}

08001cac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001cbe:	463b      	mov	r3, r7
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
 8001ccc:	615a      	str	r2, [r3, #20]
 8001cce:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001cd0:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <MX_ADC1_Init+0x104>)
 8001cd2:	4a38      	ldr	r2, [pc, #224]	; (8001db4 <MX_ADC1_Init+0x108>)
 8001cd4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001cd6:	4b36      	ldr	r3, [pc, #216]	; (8001db0 <MX_ADC1_Init+0x104>)
 8001cd8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001cdc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cde:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <MX_ADC1_Init+0x104>)
 8001ce0:	2208      	movs	r2, #8
 8001ce2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001ce4:	4b32      	ldr	r3, [pc, #200]	; (8001db0 <MX_ADC1_Init+0x104>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cea:	4b31      	ldr	r3, [pc, #196]	; (8001db0 <MX_ADC1_Init+0x104>)
 8001cec:	2204      	movs	r2, #4
 8001cee:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001cf0:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <MX_ADC1_Init+0x104>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cf6:	4b2e      	ldr	r3, [pc, #184]	; (8001db0 <MX_ADC1_Init+0x104>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8001cfc:	4b2c      	ldr	r3, [pc, #176]	; (8001db0 <MX_ADC1_Init+0x104>)
 8001cfe:	2202      	movs	r2, #2
 8001d00:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d02:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <MX_ADC1_Init+0x104>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d08:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <MX_ADC1_Init+0x104>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d0e:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <MX_ADC1_Init+0x104>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001d14:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <MX_ADC1_Init+0x104>)
 8001d16:	2203      	movs	r2, #3
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001d1a:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <MX_ADC1_Init+0x104>)
 8001d1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d20:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001d22:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <MX_ADC1_Init+0x104>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001d28:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <MX_ADC1_Init+0x104>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d30:	481f      	ldr	r0, [pc, #124]	; (8001db0 <MX_ADC1_Init+0x104>)
 8001d32:	f001 f953 	bl	8002fdc <HAL_ADC_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001d3c:	f000 fb1c 	bl	8002378 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001d44:	f107 031c 	add.w	r3, r7, #28
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4819      	ldr	r0, [pc, #100]	; (8001db0 <MX_ADC1_Init+0x104>)
 8001d4c:	f002 fa5e 	bl	800420c <HAL_ADCEx_MultiModeConfigChannel>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001d56:	f000 fb0f 	bl	8002378 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001d5a:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <MX_ADC1_Init+0x10c>)
 8001d5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d5e:	2306      	movs	r3, #6
 8001d60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d66:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d6a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d78:	463b      	mov	r3, r7
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <MX_ADC1_Init+0x104>)
 8001d7e:	f001 fbaf 	bl	80034e0 <HAL_ADC_ConfigChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001d88:	f000 faf6 	bl	8002378 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <MX_ADC1_Init+0x110>)
 8001d8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001d90:	230c      	movs	r3, #12
 8001d92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d94:	463b      	mov	r3, r7
 8001d96:	4619      	mov	r1, r3
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_ADC1_Init+0x104>)
 8001d9a:	f001 fba1 	bl	80034e0 <HAL_ADC_ConfigChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001da4:	f000 fae8 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	200051e0 	.word	0x200051e0
 8001db4:	40022000 	.word	0x40022000
 8001db8:	2e300800 	.word	0x2e300800
 8001dbc:	2a000400 	.word	0x2a000400

08001dc0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
 8001dd4:	615a      	str	r2, [r3, #20]
 8001dd6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001dd8:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <MX_ADC3_Init+0xc0>)
 8001dda:	4a2a      	ldr	r2, [pc, #168]	; (8001e84 <MX_ADC3_Init+0xc4>)
 8001ddc:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001dde:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <MX_ADC3_Init+0xc0>)
 8001de0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001de4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <MX_ADC3_Init+0xc0>)
 8001de8:	2208      	movs	r2, #8
 8001dea:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <MX_ADC3_Init+0xc0>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001df2:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <MX_ADC3_Init+0xc0>)
 8001df4:	2204      	movs	r2, #4
 8001df6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <MX_ADC3_Init+0xc0>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <MX_ADC3_Init+0xc0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001e04:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <MX_ADC3_Init+0xc0>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <MX_ADC3_Init+0xc0>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <MX_ADC3_Init+0xc0>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e16:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <MX_ADC3_Init+0xc0>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001e1c:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <MX_ADC3_Init+0xc0>)
 8001e1e:	2203      	movs	r2, #3
 8001e20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e22:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <MX_ADC3_Init+0xc0>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001e28:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <MX_ADC3_Init+0xc0>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001e2e:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <MX_ADC3_Init+0xc0>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001e36:	4812      	ldr	r0, [pc, #72]	; (8001e80 <MX_ADC3_Init+0xc0>)
 8001e38:	f001 f8d0 	bl	8002fdc <HAL_ADC_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001e42:	f000 fa99 	bl	8002378 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <MX_ADC3_Init+0xc8>)
 8001e48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e4a:	2306      	movs	r3, #6
 8001e4c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e52:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001e56:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e58:	2304      	movs	r3, #4
 8001e5a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	4619      	mov	r1, r3
 8001e68:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_ADC3_Init+0xc0>)
 8001e6a:	f001 fb39 	bl	80034e0 <HAL_ADC_ConfigChannel>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8001e74:	f000 fa80 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	3720      	adds	r7, #32
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20005244 	.word	0x20005244
 8001e84:	58026000 	.word	0x58026000
 8001e88:	08600004 	.word	0x08600004

08001e8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b09c      	sub	sp, #112	; 0x70
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e92:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001eac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
 8001ec8:	615a      	str	r2, [r3, #20]
 8001eca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ecc:	463b      	mov	r3, r7
 8001ece:	222c      	movs	r2, #44	; 0x2c
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f00b fa12 	bl	800d2fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ed8:	4b60      	ldr	r3, [pc, #384]	; (800205c <MX_TIM1_Init+0x1d0>)
 8001eda:	4a61      	ldr	r2, [pc, #388]	; (8002060 <MX_TIM1_Init+0x1d4>)
 8001edc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 103;
 8001ede:	4b5f      	ldr	r3, [pc, #380]	; (800205c <MX_TIM1_Init+0x1d0>)
 8001ee0:	2267      	movs	r2, #103	; 0x67
 8001ee2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001ee4:	4b5d      	ldr	r3, [pc, #372]	; (800205c <MX_TIM1_Init+0x1d0>)
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 72;
 8001eea:	4b5c      	ldr	r3, [pc, #368]	; (800205c <MX_TIM1_Init+0x1d0>)
 8001eec:	2248      	movs	r2, #72	; 0x48
 8001eee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef0:	4b5a      	ldr	r3, [pc, #360]	; (800205c <MX_TIM1_Init+0x1d0>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ef6:	4b59      	ldr	r3, [pc, #356]	; (800205c <MX_TIM1_Init+0x1d0>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001efc:	4b57      	ldr	r3, [pc, #348]	; (800205c <MX_TIM1_Init+0x1d0>)
 8001efe:	2280      	movs	r2, #128	; 0x80
 8001f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f02:	4856      	ldr	r0, [pc, #344]	; (800205c <MX_TIM1_Init+0x1d0>)
 8001f04:	f008 f844 	bl	8009f90 <HAL_TIM_Base_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8001f0e:	f000 fa33 	bl	8002378 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f16:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f18:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	484f      	ldr	r0, [pc, #316]	; (800205c <MX_TIM1_Init+0x1d0>)
 8001f20:	f008 febe 	bl	800aca0 <HAL_TIM_ConfigClockSource>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001f2a:	f000 fa25 	bl	8002378 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f2e:	484b      	ldr	r0, [pc, #300]	; (800205c <MX_TIM1_Init+0x1d0>)
 8001f30:	f008 f885 	bl	800a03e <HAL_TIM_PWM_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8001f3a:	f000 fa1d 	bl	8002378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4842      	ldr	r0, [pc, #264]	; (800205c <MX_TIM1_Init+0x1d0>)
 8001f52:	f009 fc03 	bl	800b75c <HAL_TIMEx_MasterConfigSynchronization>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001f5c:	f000 fa0c 	bl	8002378 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001f60:	2301      	movs	r3, #1
 8001f62:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001f64:	2301      	movs	r3, #1
 8001f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001f6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f70:	461a      	mov	r2, r3
 8001f72:	2102      	movs	r1, #2
 8001f74:	4839      	ldr	r0, [pc, #228]	; (800205c <MX_TIM1_Init+0x1d0>)
 8001f76:	f009 fcfd 	bl	800b974 <HAL_TIMEx_ConfigBreakInput>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001f80:	f000 f9fa 	bl	8002378 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f84:	2360      	movs	r3, #96	; 0x60
 8001f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f90:	2300      	movs	r3, #0
 8001f92:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	482c      	ldr	r0, [pc, #176]	; (800205c <MX_TIM1_Init+0x1d0>)
 8001faa:	f008 fd65 	bl	800aa78 <HAL_TIM_PWM_ConfigChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001fb4:	f000 f9e0 	bl	8002378 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4826      	ldr	r0, [pc, #152]	; (800205c <MX_TIM1_Init+0x1d0>)
 8001fc2:	f008 fd59 	bl	800aa78 <HAL_TIM_PWM_ConfigChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001fcc:	f000 f9d4 	bl	8002378 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4820      	ldr	r0, [pc, #128]	; (800205c <MX_TIM1_Init+0x1d0>)
 8001fda:	f008 fd4d 	bl	800aa78 <HAL_TIM_PWM_ConfigChannel>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001fe4:	f000 f9c8 	bl	8002378 <Error_Handler>
  }
  sConfigOC.Pulse = 72;
 8001fe8:	2348      	movs	r3, #72	; 0x48
 8001fea:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ff0:	220c      	movs	r2, #12
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4819      	ldr	r0, [pc, #100]	; (800205c <MX_TIM1_Init+0x1d0>)
 8001ff6:	f008 fd3f 	bl	800aa78 <HAL_TIM_PWM_ConfigChannel>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 8002000:	f000 f9ba 	bl	8002378 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002004:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002008:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800200a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800200e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8002010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002014:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800201e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002022:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8002028:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800202c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800203a:	463b      	mov	r3, r7
 800203c:	4619      	mov	r1, r3
 800203e:	4807      	ldr	r0, [pc, #28]	; (800205c <MX_TIM1_Init+0x1d0>)
 8002040:	f009 fc1a 	bl	800b878 <HAL_TIMEx_ConfigBreakDeadTime>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM1_Init+0x1c2>
  {
    Error_Handler();
 800204a:	f000 f995 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800204e:	4803      	ldr	r0, [pc, #12]	; (800205c <MX_TIM1_Init+0x1d0>)
 8002050:	f000 fb28 	bl	80026a4 <HAL_TIM_MspPostInit>

}
 8002054:	bf00      	nop
 8002056:	3770      	adds	r7, #112	; 0x70
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20005320 	.word	0x20005320
 8002060:	40010000 	.word	0x40010000

08002064 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08c      	sub	sp, #48	; 0x30
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800206a:	f107 030c 	add.w	r3, r7, #12
 800206e:	2224      	movs	r2, #36	; 0x24
 8002070:	2100      	movs	r1, #0
 8002072:	4618      	mov	r0, r3
 8002074:	f00b f942 	bl	800d2fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002078:	463b      	mov	r3, r7
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002082:	4b21      	ldr	r3, [pc, #132]	; (8002108 <MX_TIM3_Init+0xa4>)
 8002084:	4a21      	ldr	r2, [pc, #132]	; (800210c <MX_TIM3_Init+0xa8>)
 8002086:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002088:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <MX_TIM3_Init+0xa4>)
 800208a:	2200      	movs	r2, #0
 800208c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208e:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <MX_TIM3_Init+0xa4>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 299;
 8002094:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <MX_TIM3_Init+0xa4>)
 8002096:	f240 122b 	movw	r2, #299	; 0x12b
 800209a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209c:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <MX_TIM3_Init+0xa4>)
 800209e:	2200      	movs	r2, #0
 80020a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020a2:	4b19      	ldr	r3, [pc, #100]	; (8002108 <MX_TIM3_Init+0xa4>)
 80020a4:	2280      	movs	r2, #128	; 0x80
 80020a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80020a8:	2301      	movs	r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80020ac:	2302      	movs	r3, #2
 80020ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020b0:	2301      	movs	r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80020bc:	2302      	movs	r3, #2
 80020be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020c0:	2301      	movs	r3, #1
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020c4:	2300      	movs	r3, #0
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	4619      	mov	r1, r3
 80020d2:	480d      	ldr	r0, [pc, #52]	; (8002108 <MX_TIM3_Init+0xa4>)
 80020d4:	f008 fa7c 	bl	800a5d0 <HAL_TIM_Encoder_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80020de:	f000 f94b 	bl	8002378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020ea:	463b      	mov	r3, r7
 80020ec:	4619      	mov	r1, r3
 80020ee:	4806      	ldr	r0, [pc, #24]	; (8002108 <MX_TIM3_Init+0xa4>)
 80020f0:	f009 fb34 	bl	800b75c <HAL_TIMEx_MasterConfigSynchronization>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80020fa:	f000 f93d 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020fe:	bf00      	nop
 8002100:	3730      	adds	r7, #48	; 0x30
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20005194 	.word	0x20005194
 800210c:	40000400 	.word	0x40000400

08002110 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002114:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <MX_USART3_UART_Init+0x90>)
 8002116:	4a23      	ldr	r2, [pc, #140]	; (80021a4 <MX_USART3_UART_Init+0x94>)
 8002118:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 4000000;
 800211a:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <MX_USART3_UART_Init+0x90>)
 800211c:	4a22      	ldr	r2, [pc, #136]	; (80021a8 <MX_USART3_UART_Init+0x98>)
 800211e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002120:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <MX_USART3_UART_Init+0x90>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <MX_USART3_UART_Init+0x90>)
 8002128:	2200      	movs	r2, #0
 800212a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800212c:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <MX_USART3_UART_Init+0x90>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002132:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <MX_USART3_UART_Init+0x90>)
 8002134:	220c      	movs	r2, #12
 8002136:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <MX_USART3_UART_Init+0x90>)
 800213a:	2200      	movs	r2, #0
 800213c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800213e:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <MX_USART3_UART_Init+0x90>)
 8002140:	2200      	movs	r2, #0
 8002142:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002144:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <MX_USART3_UART_Init+0x90>)
 8002146:	2200      	movs	r2, #0
 8002148:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <MX_USART3_UART_Init+0x90>)
 800214c:	2200      	movs	r2, #0
 800214e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <MX_USART3_UART_Init+0x90>)
 8002152:	2200      	movs	r2, #0
 8002154:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002156:	4812      	ldr	r0, [pc, #72]	; (80021a0 <MX_USART3_UART_Init+0x90>)
 8002158:	f009 fcf0 	bl	800bb3c <HAL_UART_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8002162:	f000 f909 	bl	8002378 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002166:	2100      	movs	r1, #0
 8002168:	480d      	ldr	r0, [pc, #52]	; (80021a0 <MX_USART3_UART_Init+0x90>)
 800216a:	f00a ffd9 	bl	800d120 <HAL_UARTEx_SetTxFifoThreshold>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8002174:	f000 f900 	bl	8002378 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002178:	2100      	movs	r1, #0
 800217a:	4809      	ldr	r0, [pc, #36]	; (80021a0 <MX_USART3_UART_Init+0x90>)
 800217c:	f00b f80e 	bl	800d19c <HAL_UARTEx_SetRxFifoThreshold>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8002186:	f000 f8f7 	bl	8002378 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800218a:	4805      	ldr	r0, [pc, #20]	; (80021a0 <MX_USART3_UART_Init+0x90>)
 800218c:	f00a ff8f 	bl	800d0ae <HAL_UARTEx_DisableFifoMode>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8002196:	f000 f8ef 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200000bc 	.word	0x200000bc
 80021a4:	40004800 	.word	0x40004800
 80021a8:	003d0900 	.word	0x003d0900

080021ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <MX_DMA_Init+0x4c>)
 80021b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021b8:	4a0f      	ldr	r2, [pc, #60]	; (80021f8 <MX_DMA_Init+0x4c>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <MX_DMA_Init+0x4c>)
 80021c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2100      	movs	r1, #0
 80021d4:	200b      	movs	r0, #11
 80021d6:	f002 f9e8 	bl	80045aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80021da:	200b      	movs	r0, #11
 80021dc:	f002 f9ff 	bl	80045de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2100      	movs	r1, #0
 80021e4:	200d      	movs	r0, #13
 80021e6:	f002 f9e0 	bl	80045aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80021ea:	200d      	movs	r0, #13
 80021ec:	f002 f9f7 	bl	80045de <HAL_NVIC_EnableIRQ>

}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	58024400 	.word	0x58024400

080021fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08c      	sub	sp, #48	; 0x30
 8002200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
 8002210:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002212:	4b40      	ldr	r3, [pc, #256]	; (8002314 <MX_GPIO_Init+0x118>)
 8002214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002218:	4a3e      	ldr	r2, [pc, #248]	; (8002314 <MX_GPIO_Init+0x118>)
 800221a:	f043 0310 	orr.w	r3, r3, #16
 800221e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002222:	4b3c      	ldr	r3, [pc, #240]	; (8002314 <MX_GPIO_Init+0x118>)
 8002224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002230:	4b38      	ldr	r3, [pc, #224]	; (8002314 <MX_GPIO_Init+0x118>)
 8002232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002236:	4a37      	ldr	r2, [pc, #220]	; (8002314 <MX_GPIO_Init+0x118>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002240:	4b34      	ldr	r3, [pc, #208]	; (8002314 <MX_GPIO_Init+0x118>)
 8002242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800224e:	4b31      	ldr	r3, [pc, #196]	; (8002314 <MX_GPIO_Init+0x118>)
 8002250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002254:	4a2f      	ldr	r2, [pc, #188]	; (8002314 <MX_GPIO_Init+0x118>)
 8002256:	f043 0320 	orr.w	r3, r3, #32
 800225a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800225e:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <MX_GPIO_Init+0x118>)
 8002260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800226c:	4b29      	ldr	r3, [pc, #164]	; (8002314 <MX_GPIO_Init+0x118>)
 800226e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002272:	4a28      	ldr	r2, [pc, #160]	; (8002314 <MX_GPIO_Init+0x118>)
 8002274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002278:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800227c:	4b25      	ldr	r3, [pc, #148]	; (8002314 <MX_GPIO_Init+0x118>)
 800227e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800228a:	4b22      	ldr	r3, [pc, #136]	; (8002314 <MX_GPIO_Init+0x118>)
 800228c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002290:	4a20      	ldr	r2, [pc, #128]	; (8002314 <MX_GPIO_Init+0x118>)
 8002292:	f043 0308 	orr.w	r3, r3, #8
 8002296:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <MX_GPIO_Init+0x118>)
 800229c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a8:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <MX_GPIO_Init+0x118>)
 80022aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ae:	4a19      	ldr	r2, [pc, #100]	; (8002314 <MX_GPIO_Init+0x118>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022b8:	4b16      	ldr	r3, [pc, #88]	; (8002314 <MX_GPIO_Init+0x118>)
 80022ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80022cc:	4812      	ldr	r0, [pc, #72]	; (8002318 <MX_GPIO_Init+0x11c>)
 80022ce:	f004 fca9 	bl	8006c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80022d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e2:	f107 031c 	add.w	r3, r7, #28
 80022e6:	4619      	mov	r1, r3
 80022e8:	480b      	ldr	r0, [pc, #44]	; (8002318 <MX_GPIO_Init+0x11c>)
 80022ea:	f004 faeb 	bl	80068c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80022ee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80022f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002300:	f107 031c 	add.w	r3, r7, #28
 8002304:	4619      	mov	r1, r3
 8002306:	4804      	ldr	r0, [pc, #16]	; (8002318 <MX_GPIO_Init+0x11c>)
 8002308:	f004 fadc 	bl	80068c4 <HAL_GPIO_Init>

}
 800230c:	bf00      	nop
 800230e:	3730      	adds	r7, #48	; 0x30
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	58024400 	.word	0x58024400
 8002318:	58020800 	.word	0x58020800

0800231c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002322:	463b      	mov	r3, r7
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800232e:	f002 f975 	bl	800461c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002332:	2301      	movs	r3, #1
 8002334:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002336:	2300      	movs	r3, #0
 8002338:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24001000;
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <MPU_Config+0x58>)
 800233c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64B;
 800233e:	2305      	movs	r3, #5
 8002340:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002342:	2300      	movs	r3, #0
 8002344:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002346:	2300      	movs	r3, #0
 8002348:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800234a:	2303      	movs	r3, #3
 800234c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800234e:	2301      	movs	r3, #1
 8002350:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002352:	2301      	movs	r3, #1
 8002354:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002356:	2300      	movs	r3, #0
 8002358:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800235a:	2301      	movs	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800235e:	463b      	mov	r3, r7
 8002360:	4618      	mov	r0, r3
 8002362:	f002 f993 	bl	800468c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002366:	2004      	movs	r0, #4
 8002368:	f002 f970 	bl	800464c <HAL_MPU_Enable>

}
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	24001000 	.word	0x24001000

08002378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800237c:	b672      	cpsid	i
}
 800237e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002380:	e7fe      	b.n	8002380 <Error_Handler+0x8>
	...

08002384 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_MspInit+0x30>)
 800238c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002390:	4a08      	ldr	r2, [pc, #32]	; (80023b4 <HAL_MspInit+0x30>)
 8002392:	f043 0302 	orr.w	r3, r3, #2
 8002396:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_MspInit+0x30>)
 800239c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	58024400 	.word	0x58024400

080023b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08c      	sub	sp, #48	; 0x30
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 031c 	add.w	r3, r7, #28
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a60      	ldr	r2, [pc, #384]	; (8002558 <HAL_ADC_MspInit+0x1a0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d15a      	bne.n	8002490 <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80023da:	4b60      	ldr	r3, [pc, #384]	; (800255c <HAL_ADC_MspInit+0x1a4>)
 80023dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023e0:	4a5e      	ldr	r2, [pc, #376]	; (800255c <HAL_ADC_MspInit+0x1a4>)
 80023e2:	f043 0320 	orr.w	r3, r3, #32
 80023e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023ea:	4b5c      	ldr	r3, [pc, #368]	; (800255c <HAL_ADC_MspInit+0x1a4>)
 80023ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023f0:	f003 0320 	and.w	r3, r3, #32
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023f8:	4b58      	ldr	r3, [pc, #352]	; (800255c <HAL_ADC_MspInit+0x1a4>)
 80023fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fe:	4a57      	ldr	r2, [pc, #348]	; (800255c <HAL_ADC_MspInit+0x1a4>)
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002408:	4b54      	ldr	r3, [pc, #336]	; (800255c <HAL_ADC_MspInit+0x1a4>)
 800240a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PC1     ------> ADC1_INP11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002416:	2303      	movs	r3, #3
 8002418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800241a:	2303      	movs	r3, #3
 800241c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002422:	f107 031c 	add.w	r3, r7, #28
 8002426:	4619      	mov	r1, r3
 8002428:	484d      	ldr	r0, [pc, #308]	; (8002560 <HAL_ADC_MspInit+0x1a8>)
 800242a:	f004 fa4b 	bl	80068c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800242e:	4b4d      	ldr	r3, [pc, #308]	; (8002564 <HAL_ADC_MspInit+0x1ac>)
 8002430:	4a4d      	ldr	r2, [pc, #308]	; (8002568 <HAL_ADC_MspInit+0x1b0>)
 8002432:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002434:	4b4b      	ldr	r3, [pc, #300]	; (8002564 <HAL_ADC_MspInit+0x1ac>)
 8002436:	2209      	movs	r2, #9
 8002438:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800243a:	4b4a      	ldr	r3, [pc, #296]	; (8002564 <HAL_ADC_MspInit+0x1ac>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002440:	4b48      	ldr	r3, [pc, #288]	; (8002564 <HAL_ADC_MspInit+0x1ac>)
 8002442:	2200      	movs	r2, #0
 8002444:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002446:	4b47      	ldr	r3, [pc, #284]	; (8002564 <HAL_ADC_MspInit+0x1ac>)
 8002448:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800244c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800244e:	4b45      	ldr	r3, [pc, #276]	; (8002564 <HAL_ADC_MspInit+0x1ac>)
 8002450:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002454:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002456:	4b43      	ldr	r3, [pc, #268]	; (8002564 <HAL_ADC_MspInit+0x1ac>)
 8002458:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800245c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800245e:	4b41      	ldr	r3, [pc, #260]	; (8002564 <HAL_ADC_MspInit+0x1ac>)
 8002460:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002464:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002466:	4b3f      	ldr	r3, [pc, #252]	; (8002564 <HAL_ADC_MspInit+0x1ac>)
 8002468:	2200      	movs	r2, #0
 800246a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800246c:	4b3d      	ldr	r3, [pc, #244]	; (8002564 <HAL_ADC_MspInit+0x1ac>)
 800246e:	2200      	movs	r2, #0
 8002470:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002472:	483c      	ldr	r0, [pc, #240]	; (8002564 <HAL_ADC_MspInit+0x1ac>)
 8002474:	f002 f94e 	bl	8004714 <HAL_DMA_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 800247e:	f7ff ff7b 	bl	8002378 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a37      	ldr	r2, [pc, #220]	; (8002564 <HAL_ADC_MspInit+0x1ac>)
 8002486:	64da      	str	r2, [r3, #76]	; 0x4c
 8002488:	4a36      	ldr	r2, [pc, #216]	; (8002564 <HAL_ADC_MspInit+0x1ac>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800248e:	e05f      	b.n	8002550 <HAL_ADC_MspInit+0x198>
  else if(hadc->Instance==ADC3)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a35      	ldr	r2, [pc, #212]	; (800256c <HAL_ADC_MspInit+0x1b4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d15a      	bne.n	8002550 <HAL_ADC_MspInit+0x198>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800249a:	4b30      	ldr	r3, [pc, #192]	; (800255c <HAL_ADC_MspInit+0x1a4>)
 800249c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a0:	4a2e      	ldr	r2, [pc, #184]	; (800255c <HAL_ADC_MspInit+0x1a4>)
 80024a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024aa:	4b2c      	ldr	r3, [pc, #176]	; (800255c <HAL_ADC_MspInit+0x1a4>)
 80024ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024b8:	4b28      	ldr	r3, [pc, #160]	; (800255c <HAL_ADC_MspInit+0x1a4>)
 80024ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024be:	4a27      	ldr	r2, [pc, #156]	; (800255c <HAL_ADC_MspInit+0x1a4>)
 80024c0:	f043 0320 	orr.w	r3, r3, #32
 80024c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c8:	4b24      	ldr	r3, [pc, #144]	; (800255c <HAL_ADC_MspInit+0x1a4>)
 80024ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024dc:	2303      	movs	r3, #3
 80024de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024e4:	f107 031c 	add.w	r3, r7, #28
 80024e8:	4619      	mov	r1, r3
 80024ea:	4821      	ldr	r0, [pc, #132]	; (8002570 <HAL_ADC_MspInit+0x1b8>)
 80024ec:	f004 f9ea 	bl	80068c4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Stream2;
 80024f0:	4b20      	ldr	r3, [pc, #128]	; (8002574 <HAL_ADC_MspInit+0x1bc>)
 80024f2:	4a21      	ldr	r2, [pc, #132]	; (8002578 <HAL_ADC_MspInit+0x1c0>)
 80024f4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80024f6:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <HAL_ADC_MspInit+0x1bc>)
 80024f8:	2273      	movs	r2, #115	; 0x73
 80024fa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024fc:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <HAL_ADC_MspInit+0x1bc>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002502:	4b1c      	ldr	r3, [pc, #112]	; (8002574 <HAL_ADC_MspInit+0x1bc>)
 8002504:	2200      	movs	r2, #0
 8002506:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002508:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <HAL_ADC_MspInit+0x1bc>)
 800250a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800250e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002510:	4b18      	ldr	r3, [pc, #96]	; (8002574 <HAL_ADC_MspInit+0x1bc>)
 8002512:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002516:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002518:	4b16      	ldr	r3, [pc, #88]	; (8002574 <HAL_ADC_MspInit+0x1bc>)
 800251a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800251e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002520:	4b14      	ldr	r3, [pc, #80]	; (8002574 <HAL_ADC_MspInit+0x1bc>)
 8002522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002526:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_ADC_MspInit+0x1bc>)
 800252a:	2200      	movs	r2, #0
 800252c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <HAL_ADC_MspInit+0x1bc>)
 8002530:	2200      	movs	r2, #0
 8002532:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002534:	480f      	ldr	r0, [pc, #60]	; (8002574 <HAL_ADC_MspInit+0x1bc>)
 8002536:	f002 f8ed 	bl	8004714 <HAL_DMA_Init>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_ADC_MspInit+0x18c>
      Error_Handler();
 8002540:	f7ff ff1a 	bl	8002378 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a0b      	ldr	r2, [pc, #44]	; (8002574 <HAL_ADC_MspInit+0x1bc>)
 8002548:	64da      	str	r2, [r3, #76]	; 0x4c
 800254a:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <HAL_ADC_MspInit+0x1bc>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002550:	bf00      	nop
 8002552:	3730      	adds	r7, #48	; 0x30
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40022000 	.word	0x40022000
 800255c:	58024400 	.word	0x58024400
 8002560:	58020800 	.word	0x58020800
 8002564:	200052a8 	.word	0x200052a8
 8002568:	40020010 	.word	0x40020010
 800256c:	58026000 	.word	0x58026000
 8002570:	58021400 	.word	0x58021400
 8002574:	2000511c 	.word	0x2000511c
 8002578:	40020040 	.word	0x40020040

0800257c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	; 0x28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1a      	ldr	r2, [pc, #104]	; (8002604 <HAL_TIM_Base_MspInit+0x88>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d12d      	bne.n	80025fa <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <HAL_TIM_Base_MspInit+0x8c>)
 80025a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025a4:	4a18      	ldr	r2, [pc, #96]	; (8002608 <HAL_TIM_Base_MspInit+0x8c>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <HAL_TIM_Base_MspInit+0x8c>)
 80025b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_TIM_Base_MspInit+0x8c>)
 80025be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025c2:	4a11      	ldr	r2, [pc, #68]	; (8002608 <HAL_TIM_Base_MspInit+0x8c>)
 80025c4:	f043 0310 	orr.w	r3, r3, #16
 80025c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025cc:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <HAL_TIM_Base_MspInit+0x8c>)
 80025ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE6     ------> TIM1_BKIN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025da:	2340      	movs	r3, #64	; 0x40
 80025dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025de:	2312      	movs	r3, #18
 80025e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025e2:	2301      	movs	r3, #1
 80025e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e6:	2300      	movs	r3, #0
 80025e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025ea:	2301      	movs	r3, #1
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025ee:	f107 0314 	add.w	r3, r7, #20
 80025f2:	4619      	mov	r1, r3
 80025f4:	4805      	ldr	r0, [pc, #20]	; (800260c <HAL_TIM_Base_MspInit+0x90>)
 80025f6:	f004 f965 	bl	80068c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80025fa:	bf00      	nop
 80025fc:	3728      	adds	r7, #40	; 0x28
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40010000 	.word	0x40010000
 8002608:	58024400 	.word	0x58024400
 800260c:	58021000 	.word	0x58021000

08002610 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	; 0x28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1a      	ldr	r2, [pc, #104]	; (8002698 <HAL_TIM_Encoder_MspInit+0x88>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d12d      	bne.n	800268e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002638:	4a18      	ldr	r2, [pc, #96]	; (800269c <HAL_TIM_Encoder_MspInit+0x8c>)
 800263a:	f043 0302 	orr.w	r3, r3, #2
 800263e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002656:	4a11      	ldr	r2, [pc, #68]	; (800269c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002658:	f043 0304 	orr.w	r3, r3, #4
 800265c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800266e:	23c0      	movs	r3, #192	; 0xc0
 8002670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	2302      	movs	r3, #2
 8002674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267a:	2300      	movs	r3, #0
 800267c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800267e:	2302      	movs	r3, #2
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002682:	f107 0314 	add.w	r3, r7, #20
 8002686:	4619      	mov	r1, r3
 8002688:	4805      	ldr	r0, [pc, #20]	; (80026a0 <HAL_TIM_Encoder_MspInit+0x90>)
 800268a:	f004 f91b 	bl	80068c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800268e:	bf00      	nop
 8002690:	3728      	adds	r7, #40	; 0x28
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40000400 	.word	0x40000400
 800269c:	58024400 	.word	0x58024400
 80026a0:	58020800 	.word	0x58020800

080026a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 030c 	add.w	r3, r7, #12
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a13      	ldr	r2, [pc, #76]	; (8002710 <HAL_TIM_MspPostInit+0x6c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d11f      	bne.n	8002706 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c6:	4b13      	ldr	r3, [pc, #76]	; (8002714 <HAL_TIM_MspPostInit+0x70>)
 80026c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026cc:	4a11      	ldr	r2, [pc, #68]	; (8002714 <HAL_TIM_MspPostInit+0x70>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026d6:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <HAL_TIM_MspPostInit+0x70>)
 80026d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80026e4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80026e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	2302      	movs	r3, #2
 80026ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026f6:	2301      	movs	r3, #1
 80026f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fa:	f107 030c 	add.w	r3, r7, #12
 80026fe:	4619      	mov	r1, r3
 8002700:	4805      	ldr	r0, [pc, #20]	; (8002718 <HAL_TIM_MspPostInit+0x74>)
 8002702:	f004 f8df 	bl	80068c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002706:	bf00      	nop
 8002708:	3720      	adds	r7, #32
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40010000 	.word	0x40010000
 8002714:	58024400 	.word	0x58024400
 8002718:	58020000 	.word	0x58020000

0800271c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b0b8      	sub	sp, #224	; 0xe0
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002734:	f107 0310 	add.w	r3, r7, #16
 8002738:	22bc      	movs	r2, #188	; 0xbc
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f00a fddd 	bl	800d2fc <memset>
  if(huart->Instance==USART3)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a3c      	ldr	r2, [pc, #240]	; (8002838 <HAL_UART_MspInit+0x11c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d170      	bne.n	800282e <HAL_UART_MspInit+0x112>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800274c:	2302      	movs	r3, #2
 800274e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8002750:	2303      	movs	r3, #3
 8002752:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002756:	f107 0310 	add.w	r3, r7, #16
 800275a:	4618      	mov	r0, r3
 800275c:	f005 fa92 	bl	8007c84 <HAL_RCCEx_PeriphCLKConfig>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002766:	f7ff fe07 	bl	8002378 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800276a:	4b34      	ldr	r3, [pc, #208]	; (800283c <HAL_UART_MspInit+0x120>)
 800276c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002770:	4a32      	ldr	r2, [pc, #200]	; (800283c <HAL_UART_MspInit+0x120>)
 8002772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002776:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800277a:	4b30      	ldr	r3, [pc, #192]	; (800283c <HAL_UART_MspInit+0x120>)
 800277c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002788:	4b2c      	ldr	r3, [pc, #176]	; (800283c <HAL_UART_MspInit+0x120>)
 800278a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800278e:	4a2b      	ldr	r2, [pc, #172]	; (800283c <HAL_UART_MspInit+0x120>)
 8002790:	f043 0308 	orr.w	r3, r3, #8
 8002794:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002798:	4b28      	ldr	r3, [pc, #160]	; (800283c <HAL_UART_MspInit+0x120>)
 800279a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ae:	2302      	movs	r3, #2
 80027b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027c0:	2307      	movs	r3, #7
 80027c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027c6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027ca:	4619      	mov	r1, r3
 80027cc:	481c      	ldr	r0, [pc, #112]	; (8002840 <HAL_UART_MspInit+0x124>)
 80027ce:	f004 f879 	bl	80068c4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80027d2:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <HAL_UART_MspInit+0x128>)
 80027d4:	4a1c      	ldr	r2, [pc, #112]	; (8002848 <HAL_UART_MspInit+0x12c>)
 80027d6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80027d8:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <HAL_UART_MspInit+0x128>)
 80027da:	222d      	movs	r2, #45	; 0x2d
 80027dc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027de:	4b19      	ldr	r3, [pc, #100]	; (8002844 <HAL_UART_MspInit+0x128>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027e4:	4b17      	ldr	r3, [pc, #92]	; (8002844 <HAL_UART_MspInit+0x128>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027ea:	4b16      	ldr	r3, [pc, #88]	; (8002844 <HAL_UART_MspInit+0x128>)
 80027ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027f0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027f2:	4b14      	ldr	r3, [pc, #80]	; (8002844 <HAL_UART_MspInit+0x128>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_UART_MspInit+0x128>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <HAL_UART_MspInit+0x128>)
 8002800:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002804:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002806:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <HAL_UART_MspInit+0x128>)
 8002808:	2200      	movs	r2, #0
 800280a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800280c:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <HAL_UART_MspInit+0x128>)
 800280e:	2200      	movs	r2, #0
 8002810:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002812:	480c      	ldr	r0, [pc, #48]	; (8002844 <HAL_UART_MspInit+0x128>)
 8002814:	f001 ff7e 	bl	8004714 <HAL_DMA_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 800281e:	f7ff fdab 	bl	8002378 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a07      	ldr	r2, [pc, #28]	; (8002844 <HAL_UART_MspInit+0x128>)
 8002826:	67da      	str	r2, [r3, #124]	; 0x7c
 8002828:	4a06      	ldr	r2, [pc, #24]	; (8002844 <HAL_UART_MspInit+0x128>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800282e:	bf00      	nop
 8002830:	37e0      	adds	r7, #224	; 0xe0
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40004800 	.word	0x40004800
 800283c:	58024400 	.word	0x58024400
 8002840:	58020c00 	.word	0x58020c00
 8002844:	200050a4 	.word	0x200050a4
 8002848:	40020028 	.word	0x40020028

0800284c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002850:	e7fe      	b.n	8002850 <NMI_Handler+0x4>

08002852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002856:	e7fe      	b.n	8002856 <HardFault_Handler+0x4>

08002858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800285c:	e7fe      	b.n	800285c <MemManage_Handler+0x4>

0800285e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800285e:	b480      	push	{r7}
 8002860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002862:	e7fe      	b.n	8002862 <BusFault_Handler+0x4>

08002864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002868:	e7fe      	b.n	8002868 <UsageFault_Handler+0x4>

0800286a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002898:	f000 f966 	bl	8002b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}

080028a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028a4:	4802      	ldr	r0, [pc, #8]	; (80028b0 <DMA1_Stream0_IRQHandler+0x10>)
 80028a6:	f002 fcfb 	bl	80052a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200052a8 	.word	0x200052a8

080028b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
	handleRxCommands();
 80028b8:	f7fe fb48 	bl	8000f4c <handleRxCommands>
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80028bc:	4802      	ldr	r0, [pc, #8]	; (80028c8 <DMA1_Stream1_IRQHandler+0x14>)
 80028be:	f002 fcef 	bl	80052a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	200050a4 	.word	0x200050a4

080028cc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80028d0:	4802      	ldr	r0, [pc, #8]	; (80028dc <DMA1_Stream2_IRQHandler+0x10>)
 80028d2:	f002 fce5 	bl	80052a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	2000511c 	.word	0x2000511c

080028e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	executeAll();
 80028e4:	f7fe fc1c 	bl	8001120 <executeAll>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028e8:	4802      	ldr	r0, [pc, #8]	; (80028f4 <TIM1_CC_IRQHandler+0x14>)
 80028ea:	f007 ffa5 	bl	800a838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20005320 	.word	0x20005320

080028f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  run = !run;
 80028fc:	4b07      	ldr	r3, [pc, #28]	; (800291c <EXTI15_10_IRQHandler+0x24>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	bf0c      	ite	eq
 8002904:	2301      	moveq	r3, #1
 8002906:	2300      	movne	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <EXTI15_10_IRQHandler+0x24>)
 800290e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002910:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002914:	f004 f99f 	bl	8006c56 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002918:	bf00      	nop
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000067 	.word	0x20000067

08002920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002924:	4b37      	ldr	r3, [pc, #220]	; (8002a04 <SystemInit+0xe4>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	4a36      	ldr	r2, [pc, #216]	; (8002a04 <SystemInit+0xe4>)
 800292c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002934:	4b34      	ldr	r3, [pc, #208]	; (8002a08 <SystemInit+0xe8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	2b06      	cmp	r3, #6
 800293e:	d807      	bhi.n	8002950 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002940:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <SystemInit+0xe8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 030f 	bic.w	r3, r3, #15
 8002948:	4a2f      	ldr	r2, [pc, #188]	; (8002a08 <SystemInit+0xe8>)
 800294a:	f043 0307 	orr.w	r3, r3, #7
 800294e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002950:	4b2e      	ldr	r3, [pc, #184]	; (8002a0c <SystemInit+0xec>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a2d      	ldr	r2, [pc, #180]	; (8002a0c <SystemInit+0xec>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800295c:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <SystemInit+0xec>)
 800295e:	2200      	movs	r2, #0
 8002960:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002962:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <SystemInit+0xec>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4929      	ldr	r1, [pc, #164]	; (8002a0c <SystemInit+0xec>)
 8002968:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <SystemInit+0xf0>)
 800296a:	4013      	ands	r3, r2
 800296c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800296e:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <SystemInit+0xe8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800297a:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <SystemInit+0xe8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 030f 	bic.w	r3, r3, #15
 8002982:	4a21      	ldr	r2, [pc, #132]	; (8002a08 <SystemInit+0xe8>)
 8002984:	f043 0307 	orr.w	r3, r3, #7
 8002988:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <SystemInit+0xec>)
 800298c:	2200      	movs	r2, #0
 800298e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002990:	4b1e      	ldr	r3, [pc, #120]	; (8002a0c <SystemInit+0xec>)
 8002992:	2200      	movs	r2, #0
 8002994:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002996:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <SystemInit+0xec>)
 8002998:	2200      	movs	r2, #0
 800299a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <SystemInit+0xec>)
 800299e:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <SystemInit+0xf4>)
 80029a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80029a2:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <SystemInit+0xec>)
 80029a4:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <SystemInit+0xf8>)
 80029a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80029a8:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <SystemInit+0xec>)
 80029aa:	4a1c      	ldr	r2, [pc, #112]	; (8002a1c <SystemInit+0xfc>)
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80029ae:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <SystemInit+0xec>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80029b4:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <SystemInit+0xec>)
 80029b6:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <SystemInit+0xfc>)
 80029b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80029ba:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <SystemInit+0xec>)
 80029bc:	2200      	movs	r2, #0
 80029be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <SystemInit+0xec>)
 80029c2:	4a16      	ldr	r2, [pc, #88]	; (8002a1c <SystemInit+0xfc>)
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80029c6:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <SystemInit+0xec>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <SystemInit+0xec>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <SystemInit+0xec>)
 80029d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <SystemInit+0xec>)
 80029da:	2200      	movs	r2, #0
 80029dc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <SystemInit+0x100>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <SystemInit+0x104>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ea:	d202      	bcs.n	80029f2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80029ec:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <SystemInit+0x108>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80029f2:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <SystemInit+0x10c>)
 80029f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80029f8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80029fa:	bf00      	nop
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00
 8002a08:	52002000 	.word	0x52002000
 8002a0c:	58024400 	.word	0x58024400
 8002a10:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a14:	02020200 	.word	0x02020200
 8002a18:	01ff0000 	.word	0x01ff0000
 8002a1c:	01010280 	.word	0x01010280
 8002a20:	5c001000 	.word	0x5c001000
 8002a24:	ffff0000 	.word	0xffff0000
 8002a28:	51008108 	.word	0x51008108
 8002a2c:	52004000 	.word	0x52004000

08002a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a34:	f7ff ff74 	bl	8002920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a38:	480c      	ldr	r0, [pc, #48]	; (8002a6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a3a:	490d      	ldr	r1, [pc, #52]	; (8002a70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a40:	e002      	b.n	8002a48 <LoopCopyDataInit>

08002a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a46:	3304      	adds	r3, #4

08002a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a4c:	d3f9      	bcc.n	8002a42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a50:	4c0a      	ldr	r4, [pc, #40]	; (8002a7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a54:	e001      	b.n	8002a5a <LoopFillZerobss>

08002a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a58:	3204      	adds	r2, #4

08002a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a5c:	d3fb      	bcc.n	8002a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a5e:	f00a fc29 	bl	800d2b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a62:	f7fe ff91 	bl	8001988 <main>
  bx  lr
 8002a66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a70:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8002a74:	0800d4e4 	.word	0x0800d4e4
  ldr r2, =_sbss
 8002a78:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8002a7c:	20005370 	.word	0x20005370

08002a80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a80:	e7fe      	b.n	8002a80 <ADC3_IRQHandler>
	...

08002a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a8a:	2003      	movs	r0, #3
 8002a8c:	f001 fd82 	bl	8004594 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a90:	f004 ff22 	bl	80078d8 <HAL_RCC_GetSysClockFreq>
 8002a94:	4602      	mov	r2, r0
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <HAL_Init+0x68>)
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	4913      	ldr	r1, [pc, #76]	; (8002af0 <HAL_Init+0x6c>)
 8002aa2:	5ccb      	ldrb	r3, [r1, r3]
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8002aac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002aae:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <HAL_Init+0x68>)
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <HAL_Init+0x6c>)
 8002ab8:	5cd3      	ldrb	r3, [r2, r3]
 8002aba:	f003 031f 	and.w	r3, r3, #31
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac4:	4a0b      	ldr	r2, [pc, #44]	; (8002af4 <HAL_Init+0x70>)
 8002ac6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ac8:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <HAL_Init+0x74>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f000 f814 	bl	8002afc <HAL_InitTick>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e002      	b.n	8002ae4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ade:	f7ff fc51 	bl	8002384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	58024400 	.word	0x58024400
 8002af0:	0800d494 	.word	0x0800d494
 8002af4:	20000028 	.word	0x20000028
 8002af8:	20000024 	.word	0x20000024

08002afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b04:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <HAL_InitTick+0x60>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e021      	b.n	8002b54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b10:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <HAL_InitTick+0x64>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_InitTick+0x60>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b26:	4618      	mov	r0, r3
 8002b28:	f001 fd6b 	bl	8004602 <HAL_SYSTICK_Config>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00e      	b.n	8002b54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b0f      	cmp	r3, #15
 8002b3a:	d80a      	bhi.n	8002b52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	f04f 30ff 	mov.w	r0, #4294967295
 8002b44:	f001 fd31 	bl	80045aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b48:	4a06      	ldr	r2, [pc, #24]	; (8002b64 <HAL_InitTick+0x68>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000030 	.word	0x20000030
 8002b60:	20000024 	.word	0x20000024
 8002b64:	2000002c 	.word	0x2000002c

08002b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_IncTick+0x20>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_IncTick+0x24>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4413      	add	r3, r2
 8002b78:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <HAL_IncTick+0x24>)
 8002b7a:	6013      	str	r3, [r2, #0]
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000030 	.word	0x20000030
 8002b8c:	2000536c 	.word	0x2000536c

08002b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return uwTick;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_GetTick+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	2000536c 	.word	0x2000536c

08002ba8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <HAL_GetREVID+0x14>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	0c1b      	lsrs	r3, r3, #16
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	5c001000 	.word	0x5c001000

08002bc0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	609a      	str	r2, [r3, #8]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3360      	adds	r3, #96	; 0x60
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	430b      	orrs	r3, r1
 8002c56:	431a      	orrs	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f003 031f 	and.w	r3, r3, #31
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	fa01 f303 	lsl.w	r3, r1, r3
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	611a      	str	r2, [r3, #16]
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b087      	sub	sp, #28
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	3360      	adds	r3, #96	; 0x60
 8002caa:	461a      	mov	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	601a      	str	r2, [r3, #0]
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	371c      	adds	r7, #28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b087      	sub	sp, #28
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	3330      	adds	r3, #48	; 0x30
 8002d06:	461a      	mov	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	4413      	add	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	211f      	movs	r1, #31
 8002d22:	fa01 f303 	lsl.w	r3, r1, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	401a      	ands	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0e9b      	lsrs	r3, r3, #26
 8002d2e:	f003 011f 	and.w	r1, r3, #31
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f023 0203 	bic.w	r2, r3, #3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	60da      	str	r2, [r3, #12]
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3314      	adds	r3, #20
 8002d84:	461a      	mov	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	0e5b      	lsrs	r3, r3, #25
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	4413      	add	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	0d1b      	lsrs	r3, r3, #20
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	2107      	movs	r1, #7
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	401a      	ands	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	0d1b      	lsrs	r3, r3, #20
 8002dae:	f003 031f 	and.w	r3, r3, #31
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	431a      	orrs	r2, r3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002de4:	43db      	mvns	r3, r3
 8002de6:	401a      	ands	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f003 0318 	and.w	r3, r3, #24
 8002dee:	4908      	ldr	r1, [pc, #32]	; (8002e10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002df0:	40d9      	lsrs	r1, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	400b      	ands	r3, r1
 8002df6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	000fffff 	.word	0x000fffff

08002e14 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 031f 	and.w	r3, r3, #31
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6093      	str	r3, [r2, #8]
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	5fffffc0 	.word	0x5fffffc0

08002e54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e68:	d101      	bne.n	8002e6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <LL_ADC_EnableInternalRegulator+0x24>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	6fffffc0 	.word	0x6fffffc0

08002ea4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eb8:	d101      	bne.n	8002ebe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <LL_ADC_Enable+0x24>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	f043 0201 	orr.w	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	7fffffc0 	.word	0x7fffffc0

08002ef4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <LL_ADC_Disable+0x24>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	f043 0202 	orr.w	r2, r3, #2
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	7fffffc0 	.word	0x7fffffc0

08002f1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <LL_ADC_IsEnabled+0x18>
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <LL_ADC_IsEnabled+0x1a>
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d101      	bne.n	8002f5a <LL_ADC_IsDisableOngoing+0x18>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <LL_ADC_IsDisableOngoing+0x1a>
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <LL_ADC_REG_StartConversion+0x24>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	f043 0204 	orr.w	r2, r3, #4
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	7fffffc0 	.word	0x7fffffc0

08002f90 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d101      	bne.n	8002fa8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d101      	bne.n	8002fce <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fdc:	b590      	push	{r4, r7, lr}
 8002fde:	b089      	sub	sp, #36	; 0x24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e18e      	b.n	8003314 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003000:	2b00      	cmp	r3, #0
 8003002:	d109      	bne.n	8003018 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff f9d7 	bl	80023b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff19 	bl	8002e54 <LL_ADC_IsDeepPowerDownEnabled>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d004      	beq.n	8003032 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff feff 	bl	8002e30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff ff34 	bl	8002ea4 <LL_ADC_IsInternalRegulatorEnabled>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d114      	bne.n	800306c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff ff18 	bl	8002e7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800304c:	4b9a      	ldr	r3, [pc, #616]	; (80032b8 <HAL_ADC_Init+0x2dc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	099b      	lsrs	r3, r3, #6
 8003052:	4a9a      	ldr	r2, [pc, #616]	; (80032bc <HAL_ADC_Init+0x2e0>)
 8003054:	fba2 2303 	umull	r2, r3, r2, r3
 8003058:	099b      	lsrs	r3, r3, #6
 800305a:	3301      	adds	r3, #1
 800305c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800305e:	e002      	b.n	8003066 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	3b01      	subs	r3, #1
 8003064:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f9      	bne.n	8003060 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff17 	bl	8002ea4 <LL_ADC_IsInternalRegulatorEnabled>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10d      	bne.n	8003098 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	f043 0210 	orr.w	r2, r3, #16
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	f043 0201 	orr.w	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ff77 	bl	8002f90 <LL_ADC_REG_IsConversionOngoing>
 80030a2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f040 8128 	bne.w	8003302 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f040 8124 	bne.w	8003302 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030be:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80030c2:	f043 0202 	orr.w	r2, r3, #2
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff ff24 	bl	8002f1c <LL_ADC_IsEnabled>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d136      	bne.n	8003148 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a78      	ldr	r2, [pc, #480]	; (80032c0 <HAL_ADC_Init+0x2e4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d004      	beq.n	80030ee <HAL_ADC_Init+0x112>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a76      	ldr	r2, [pc, #472]	; (80032c4 <HAL_ADC_Init+0x2e8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d10e      	bne.n	800310c <HAL_ADC_Init+0x130>
 80030ee:	4874      	ldr	r0, [pc, #464]	; (80032c0 <HAL_ADC_Init+0x2e4>)
 80030f0:	f7ff ff14 	bl	8002f1c <LL_ADC_IsEnabled>
 80030f4:	4604      	mov	r4, r0
 80030f6:	4873      	ldr	r0, [pc, #460]	; (80032c4 <HAL_ADC_Init+0x2e8>)
 80030f8:	f7ff ff10 	bl	8002f1c <LL_ADC_IsEnabled>
 80030fc:	4603      	mov	r3, r0
 80030fe:	4323      	orrs	r3, r4
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf0c      	ite	eq
 8003104:	2301      	moveq	r3, #1
 8003106:	2300      	movne	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	e008      	b.n	800311e <HAL_ADC_Init+0x142>
 800310c:	486e      	ldr	r0, [pc, #440]	; (80032c8 <HAL_ADC_Init+0x2ec>)
 800310e:	f7ff ff05 	bl	8002f1c <LL_ADC_IsEnabled>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d012      	beq.n	8003148 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a66      	ldr	r2, [pc, #408]	; (80032c0 <HAL_ADC_Init+0x2e4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d004      	beq.n	8003136 <HAL_ADC_Init+0x15a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a64      	ldr	r2, [pc, #400]	; (80032c4 <HAL_ADC_Init+0x2e8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d101      	bne.n	800313a <HAL_ADC_Init+0x15e>
 8003136:	4a65      	ldr	r2, [pc, #404]	; (80032cc <HAL_ADC_Init+0x2f0>)
 8003138:	e000      	b.n	800313c <HAL_ADC_Init+0x160>
 800313a:	4a65      	ldr	r2, [pc, #404]	; (80032d0 <HAL_ADC_Init+0x2f4>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4619      	mov	r1, r3
 8003142:	4610      	mov	r0, r2
 8003144:	f7ff fd3c 	bl	8002bc0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003148:	f7ff fd2e 	bl	8002ba8 <HAL_GetREVID>
 800314c:	4603      	mov	r3, r0
 800314e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003152:	4293      	cmp	r3, r2
 8003154:	d914      	bls.n	8003180 <HAL_ADC_Init+0x1a4>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b10      	cmp	r3, #16
 800315c:	d110      	bne.n	8003180 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	7d5b      	ldrb	r3, [r3, #21]
 8003162:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003168:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800316e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	7f1b      	ldrb	r3, [r3, #28]
 8003174:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003176:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003178:	f043 030c 	orr.w	r3, r3, #12
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	e00d      	b.n	800319c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	7d5b      	ldrb	r3, [r3, #21]
 8003184:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800318a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003190:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	7f1b      	ldrb	r3, [r3, #28]
 8003196:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	7f1b      	ldrb	r3, [r3, #28]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d106      	bne.n	80031b2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	045b      	lsls	r3, r3, #17
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	4b3f      	ldr	r3, [pc, #252]	; (80032d4 <HAL_ADC_Init+0x2f8>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	69b9      	ldr	r1, [r7, #24]
 80031de:	430b      	orrs	r3, r1
 80031e0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fed2 	bl	8002f90 <LL_ADC_REG_IsConversionOngoing>
 80031ec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fedf 	bl	8002fb6 <LL_ADC_INJ_IsConversionOngoing>
 80031f8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d14a      	bne.n	8003296 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d147      	bne.n	8003296 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	7d1b      	ldrb	r3, [r3, #20]
 800320a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	4b2f      	ldr	r3, [pc, #188]	; (80032d8 <HAL_ADC_Init+0x2fc>)
 800321c:	4013      	ands	r3, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6812      	ldr	r2, [r2, #0]
 8003222:	69b9      	ldr	r1, [r7, #24]
 8003224:	430b      	orrs	r3, r1
 8003226:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800322e:	2b01      	cmp	r3, #1
 8003230:	d11b      	bne.n	800326a <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	4b27      	ldr	r3, [pc, #156]	; (80032dc <HAL_ADC_Init+0x300>)
 8003240:	4013      	ands	r3, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003246:	3a01      	subs	r2, #1
 8003248:	0411      	lsls	r1, r2, #16
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800324e:	4311      	orrs	r1, r2
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003254:	4311      	orrs	r1, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800325a:	430a      	orrs	r2, r1
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	611a      	str	r2, [r3, #16]
 8003268:	e007      	b.n	800327a <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fdf3 	bl	8003e7c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d120      	bne.n	80032e0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	f023 010f 	bic.w	r1, r3, #15
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	1e5a      	subs	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
 80032b6:	e01b      	b.n	80032f0 <HAL_ADC_Init+0x314>
 80032b8:	20000024 	.word	0x20000024
 80032bc:	053e2d63 	.word	0x053e2d63
 80032c0:	40022000 	.word	0x40022000
 80032c4:	40022100 	.word	0x40022100
 80032c8:	58026000 	.word	0x58026000
 80032cc:	40022300 	.word	0x40022300
 80032d0:	58026300 	.word	0x58026300
 80032d4:	fff0c003 	.word	0xfff0c003
 80032d8:	ffffbffc 	.word	0xffffbffc
 80032dc:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 020f 	bic.w	r2, r2, #15
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f4:	f023 0303 	bic.w	r3, r3, #3
 80032f8:	f043 0201 	orr.w	r2, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54
 8003300:	e007      	b.n	8003312 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003306:	f043 0210 	orr.w	r2, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003312:	7ffb      	ldrb	r3, [r7, #31]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3724      	adds	r7, #36	; 0x24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd90      	pop	{r4, r7, pc}

0800331c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a55      	ldr	r2, [pc, #340]	; (8003484 <HAL_ADC_Start_DMA+0x168>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d004      	beq.n	800333c <HAL_ADC_Start_DMA+0x20>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a54      	ldr	r2, [pc, #336]	; (8003488 <HAL_ADC_Start_DMA+0x16c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d101      	bne.n	8003340 <HAL_ADC_Start_DMA+0x24>
 800333c:	4b53      	ldr	r3, [pc, #332]	; (800348c <HAL_ADC_Start_DMA+0x170>)
 800333e:	e000      	b.n	8003342 <HAL_ADC_Start_DMA+0x26>
 8003340:	4b53      	ldr	r3, [pc, #332]	; (8003490 <HAL_ADC_Start_DMA+0x174>)
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fd66 	bl	8002e14 <LL_ADC_GetMultimode>
 8003348:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fe1e 	bl	8002f90 <LL_ADC_REG_IsConversionOngoing>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	f040 808c 	bne.w	8003474 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_ADC_Start_DMA+0x4e>
 8003366:	2302      	movs	r3, #2
 8003368:	e087      	b.n	800347a <HAL_ADC_Start_DMA+0x15e>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b05      	cmp	r3, #5
 800337c:	d002      	beq.n	8003384 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b09      	cmp	r3, #9
 8003382:	d170      	bne.n	8003466 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fbfb 	bl	8003b80 <ADC_Enable>
 800338a:	4603      	mov	r3, r0
 800338c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800338e:	7dfb      	ldrb	r3, [r7, #23]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d163      	bne.n	800345c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003398:	4b3e      	ldr	r3, [pc, #248]	; (8003494 <HAL_ADC_Start_DMA+0x178>)
 800339a:	4013      	ands	r3, r2
 800339c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a37      	ldr	r2, [pc, #220]	; (8003488 <HAL_ADC_Start_DMA+0x16c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d002      	beq.n	80033b4 <HAL_ADC_Start_DMA+0x98>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	e000      	b.n	80033b6 <HAL_ADC_Start_DMA+0x9a>
 80033b4:	4b33      	ldr	r3, [pc, #204]	; (8003484 <HAL_ADC_Start_DMA+0x168>)
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d002      	beq.n	80033c4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d105      	bne.n	80033d0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d006      	beq.n	80033ea <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	f023 0206 	bic.w	r2, r3, #6
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	659a      	str	r2, [r3, #88]	; 0x58
 80033e8:	e002      	b.n	80033f0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f4:	4a28      	ldr	r2, [pc, #160]	; (8003498 <HAL_ADC_Start_DMA+0x17c>)
 80033f6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fc:	4a27      	ldr	r2, [pc, #156]	; (800349c <HAL_ADC_Start_DMA+0x180>)
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003404:	4a26      	ldr	r2, [pc, #152]	; (80034a0 <HAL_ADC_Start_DMA+0x184>)
 8003406:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	221c      	movs	r2, #28
 800340e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0210 	orr.w	r2, r2, #16
 8003426:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	4619      	mov	r1, r3
 8003432:	4610      	mov	r0, r2
 8003434:	f7ff fc8b 	bl	8002d4e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3340      	adds	r3, #64	; 0x40
 8003442:	4619      	mov	r1, r3
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f001 fcc0 	bl	8004dcc <HAL_DMA_Start_IT>
 800344c:	4603      	mov	r3, r0
 800344e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fd87 	bl	8002f68 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800345a:	e00d      	b.n	8003478 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003464:	e008      	b.n	8003478 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003472:	e001      	b.n	8003478 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003474:	2302      	movs	r3, #2
 8003476:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003478:	7dfb      	ldrb	r3, [r7, #23]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40022000 	.word	0x40022000
 8003488:	40022100 	.word	0x40022100
 800348c:	40022300 	.word	0x40022300
 8003490:	58026300 	.word	0x58026300
 8003494:	fffff0fe 	.word	0xfffff0fe
 8003498:	08003d53 	.word	0x08003d53
 800349c:	08003e2b 	.word	0x08003e2b
 80034a0:	08003e47 	.word	0x08003e47

080034a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034e0:	b590      	push	{r4, r7, lr}
 80034e2:	b0a1      	sub	sp, #132	; 0x84
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4a9d      	ldr	r2, [pc, #628]	; (8003770 <HAL_ADC_ConfigChannel+0x290>)
 80034fa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_ADC_ConfigChannel+0x2a>
 8003506:	2302      	movs	r3, #2
 8003508:	e321      	b.n	8003b4e <HAL_ADC_ConfigChannel+0x66e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff fd3a 	bl	8002f90 <LL_ADC_REG_IsConversionOngoing>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	f040 8306 	bne.w	8003b30 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800352c:	2b00      	cmp	r3, #0
 800352e:	d108      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x62>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	0e9b      	lsrs	r3, r3, #26
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	2201      	movs	r2, #1
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	e016      	b.n	8003570 <HAL_ADC_ConfigChannel+0x90>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800354a:	fa93 f3a3 	rbit	r3, r3
 800354e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003550:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003552:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003554:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800355a:	2320      	movs	r3, #32
 800355c:	e003      	b.n	8003566 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800355e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003560:	fab3 f383 	clz	r3, r3
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	2201      	movs	r2, #1
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	69d1      	ldr	r1, [r2, #28]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	430b      	orrs	r3, r1
 800357c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6859      	ldr	r1, [r3, #4]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	f7ff fbb3 	bl	8002cf6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fcfb 	bl	8002f90 <LL_ADC_REG_IsConversionOngoing>
 800359a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fd08 	bl	8002fb6 <LL_ADC_INJ_IsConversionOngoing>
 80035a6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f040 80b3 	bne.w	8003716 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f040 80af 	bne.w	8003716 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	6819      	ldr	r1, [r3, #0]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	461a      	mov	r2, r3
 80035c6:	f7ff fbd5 	bl	8002d74 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035ca:	4b6a      	ldr	r3, [pc, #424]	; (8003774 <HAL_ADC_ConfigChannel+0x294>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80035d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035d6:	d10b      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x110>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	089b      	lsrs	r3, r3, #2
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	e01d      	b.n	800362c <HAL_ADC_ConfigChannel+0x14c>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10b      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x136>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	089b      	lsrs	r3, r3, #2
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	e00a      	b.n	800362c <HAL_ADC_ConfigChannel+0x14c>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	089b      	lsrs	r3, r3, #2
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b04      	cmp	r3, #4
 8003634:	d027      	beq.n	8003686 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6919      	ldr	r1, [r3, #16]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003644:	f7ff faf0 	bl	8002c28 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	6919      	ldr	r1, [r3, #16]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	7e5b      	ldrb	r3, [r3, #25]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d102      	bne.n	800365e <HAL_ADC_ConfigChannel+0x17e>
 8003658:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800365c:	e000      	b.n	8003660 <HAL_ADC_ConfigChannel+0x180>
 800365e:	2300      	movs	r3, #0
 8003660:	461a      	mov	r2, r3
 8003662:	f7ff fb1a 	bl	8002c9a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6919      	ldr	r1, [r3, #16]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	7e1b      	ldrb	r3, [r3, #24]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d102      	bne.n	800367c <HAL_ADC_ConfigChannel+0x19c>
 8003676:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800367a:	e000      	b.n	800367e <HAL_ADC_ConfigChannel+0x19e>
 800367c:	2300      	movs	r3, #0
 800367e:	461a      	mov	r2, r3
 8003680:	f7ff faf2 	bl	8002c68 <LL_ADC_SetDataRightShift>
 8003684:	e047      	b.n	8003716 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	069b      	lsls	r3, r3, #26
 8003696:	429a      	cmp	r2, r3
 8003698:	d107      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036a8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	069b      	lsls	r3, r3, #26
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d107      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036cc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	069b      	lsls	r3, r3, #26
 80036de:	429a      	cmp	r2, r3
 80036e0:	d107      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036f0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	069b      	lsls	r3, r3, #26
 8003702:	429a      	cmp	r2, r3
 8003704:	d107      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003714:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff fbfe 	bl	8002f1c <LL_ADC_IsEnabled>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	f040 820d 	bne.w	8003b42 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	6819      	ldr	r1, [r3, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	461a      	mov	r2, r3
 8003736:	f7ff fb49 	bl	8002dcc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	4a0c      	ldr	r2, [pc, #48]	; (8003770 <HAL_ADC_ConfigChannel+0x290>)
 8003740:	4293      	cmp	r3, r2
 8003742:	f040 8133 	bne.w	80039ac <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003752:	2b00      	cmp	r3, #0
 8003754:	d110      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x298>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	0e9b      	lsrs	r3, r3, #26
 800375c:	3301      	adds	r3, #1
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	2b09      	cmp	r3, #9
 8003764:	bf94      	ite	ls
 8003766:	2301      	movls	r3, #1
 8003768:	2300      	movhi	r3, #0
 800376a:	b2db      	uxtb	r3, r3
 800376c:	e01e      	b.n	80037ac <HAL_ADC_ConfigChannel+0x2cc>
 800376e:	bf00      	nop
 8003770:	47ff0000 	.word	0x47ff0000
 8003774:	5c001000 	.word	0x5c001000
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003780:	fa93 f3a3 	rbit	r3, r3
 8003784:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003788:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800378a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003790:	2320      	movs	r3, #32
 8003792:	e003      	b.n	800379c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003796:	fab3 f383 	clz	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	3301      	adds	r3, #1
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	2b09      	cmp	r3, #9
 80037a4:	bf94      	ite	ls
 80037a6:	2301      	movls	r3, #1
 80037a8:	2300      	movhi	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d079      	beq.n	80038a4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x2ec>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	0e9b      	lsrs	r3, r3, #26
 80037c2:	3301      	adds	r3, #1
 80037c4:	069b      	lsls	r3, r3, #26
 80037c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037ca:	e015      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x318>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d4:	fa93 f3a3 	rbit	r3, r3
 80037d8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80037da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037dc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80037de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80037e4:	2320      	movs	r3, #32
 80037e6:	e003      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80037e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ea:	fab3 f383 	clz	r3, r3
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	3301      	adds	r3, #1
 80037f2:	069b      	lsls	r3, r3, #26
 80037f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003800:	2b00      	cmp	r3, #0
 8003802:	d109      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x338>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	0e9b      	lsrs	r3, r3, #26
 800380a:	3301      	adds	r3, #1
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2101      	movs	r1, #1
 8003812:	fa01 f303 	lsl.w	r3, r1, r3
 8003816:	e017      	b.n	8003848 <HAL_ADC_ConfigChannel+0x368>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003820:	fa93 f3a3 	rbit	r3, r3
 8003824:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003828:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800382a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003830:	2320      	movs	r3, #32
 8003832:	e003      	b.n	800383c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003836:	fab3 f383 	clz	r3, r3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	3301      	adds	r3, #1
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	2101      	movs	r1, #1
 8003844:	fa01 f303 	lsl.w	r3, r1, r3
 8003848:	ea42 0103 	orr.w	r1, r2, r3
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <HAL_ADC_ConfigChannel+0x38e>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	0e9b      	lsrs	r3, r3, #26
 800385e:	3301      	adds	r3, #1
 8003860:	f003 021f 	and.w	r2, r3, #31
 8003864:	4613      	mov	r3, r2
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	4413      	add	r3, r2
 800386a:	051b      	lsls	r3, r3, #20
 800386c:	e018      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x3c0>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003876:	fa93 f3a3 	rbit	r3, r3
 800387a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003886:	2320      	movs	r3, #32
 8003888:	e003      	b.n	8003892 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388c:	fab3 f383 	clz	r3, r3
 8003890:	b2db      	uxtb	r3, r3
 8003892:	3301      	adds	r3, #1
 8003894:	f003 021f 	and.w	r2, r3, #31
 8003898:	4613      	mov	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	4413      	add	r3, r2
 800389e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a0:	430b      	orrs	r3, r1
 80038a2:	e07e      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d107      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x3e0>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	0e9b      	lsrs	r3, r3, #26
 80038b6:	3301      	adds	r3, #1
 80038b8:	069b      	lsls	r3, r3, #26
 80038ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038be:	e015      	b.n	80038ec <HAL_ADC_ConfigChannel+0x40c>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	fa93 f3a3 	rbit	r3, r3
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80038d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80038d8:	2320      	movs	r3, #32
 80038da:	e003      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80038dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	3301      	adds	r3, #1
 80038e6:	069b      	lsls	r3, r3, #26
 80038e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <HAL_ADC_ConfigChannel+0x42c>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	0e9b      	lsrs	r3, r3, #26
 80038fe:	3301      	adds	r3, #1
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	2101      	movs	r1, #1
 8003906:	fa01 f303 	lsl.w	r3, r1, r3
 800390a:	e017      	b.n	800393c <HAL_ADC_ConfigChannel+0x45c>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	61bb      	str	r3, [r7, #24]
  return result;
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003924:	2320      	movs	r3, #32
 8003926:	e003      	b.n	8003930 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	3301      	adds	r3, #1
 8003932:	f003 031f 	and.w	r3, r3, #31
 8003936:	2101      	movs	r1, #1
 8003938:	fa01 f303 	lsl.w	r3, r1, r3
 800393c:	ea42 0103 	orr.w	r1, r2, r3
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10d      	bne.n	8003968 <HAL_ADC_ConfigChannel+0x488>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	0e9b      	lsrs	r3, r3, #26
 8003952:	3301      	adds	r3, #1
 8003954:	f003 021f 	and.w	r2, r3, #31
 8003958:	4613      	mov	r3, r2
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	4413      	add	r3, r2
 800395e:	3b1e      	subs	r3, #30
 8003960:	051b      	lsls	r3, r3, #20
 8003962:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003966:	e01b      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x4c0>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	fa93 f3a3 	rbit	r3, r3
 8003974:	60fb      	str	r3, [r7, #12]
  return result;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003980:	2320      	movs	r3, #32
 8003982:	e003      	b.n	800398c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	3301      	adds	r3, #1
 800398e:	f003 021f 	and.w	r2, r3, #31
 8003992:	4613      	mov	r3, r2
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	4413      	add	r3, r2
 8003998:	3b1e      	subs	r3, #30
 800399a:	051b      	lsls	r3, r3, #20
 800399c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039a0:	430b      	orrs	r3, r1
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	6892      	ldr	r2, [r2, #8]
 80039a6:	4619      	mov	r1, r3
 80039a8:	f7ff f9e4 	bl	8002d74 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f280 80c6 	bge.w	8003b42 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a67      	ldr	r2, [pc, #412]	; (8003b58 <HAL_ADC_ConfigChannel+0x678>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d004      	beq.n	80039ca <HAL_ADC_ConfigChannel+0x4ea>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a65      	ldr	r2, [pc, #404]	; (8003b5c <HAL_ADC_ConfigChannel+0x67c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d101      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x4ee>
 80039ca:	4b65      	ldr	r3, [pc, #404]	; (8003b60 <HAL_ADC_ConfigChannel+0x680>)
 80039cc:	e000      	b.n	80039d0 <HAL_ADC_ConfigChannel+0x4f0>
 80039ce:	4b65      	ldr	r3, [pc, #404]	; (8003b64 <HAL_ADC_ConfigChannel+0x684>)
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff f91b 	bl	8002c0c <LL_ADC_GetCommonPathInternalCh>
 80039d6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a5e      	ldr	r2, [pc, #376]	; (8003b58 <HAL_ADC_ConfigChannel+0x678>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d004      	beq.n	80039ec <HAL_ADC_ConfigChannel+0x50c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a5d      	ldr	r2, [pc, #372]	; (8003b5c <HAL_ADC_ConfigChannel+0x67c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d10e      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x52a>
 80039ec:	485a      	ldr	r0, [pc, #360]	; (8003b58 <HAL_ADC_ConfigChannel+0x678>)
 80039ee:	f7ff fa95 	bl	8002f1c <LL_ADC_IsEnabled>
 80039f2:	4604      	mov	r4, r0
 80039f4:	4859      	ldr	r0, [pc, #356]	; (8003b5c <HAL_ADC_ConfigChannel+0x67c>)
 80039f6:	f7ff fa91 	bl	8002f1c <LL_ADC_IsEnabled>
 80039fa:	4603      	mov	r3, r0
 80039fc:	4323      	orrs	r3, r4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bf0c      	ite	eq
 8003a02:	2301      	moveq	r3, #1
 8003a04:	2300      	movne	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	e008      	b.n	8003a1c <HAL_ADC_ConfigChannel+0x53c>
 8003a0a:	4857      	ldr	r0, [pc, #348]	; (8003b68 <HAL_ADC_ConfigChannel+0x688>)
 8003a0c:	f7ff fa86 	bl	8002f1c <LL_ADC_IsEnabled>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	bf0c      	ite	eq
 8003a16:	2301      	moveq	r3, #1
 8003a18:	2300      	movne	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d07d      	beq.n	8003b1c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a51      	ldr	r2, [pc, #324]	; (8003b6c <HAL_ADC_ConfigChannel+0x68c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d130      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x5ac>
 8003a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d12b      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a4b      	ldr	r2, [pc, #300]	; (8003b68 <HAL_ADC_ConfigChannel+0x688>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	f040 8081 	bne.w	8003b42 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a44      	ldr	r2, [pc, #272]	; (8003b58 <HAL_ADC_ConfigChannel+0x678>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d004      	beq.n	8003a54 <HAL_ADC_ConfigChannel+0x574>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a43      	ldr	r2, [pc, #268]	; (8003b5c <HAL_ADC_ConfigChannel+0x67c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d101      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x578>
 8003a54:	4a42      	ldr	r2, [pc, #264]	; (8003b60 <HAL_ADC_ConfigChannel+0x680>)
 8003a56:	e000      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x57a>
 8003a58:	4a42      	ldr	r2, [pc, #264]	; (8003b64 <HAL_ADC_ConfigChannel+0x684>)
 8003a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a60:	4619      	mov	r1, r3
 8003a62:	4610      	mov	r0, r2
 8003a64:	f7ff f8bf 	bl	8002be6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a68:	4b41      	ldr	r3, [pc, #260]	; (8003b70 <HAL_ADC_ConfigChannel+0x690>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	099b      	lsrs	r3, r3, #6
 8003a6e:	4a41      	ldr	r2, [pc, #260]	; (8003b74 <HAL_ADC_ConfigChannel+0x694>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	099b      	lsrs	r3, r3, #6
 8003a76:	3301      	adds	r3, #1
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003a7c:	e002      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f9      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a8a:	e05a      	b.n	8003b42 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a39      	ldr	r2, [pc, #228]	; (8003b78 <HAL_ADC_ConfigChannel+0x698>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d11e      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x5f4>
 8003a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d119      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a30      	ldr	r2, [pc, #192]	; (8003b68 <HAL_ADC_ConfigChannel+0x688>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d14b      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a2a      	ldr	r2, [pc, #168]	; (8003b58 <HAL_ADC_ConfigChannel+0x678>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d004      	beq.n	8003abe <HAL_ADC_ConfigChannel+0x5de>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a28      	ldr	r2, [pc, #160]	; (8003b5c <HAL_ADC_ConfigChannel+0x67c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d101      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x5e2>
 8003abe:	4a28      	ldr	r2, [pc, #160]	; (8003b60 <HAL_ADC_ConfigChannel+0x680>)
 8003ac0:	e000      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x5e4>
 8003ac2:	4a28      	ldr	r2, [pc, #160]	; (8003b64 <HAL_ADC_ConfigChannel+0x684>)
 8003ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aca:	4619      	mov	r1, r3
 8003acc:	4610      	mov	r0, r2
 8003ace:	f7ff f88a 	bl	8002be6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ad2:	e036      	b.n	8003b42 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a28      	ldr	r2, [pc, #160]	; (8003b7c <HAL_ADC_ConfigChannel+0x69c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d131      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x662>
 8003ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d12c      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1e      	ldr	r2, [pc, #120]	; (8003b68 <HAL_ADC_ConfigChannel+0x688>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d127      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a18      	ldr	r2, [pc, #96]	; (8003b58 <HAL_ADC_ConfigChannel+0x678>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d004      	beq.n	8003b06 <HAL_ADC_ConfigChannel+0x626>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a16      	ldr	r2, [pc, #88]	; (8003b5c <HAL_ADC_ConfigChannel+0x67c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d101      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x62a>
 8003b06:	4a16      	ldr	r2, [pc, #88]	; (8003b60 <HAL_ADC_ConfigChannel+0x680>)
 8003b08:	e000      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x62c>
 8003b0a:	4a16      	ldr	r2, [pc, #88]	; (8003b64 <HAL_ADC_ConfigChannel+0x684>)
 8003b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b12:	4619      	mov	r1, r3
 8003b14:	4610      	mov	r0, r2
 8003b16:	f7ff f866 	bl	8002be6 <LL_ADC_SetCommonPathInternalCh>
 8003b1a:	e012      	b.n	8003b42 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b20:	f043 0220 	orr.w	r2, r3, #32
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b2e:	e008      	b.n	8003b42 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b34:	f043 0220 	orr.w	r2, r3, #32
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3784      	adds	r7, #132	; 0x84
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd90      	pop	{r4, r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40022000 	.word	0x40022000
 8003b5c:	40022100 	.word	0x40022100
 8003b60:	40022300 	.word	0x40022300
 8003b64:	58026300 	.word	0x58026300
 8003b68:	58026000 	.word	0x58026000
 8003b6c:	cb840000 	.word	0xcb840000
 8003b70:	20000024 	.word	0x20000024
 8003b74:	053e2d63 	.word	0x053e2d63
 8003b78:	c7520000 	.word	0xc7520000
 8003b7c:	cfb80000 	.word	0xcfb80000

08003b80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff f9c5 	bl	8002f1c <LL_ADC_IsEnabled>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d16e      	bne.n	8003c76 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	4b38      	ldr	r3, [pc, #224]	; (8003c80 <ADC_Enable+0x100>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00d      	beq.n	8003bc2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003baa:	f043 0210 	orr.w	r2, r3, #16
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb6:	f043 0201 	orr.w	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e05a      	b.n	8003c78 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff f980 	bl	8002ecc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003bcc:	f7fe ffe0 	bl	8002b90 <HAL_GetTick>
 8003bd0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a2b      	ldr	r2, [pc, #172]	; (8003c84 <ADC_Enable+0x104>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d004      	beq.n	8003be6 <ADC_Enable+0x66>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a29      	ldr	r2, [pc, #164]	; (8003c88 <ADC_Enable+0x108>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d101      	bne.n	8003bea <ADC_Enable+0x6a>
 8003be6:	4b29      	ldr	r3, [pc, #164]	; (8003c8c <ADC_Enable+0x10c>)
 8003be8:	e000      	b.n	8003bec <ADC_Enable+0x6c>
 8003bea:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <ADC_Enable+0x110>)
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff f911 	bl	8002e14 <LL_ADC_GetMultimode>
 8003bf2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a23      	ldr	r2, [pc, #140]	; (8003c88 <ADC_Enable+0x108>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d002      	beq.n	8003c04 <ADC_Enable+0x84>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	e000      	b.n	8003c06 <ADC_Enable+0x86>
 8003c04:	4b1f      	ldr	r3, [pc, #124]	; (8003c84 <ADC_Enable+0x104>)
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d02c      	beq.n	8003c68 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d130      	bne.n	8003c76 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c14:	e028      	b.n	8003c68 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff f97e 	bl	8002f1c <LL_ADC_IsEnabled>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d104      	bne.n	8003c30 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff f94e 	bl	8002ecc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c30:	f7fe ffae 	bl	8002b90 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d914      	bls.n	8003c68 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d00d      	beq.n	8003c68 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c50:	f043 0210 	orr.w	r2, r3, #16
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5c:	f043 0201 	orr.w	r2, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e007      	b.n	8003c78 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d1cf      	bne.n	8003c16 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	8000003f 	.word	0x8000003f
 8003c84:	40022000 	.word	0x40022000
 8003c88:	40022100 	.word	0x40022100
 8003c8c:	40022300 	.word	0x40022300
 8003c90:	58026300 	.word	0x58026300

08003c94 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff f94e 	bl	8002f42 <LL_ADC_IsDisableOngoing>
 8003ca6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff f935 	bl	8002f1c <LL_ADC_IsEnabled>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d047      	beq.n	8003d48 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d144      	bne.n	8003d48 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 030d 	and.w	r3, r3, #13
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d10c      	bne.n	8003ce6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff f90f 	bl	8002ef4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2203      	movs	r2, #3
 8003cdc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003cde:	f7fe ff57 	bl	8002b90 <HAL_GetTick>
 8003ce2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ce4:	e029      	b.n	8003d3a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	f043 0210 	orr.w	r2, r3, #16
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf6:	f043 0201 	orr.w	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e023      	b.n	8003d4a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d02:	f7fe ff45 	bl	8002b90 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d914      	bls.n	8003d3a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00d      	beq.n	8003d3a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	f043 0210 	orr.w	r2, r3, #16
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	f043 0201 	orr.w	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e007      	b.n	8003d4a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1dc      	bne.n	8003d02 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d14b      	bne.n	8003e04 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d021      	beq.n	8003dca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fe ffa0 	bl	8002cd0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d032      	beq.n	8003dfc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d12b      	bne.n	8003dfc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d11f      	bne.n	8003dfc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc0:	f043 0201 	orr.w	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	655a      	str	r2, [r3, #84]	; 0x54
 8003dc8:	e018      	b.n	8003dfc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d111      	bne.n	8003dfc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ddc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df4:	f043 0201 	orr.w	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f7ff fb51 	bl	80034a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e02:	e00e      	b.n	8003e22 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7ff fb5b 	bl	80034cc <HAL_ADC_ErrorCallback>
}
 8003e16:	e004      	b.n	8003e22 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	4798      	blx	r3
}
 8003e22:	bf00      	nop
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7ff fb3d 	bl	80034b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e64:	f043 0204 	orr.w	r2, r3, #4
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7ff fb2d 	bl	80034cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e72:	bf00      	nop
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a79      	ldr	r2, [pc, #484]	; (8004070 <ADC_ConfigureBoostMode+0x1f4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <ADC_ConfigureBoostMode+0x1c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a78      	ldr	r2, [pc, #480]	; (8004074 <ADC_ConfigureBoostMode+0x1f8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d109      	bne.n	8003eac <ADC_ConfigureBoostMode+0x30>
 8003e98:	4b77      	ldr	r3, [pc, #476]	; (8004078 <ADC_ConfigureBoostMode+0x1fc>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf14      	ite	ne
 8003ea4:	2301      	movne	r3, #1
 8003ea6:	2300      	moveq	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	e008      	b.n	8003ebe <ADC_ConfigureBoostMode+0x42>
 8003eac:	4b73      	ldr	r3, [pc, #460]	; (800407c <ADC_ConfigureBoostMode+0x200>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	bf14      	ite	ne
 8003eb8:	2301      	movne	r3, #1
 8003eba:	2300      	moveq	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d01c      	beq.n	8003efc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003ec2:	f003 fe83 	bl	8007bcc <HAL_RCC_GetHCLKFreq>
 8003ec6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ed0:	d010      	beq.n	8003ef4 <ADC_ConfigureBoostMode+0x78>
 8003ed2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ed6:	d871      	bhi.n	8003fbc <ADC_ConfigureBoostMode+0x140>
 8003ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003edc:	d002      	beq.n	8003ee4 <ADC_ConfigureBoostMode+0x68>
 8003ede:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ee2:	d16b      	bne.n	8003fbc <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	0c1b      	lsrs	r3, r3, #16
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef0:	60fb      	str	r3, [r7, #12]
        break;
 8003ef2:	e066      	b.n	8003fc2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	089b      	lsrs	r3, r3, #2
 8003ef8:	60fb      	str	r3, [r7, #12]
        break;
 8003efa:	e062      	b.n	8003fc2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003efc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003f00:	f004 fe00 	bl	8008b04 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f04:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003f0e:	d051      	beq.n	8003fb4 <ADC_ConfigureBoostMode+0x138>
 8003f10:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003f14:	d854      	bhi.n	8003fc0 <ADC_ConfigureBoostMode+0x144>
 8003f16:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003f1a:	d047      	beq.n	8003fac <ADC_ConfigureBoostMode+0x130>
 8003f1c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003f20:	d84e      	bhi.n	8003fc0 <ADC_ConfigureBoostMode+0x144>
 8003f22:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003f26:	d03d      	beq.n	8003fa4 <ADC_ConfigureBoostMode+0x128>
 8003f28:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003f2c:	d848      	bhi.n	8003fc0 <ADC_ConfigureBoostMode+0x144>
 8003f2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f32:	d033      	beq.n	8003f9c <ADC_ConfigureBoostMode+0x120>
 8003f34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f38:	d842      	bhi.n	8003fc0 <ADC_ConfigureBoostMode+0x144>
 8003f3a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003f3e:	d029      	beq.n	8003f94 <ADC_ConfigureBoostMode+0x118>
 8003f40:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003f44:	d83c      	bhi.n	8003fc0 <ADC_ConfigureBoostMode+0x144>
 8003f46:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003f4a:	d01a      	beq.n	8003f82 <ADC_ConfigureBoostMode+0x106>
 8003f4c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003f50:	d836      	bhi.n	8003fc0 <ADC_ConfigureBoostMode+0x144>
 8003f52:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003f56:	d014      	beq.n	8003f82 <ADC_ConfigureBoostMode+0x106>
 8003f58:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003f5c:	d830      	bhi.n	8003fc0 <ADC_ConfigureBoostMode+0x144>
 8003f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f62:	d00e      	beq.n	8003f82 <ADC_ConfigureBoostMode+0x106>
 8003f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f68:	d82a      	bhi.n	8003fc0 <ADC_ConfigureBoostMode+0x144>
 8003f6a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f6e:	d008      	beq.n	8003f82 <ADC_ConfigureBoostMode+0x106>
 8003f70:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f74:	d824      	bhi.n	8003fc0 <ADC_ConfigureBoostMode+0x144>
 8003f76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f7a:	d002      	beq.n	8003f82 <ADC_ConfigureBoostMode+0x106>
 8003f7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f80:	d11e      	bne.n	8003fc0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	0c9b      	lsrs	r3, r3, #18
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f90:	60fb      	str	r3, [r7, #12]
        break;
 8003f92:	e016      	b.n	8003fc2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	091b      	lsrs	r3, r3, #4
 8003f98:	60fb      	str	r3, [r7, #12]
        break;
 8003f9a:	e012      	b.n	8003fc2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	60fb      	str	r3, [r7, #12]
        break;
 8003fa2:	e00e      	b.n	8003fc2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	099b      	lsrs	r3, r3, #6
 8003fa8:	60fb      	str	r3, [r7, #12]
        break;
 8003faa:	e00a      	b.n	8003fc2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	09db      	lsrs	r3, r3, #7
 8003fb0:	60fb      	str	r3, [r7, #12]
        break;
 8003fb2:	e006      	b.n	8003fc2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	0a1b      	lsrs	r3, r3, #8
 8003fb8:	60fb      	str	r3, [r7, #12]
        break;
 8003fba:	e002      	b.n	8003fc2 <ADC_ConfigureBoostMode+0x146>
        break;
 8003fbc:	bf00      	nop
 8003fbe:	e000      	b.n	8003fc2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003fc0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003fc2:	f7fe fdf1 	bl	8002ba8 <HAL_GetREVID>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f241 0203 	movw	r2, #4099	; 0x1003
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d815      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4a2b      	ldr	r2, [pc, #172]	; (8004080 <ADC_ConfigureBoostMode+0x204>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d908      	bls.n	8003fea <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fe6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003fe8:	e03e      	b.n	8004068 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ff8:	609a      	str	r2, [r3, #8]
}
 8003ffa:	e035      	b.n	8004068 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	085b      	lsrs	r3, r3, #1
 8004000:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4a1f      	ldr	r2, [pc, #124]	; (8004084 <ADC_ConfigureBoostMode+0x208>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d808      	bhi.n	800401c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004018:	609a      	str	r2, [r3, #8]
}
 800401a:	e025      	b.n	8004068 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4a1a      	ldr	r2, [pc, #104]	; (8004088 <ADC_ConfigureBoostMode+0x20c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d80a      	bhi.n	800403a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004036:	609a      	str	r2, [r3, #8]
}
 8004038:	e016      	b.n	8004068 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4a13      	ldr	r2, [pc, #76]	; (800408c <ADC_ConfigureBoostMode+0x210>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d80a      	bhi.n	8004058 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004054:	609a      	str	r2, [r3, #8]
}
 8004056:	e007      	b.n	8004068 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004066:	609a      	str	r2, [r3, #8]
}
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40022000 	.word	0x40022000
 8004074:	40022100 	.word	0x40022100
 8004078:	40022300 	.word	0x40022300
 800407c:	58026300 	.word	0x58026300
 8004080:	01312d00 	.word	0x01312d00
 8004084:	005f5e10 	.word	0x005f5e10
 8004088:	00bebc20 	.word	0x00bebc20
 800408c:	017d7840 	.word	0x017d7840

08004090 <LL_ADC_IsEnabled>:
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <LL_ADC_IsEnabled+0x18>
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <LL_ADC_IsEnabled+0x1a>
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <LL_ADC_StartCalibration>:
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <LL_ADC_StartCalibration+0x38>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80040d8:	430a      	orrs	r2, r1
 80040da:	4313      	orrs	r3, r2
 80040dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	609a      	str	r2, [r3, #8]
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	3ffeffc0 	.word	0x3ffeffc0

080040f4 <LL_ADC_IsCalibrationOnGoing>:
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004108:	d101      	bne.n	800410e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <LL_ADC_REG_IsConversionOngoing>:
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b04      	cmp	r3, #4
 800412e:	d101      	bne.n	8004134 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
	...

08004144 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004150:	2300      	movs	r3, #0
 8004152:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_ADCEx_Calibration_Start+0x1e>
 800415e:	2302      	movs	r3, #2
 8004160:	e04c      	b.n	80041fc <HAL_ADCEx_Calibration_Start+0xb8>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f7ff fd92 	bl	8003c94 <ADC_Disable>
 8004170:	4603      	mov	r3, r0
 8004172:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004174:	7dfb      	ldrb	r3, [r7, #23]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d135      	bne.n	80041e6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800417e:	4b21      	ldr	r3, [pc, #132]	; (8004204 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004180:	4013      	ands	r3, r2
 8004182:	f043 0202 	orr.w	r2, r3, #2
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	68b9      	ldr	r1, [r7, #8]
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff ff90 	bl	80040b8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004198:	e014      	b.n	80041c4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	3301      	adds	r3, #1
 800419e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4a19      	ldr	r2, [pc, #100]	; (8004208 <HAL_ADCEx_Calibration_Start+0xc4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d30d      	bcc.n	80041c4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ac:	f023 0312 	bic.w	r3, r3, #18
 80041b0:	f043 0210 	orr.w	r2, r3, #16
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e01b      	b.n	80041fc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff ff93 	bl	80040f4 <LL_ADC_IsCalibrationOnGoing>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e2      	bne.n	800419a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d8:	f023 0303 	bic.w	r3, r3, #3
 80041dc:	f043 0201 	orr.w	r2, r3, #1
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	655a      	str	r2, [r3, #84]	; 0x54
 80041e4:	e005      	b.n	80041f2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ea:	f043 0210 	orr.w	r2, r3, #16
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	ffffeefd 	.word	0xffffeefd
 8004208:	25c3f800 	.word	0x25c3f800

0800420c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b09f      	sub	sp, #124	; 0x7c
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004226:	2302      	movs	r3, #2
 8004228:	e0be      	b.n	80043a8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004232:	2300      	movs	r3, #0
 8004234:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004236:	2300      	movs	r3, #0
 8004238:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a5c      	ldr	r2, [pc, #368]	; (80043b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d102      	bne.n	800424a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004244:	4b5b      	ldr	r3, [pc, #364]	; (80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	e001      	b.n	800424e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800424a:	2300      	movs	r3, #0
 800424c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10b      	bne.n	800426c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004258:	f043 0220 	orr.w	r2, r3, #32
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e09d      	b.n	80043a8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff ff54 	bl	800411c <LL_ADC_REG_IsConversionOngoing>
 8004274:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff ff4e 	bl	800411c <LL_ADC_REG_IsConversionOngoing>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d17f      	bne.n	8004386 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004288:	2b00      	cmp	r3, #0
 800428a:	d17c      	bne.n	8004386 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a47      	ldr	r2, [pc, #284]	; (80043b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d004      	beq.n	80042a0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a46      	ldr	r2, [pc, #280]	; (80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d101      	bne.n	80042a4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80042a0:	4b45      	ldr	r3, [pc, #276]	; (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80042a2:	e000      	b.n	80042a6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80042a4:	4b45      	ldr	r3, [pc, #276]	; (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80042a6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d039      	beq.n	8004324 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80042b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	431a      	orrs	r2, r3
 80042be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a3a      	ldr	r2, [pc, #232]	; (80043b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d004      	beq.n	80042d6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a38      	ldr	r2, [pc, #224]	; (80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d10e      	bne.n	80042f4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80042d6:	4836      	ldr	r0, [pc, #216]	; (80043b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042d8:	f7ff feda 	bl	8004090 <LL_ADC_IsEnabled>
 80042dc:	4604      	mov	r4, r0
 80042de:	4835      	ldr	r0, [pc, #212]	; (80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042e0:	f7ff fed6 	bl	8004090 <LL_ADC_IsEnabled>
 80042e4:	4603      	mov	r3, r0
 80042e6:	4323      	orrs	r3, r4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bf0c      	ite	eq
 80042ec:	2301      	moveq	r3, #1
 80042ee:	2300      	movne	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	e008      	b.n	8004306 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80042f4:	4832      	ldr	r0, [pc, #200]	; (80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80042f6:	f7ff fecb 	bl	8004090 <LL_ADC_IsEnabled>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bf0c      	ite	eq
 8004300:	2301      	moveq	r3, #1
 8004302:	2300      	movne	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d047      	beq.n	800439a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800430a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	4b2d      	ldr	r3, [pc, #180]	; (80043c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004310:	4013      	ands	r3, r2
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	6811      	ldr	r1, [r2, #0]
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	6892      	ldr	r2, [r2, #8]
 800431a:	430a      	orrs	r2, r1
 800431c:	431a      	orrs	r2, r3
 800431e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004320:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004322:	e03a      	b.n	800439a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800432c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d004      	beq.n	8004344 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a1d      	ldr	r2, [pc, #116]	; (80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d10e      	bne.n	8004362 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004344:	481a      	ldr	r0, [pc, #104]	; (80043b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004346:	f7ff fea3 	bl	8004090 <LL_ADC_IsEnabled>
 800434a:	4604      	mov	r4, r0
 800434c:	4819      	ldr	r0, [pc, #100]	; (80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800434e:	f7ff fe9f 	bl	8004090 <LL_ADC_IsEnabled>
 8004352:	4603      	mov	r3, r0
 8004354:	4323      	orrs	r3, r4
 8004356:	2b00      	cmp	r3, #0
 8004358:	bf0c      	ite	eq
 800435a:	2301      	moveq	r3, #1
 800435c:	2300      	movne	r3, #0
 800435e:	b2db      	uxtb	r3, r3
 8004360:	e008      	b.n	8004374 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004362:	4817      	ldr	r0, [pc, #92]	; (80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004364:	f7ff fe94 	bl	8004090 <LL_ADC_IsEnabled>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	bf0c      	ite	eq
 800436e:	2301      	moveq	r3, #1
 8004370:	2300      	movne	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d010      	beq.n	800439a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800437e:	4013      	ands	r3, r2
 8004380:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004382:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004384:	e009      	b.n	800439a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	f043 0220 	orr.w	r2, r3, #32
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004398:	e000      	b.n	800439c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800439a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	377c      	adds	r7, #124	; 0x7c
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd90      	pop	{r4, r7, pc}
 80043b0:	40022000 	.word	0x40022000
 80043b4:	40022100 	.word	0x40022100
 80043b8:	40022300 	.word	0x40022300
 80043bc:	58026300 	.word	0x58026300
 80043c0:	58026000 	.word	0x58026000
 80043c4:	fffff0e0 	.word	0xfffff0e0

080043c8 <__NVIC_SetPriorityGrouping>:
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <__NVIC_SetPriorityGrouping+0x40>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043e4:	4013      	ands	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80043f0:	4b06      	ldr	r3, [pc, #24]	; (800440c <__NVIC_SetPriorityGrouping+0x44>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043f6:	4a04      	ldr	r2, [pc, #16]	; (8004408 <__NVIC_SetPriorityGrouping+0x40>)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	60d3      	str	r3, [r2, #12]
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	e000ed00 	.word	0xe000ed00
 800440c:	05fa0000 	.word	0x05fa0000

08004410 <__NVIC_GetPriorityGrouping>:
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004414:	4b04      	ldr	r3, [pc, #16]	; (8004428 <__NVIC_GetPriorityGrouping+0x18>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	0a1b      	lsrs	r3, r3, #8
 800441a:	f003 0307 	and.w	r3, r3, #7
}
 800441e:	4618      	mov	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	e000ed00 	.word	0xe000ed00

0800442c <__NVIC_EnableIRQ>:
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800443a:	2b00      	cmp	r3, #0
 800443c:	db0b      	blt.n	8004456 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	f003 021f 	and.w	r2, r3, #31
 8004444:	4907      	ldr	r1, [pc, #28]	; (8004464 <__NVIC_EnableIRQ+0x38>)
 8004446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	2001      	movs	r0, #1
 800444e:	fa00 f202 	lsl.w	r2, r0, r2
 8004452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	e000e100 	.word	0xe000e100

08004468 <__NVIC_SetPriority>:
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	6039      	str	r1, [r7, #0]
 8004472:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004474:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004478:	2b00      	cmp	r3, #0
 800447a:	db0a      	blt.n	8004492 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	b2da      	uxtb	r2, r3
 8004480:	490c      	ldr	r1, [pc, #48]	; (80044b4 <__NVIC_SetPriority+0x4c>)
 8004482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004486:	0112      	lsls	r2, r2, #4
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	440b      	add	r3, r1
 800448c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004490:	e00a      	b.n	80044a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	4908      	ldr	r1, [pc, #32]	; (80044b8 <__NVIC_SetPriority+0x50>)
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	3b04      	subs	r3, #4
 80044a0:	0112      	lsls	r2, r2, #4
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	440b      	add	r3, r1
 80044a6:	761a      	strb	r2, [r3, #24]
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	e000e100 	.word	0xe000e100
 80044b8:	e000ed00 	.word	0xe000ed00

080044bc <NVIC_EncodePriority>:
{
 80044bc:	b480      	push	{r7}
 80044be:	b089      	sub	sp, #36	; 0x24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f1c3 0307 	rsb	r3, r3, #7
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	bf28      	it	cs
 80044da:	2304      	movcs	r3, #4
 80044dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	3304      	adds	r3, #4
 80044e2:	2b06      	cmp	r3, #6
 80044e4:	d902      	bls.n	80044ec <NVIC_EncodePriority+0x30>
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	3b03      	subs	r3, #3
 80044ea:	e000      	b.n	80044ee <NVIC_EncodePriority+0x32>
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f0:	f04f 32ff 	mov.w	r2, #4294967295
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	43da      	mvns	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	401a      	ands	r2, r3
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004504:	f04f 31ff 	mov.w	r1, #4294967295
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	fa01 f303 	lsl.w	r3, r1, r3
 800450e:	43d9      	mvns	r1, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004514:	4313      	orrs	r3, r2
}
 8004516:	4618      	mov	r0, r3
 8004518:	3724      	adds	r7, #36	; 0x24
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
	...

08004524 <__NVIC_SystemReset>:
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004528:	f3bf 8f4f 	dsb	sy
}
 800452c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800452e:	4b06      	ldr	r3, [pc, #24]	; (8004548 <__NVIC_SystemReset+0x24>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004536:	4904      	ldr	r1, [pc, #16]	; (8004548 <__NVIC_SystemReset+0x24>)
 8004538:	4b04      	ldr	r3, [pc, #16]	; (800454c <__NVIC_SystemReset+0x28>)
 800453a:	4313      	orrs	r3, r2
 800453c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800453e:	f3bf 8f4f 	dsb	sy
}
 8004542:	bf00      	nop
    __NOP();
 8004544:	bf00      	nop
 8004546:	e7fd      	b.n	8004544 <__NVIC_SystemReset+0x20>
 8004548:	e000ed00 	.word	0xe000ed00
 800454c:	05fa0004 	.word	0x05fa0004

08004550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3b01      	subs	r3, #1
 800455c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004560:	d301      	bcc.n	8004566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004562:	2301      	movs	r3, #1
 8004564:	e00f      	b.n	8004586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004566:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <SysTick_Config+0x40>)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3b01      	subs	r3, #1
 800456c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800456e:	210f      	movs	r1, #15
 8004570:	f04f 30ff 	mov.w	r0, #4294967295
 8004574:	f7ff ff78 	bl	8004468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <SysTick_Config+0x40>)
 800457a:	2200      	movs	r2, #0
 800457c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800457e:	4b04      	ldr	r3, [pc, #16]	; (8004590 <SysTick_Config+0x40>)
 8004580:	2207      	movs	r2, #7
 8004582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	e000e010 	.word	0xe000e010

08004594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7ff ff13 	bl	80043c8 <__NVIC_SetPriorityGrouping>
}
 80045a2:	bf00      	nop
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b086      	sub	sp, #24
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	4603      	mov	r3, r0
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045b8:	f7ff ff2a 	bl	8004410 <__NVIC_GetPriorityGrouping>
 80045bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	68b9      	ldr	r1, [r7, #8]
 80045c2:	6978      	ldr	r0, [r7, #20]
 80045c4:	f7ff ff7a 	bl	80044bc <NVIC_EncodePriority>
 80045c8:	4602      	mov	r2, r0
 80045ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045ce:	4611      	mov	r1, r2
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff ff49 	bl	8004468 <__NVIC_SetPriority>
}
 80045d6:	bf00      	nop
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	4603      	mov	r3, r0
 80045e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff ff1d 	bl	800442c <__NVIC_EnableIRQ>
}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80045fe:	f7ff ff91 	bl	8004524 <__NVIC_SystemReset>

08004602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff ffa0 	bl	8004550 <SysTick_Config>
 8004610:	4603      	mov	r3, r0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004620:	f3bf 8f5f 	dmb	sy
}
 8004624:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004626:	4b07      	ldr	r3, [pc, #28]	; (8004644 <HAL_MPU_Disable+0x28>)
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	4a06      	ldr	r2, [pc, #24]	; (8004644 <HAL_MPU_Disable+0x28>)
 800462c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004630:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004632:	4b05      	ldr	r3, [pc, #20]	; (8004648 <HAL_MPU_Disable+0x2c>)
 8004634:	2200      	movs	r2, #0
 8004636:	605a      	str	r2, [r3, #4]
}
 8004638:	bf00      	nop
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	e000ed00 	.word	0xe000ed00
 8004648:	e000ed90 	.word	0xe000ed90

0800464c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004654:	4a0b      	ldr	r2, [pc, #44]	; (8004684 <HAL_MPU_Enable+0x38>)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800465e:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <HAL_MPU_Enable+0x3c>)
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	4a09      	ldr	r2, [pc, #36]	; (8004688 <HAL_MPU_Enable+0x3c>)
 8004664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004668:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800466a:	f3bf 8f4f 	dsb	sy
}
 800466e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004670:	f3bf 8f6f 	isb	sy
}
 8004674:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	e000ed90 	.word	0xe000ed90
 8004688:	e000ed00 	.word	0xe000ed00

0800468c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	785a      	ldrb	r2, [r3, #1]
 8004698:	4b1d      	ldr	r3, [pc, #116]	; (8004710 <HAL_MPU_ConfigRegion+0x84>)
 800469a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d029      	beq.n	80046f8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80046a4:	4a1a      	ldr	r2, [pc, #104]	; (8004710 <HAL_MPU_ConfigRegion+0x84>)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	7b1b      	ldrb	r3, [r3, #12]
 80046b0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	7adb      	ldrb	r3, [r3, #11]
 80046b6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80046b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	7a9b      	ldrb	r3, [r3, #10]
 80046be:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80046c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	7b5b      	ldrb	r3, [r3, #13]
 80046c6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80046c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	7b9b      	ldrb	r3, [r3, #14]
 80046ce:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80046d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	7bdb      	ldrb	r3, [r3, #15]
 80046d6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80046d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	7a5b      	ldrb	r3, [r3, #9]
 80046de:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80046e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	7a1b      	ldrb	r3, [r3, #8]
 80046e6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80046e8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	7812      	ldrb	r2, [r2, #0]
 80046ee:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80046f0:	4a07      	ldr	r2, [pc, #28]	; (8004710 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80046f2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80046f4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80046f6:	e005      	b.n	8004704 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <HAL_MPU_ConfigRegion+0x84>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80046fe:	4b04      	ldr	r3, [pc, #16]	; (8004710 <HAL_MPU_ConfigRegion+0x84>)
 8004700:	2200      	movs	r2, #0
 8004702:	611a      	str	r2, [r3, #16]
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	e000ed90 	.word	0xe000ed90

08004714 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800471c:	f7fe fa38 	bl	8002b90 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e316      	b.n	8004d5a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a66      	ldr	r2, [pc, #408]	; (80048cc <HAL_DMA_Init+0x1b8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d04a      	beq.n	80047cc <HAL_DMA_Init+0xb8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a65      	ldr	r2, [pc, #404]	; (80048d0 <HAL_DMA_Init+0x1bc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d045      	beq.n	80047cc <HAL_DMA_Init+0xb8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a63      	ldr	r2, [pc, #396]	; (80048d4 <HAL_DMA_Init+0x1c0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d040      	beq.n	80047cc <HAL_DMA_Init+0xb8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a62      	ldr	r2, [pc, #392]	; (80048d8 <HAL_DMA_Init+0x1c4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d03b      	beq.n	80047cc <HAL_DMA_Init+0xb8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a60      	ldr	r2, [pc, #384]	; (80048dc <HAL_DMA_Init+0x1c8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d036      	beq.n	80047cc <HAL_DMA_Init+0xb8>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a5f      	ldr	r2, [pc, #380]	; (80048e0 <HAL_DMA_Init+0x1cc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d031      	beq.n	80047cc <HAL_DMA_Init+0xb8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a5d      	ldr	r2, [pc, #372]	; (80048e4 <HAL_DMA_Init+0x1d0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d02c      	beq.n	80047cc <HAL_DMA_Init+0xb8>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a5c      	ldr	r2, [pc, #368]	; (80048e8 <HAL_DMA_Init+0x1d4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d027      	beq.n	80047cc <HAL_DMA_Init+0xb8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a5a      	ldr	r2, [pc, #360]	; (80048ec <HAL_DMA_Init+0x1d8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d022      	beq.n	80047cc <HAL_DMA_Init+0xb8>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a59      	ldr	r2, [pc, #356]	; (80048f0 <HAL_DMA_Init+0x1dc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d01d      	beq.n	80047cc <HAL_DMA_Init+0xb8>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a57      	ldr	r2, [pc, #348]	; (80048f4 <HAL_DMA_Init+0x1e0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d018      	beq.n	80047cc <HAL_DMA_Init+0xb8>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a56      	ldr	r2, [pc, #344]	; (80048f8 <HAL_DMA_Init+0x1e4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d013      	beq.n	80047cc <HAL_DMA_Init+0xb8>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a54      	ldr	r2, [pc, #336]	; (80048fc <HAL_DMA_Init+0x1e8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00e      	beq.n	80047cc <HAL_DMA_Init+0xb8>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a53      	ldr	r2, [pc, #332]	; (8004900 <HAL_DMA_Init+0x1ec>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d009      	beq.n	80047cc <HAL_DMA_Init+0xb8>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a51      	ldr	r2, [pc, #324]	; (8004904 <HAL_DMA_Init+0x1f0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <HAL_DMA_Init+0xb8>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a50      	ldr	r2, [pc, #320]	; (8004908 <HAL_DMA_Init+0x1f4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d101      	bne.n	80047d0 <HAL_DMA_Init+0xbc>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <HAL_DMA_Init+0xbe>
 80047d0:	2300      	movs	r3, #0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 813b 	beq.w	8004a4e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a37      	ldr	r2, [pc, #220]	; (80048cc <HAL_DMA_Init+0x1b8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d04a      	beq.n	8004888 <HAL_DMA_Init+0x174>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a36      	ldr	r2, [pc, #216]	; (80048d0 <HAL_DMA_Init+0x1bc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d045      	beq.n	8004888 <HAL_DMA_Init+0x174>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a34      	ldr	r2, [pc, #208]	; (80048d4 <HAL_DMA_Init+0x1c0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d040      	beq.n	8004888 <HAL_DMA_Init+0x174>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a33      	ldr	r2, [pc, #204]	; (80048d8 <HAL_DMA_Init+0x1c4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d03b      	beq.n	8004888 <HAL_DMA_Init+0x174>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a31      	ldr	r2, [pc, #196]	; (80048dc <HAL_DMA_Init+0x1c8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d036      	beq.n	8004888 <HAL_DMA_Init+0x174>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a30      	ldr	r2, [pc, #192]	; (80048e0 <HAL_DMA_Init+0x1cc>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d031      	beq.n	8004888 <HAL_DMA_Init+0x174>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a2e      	ldr	r2, [pc, #184]	; (80048e4 <HAL_DMA_Init+0x1d0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d02c      	beq.n	8004888 <HAL_DMA_Init+0x174>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a2d      	ldr	r2, [pc, #180]	; (80048e8 <HAL_DMA_Init+0x1d4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d027      	beq.n	8004888 <HAL_DMA_Init+0x174>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a2b      	ldr	r2, [pc, #172]	; (80048ec <HAL_DMA_Init+0x1d8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d022      	beq.n	8004888 <HAL_DMA_Init+0x174>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a2a      	ldr	r2, [pc, #168]	; (80048f0 <HAL_DMA_Init+0x1dc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d01d      	beq.n	8004888 <HAL_DMA_Init+0x174>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a28      	ldr	r2, [pc, #160]	; (80048f4 <HAL_DMA_Init+0x1e0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d018      	beq.n	8004888 <HAL_DMA_Init+0x174>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a27      	ldr	r2, [pc, #156]	; (80048f8 <HAL_DMA_Init+0x1e4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d013      	beq.n	8004888 <HAL_DMA_Init+0x174>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a25      	ldr	r2, [pc, #148]	; (80048fc <HAL_DMA_Init+0x1e8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00e      	beq.n	8004888 <HAL_DMA_Init+0x174>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a24      	ldr	r2, [pc, #144]	; (8004900 <HAL_DMA_Init+0x1ec>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d009      	beq.n	8004888 <HAL_DMA_Init+0x174>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a22      	ldr	r2, [pc, #136]	; (8004904 <HAL_DMA_Init+0x1f0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d004      	beq.n	8004888 <HAL_DMA_Init+0x174>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a21      	ldr	r2, [pc, #132]	; (8004908 <HAL_DMA_Init+0x1f4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d108      	bne.n	800489a <HAL_DMA_Init+0x186>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0201 	bic.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	e007      	b.n	80048aa <HAL_DMA_Init+0x196>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0201 	bic.w	r2, r2, #1
 80048a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048aa:	e02f      	b.n	800490c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048ac:	f7fe f970 	bl	8002b90 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b05      	cmp	r3, #5
 80048b8:	d928      	bls.n	800490c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2203      	movs	r2, #3
 80048c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e246      	b.n	8004d5a <HAL_DMA_Init+0x646>
 80048cc:	40020010 	.word	0x40020010
 80048d0:	40020028 	.word	0x40020028
 80048d4:	40020040 	.word	0x40020040
 80048d8:	40020058 	.word	0x40020058
 80048dc:	40020070 	.word	0x40020070
 80048e0:	40020088 	.word	0x40020088
 80048e4:	400200a0 	.word	0x400200a0
 80048e8:	400200b8 	.word	0x400200b8
 80048ec:	40020410 	.word	0x40020410
 80048f0:	40020428 	.word	0x40020428
 80048f4:	40020440 	.word	0x40020440
 80048f8:	40020458 	.word	0x40020458
 80048fc:	40020470 	.word	0x40020470
 8004900:	40020488 	.word	0x40020488
 8004904:	400204a0 	.word	0x400204a0
 8004908:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1c8      	bne.n	80048ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4b83      	ldr	r3, [pc, #524]	; (8004b34 <HAL_DMA_Init+0x420>)
 8004926:	4013      	ands	r3, r2
 8004928:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004932:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800493e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800494a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	2b04      	cmp	r3, #4
 800495e:	d107      	bne.n	8004970 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	4313      	orrs	r3, r2
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004970:	4b71      	ldr	r3, [pc, #452]	; (8004b38 <HAL_DMA_Init+0x424>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	4b71      	ldr	r3, [pc, #452]	; (8004b3c <HAL_DMA_Init+0x428>)
 8004976:	4013      	ands	r3, r2
 8004978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800497c:	d328      	bcc.n	80049d0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b28      	cmp	r3, #40	; 0x28
 8004984:	d903      	bls.n	800498e <HAL_DMA_Init+0x27a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b2e      	cmp	r3, #46	; 0x2e
 800498c:	d917      	bls.n	80049be <HAL_DMA_Init+0x2aa>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b3e      	cmp	r3, #62	; 0x3e
 8004994:	d903      	bls.n	800499e <HAL_DMA_Init+0x28a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b42      	cmp	r3, #66	; 0x42
 800499c:	d90f      	bls.n	80049be <HAL_DMA_Init+0x2aa>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b46      	cmp	r3, #70	; 0x46
 80049a4:	d903      	bls.n	80049ae <HAL_DMA_Init+0x29a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b48      	cmp	r3, #72	; 0x48
 80049ac:	d907      	bls.n	80049be <HAL_DMA_Init+0x2aa>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b4e      	cmp	r3, #78	; 0x4e
 80049b4:	d905      	bls.n	80049c2 <HAL_DMA_Init+0x2ae>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b52      	cmp	r3, #82	; 0x52
 80049bc:	d801      	bhi.n	80049c2 <HAL_DMA_Init+0x2ae>
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <HAL_DMA_Init+0x2b0>
 80049c2:	2300      	movs	r3, #0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f023 0307 	bic.w	r3, r3, #7
 80049e6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d117      	bne.n	8004a2a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00e      	beq.n	8004a2a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f001 fdcf 	bl	80065b0 <DMA_CheckFifoParam>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d008      	beq.n	8004a2a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2240      	movs	r2, #64	; 0x40
 8004a1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e197      	b.n	8004d5a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f001 fd0a 	bl	800644c <DMA_CalcBaseAndBitshift>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a40:	f003 031f 	and.w	r3, r3, #31
 8004a44:	223f      	movs	r2, #63	; 0x3f
 8004a46:	409a      	lsls	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	609a      	str	r2, [r3, #8]
 8004a4c:	e0cd      	b.n	8004bea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a3b      	ldr	r2, [pc, #236]	; (8004b40 <HAL_DMA_Init+0x42c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d022      	beq.n	8004a9e <HAL_DMA_Init+0x38a>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a39      	ldr	r2, [pc, #228]	; (8004b44 <HAL_DMA_Init+0x430>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d01d      	beq.n	8004a9e <HAL_DMA_Init+0x38a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a38      	ldr	r2, [pc, #224]	; (8004b48 <HAL_DMA_Init+0x434>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d018      	beq.n	8004a9e <HAL_DMA_Init+0x38a>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a36      	ldr	r2, [pc, #216]	; (8004b4c <HAL_DMA_Init+0x438>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d013      	beq.n	8004a9e <HAL_DMA_Init+0x38a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a35      	ldr	r2, [pc, #212]	; (8004b50 <HAL_DMA_Init+0x43c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00e      	beq.n	8004a9e <HAL_DMA_Init+0x38a>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a33      	ldr	r2, [pc, #204]	; (8004b54 <HAL_DMA_Init+0x440>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d009      	beq.n	8004a9e <HAL_DMA_Init+0x38a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a32      	ldr	r2, [pc, #200]	; (8004b58 <HAL_DMA_Init+0x444>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d004      	beq.n	8004a9e <HAL_DMA_Init+0x38a>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a30      	ldr	r2, [pc, #192]	; (8004b5c <HAL_DMA_Init+0x448>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d101      	bne.n	8004aa2 <HAL_DMA_Init+0x38e>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <HAL_DMA_Init+0x390>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 8097 	beq.w	8004bd8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a24      	ldr	r2, [pc, #144]	; (8004b40 <HAL_DMA_Init+0x42c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d021      	beq.n	8004af8 <HAL_DMA_Init+0x3e4>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a22      	ldr	r2, [pc, #136]	; (8004b44 <HAL_DMA_Init+0x430>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d01c      	beq.n	8004af8 <HAL_DMA_Init+0x3e4>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a21      	ldr	r2, [pc, #132]	; (8004b48 <HAL_DMA_Init+0x434>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d017      	beq.n	8004af8 <HAL_DMA_Init+0x3e4>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1f      	ldr	r2, [pc, #124]	; (8004b4c <HAL_DMA_Init+0x438>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d012      	beq.n	8004af8 <HAL_DMA_Init+0x3e4>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1e      	ldr	r2, [pc, #120]	; (8004b50 <HAL_DMA_Init+0x43c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00d      	beq.n	8004af8 <HAL_DMA_Init+0x3e4>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1c      	ldr	r2, [pc, #112]	; (8004b54 <HAL_DMA_Init+0x440>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d008      	beq.n	8004af8 <HAL_DMA_Init+0x3e4>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1b      	ldr	r2, [pc, #108]	; (8004b58 <HAL_DMA_Init+0x444>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d003      	beq.n	8004af8 <HAL_DMA_Init+0x3e4>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a19      	ldr	r2, [pc, #100]	; (8004b5c <HAL_DMA_Init+0x448>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4b12      	ldr	r3, [pc, #72]	; (8004b60 <HAL_DMA_Init+0x44c>)
 8004b16:	4013      	ands	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2b40      	cmp	r3, #64	; 0x40
 8004b20:	d020      	beq.n	8004b64 <HAL_DMA_Init+0x450>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	2b80      	cmp	r3, #128	; 0x80
 8004b28:	d102      	bne.n	8004b30 <HAL_DMA_Init+0x41c>
 8004b2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b2e:	e01a      	b.n	8004b66 <HAL_DMA_Init+0x452>
 8004b30:	2300      	movs	r3, #0
 8004b32:	e018      	b.n	8004b66 <HAL_DMA_Init+0x452>
 8004b34:	fe10803f 	.word	0xfe10803f
 8004b38:	5c001000 	.word	0x5c001000
 8004b3c:	ffff0000 	.word	0xffff0000
 8004b40:	58025408 	.word	0x58025408
 8004b44:	5802541c 	.word	0x5802541c
 8004b48:	58025430 	.word	0x58025430
 8004b4c:	58025444 	.word	0x58025444
 8004b50:	58025458 	.word	0x58025458
 8004b54:	5802546c 	.word	0x5802546c
 8004b58:	58025480 	.word	0x58025480
 8004b5c:	58025494 	.word	0x58025494
 8004b60:	fffe000f 	.word	0xfffe000f
 8004b64:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	68d2      	ldr	r2, [r2, #12]
 8004b6a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b94:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	4b6e      	ldr	r3, [pc, #440]	; (8004d64 <HAL_DMA_Init+0x650>)
 8004bac:	4413      	add	r3, r2
 8004bae:	4a6e      	ldr	r2, [pc, #440]	; (8004d68 <HAL_DMA_Init+0x654>)
 8004bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb4:	091b      	lsrs	r3, r3, #4
 8004bb6:	009a      	lsls	r2, r3, #2
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f001 fc45 	bl	800644c <DMA_CalcBaseAndBitshift>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bca:	f003 031f 	and.w	r3, r3, #31
 8004bce:	2201      	movs	r2, #1
 8004bd0:	409a      	lsls	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	605a      	str	r2, [r3, #4]
 8004bd6:	e008      	b.n	8004bea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2240      	movs	r2, #64	; 0x40
 8004bdc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2203      	movs	r2, #3
 8004be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e0b7      	b.n	8004d5a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a5f      	ldr	r2, [pc, #380]	; (8004d6c <HAL_DMA_Init+0x658>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d072      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a5d      	ldr	r2, [pc, #372]	; (8004d70 <HAL_DMA_Init+0x65c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d06d      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a5c      	ldr	r2, [pc, #368]	; (8004d74 <HAL_DMA_Init+0x660>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d068      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a5a      	ldr	r2, [pc, #360]	; (8004d78 <HAL_DMA_Init+0x664>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d063      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a59      	ldr	r2, [pc, #356]	; (8004d7c <HAL_DMA_Init+0x668>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d05e      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a57      	ldr	r2, [pc, #348]	; (8004d80 <HAL_DMA_Init+0x66c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d059      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a56      	ldr	r2, [pc, #344]	; (8004d84 <HAL_DMA_Init+0x670>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d054      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a54      	ldr	r2, [pc, #336]	; (8004d88 <HAL_DMA_Init+0x674>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d04f      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a53      	ldr	r2, [pc, #332]	; (8004d8c <HAL_DMA_Init+0x678>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d04a      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a51      	ldr	r2, [pc, #324]	; (8004d90 <HAL_DMA_Init+0x67c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d045      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a50      	ldr	r2, [pc, #320]	; (8004d94 <HAL_DMA_Init+0x680>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d040      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a4e      	ldr	r2, [pc, #312]	; (8004d98 <HAL_DMA_Init+0x684>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d03b      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a4d      	ldr	r2, [pc, #308]	; (8004d9c <HAL_DMA_Init+0x688>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d036      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a4b      	ldr	r2, [pc, #300]	; (8004da0 <HAL_DMA_Init+0x68c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d031      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a4a      	ldr	r2, [pc, #296]	; (8004da4 <HAL_DMA_Init+0x690>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d02c      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a48      	ldr	r2, [pc, #288]	; (8004da8 <HAL_DMA_Init+0x694>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d027      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a47      	ldr	r2, [pc, #284]	; (8004dac <HAL_DMA_Init+0x698>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d022      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a45      	ldr	r2, [pc, #276]	; (8004db0 <HAL_DMA_Init+0x69c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d01d      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a44      	ldr	r2, [pc, #272]	; (8004db4 <HAL_DMA_Init+0x6a0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d018      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a42      	ldr	r2, [pc, #264]	; (8004db8 <HAL_DMA_Init+0x6a4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a41      	ldr	r2, [pc, #260]	; (8004dbc <HAL_DMA_Init+0x6a8>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00e      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a3f      	ldr	r2, [pc, #252]	; (8004dc0 <HAL_DMA_Init+0x6ac>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d009      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a3e      	ldr	r2, [pc, #248]	; (8004dc4 <HAL_DMA_Init+0x6b0>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d004      	beq.n	8004cda <HAL_DMA_Init+0x5c6>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a3c      	ldr	r2, [pc, #240]	; (8004dc8 <HAL_DMA_Init+0x6b4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d101      	bne.n	8004cde <HAL_DMA_Init+0x5ca>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <HAL_DMA_Init+0x5cc>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d032      	beq.n	8004d4a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f001 fcdf 	bl	80066a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2b80      	cmp	r3, #128	; 0x80
 8004cf0:	d102      	bne.n	8004cf8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d0c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d010      	beq.n	8004d38 <HAL_DMA_Init+0x624>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d80c      	bhi.n	8004d38 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f001 fd5c 	bl	80067dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d34:	605a      	str	r2, [r3, #4]
 8004d36:	e008      	b.n	8004d4a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	a7fdabf8 	.word	0xa7fdabf8
 8004d68:	cccccccd 	.word	0xcccccccd
 8004d6c:	40020010 	.word	0x40020010
 8004d70:	40020028 	.word	0x40020028
 8004d74:	40020040 	.word	0x40020040
 8004d78:	40020058 	.word	0x40020058
 8004d7c:	40020070 	.word	0x40020070
 8004d80:	40020088 	.word	0x40020088
 8004d84:	400200a0 	.word	0x400200a0
 8004d88:	400200b8 	.word	0x400200b8
 8004d8c:	40020410 	.word	0x40020410
 8004d90:	40020428 	.word	0x40020428
 8004d94:	40020440 	.word	0x40020440
 8004d98:	40020458 	.word	0x40020458
 8004d9c:	40020470 	.word	0x40020470
 8004da0:	40020488 	.word	0x40020488
 8004da4:	400204a0 	.word	0x400204a0
 8004da8:	400204b8 	.word	0x400204b8
 8004dac:	58025408 	.word	0x58025408
 8004db0:	5802541c 	.word	0x5802541c
 8004db4:	58025430 	.word	0x58025430
 8004db8:	58025444 	.word	0x58025444
 8004dbc:	58025458 	.word	0x58025458
 8004dc0:	5802546c 	.word	0x5802546c
 8004dc4:	58025480 	.word	0x58025480
 8004dc8:	58025494 	.word	0x58025494

08004dcc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e226      	b.n	8005236 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d101      	bne.n	8004df6 <HAL_DMA_Start_IT+0x2a>
 8004df2:	2302      	movs	r3, #2
 8004df4:	e21f      	b.n	8005236 <HAL_DMA_Start_IT+0x46a>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	f040 820a 	bne.w	8005220 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a68      	ldr	r2, [pc, #416]	; (8004fc0 <HAL_DMA_Start_IT+0x1f4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d04a      	beq.n	8004eba <HAL_DMA_Start_IT+0xee>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a66      	ldr	r2, [pc, #408]	; (8004fc4 <HAL_DMA_Start_IT+0x1f8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d045      	beq.n	8004eba <HAL_DMA_Start_IT+0xee>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a65      	ldr	r2, [pc, #404]	; (8004fc8 <HAL_DMA_Start_IT+0x1fc>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d040      	beq.n	8004eba <HAL_DMA_Start_IT+0xee>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a63      	ldr	r2, [pc, #396]	; (8004fcc <HAL_DMA_Start_IT+0x200>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d03b      	beq.n	8004eba <HAL_DMA_Start_IT+0xee>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a62      	ldr	r2, [pc, #392]	; (8004fd0 <HAL_DMA_Start_IT+0x204>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d036      	beq.n	8004eba <HAL_DMA_Start_IT+0xee>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a60      	ldr	r2, [pc, #384]	; (8004fd4 <HAL_DMA_Start_IT+0x208>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d031      	beq.n	8004eba <HAL_DMA_Start_IT+0xee>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a5f      	ldr	r2, [pc, #380]	; (8004fd8 <HAL_DMA_Start_IT+0x20c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d02c      	beq.n	8004eba <HAL_DMA_Start_IT+0xee>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a5d      	ldr	r2, [pc, #372]	; (8004fdc <HAL_DMA_Start_IT+0x210>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d027      	beq.n	8004eba <HAL_DMA_Start_IT+0xee>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a5c      	ldr	r2, [pc, #368]	; (8004fe0 <HAL_DMA_Start_IT+0x214>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d022      	beq.n	8004eba <HAL_DMA_Start_IT+0xee>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a5a      	ldr	r2, [pc, #360]	; (8004fe4 <HAL_DMA_Start_IT+0x218>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d01d      	beq.n	8004eba <HAL_DMA_Start_IT+0xee>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a59      	ldr	r2, [pc, #356]	; (8004fe8 <HAL_DMA_Start_IT+0x21c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d018      	beq.n	8004eba <HAL_DMA_Start_IT+0xee>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a57      	ldr	r2, [pc, #348]	; (8004fec <HAL_DMA_Start_IT+0x220>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d013      	beq.n	8004eba <HAL_DMA_Start_IT+0xee>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a56      	ldr	r2, [pc, #344]	; (8004ff0 <HAL_DMA_Start_IT+0x224>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00e      	beq.n	8004eba <HAL_DMA_Start_IT+0xee>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a54      	ldr	r2, [pc, #336]	; (8004ff4 <HAL_DMA_Start_IT+0x228>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d009      	beq.n	8004eba <HAL_DMA_Start_IT+0xee>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a53      	ldr	r2, [pc, #332]	; (8004ff8 <HAL_DMA_Start_IT+0x22c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d004      	beq.n	8004eba <HAL_DMA_Start_IT+0xee>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a51      	ldr	r2, [pc, #324]	; (8004ffc <HAL_DMA_Start_IT+0x230>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d108      	bne.n	8004ecc <HAL_DMA_Start_IT+0x100>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0201 	bic.w	r2, r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	e007      	b.n	8004edc <HAL_DMA_Start_IT+0x110>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0201 	bic.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f001 f906 	bl	80060f4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a34      	ldr	r2, [pc, #208]	; (8004fc0 <HAL_DMA_Start_IT+0x1f4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d04a      	beq.n	8004f88 <HAL_DMA_Start_IT+0x1bc>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a33      	ldr	r2, [pc, #204]	; (8004fc4 <HAL_DMA_Start_IT+0x1f8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d045      	beq.n	8004f88 <HAL_DMA_Start_IT+0x1bc>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a31      	ldr	r2, [pc, #196]	; (8004fc8 <HAL_DMA_Start_IT+0x1fc>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d040      	beq.n	8004f88 <HAL_DMA_Start_IT+0x1bc>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a30      	ldr	r2, [pc, #192]	; (8004fcc <HAL_DMA_Start_IT+0x200>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d03b      	beq.n	8004f88 <HAL_DMA_Start_IT+0x1bc>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a2e      	ldr	r2, [pc, #184]	; (8004fd0 <HAL_DMA_Start_IT+0x204>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d036      	beq.n	8004f88 <HAL_DMA_Start_IT+0x1bc>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a2d      	ldr	r2, [pc, #180]	; (8004fd4 <HAL_DMA_Start_IT+0x208>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d031      	beq.n	8004f88 <HAL_DMA_Start_IT+0x1bc>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a2b      	ldr	r2, [pc, #172]	; (8004fd8 <HAL_DMA_Start_IT+0x20c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d02c      	beq.n	8004f88 <HAL_DMA_Start_IT+0x1bc>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a2a      	ldr	r2, [pc, #168]	; (8004fdc <HAL_DMA_Start_IT+0x210>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d027      	beq.n	8004f88 <HAL_DMA_Start_IT+0x1bc>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a28      	ldr	r2, [pc, #160]	; (8004fe0 <HAL_DMA_Start_IT+0x214>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d022      	beq.n	8004f88 <HAL_DMA_Start_IT+0x1bc>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a27      	ldr	r2, [pc, #156]	; (8004fe4 <HAL_DMA_Start_IT+0x218>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d01d      	beq.n	8004f88 <HAL_DMA_Start_IT+0x1bc>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a25      	ldr	r2, [pc, #148]	; (8004fe8 <HAL_DMA_Start_IT+0x21c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d018      	beq.n	8004f88 <HAL_DMA_Start_IT+0x1bc>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a24      	ldr	r2, [pc, #144]	; (8004fec <HAL_DMA_Start_IT+0x220>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d013      	beq.n	8004f88 <HAL_DMA_Start_IT+0x1bc>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a22      	ldr	r2, [pc, #136]	; (8004ff0 <HAL_DMA_Start_IT+0x224>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00e      	beq.n	8004f88 <HAL_DMA_Start_IT+0x1bc>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a21      	ldr	r2, [pc, #132]	; (8004ff4 <HAL_DMA_Start_IT+0x228>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d009      	beq.n	8004f88 <HAL_DMA_Start_IT+0x1bc>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1f      	ldr	r2, [pc, #124]	; (8004ff8 <HAL_DMA_Start_IT+0x22c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d004      	beq.n	8004f88 <HAL_DMA_Start_IT+0x1bc>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1e      	ldr	r2, [pc, #120]	; (8004ffc <HAL_DMA_Start_IT+0x230>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d101      	bne.n	8004f8c <HAL_DMA_Start_IT+0x1c0>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <HAL_DMA_Start_IT+0x1c2>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d036      	beq.n	8005000 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f023 021e 	bic.w	r2, r3, #30
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f042 0216 	orr.w	r2, r2, #22
 8004fa4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d03e      	beq.n	800502c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0208 	orr.w	r2, r2, #8
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	e035      	b.n	800502c <HAL_DMA_Start_IT+0x260>
 8004fc0:	40020010 	.word	0x40020010
 8004fc4:	40020028 	.word	0x40020028
 8004fc8:	40020040 	.word	0x40020040
 8004fcc:	40020058 	.word	0x40020058
 8004fd0:	40020070 	.word	0x40020070
 8004fd4:	40020088 	.word	0x40020088
 8004fd8:	400200a0 	.word	0x400200a0
 8004fdc:	400200b8 	.word	0x400200b8
 8004fe0:	40020410 	.word	0x40020410
 8004fe4:	40020428 	.word	0x40020428
 8004fe8:	40020440 	.word	0x40020440
 8004fec:	40020458 	.word	0x40020458
 8004ff0:	40020470 	.word	0x40020470
 8004ff4:	40020488 	.word	0x40020488
 8004ff8:	400204a0 	.word	0x400204a0
 8004ffc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f023 020e 	bic.w	r2, r3, #14
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 020a 	orr.w	r2, r2, #10
 8005012:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	2b00      	cmp	r3, #0
 800501a:	d007      	beq.n	800502c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0204 	orr.w	r2, r2, #4
 800502a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a83      	ldr	r2, [pc, #524]	; (8005240 <HAL_DMA_Start_IT+0x474>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d072      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a82      	ldr	r2, [pc, #520]	; (8005244 <HAL_DMA_Start_IT+0x478>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d06d      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a80      	ldr	r2, [pc, #512]	; (8005248 <HAL_DMA_Start_IT+0x47c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d068      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a7f      	ldr	r2, [pc, #508]	; (800524c <HAL_DMA_Start_IT+0x480>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d063      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a7d      	ldr	r2, [pc, #500]	; (8005250 <HAL_DMA_Start_IT+0x484>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d05e      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a7c      	ldr	r2, [pc, #496]	; (8005254 <HAL_DMA_Start_IT+0x488>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d059      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a7a      	ldr	r2, [pc, #488]	; (8005258 <HAL_DMA_Start_IT+0x48c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d054      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a79      	ldr	r2, [pc, #484]	; (800525c <HAL_DMA_Start_IT+0x490>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d04f      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a77      	ldr	r2, [pc, #476]	; (8005260 <HAL_DMA_Start_IT+0x494>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d04a      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a76      	ldr	r2, [pc, #472]	; (8005264 <HAL_DMA_Start_IT+0x498>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d045      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a74      	ldr	r2, [pc, #464]	; (8005268 <HAL_DMA_Start_IT+0x49c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d040      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a73      	ldr	r2, [pc, #460]	; (800526c <HAL_DMA_Start_IT+0x4a0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d03b      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a71      	ldr	r2, [pc, #452]	; (8005270 <HAL_DMA_Start_IT+0x4a4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d036      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a70      	ldr	r2, [pc, #448]	; (8005274 <HAL_DMA_Start_IT+0x4a8>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d031      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a6e      	ldr	r2, [pc, #440]	; (8005278 <HAL_DMA_Start_IT+0x4ac>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d02c      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a6d      	ldr	r2, [pc, #436]	; (800527c <HAL_DMA_Start_IT+0x4b0>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d027      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a6b      	ldr	r2, [pc, #428]	; (8005280 <HAL_DMA_Start_IT+0x4b4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d022      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a6a      	ldr	r2, [pc, #424]	; (8005284 <HAL_DMA_Start_IT+0x4b8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d01d      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a68      	ldr	r2, [pc, #416]	; (8005288 <HAL_DMA_Start_IT+0x4bc>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d018      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a67      	ldr	r2, [pc, #412]	; (800528c <HAL_DMA_Start_IT+0x4c0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d013      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a65      	ldr	r2, [pc, #404]	; (8005290 <HAL_DMA_Start_IT+0x4c4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00e      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a64      	ldr	r2, [pc, #400]	; (8005294 <HAL_DMA_Start_IT+0x4c8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d009      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a62      	ldr	r2, [pc, #392]	; (8005298 <HAL_DMA_Start_IT+0x4cc>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d004      	beq.n	800511c <HAL_DMA_Start_IT+0x350>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a61      	ldr	r2, [pc, #388]	; (800529c <HAL_DMA_Start_IT+0x4d0>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d101      	bne.n	8005120 <HAL_DMA_Start_IT+0x354>
 800511c:	2301      	movs	r3, #1
 800511e:	e000      	b.n	8005122 <HAL_DMA_Start_IT+0x356>
 8005120:	2300      	movs	r3, #0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01a      	beq.n	800515c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d007      	beq.n	8005144 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800513e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005142:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800515a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a37      	ldr	r2, [pc, #220]	; (8005240 <HAL_DMA_Start_IT+0x474>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d04a      	beq.n	80051fc <HAL_DMA_Start_IT+0x430>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a36      	ldr	r2, [pc, #216]	; (8005244 <HAL_DMA_Start_IT+0x478>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d045      	beq.n	80051fc <HAL_DMA_Start_IT+0x430>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a34      	ldr	r2, [pc, #208]	; (8005248 <HAL_DMA_Start_IT+0x47c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d040      	beq.n	80051fc <HAL_DMA_Start_IT+0x430>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a33      	ldr	r2, [pc, #204]	; (800524c <HAL_DMA_Start_IT+0x480>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d03b      	beq.n	80051fc <HAL_DMA_Start_IT+0x430>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a31      	ldr	r2, [pc, #196]	; (8005250 <HAL_DMA_Start_IT+0x484>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d036      	beq.n	80051fc <HAL_DMA_Start_IT+0x430>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a30      	ldr	r2, [pc, #192]	; (8005254 <HAL_DMA_Start_IT+0x488>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d031      	beq.n	80051fc <HAL_DMA_Start_IT+0x430>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a2e      	ldr	r2, [pc, #184]	; (8005258 <HAL_DMA_Start_IT+0x48c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d02c      	beq.n	80051fc <HAL_DMA_Start_IT+0x430>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a2d      	ldr	r2, [pc, #180]	; (800525c <HAL_DMA_Start_IT+0x490>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d027      	beq.n	80051fc <HAL_DMA_Start_IT+0x430>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a2b      	ldr	r2, [pc, #172]	; (8005260 <HAL_DMA_Start_IT+0x494>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d022      	beq.n	80051fc <HAL_DMA_Start_IT+0x430>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2a      	ldr	r2, [pc, #168]	; (8005264 <HAL_DMA_Start_IT+0x498>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d01d      	beq.n	80051fc <HAL_DMA_Start_IT+0x430>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a28      	ldr	r2, [pc, #160]	; (8005268 <HAL_DMA_Start_IT+0x49c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d018      	beq.n	80051fc <HAL_DMA_Start_IT+0x430>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a27      	ldr	r2, [pc, #156]	; (800526c <HAL_DMA_Start_IT+0x4a0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d013      	beq.n	80051fc <HAL_DMA_Start_IT+0x430>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a25      	ldr	r2, [pc, #148]	; (8005270 <HAL_DMA_Start_IT+0x4a4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00e      	beq.n	80051fc <HAL_DMA_Start_IT+0x430>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a24      	ldr	r2, [pc, #144]	; (8005274 <HAL_DMA_Start_IT+0x4a8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d009      	beq.n	80051fc <HAL_DMA_Start_IT+0x430>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a22      	ldr	r2, [pc, #136]	; (8005278 <HAL_DMA_Start_IT+0x4ac>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d004      	beq.n	80051fc <HAL_DMA_Start_IT+0x430>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a21      	ldr	r2, [pc, #132]	; (800527c <HAL_DMA_Start_IT+0x4b0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d108      	bne.n	800520e <HAL_DMA_Start_IT+0x442>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0201 	orr.w	r2, r2, #1
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	e012      	b.n	8005234 <HAL_DMA_Start_IT+0x468>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0201 	orr.w	r2, r2, #1
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e009      	b.n	8005234 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005226:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005234:	7dfb      	ldrb	r3, [r7, #23]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	40020010 	.word	0x40020010
 8005244:	40020028 	.word	0x40020028
 8005248:	40020040 	.word	0x40020040
 800524c:	40020058 	.word	0x40020058
 8005250:	40020070 	.word	0x40020070
 8005254:	40020088 	.word	0x40020088
 8005258:	400200a0 	.word	0x400200a0
 800525c:	400200b8 	.word	0x400200b8
 8005260:	40020410 	.word	0x40020410
 8005264:	40020428 	.word	0x40020428
 8005268:	40020440 	.word	0x40020440
 800526c:	40020458 	.word	0x40020458
 8005270:	40020470 	.word	0x40020470
 8005274:	40020488 	.word	0x40020488
 8005278:	400204a0 	.word	0x400204a0
 800527c:	400204b8 	.word	0x400204b8
 8005280:	58025408 	.word	0x58025408
 8005284:	5802541c 	.word	0x5802541c
 8005288:	58025430 	.word	0x58025430
 800528c:	58025444 	.word	0x58025444
 8005290:	58025458 	.word	0x58025458
 8005294:	5802546c 	.word	0x5802546c
 8005298:	58025480 	.word	0x58025480
 800529c:	58025494 	.word	0x58025494

080052a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08a      	sub	sp, #40	; 0x28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80052ac:	4b67      	ldr	r3, [pc, #412]	; (800544c <HAL_DMA_IRQHandler+0x1ac>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a67      	ldr	r2, [pc, #412]	; (8005450 <HAL_DMA_IRQHandler+0x1b0>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	0a9b      	lsrs	r3, r3, #10
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a5f      	ldr	r2, [pc, #380]	; (8005454 <HAL_DMA_IRQHandler+0x1b4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d04a      	beq.n	8005372 <HAL_DMA_IRQHandler+0xd2>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a5d      	ldr	r2, [pc, #372]	; (8005458 <HAL_DMA_IRQHandler+0x1b8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d045      	beq.n	8005372 <HAL_DMA_IRQHandler+0xd2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a5c      	ldr	r2, [pc, #368]	; (800545c <HAL_DMA_IRQHandler+0x1bc>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d040      	beq.n	8005372 <HAL_DMA_IRQHandler+0xd2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a5a      	ldr	r2, [pc, #360]	; (8005460 <HAL_DMA_IRQHandler+0x1c0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d03b      	beq.n	8005372 <HAL_DMA_IRQHandler+0xd2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a59      	ldr	r2, [pc, #356]	; (8005464 <HAL_DMA_IRQHandler+0x1c4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d036      	beq.n	8005372 <HAL_DMA_IRQHandler+0xd2>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a57      	ldr	r2, [pc, #348]	; (8005468 <HAL_DMA_IRQHandler+0x1c8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d031      	beq.n	8005372 <HAL_DMA_IRQHandler+0xd2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a56      	ldr	r2, [pc, #344]	; (800546c <HAL_DMA_IRQHandler+0x1cc>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d02c      	beq.n	8005372 <HAL_DMA_IRQHandler+0xd2>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a54      	ldr	r2, [pc, #336]	; (8005470 <HAL_DMA_IRQHandler+0x1d0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d027      	beq.n	8005372 <HAL_DMA_IRQHandler+0xd2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a53      	ldr	r2, [pc, #332]	; (8005474 <HAL_DMA_IRQHandler+0x1d4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d022      	beq.n	8005372 <HAL_DMA_IRQHandler+0xd2>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a51      	ldr	r2, [pc, #324]	; (8005478 <HAL_DMA_IRQHandler+0x1d8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d01d      	beq.n	8005372 <HAL_DMA_IRQHandler+0xd2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a50      	ldr	r2, [pc, #320]	; (800547c <HAL_DMA_IRQHandler+0x1dc>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d018      	beq.n	8005372 <HAL_DMA_IRQHandler+0xd2>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a4e      	ldr	r2, [pc, #312]	; (8005480 <HAL_DMA_IRQHandler+0x1e0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d013      	beq.n	8005372 <HAL_DMA_IRQHandler+0xd2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a4d      	ldr	r2, [pc, #308]	; (8005484 <HAL_DMA_IRQHandler+0x1e4>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00e      	beq.n	8005372 <HAL_DMA_IRQHandler+0xd2>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a4b      	ldr	r2, [pc, #300]	; (8005488 <HAL_DMA_IRQHandler+0x1e8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d009      	beq.n	8005372 <HAL_DMA_IRQHandler+0xd2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a4a      	ldr	r2, [pc, #296]	; (800548c <HAL_DMA_IRQHandler+0x1ec>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d004      	beq.n	8005372 <HAL_DMA_IRQHandler+0xd2>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a48      	ldr	r2, [pc, #288]	; (8005490 <HAL_DMA_IRQHandler+0x1f0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d101      	bne.n	8005376 <HAL_DMA_IRQHandler+0xd6>
 8005372:	2301      	movs	r3, #1
 8005374:	e000      	b.n	8005378 <HAL_DMA_IRQHandler+0xd8>
 8005376:	2300      	movs	r3, #0
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 842b 	beq.w	8005bd4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005382:	f003 031f 	and.w	r3, r3, #31
 8005386:	2208      	movs	r2, #8
 8005388:	409a      	lsls	r2, r3
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	4013      	ands	r3, r2
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 80a2 	beq.w	80054d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a2e      	ldr	r2, [pc, #184]	; (8005454 <HAL_DMA_IRQHandler+0x1b4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d04a      	beq.n	8005434 <HAL_DMA_IRQHandler+0x194>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a2d      	ldr	r2, [pc, #180]	; (8005458 <HAL_DMA_IRQHandler+0x1b8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d045      	beq.n	8005434 <HAL_DMA_IRQHandler+0x194>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a2b      	ldr	r2, [pc, #172]	; (800545c <HAL_DMA_IRQHandler+0x1bc>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d040      	beq.n	8005434 <HAL_DMA_IRQHandler+0x194>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a2a      	ldr	r2, [pc, #168]	; (8005460 <HAL_DMA_IRQHandler+0x1c0>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d03b      	beq.n	8005434 <HAL_DMA_IRQHandler+0x194>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a28      	ldr	r2, [pc, #160]	; (8005464 <HAL_DMA_IRQHandler+0x1c4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d036      	beq.n	8005434 <HAL_DMA_IRQHandler+0x194>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a27      	ldr	r2, [pc, #156]	; (8005468 <HAL_DMA_IRQHandler+0x1c8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d031      	beq.n	8005434 <HAL_DMA_IRQHandler+0x194>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a25      	ldr	r2, [pc, #148]	; (800546c <HAL_DMA_IRQHandler+0x1cc>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d02c      	beq.n	8005434 <HAL_DMA_IRQHandler+0x194>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a24      	ldr	r2, [pc, #144]	; (8005470 <HAL_DMA_IRQHandler+0x1d0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d027      	beq.n	8005434 <HAL_DMA_IRQHandler+0x194>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a22      	ldr	r2, [pc, #136]	; (8005474 <HAL_DMA_IRQHandler+0x1d4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d022      	beq.n	8005434 <HAL_DMA_IRQHandler+0x194>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a21      	ldr	r2, [pc, #132]	; (8005478 <HAL_DMA_IRQHandler+0x1d8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d01d      	beq.n	8005434 <HAL_DMA_IRQHandler+0x194>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a1f      	ldr	r2, [pc, #124]	; (800547c <HAL_DMA_IRQHandler+0x1dc>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d018      	beq.n	8005434 <HAL_DMA_IRQHandler+0x194>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a1e      	ldr	r2, [pc, #120]	; (8005480 <HAL_DMA_IRQHandler+0x1e0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d013      	beq.n	8005434 <HAL_DMA_IRQHandler+0x194>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a1c      	ldr	r2, [pc, #112]	; (8005484 <HAL_DMA_IRQHandler+0x1e4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00e      	beq.n	8005434 <HAL_DMA_IRQHandler+0x194>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1b      	ldr	r2, [pc, #108]	; (8005488 <HAL_DMA_IRQHandler+0x1e8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d009      	beq.n	8005434 <HAL_DMA_IRQHandler+0x194>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a19      	ldr	r2, [pc, #100]	; (800548c <HAL_DMA_IRQHandler+0x1ec>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_DMA_IRQHandler+0x194>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a18      	ldr	r2, [pc, #96]	; (8005490 <HAL_DMA_IRQHandler+0x1f0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d12f      	bne.n	8005494 <HAL_DMA_IRQHandler+0x1f4>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	bf14      	ite	ne
 8005442:	2301      	movne	r3, #1
 8005444:	2300      	moveq	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	e02e      	b.n	80054a8 <HAL_DMA_IRQHandler+0x208>
 800544a:	bf00      	nop
 800544c:	20000024 	.word	0x20000024
 8005450:	1b4e81b5 	.word	0x1b4e81b5
 8005454:	40020010 	.word	0x40020010
 8005458:	40020028 	.word	0x40020028
 800545c:	40020040 	.word	0x40020040
 8005460:	40020058 	.word	0x40020058
 8005464:	40020070 	.word	0x40020070
 8005468:	40020088 	.word	0x40020088
 800546c:	400200a0 	.word	0x400200a0
 8005470:	400200b8 	.word	0x400200b8
 8005474:	40020410 	.word	0x40020410
 8005478:	40020428 	.word	0x40020428
 800547c:	40020440 	.word	0x40020440
 8005480:	40020458 	.word	0x40020458
 8005484:	40020470 	.word	0x40020470
 8005488:	40020488 	.word	0x40020488
 800548c:	400204a0 	.word	0x400204a0
 8005490:	400204b8 	.word	0x400204b8
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	bf14      	ite	ne
 80054a2:	2301      	movne	r3, #1
 80054a4:	2300      	moveq	r3, #0
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d015      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0204 	bic.w	r2, r2, #4
 80054ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c0:	f003 031f 	and.w	r3, r3, #31
 80054c4:	2208      	movs	r2, #8
 80054c6:	409a      	lsls	r2, r3
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d0:	f043 0201 	orr.w	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054dc:	f003 031f 	and.w	r3, r3, #31
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	fa22 f303 	lsr.w	r3, r2, r3
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d06e      	beq.n	80055cc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a69      	ldr	r2, [pc, #420]	; (8005698 <HAL_DMA_IRQHandler+0x3f8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d04a      	beq.n	800558e <HAL_DMA_IRQHandler+0x2ee>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a67      	ldr	r2, [pc, #412]	; (800569c <HAL_DMA_IRQHandler+0x3fc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d045      	beq.n	800558e <HAL_DMA_IRQHandler+0x2ee>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a66      	ldr	r2, [pc, #408]	; (80056a0 <HAL_DMA_IRQHandler+0x400>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d040      	beq.n	800558e <HAL_DMA_IRQHandler+0x2ee>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a64      	ldr	r2, [pc, #400]	; (80056a4 <HAL_DMA_IRQHandler+0x404>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d03b      	beq.n	800558e <HAL_DMA_IRQHandler+0x2ee>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a63      	ldr	r2, [pc, #396]	; (80056a8 <HAL_DMA_IRQHandler+0x408>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d036      	beq.n	800558e <HAL_DMA_IRQHandler+0x2ee>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a61      	ldr	r2, [pc, #388]	; (80056ac <HAL_DMA_IRQHandler+0x40c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d031      	beq.n	800558e <HAL_DMA_IRQHandler+0x2ee>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a60      	ldr	r2, [pc, #384]	; (80056b0 <HAL_DMA_IRQHandler+0x410>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d02c      	beq.n	800558e <HAL_DMA_IRQHandler+0x2ee>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a5e      	ldr	r2, [pc, #376]	; (80056b4 <HAL_DMA_IRQHandler+0x414>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d027      	beq.n	800558e <HAL_DMA_IRQHandler+0x2ee>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a5d      	ldr	r2, [pc, #372]	; (80056b8 <HAL_DMA_IRQHandler+0x418>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d022      	beq.n	800558e <HAL_DMA_IRQHandler+0x2ee>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a5b      	ldr	r2, [pc, #364]	; (80056bc <HAL_DMA_IRQHandler+0x41c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d01d      	beq.n	800558e <HAL_DMA_IRQHandler+0x2ee>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a5a      	ldr	r2, [pc, #360]	; (80056c0 <HAL_DMA_IRQHandler+0x420>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d018      	beq.n	800558e <HAL_DMA_IRQHandler+0x2ee>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a58      	ldr	r2, [pc, #352]	; (80056c4 <HAL_DMA_IRQHandler+0x424>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d013      	beq.n	800558e <HAL_DMA_IRQHandler+0x2ee>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a57      	ldr	r2, [pc, #348]	; (80056c8 <HAL_DMA_IRQHandler+0x428>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00e      	beq.n	800558e <HAL_DMA_IRQHandler+0x2ee>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a55      	ldr	r2, [pc, #340]	; (80056cc <HAL_DMA_IRQHandler+0x42c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d009      	beq.n	800558e <HAL_DMA_IRQHandler+0x2ee>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a54      	ldr	r2, [pc, #336]	; (80056d0 <HAL_DMA_IRQHandler+0x430>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d004      	beq.n	800558e <HAL_DMA_IRQHandler+0x2ee>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a52      	ldr	r2, [pc, #328]	; (80056d4 <HAL_DMA_IRQHandler+0x434>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d10a      	bne.n	80055a4 <HAL_DMA_IRQHandler+0x304>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005598:	2b00      	cmp	r3, #0
 800559a:	bf14      	ite	ne
 800559c:	2301      	movne	r3, #1
 800559e:	2300      	moveq	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	e003      	b.n	80055ac <HAL_DMA_IRQHandler+0x30c>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2300      	movs	r3, #0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00d      	beq.n	80055cc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	2201      	movs	r2, #1
 80055ba:	409a      	lsls	r2, r3
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c4:	f043 0202 	orr.w	r2, r3, #2
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d0:	f003 031f 	and.w	r3, r3, #31
 80055d4:	2204      	movs	r2, #4
 80055d6:	409a      	lsls	r2, r3
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	4013      	ands	r3, r2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 808f 	beq.w	8005700 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a2c      	ldr	r2, [pc, #176]	; (8005698 <HAL_DMA_IRQHandler+0x3f8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d04a      	beq.n	8005682 <HAL_DMA_IRQHandler+0x3e2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a2a      	ldr	r2, [pc, #168]	; (800569c <HAL_DMA_IRQHandler+0x3fc>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d045      	beq.n	8005682 <HAL_DMA_IRQHandler+0x3e2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a29      	ldr	r2, [pc, #164]	; (80056a0 <HAL_DMA_IRQHandler+0x400>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d040      	beq.n	8005682 <HAL_DMA_IRQHandler+0x3e2>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a27      	ldr	r2, [pc, #156]	; (80056a4 <HAL_DMA_IRQHandler+0x404>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d03b      	beq.n	8005682 <HAL_DMA_IRQHandler+0x3e2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a26      	ldr	r2, [pc, #152]	; (80056a8 <HAL_DMA_IRQHandler+0x408>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d036      	beq.n	8005682 <HAL_DMA_IRQHandler+0x3e2>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a24      	ldr	r2, [pc, #144]	; (80056ac <HAL_DMA_IRQHandler+0x40c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d031      	beq.n	8005682 <HAL_DMA_IRQHandler+0x3e2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a23      	ldr	r2, [pc, #140]	; (80056b0 <HAL_DMA_IRQHandler+0x410>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d02c      	beq.n	8005682 <HAL_DMA_IRQHandler+0x3e2>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a21      	ldr	r2, [pc, #132]	; (80056b4 <HAL_DMA_IRQHandler+0x414>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d027      	beq.n	8005682 <HAL_DMA_IRQHandler+0x3e2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a20      	ldr	r2, [pc, #128]	; (80056b8 <HAL_DMA_IRQHandler+0x418>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d022      	beq.n	8005682 <HAL_DMA_IRQHandler+0x3e2>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a1e      	ldr	r2, [pc, #120]	; (80056bc <HAL_DMA_IRQHandler+0x41c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d01d      	beq.n	8005682 <HAL_DMA_IRQHandler+0x3e2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a1d      	ldr	r2, [pc, #116]	; (80056c0 <HAL_DMA_IRQHandler+0x420>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d018      	beq.n	8005682 <HAL_DMA_IRQHandler+0x3e2>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a1b      	ldr	r2, [pc, #108]	; (80056c4 <HAL_DMA_IRQHandler+0x424>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d013      	beq.n	8005682 <HAL_DMA_IRQHandler+0x3e2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a1a      	ldr	r2, [pc, #104]	; (80056c8 <HAL_DMA_IRQHandler+0x428>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d00e      	beq.n	8005682 <HAL_DMA_IRQHandler+0x3e2>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a18      	ldr	r2, [pc, #96]	; (80056cc <HAL_DMA_IRQHandler+0x42c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d009      	beq.n	8005682 <HAL_DMA_IRQHandler+0x3e2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a17      	ldr	r2, [pc, #92]	; (80056d0 <HAL_DMA_IRQHandler+0x430>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d004      	beq.n	8005682 <HAL_DMA_IRQHandler+0x3e2>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a15      	ldr	r2, [pc, #84]	; (80056d4 <HAL_DMA_IRQHandler+0x434>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d12a      	bne.n	80056d8 <HAL_DMA_IRQHandler+0x438>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	bf14      	ite	ne
 8005690:	2301      	movne	r3, #1
 8005692:	2300      	moveq	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	e023      	b.n	80056e0 <HAL_DMA_IRQHandler+0x440>
 8005698:	40020010 	.word	0x40020010
 800569c:	40020028 	.word	0x40020028
 80056a0:	40020040 	.word	0x40020040
 80056a4:	40020058 	.word	0x40020058
 80056a8:	40020070 	.word	0x40020070
 80056ac:	40020088 	.word	0x40020088
 80056b0:	400200a0 	.word	0x400200a0
 80056b4:	400200b8 	.word	0x400200b8
 80056b8:	40020410 	.word	0x40020410
 80056bc:	40020428 	.word	0x40020428
 80056c0:	40020440 	.word	0x40020440
 80056c4:	40020458 	.word	0x40020458
 80056c8:	40020470 	.word	0x40020470
 80056cc:	40020488 	.word	0x40020488
 80056d0:	400204a0 	.word	0x400204a0
 80056d4:	400204b8 	.word	0x400204b8
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2300      	movs	r3, #0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00d      	beq.n	8005700 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e8:	f003 031f 	and.w	r3, r3, #31
 80056ec:	2204      	movs	r2, #4
 80056ee:	409a      	lsls	r2, r3
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f8:	f043 0204 	orr.w	r2, r3, #4
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005704:	f003 031f 	and.w	r3, r3, #31
 8005708:	2210      	movs	r2, #16
 800570a:	409a      	lsls	r2, r3
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	4013      	ands	r3, r2
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 80a6 	beq.w	8005862 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a85      	ldr	r2, [pc, #532]	; (8005930 <HAL_DMA_IRQHandler+0x690>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d04a      	beq.n	80057b6 <HAL_DMA_IRQHandler+0x516>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a83      	ldr	r2, [pc, #524]	; (8005934 <HAL_DMA_IRQHandler+0x694>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d045      	beq.n	80057b6 <HAL_DMA_IRQHandler+0x516>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a82      	ldr	r2, [pc, #520]	; (8005938 <HAL_DMA_IRQHandler+0x698>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d040      	beq.n	80057b6 <HAL_DMA_IRQHandler+0x516>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a80      	ldr	r2, [pc, #512]	; (800593c <HAL_DMA_IRQHandler+0x69c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d03b      	beq.n	80057b6 <HAL_DMA_IRQHandler+0x516>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a7f      	ldr	r2, [pc, #508]	; (8005940 <HAL_DMA_IRQHandler+0x6a0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d036      	beq.n	80057b6 <HAL_DMA_IRQHandler+0x516>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a7d      	ldr	r2, [pc, #500]	; (8005944 <HAL_DMA_IRQHandler+0x6a4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d031      	beq.n	80057b6 <HAL_DMA_IRQHandler+0x516>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a7c      	ldr	r2, [pc, #496]	; (8005948 <HAL_DMA_IRQHandler+0x6a8>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d02c      	beq.n	80057b6 <HAL_DMA_IRQHandler+0x516>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a7a      	ldr	r2, [pc, #488]	; (800594c <HAL_DMA_IRQHandler+0x6ac>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d027      	beq.n	80057b6 <HAL_DMA_IRQHandler+0x516>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a79      	ldr	r2, [pc, #484]	; (8005950 <HAL_DMA_IRQHandler+0x6b0>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d022      	beq.n	80057b6 <HAL_DMA_IRQHandler+0x516>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a77      	ldr	r2, [pc, #476]	; (8005954 <HAL_DMA_IRQHandler+0x6b4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d01d      	beq.n	80057b6 <HAL_DMA_IRQHandler+0x516>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a76      	ldr	r2, [pc, #472]	; (8005958 <HAL_DMA_IRQHandler+0x6b8>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d018      	beq.n	80057b6 <HAL_DMA_IRQHandler+0x516>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a74      	ldr	r2, [pc, #464]	; (800595c <HAL_DMA_IRQHandler+0x6bc>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d013      	beq.n	80057b6 <HAL_DMA_IRQHandler+0x516>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a73      	ldr	r2, [pc, #460]	; (8005960 <HAL_DMA_IRQHandler+0x6c0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d00e      	beq.n	80057b6 <HAL_DMA_IRQHandler+0x516>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a71      	ldr	r2, [pc, #452]	; (8005964 <HAL_DMA_IRQHandler+0x6c4>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d009      	beq.n	80057b6 <HAL_DMA_IRQHandler+0x516>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a70      	ldr	r2, [pc, #448]	; (8005968 <HAL_DMA_IRQHandler+0x6c8>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d004      	beq.n	80057b6 <HAL_DMA_IRQHandler+0x516>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a6e      	ldr	r2, [pc, #440]	; (800596c <HAL_DMA_IRQHandler+0x6cc>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d10a      	bne.n	80057cc <HAL_DMA_IRQHandler+0x52c>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	bf14      	ite	ne
 80057c4:	2301      	movne	r3, #1
 80057c6:	2300      	moveq	r3, #0
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	e009      	b.n	80057e0 <HAL_DMA_IRQHandler+0x540>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0304 	and.w	r3, r3, #4
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	bf14      	ite	ne
 80057da:	2301      	movne	r3, #1
 80057dc:	2300      	moveq	r3, #0
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d03e      	beq.n	8005862 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057e8:	f003 031f 	and.w	r3, r3, #31
 80057ec:	2210      	movs	r2, #16
 80057ee:	409a      	lsls	r2, r3
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d018      	beq.n	8005834 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d108      	bne.n	8005822 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	2b00      	cmp	r3, #0
 8005816:	d024      	beq.n	8005862 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	4798      	blx	r3
 8005820:	e01f      	b.n	8005862 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005826:	2b00      	cmp	r3, #0
 8005828:	d01b      	beq.n	8005862 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	4798      	blx	r3
 8005832:	e016      	b.n	8005862 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583e:	2b00      	cmp	r3, #0
 8005840:	d107      	bne.n	8005852 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0208 	bic.w	r2, r2, #8
 8005850:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005866:	f003 031f 	and.w	r3, r3, #31
 800586a:	2220      	movs	r2, #32
 800586c:	409a      	lsls	r2, r3
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	4013      	ands	r3, r2
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 8110 	beq.w	8005a98 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a2c      	ldr	r2, [pc, #176]	; (8005930 <HAL_DMA_IRQHandler+0x690>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d04a      	beq.n	8005918 <HAL_DMA_IRQHandler+0x678>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a2b      	ldr	r2, [pc, #172]	; (8005934 <HAL_DMA_IRQHandler+0x694>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d045      	beq.n	8005918 <HAL_DMA_IRQHandler+0x678>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a29      	ldr	r2, [pc, #164]	; (8005938 <HAL_DMA_IRQHandler+0x698>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d040      	beq.n	8005918 <HAL_DMA_IRQHandler+0x678>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a28      	ldr	r2, [pc, #160]	; (800593c <HAL_DMA_IRQHandler+0x69c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d03b      	beq.n	8005918 <HAL_DMA_IRQHandler+0x678>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a26      	ldr	r2, [pc, #152]	; (8005940 <HAL_DMA_IRQHandler+0x6a0>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d036      	beq.n	8005918 <HAL_DMA_IRQHandler+0x678>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a25      	ldr	r2, [pc, #148]	; (8005944 <HAL_DMA_IRQHandler+0x6a4>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d031      	beq.n	8005918 <HAL_DMA_IRQHandler+0x678>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a23      	ldr	r2, [pc, #140]	; (8005948 <HAL_DMA_IRQHandler+0x6a8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d02c      	beq.n	8005918 <HAL_DMA_IRQHandler+0x678>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a22      	ldr	r2, [pc, #136]	; (800594c <HAL_DMA_IRQHandler+0x6ac>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d027      	beq.n	8005918 <HAL_DMA_IRQHandler+0x678>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a20      	ldr	r2, [pc, #128]	; (8005950 <HAL_DMA_IRQHandler+0x6b0>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d022      	beq.n	8005918 <HAL_DMA_IRQHandler+0x678>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a1f      	ldr	r2, [pc, #124]	; (8005954 <HAL_DMA_IRQHandler+0x6b4>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d01d      	beq.n	8005918 <HAL_DMA_IRQHandler+0x678>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a1d      	ldr	r2, [pc, #116]	; (8005958 <HAL_DMA_IRQHandler+0x6b8>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d018      	beq.n	8005918 <HAL_DMA_IRQHandler+0x678>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a1c      	ldr	r2, [pc, #112]	; (800595c <HAL_DMA_IRQHandler+0x6bc>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d013      	beq.n	8005918 <HAL_DMA_IRQHandler+0x678>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a1a      	ldr	r2, [pc, #104]	; (8005960 <HAL_DMA_IRQHandler+0x6c0>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00e      	beq.n	8005918 <HAL_DMA_IRQHandler+0x678>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a19      	ldr	r2, [pc, #100]	; (8005964 <HAL_DMA_IRQHandler+0x6c4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d009      	beq.n	8005918 <HAL_DMA_IRQHandler+0x678>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a17      	ldr	r2, [pc, #92]	; (8005968 <HAL_DMA_IRQHandler+0x6c8>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d004      	beq.n	8005918 <HAL_DMA_IRQHandler+0x678>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a16      	ldr	r2, [pc, #88]	; (800596c <HAL_DMA_IRQHandler+0x6cc>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d12b      	bne.n	8005970 <HAL_DMA_IRQHandler+0x6d0>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0310 	and.w	r3, r3, #16
 8005922:	2b00      	cmp	r3, #0
 8005924:	bf14      	ite	ne
 8005926:	2301      	movne	r3, #1
 8005928:	2300      	moveq	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	e02a      	b.n	8005984 <HAL_DMA_IRQHandler+0x6e4>
 800592e:	bf00      	nop
 8005930:	40020010 	.word	0x40020010
 8005934:	40020028 	.word	0x40020028
 8005938:	40020040 	.word	0x40020040
 800593c:	40020058 	.word	0x40020058
 8005940:	40020070 	.word	0x40020070
 8005944:	40020088 	.word	0x40020088
 8005948:	400200a0 	.word	0x400200a0
 800594c:	400200b8 	.word	0x400200b8
 8005950:	40020410 	.word	0x40020410
 8005954:	40020428 	.word	0x40020428
 8005958:	40020440 	.word	0x40020440
 800595c:	40020458 	.word	0x40020458
 8005960:	40020470 	.word	0x40020470
 8005964:	40020488 	.word	0x40020488
 8005968:	400204a0 	.word	0x400204a0
 800596c:	400204b8 	.word	0x400204b8
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	bf14      	ite	ne
 800597e:	2301      	movne	r3, #1
 8005980:	2300      	moveq	r3, #0
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 8087 	beq.w	8005a98 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598e:	f003 031f 	and.w	r3, r3, #31
 8005992:	2220      	movs	r2, #32
 8005994:	409a      	lsls	r2, r3
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d139      	bne.n	8005a1a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0216 	bic.w	r2, r2, #22
 80059b4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695a      	ldr	r2, [r3, #20]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059c4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d103      	bne.n	80059d6 <HAL_DMA_IRQHandler+0x736>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d007      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0208 	bic.w	r2, r2, #8
 80059e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ea:	f003 031f 	and.w	r3, r3, #31
 80059ee:	223f      	movs	r2, #63	; 0x3f
 80059f0:	409a      	lsls	r2, r3
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 834a 	beq.w	80060a4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	4798      	blx	r3
          }
          return;
 8005a18:	e344      	b.n	80060a4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d018      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d108      	bne.n	8005a48 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d02c      	beq.n	8005a98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	4798      	blx	r3
 8005a46:	e027      	b.n	8005a98 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d023      	beq.n	8005a98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	4798      	blx	r3
 8005a58:	e01e      	b.n	8005a98 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10f      	bne.n	8005a88 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0210 	bic.w	r2, r2, #16
 8005a76:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 8306 	beq.w	80060ae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 8088 	beq.w	8005bc0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a7a      	ldr	r2, [pc, #488]	; (8005ca8 <HAL_DMA_IRQHandler+0xa08>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d04a      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x8b8>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a79      	ldr	r2, [pc, #484]	; (8005cac <HAL_DMA_IRQHandler+0xa0c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d045      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x8b8>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a77      	ldr	r2, [pc, #476]	; (8005cb0 <HAL_DMA_IRQHandler+0xa10>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d040      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x8b8>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a76      	ldr	r2, [pc, #472]	; (8005cb4 <HAL_DMA_IRQHandler+0xa14>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d03b      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x8b8>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a74      	ldr	r2, [pc, #464]	; (8005cb8 <HAL_DMA_IRQHandler+0xa18>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d036      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x8b8>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a73      	ldr	r2, [pc, #460]	; (8005cbc <HAL_DMA_IRQHandler+0xa1c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d031      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x8b8>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a71      	ldr	r2, [pc, #452]	; (8005cc0 <HAL_DMA_IRQHandler+0xa20>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d02c      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x8b8>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a70      	ldr	r2, [pc, #448]	; (8005cc4 <HAL_DMA_IRQHandler+0xa24>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d027      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x8b8>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a6e      	ldr	r2, [pc, #440]	; (8005cc8 <HAL_DMA_IRQHandler+0xa28>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d022      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x8b8>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a6d      	ldr	r2, [pc, #436]	; (8005ccc <HAL_DMA_IRQHandler+0xa2c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d01d      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x8b8>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a6b      	ldr	r2, [pc, #428]	; (8005cd0 <HAL_DMA_IRQHandler+0xa30>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d018      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x8b8>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a6a      	ldr	r2, [pc, #424]	; (8005cd4 <HAL_DMA_IRQHandler+0xa34>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d013      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x8b8>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a68      	ldr	r2, [pc, #416]	; (8005cd8 <HAL_DMA_IRQHandler+0xa38>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00e      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x8b8>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a67      	ldr	r2, [pc, #412]	; (8005cdc <HAL_DMA_IRQHandler+0xa3c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d009      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x8b8>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a65      	ldr	r2, [pc, #404]	; (8005ce0 <HAL_DMA_IRQHandler+0xa40>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d004      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x8b8>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a64      	ldr	r2, [pc, #400]	; (8005ce4 <HAL_DMA_IRQHandler+0xa44>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d108      	bne.n	8005b6a <HAL_DMA_IRQHandler+0x8ca>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0201 	bic.w	r2, r2, #1
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	e007      	b.n	8005b7a <HAL_DMA_IRQHandler+0x8da>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0201 	bic.w	r2, r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d307      	bcc.n	8005b96 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1f2      	bne.n	8005b7a <HAL_DMA_IRQHandler+0x8da>
 8005b94:	e000      	b.n	8005b98 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005b96:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d004      	beq.n	8005bb0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2203      	movs	r2, #3
 8005baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005bae:	e003      	b.n	8005bb8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 8272 	beq.w	80060ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	4798      	blx	r3
 8005bd2:	e26c      	b.n	80060ae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a43      	ldr	r2, [pc, #268]	; (8005ce8 <HAL_DMA_IRQHandler+0xa48>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d022      	beq.n	8005c24 <HAL_DMA_IRQHandler+0x984>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a42      	ldr	r2, [pc, #264]	; (8005cec <HAL_DMA_IRQHandler+0xa4c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d01d      	beq.n	8005c24 <HAL_DMA_IRQHandler+0x984>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a40      	ldr	r2, [pc, #256]	; (8005cf0 <HAL_DMA_IRQHandler+0xa50>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d018      	beq.n	8005c24 <HAL_DMA_IRQHandler+0x984>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a3f      	ldr	r2, [pc, #252]	; (8005cf4 <HAL_DMA_IRQHandler+0xa54>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d013      	beq.n	8005c24 <HAL_DMA_IRQHandler+0x984>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a3d      	ldr	r2, [pc, #244]	; (8005cf8 <HAL_DMA_IRQHandler+0xa58>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00e      	beq.n	8005c24 <HAL_DMA_IRQHandler+0x984>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a3c      	ldr	r2, [pc, #240]	; (8005cfc <HAL_DMA_IRQHandler+0xa5c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d009      	beq.n	8005c24 <HAL_DMA_IRQHandler+0x984>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a3a      	ldr	r2, [pc, #232]	; (8005d00 <HAL_DMA_IRQHandler+0xa60>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d004      	beq.n	8005c24 <HAL_DMA_IRQHandler+0x984>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a39      	ldr	r2, [pc, #228]	; (8005d04 <HAL_DMA_IRQHandler+0xa64>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d101      	bne.n	8005c28 <HAL_DMA_IRQHandler+0x988>
 8005c24:	2301      	movs	r3, #1
 8005c26:	e000      	b.n	8005c2a <HAL_DMA_IRQHandler+0x98a>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 823f 	beq.w	80060ae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3c:	f003 031f 	and.w	r3, r3, #31
 8005c40:	2204      	movs	r2, #4
 8005c42:	409a      	lsls	r2, r3
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	4013      	ands	r3, r2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 80cd 	beq.w	8005de8 <HAL_DMA_IRQHandler+0xb48>
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 80c7 	beq.w	8005de8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c5e:	f003 031f 	and.w	r3, r3, #31
 8005c62:	2204      	movs	r2, #4
 8005c64:	409a      	lsls	r2, r3
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d049      	beq.n	8005d08 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d109      	bne.n	8005c92 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 8210 	beq.w	80060a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c90:	e20a      	b.n	80060a8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 8206 	beq.w	80060a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ca4:	e200      	b.n	80060a8 <HAL_DMA_IRQHandler+0xe08>
 8005ca6:	bf00      	nop
 8005ca8:	40020010 	.word	0x40020010
 8005cac:	40020028 	.word	0x40020028
 8005cb0:	40020040 	.word	0x40020040
 8005cb4:	40020058 	.word	0x40020058
 8005cb8:	40020070 	.word	0x40020070
 8005cbc:	40020088 	.word	0x40020088
 8005cc0:	400200a0 	.word	0x400200a0
 8005cc4:	400200b8 	.word	0x400200b8
 8005cc8:	40020410 	.word	0x40020410
 8005ccc:	40020428 	.word	0x40020428
 8005cd0:	40020440 	.word	0x40020440
 8005cd4:	40020458 	.word	0x40020458
 8005cd8:	40020470 	.word	0x40020470
 8005cdc:	40020488 	.word	0x40020488
 8005ce0:	400204a0 	.word	0x400204a0
 8005ce4:	400204b8 	.word	0x400204b8
 8005ce8:	58025408 	.word	0x58025408
 8005cec:	5802541c 	.word	0x5802541c
 8005cf0:	58025430 	.word	0x58025430
 8005cf4:	58025444 	.word	0x58025444
 8005cf8:	58025458 	.word	0x58025458
 8005cfc:	5802546c 	.word	0x5802546c
 8005d00:	58025480 	.word	0x58025480
 8005d04:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f003 0320 	and.w	r3, r3, #32
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d160      	bne.n	8005dd4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a8c      	ldr	r2, [pc, #560]	; (8005f48 <HAL_DMA_IRQHandler+0xca8>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d04a      	beq.n	8005db2 <HAL_DMA_IRQHandler+0xb12>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a8a      	ldr	r2, [pc, #552]	; (8005f4c <HAL_DMA_IRQHandler+0xcac>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d045      	beq.n	8005db2 <HAL_DMA_IRQHandler+0xb12>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a89      	ldr	r2, [pc, #548]	; (8005f50 <HAL_DMA_IRQHandler+0xcb0>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d040      	beq.n	8005db2 <HAL_DMA_IRQHandler+0xb12>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a87      	ldr	r2, [pc, #540]	; (8005f54 <HAL_DMA_IRQHandler+0xcb4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d03b      	beq.n	8005db2 <HAL_DMA_IRQHandler+0xb12>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a86      	ldr	r2, [pc, #536]	; (8005f58 <HAL_DMA_IRQHandler+0xcb8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d036      	beq.n	8005db2 <HAL_DMA_IRQHandler+0xb12>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a84      	ldr	r2, [pc, #528]	; (8005f5c <HAL_DMA_IRQHandler+0xcbc>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d031      	beq.n	8005db2 <HAL_DMA_IRQHandler+0xb12>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a83      	ldr	r2, [pc, #524]	; (8005f60 <HAL_DMA_IRQHandler+0xcc0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d02c      	beq.n	8005db2 <HAL_DMA_IRQHandler+0xb12>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a81      	ldr	r2, [pc, #516]	; (8005f64 <HAL_DMA_IRQHandler+0xcc4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d027      	beq.n	8005db2 <HAL_DMA_IRQHandler+0xb12>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a80      	ldr	r2, [pc, #512]	; (8005f68 <HAL_DMA_IRQHandler+0xcc8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d022      	beq.n	8005db2 <HAL_DMA_IRQHandler+0xb12>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a7e      	ldr	r2, [pc, #504]	; (8005f6c <HAL_DMA_IRQHandler+0xccc>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d01d      	beq.n	8005db2 <HAL_DMA_IRQHandler+0xb12>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a7d      	ldr	r2, [pc, #500]	; (8005f70 <HAL_DMA_IRQHandler+0xcd0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d018      	beq.n	8005db2 <HAL_DMA_IRQHandler+0xb12>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a7b      	ldr	r2, [pc, #492]	; (8005f74 <HAL_DMA_IRQHandler+0xcd4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d013      	beq.n	8005db2 <HAL_DMA_IRQHandler+0xb12>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a7a      	ldr	r2, [pc, #488]	; (8005f78 <HAL_DMA_IRQHandler+0xcd8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00e      	beq.n	8005db2 <HAL_DMA_IRQHandler+0xb12>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a78      	ldr	r2, [pc, #480]	; (8005f7c <HAL_DMA_IRQHandler+0xcdc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d009      	beq.n	8005db2 <HAL_DMA_IRQHandler+0xb12>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a77      	ldr	r2, [pc, #476]	; (8005f80 <HAL_DMA_IRQHandler+0xce0>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d004      	beq.n	8005db2 <HAL_DMA_IRQHandler+0xb12>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a75      	ldr	r2, [pc, #468]	; (8005f84 <HAL_DMA_IRQHandler+0xce4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d108      	bne.n	8005dc4 <HAL_DMA_IRQHandler+0xb24>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0208 	bic.w	r2, r2, #8
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	e007      	b.n	8005dd4 <HAL_DMA_IRQHandler+0xb34>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0204 	bic.w	r2, r2, #4
 8005dd2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 8165 	beq.w	80060a8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005de6:	e15f      	b.n	80060a8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dec:	f003 031f 	and.w	r3, r3, #31
 8005df0:	2202      	movs	r2, #2
 8005df2:	409a      	lsls	r2, r3
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	4013      	ands	r3, r2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 80c5 	beq.w	8005f88 <HAL_DMA_IRQHandler+0xce8>
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 80bf 	beq.w	8005f88 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e0e:	f003 031f 	and.w	r3, r3, #31
 8005e12:	2202      	movs	r2, #2
 8005e14:	409a      	lsls	r2, r3
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d018      	beq.n	8005e56 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d109      	bne.n	8005e42 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 813a 	beq.w	80060ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e40:	e134      	b.n	80060ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 8130 	beq.w	80060ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e54:	e12a      	b.n	80060ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d168      	bne.n	8005f32 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a38      	ldr	r2, [pc, #224]	; (8005f48 <HAL_DMA_IRQHandler+0xca8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d04a      	beq.n	8005f00 <HAL_DMA_IRQHandler+0xc60>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a37      	ldr	r2, [pc, #220]	; (8005f4c <HAL_DMA_IRQHandler+0xcac>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d045      	beq.n	8005f00 <HAL_DMA_IRQHandler+0xc60>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a35      	ldr	r2, [pc, #212]	; (8005f50 <HAL_DMA_IRQHandler+0xcb0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d040      	beq.n	8005f00 <HAL_DMA_IRQHandler+0xc60>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a34      	ldr	r2, [pc, #208]	; (8005f54 <HAL_DMA_IRQHandler+0xcb4>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d03b      	beq.n	8005f00 <HAL_DMA_IRQHandler+0xc60>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a32      	ldr	r2, [pc, #200]	; (8005f58 <HAL_DMA_IRQHandler+0xcb8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d036      	beq.n	8005f00 <HAL_DMA_IRQHandler+0xc60>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a31      	ldr	r2, [pc, #196]	; (8005f5c <HAL_DMA_IRQHandler+0xcbc>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d031      	beq.n	8005f00 <HAL_DMA_IRQHandler+0xc60>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a2f      	ldr	r2, [pc, #188]	; (8005f60 <HAL_DMA_IRQHandler+0xcc0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d02c      	beq.n	8005f00 <HAL_DMA_IRQHandler+0xc60>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a2e      	ldr	r2, [pc, #184]	; (8005f64 <HAL_DMA_IRQHandler+0xcc4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d027      	beq.n	8005f00 <HAL_DMA_IRQHandler+0xc60>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a2c      	ldr	r2, [pc, #176]	; (8005f68 <HAL_DMA_IRQHandler+0xcc8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d022      	beq.n	8005f00 <HAL_DMA_IRQHandler+0xc60>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a2b      	ldr	r2, [pc, #172]	; (8005f6c <HAL_DMA_IRQHandler+0xccc>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d01d      	beq.n	8005f00 <HAL_DMA_IRQHandler+0xc60>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a29      	ldr	r2, [pc, #164]	; (8005f70 <HAL_DMA_IRQHandler+0xcd0>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d018      	beq.n	8005f00 <HAL_DMA_IRQHandler+0xc60>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a28      	ldr	r2, [pc, #160]	; (8005f74 <HAL_DMA_IRQHandler+0xcd4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d013      	beq.n	8005f00 <HAL_DMA_IRQHandler+0xc60>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a26      	ldr	r2, [pc, #152]	; (8005f78 <HAL_DMA_IRQHandler+0xcd8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00e      	beq.n	8005f00 <HAL_DMA_IRQHandler+0xc60>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a25      	ldr	r2, [pc, #148]	; (8005f7c <HAL_DMA_IRQHandler+0xcdc>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d009      	beq.n	8005f00 <HAL_DMA_IRQHandler+0xc60>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a23      	ldr	r2, [pc, #140]	; (8005f80 <HAL_DMA_IRQHandler+0xce0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d004      	beq.n	8005f00 <HAL_DMA_IRQHandler+0xc60>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a22      	ldr	r2, [pc, #136]	; (8005f84 <HAL_DMA_IRQHandler+0xce4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d108      	bne.n	8005f12 <HAL_DMA_IRQHandler+0xc72>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0214 	bic.w	r2, r2, #20
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	e007      	b.n	8005f22 <HAL_DMA_IRQHandler+0xc82>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 020a 	bic.w	r2, r2, #10
 8005f20:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 80b8 	beq.w	80060ac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f44:	e0b2      	b.n	80060ac <HAL_DMA_IRQHandler+0xe0c>
 8005f46:	bf00      	nop
 8005f48:	40020010 	.word	0x40020010
 8005f4c:	40020028 	.word	0x40020028
 8005f50:	40020040 	.word	0x40020040
 8005f54:	40020058 	.word	0x40020058
 8005f58:	40020070 	.word	0x40020070
 8005f5c:	40020088 	.word	0x40020088
 8005f60:	400200a0 	.word	0x400200a0
 8005f64:	400200b8 	.word	0x400200b8
 8005f68:	40020410 	.word	0x40020410
 8005f6c:	40020428 	.word	0x40020428
 8005f70:	40020440 	.word	0x40020440
 8005f74:	40020458 	.word	0x40020458
 8005f78:	40020470 	.word	0x40020470
 8005f7c:	40020488 	.word	0x40020488
 8005f80:	400204a0 	.word	0x400204a0
 8005f84:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f8c:	f003 031f 	and.w	r3, r3, #31
 8005f90:	2208      	movs	r2, #8
 8005f92:	409a      	lsls	r2, r3
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	4013      	ands	r3, r2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 8088 	beq.w	80060ae <HAL_DMA_IRQHandler+0xe0e>
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f003 0308 	and.w	r3, r3, #8
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8082 	beq.w	80060ae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a41      	ldr	r2, [pc, #260]	; (80060b4 <HAL_DMA_IRQHandler+0xe14>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d04a      	beq.n	800604a <HAL_DMA_IRQHandler+0xdaa>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a3f      	ldr	r2, [pc, #252]	; (80060b8 <HAL_DMA_IRQHandler+0xe18>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d045      	beq.n	800604a <HAL_DMA_IRQHandler+0xdaa>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a3e      	ldr	r2, [pc, #248]	; (80060bc <HAL_DMA_IRQHandler+0xe1c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d040      	beq.n	800604a <HAL_DMA_IRQHandler+0xdaa>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a3c      	ldr	r2, [pc, #240]	; (80060c0 <HAL_DMA_IRQHandler+0xe20>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d03b      	beq.n	800604a <HAL_DMA_IRQHandler+0xdaa>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a3b      	ldr	r2, [pc, #236]	; (80060c4 <HAL_DMA_IRQHandler+0xe24>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d036      	beq.n	800604a <HAL_DMA_IRQHandler+0xdaa>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a39      	ldr	r2, [pc, #228]	; (80060c8 <HAL_DMA_IRQHandler+0xe28>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d031      	beq.n	800604a <HAL_DMA_IRQHandler+0xdaa>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a38      	ldr	r2, [pc, #224]	; (80060cc <HAL_DMA_IRQHandler+0xe2c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d02c      	beq.n	800604a <HAL_DMA_IRQHandler+0xdaa>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a36      	ldr	r2, [pc, #216]	; (80060d0 <HAL_DMA_IRQHandler+0xe30>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d027      	beq.n	800604a <HAL_DMA_IRQHandler+0xdaa>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a35      	ldr	r2, [pc, #212]	; (80060d4 <HAL_DMA_IRQHandler+0xe34>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d022      	beq.n	800604a <HAL_DMA_IRQHandler+0xdaa>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a33      	ldr	r2, [pc, #204]	; (80060d8 <HAL_DMA_IRQHandler+0xe38>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01d      	beq.n	800604a <HAL_DMA_IRQHandler+0xdaa>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a32      	ldr	r2, [pc, #200]	; (80060dc <HAL_DMA_IRQHandler+0xe3c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d018      	beq.n	800604a <HAL_DMA_IRQHandler+0xdaa>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a30      	ldr	r2, [pc, #192]	; (80060e0 <HAL_DMA_IRQHandler+0xe40>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d013      	beq.n	800604a <HAL_DMA_IRQHandler+0xdaa>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a2f      	ldr	r2, [pc, #188]	; (80060e4 <HAL_DMA_IRQHandler+0xe44>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00e      	beq.n	800604a <HAL_DMA_IRQHandler+0xdaa>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a2d      	ldr	r2, [pc, #180]	; (80060e8 <HAL_DMA_IRQHandler+0xe48>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d009      	beq.n	800604a <HAL_DMA_IRQHandler+0xdaa>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a2c      	ldr	r2, [pc, #176]	; (80060ec <HAL_DMA_IRQHandler+0xe4c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d004      	beq.n	800604a <HAL_DMA_IRQHandler+0xdaa>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a2a      	ldr	r2, [pc, #168]	; (80060f0 <HAL_DMA_IRQHandler+0xe50>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d108      	bne.n	800605c <HAL_DMA_IRQHandler+0xdbc>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 021c 	bic.w	r2, r2, #28
 8006058:	601a      	str	r2, [r3, #0]
 800605a:	e007      	b.n	800606c <HAL_DMA_IRQHandler+0xdcc>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 020e 	bic.w	r2, r2, #14
 800606a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006070:	f003 031f 	and.w	r3, r3, #31
 8006074:	2201      	movs	r2, #1
 8006076:	409a      	lsls	r2, r3
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4798      	blx	r3
 80060a2:	e004      	b.n	80060ae <HAL_DMA_IRQHandler+0xe0e>
          return;
 80060a4:	bf00      	nop
 80060a6:	e002      	b.n	80060ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060a8:	bf00      	nop
 80060aa:	e000      	b.n	80060ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060ac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80060ae:	3728      	adds	r7, #40	; 0x28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	40020010 	.word	0x40020010
 80060b8:	40020028 	.word	0x40020028
 80060bc:	40020040 	.word	0x40020040
 80060c0:	40020058 	.word	0x40020058
 80060c4:	40020070 	.word	0x40020070
 80060c8:	40020088 	.word	0x40020088
 80060cc:	400200a0 	.word	0x400200a0
 80060d0:	400200b8 	.word	0x400200b8
 80060d4:	40020410 	.word	0x40020410
 80060d8:	40020428 	.word	0x40020428
 80060dc:	40020440 	.word	0x40020440
 80060e0:	40020458 	.word	0x40020458
 80060e4:	40020470 	.word	0x40020470
 80060e8:	40020488 	.word	0x40020488
 80060ec:	400204a0 	.word	0x400204a0
 80060f0:	400204b8 	.word	0x400204b8

080060f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006106:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800610c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a84      	ldr	r2, [pc, #528]	; (8006324 <DMA_SetConfig+0x230>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d072      	beq.n	80061fe <DMA_SetConfig+0x10a>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a82      	ldr	r2, [pc, #520]	; (8006328 <DMA_SetConfig+0x234>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d06d      	beq.n	80061fe <DMA_SetConfig+0x10a>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a81      	ldr	r2, [pc, #516]	; (800632c <DMA_SetConfig+0x238>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d068      	beq.n	80061fe <DMA_SetConfig+0x10a>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a7f      	ldr	r2, [pc, #508]	; (8006330 <DMA_SetConfig+0x23c>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d063      	beq.n	80061fe <DMA_SetConfig+0x10a>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a7e      	ldr	r2, [pc, #504]	; (8006334 <DMA_SetConfig+0x240>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d05e      	beq.n	80061fe <DMA_SetConfig+0x10a>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a7c      	ldr	r2, [pc, #496]	; (8006338 <DMA_SetConfig+0x244>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d059      	beq.n	80061fe <DMA_SetConfig+0x10a>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a7b      	ldr	r2, [pc, #492]	; (800633c <DMA_SetConfig+0x248>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d054      	beq.n	80061fe <DMA_SetConfig+0x10a>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a79      	ldr	r2, [pc, #484]	; (8006340 <DMA_SetConfig+0x24c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d04f      	beq.n	80061fe <DMA_SetConfig+0x10a>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a78      	ldr	r2, [pc, #480]	; (8006344 <DMA_SetConfig+0x250>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d04a      	beq.n	80061fe <DMA_SetConfig+0x10a>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a76      	ldr	r2, [pc, #472]	; (8006348 <DMA_SetConfig+0x254>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d045      	beq.n	80061fe <DMA_SetConfig+0x10a>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a75      	ldr	r2, [pc, #468]	; (800634c <DMA_SetConfig+0x258>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d040      	beq.n	80061fe <DMA_SetConfig+0x10a>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a73      	ldr	r2, [pc, #460]	; (8006350 <DMA_SetConfig+0x25c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d03b      	beq.n	80061fe <DMA_SetConfig+0x10a>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a72      	ldr	r2, [pc, #456]	; (8006354 <DMA_SetConfig+0x260>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d036      	beq.n	80061fe <DMA_SetConfig+0x10a>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a70      	ldr	r2, [pc, #448]	; (8006358 <DMA_SetConfig+0x264>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d031      	beq.n	80061fe <DMA_SetConfig+0x10a>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a6f      	ldr	r2, [pc, #444]	; (800635c <DMA_SetConfig+0x268>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d02c      	beq.n	80061fe <DMA_SetConfig+0x10a>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a6d      	ldr	r2, [pc, #436]	; (8006360 <DMA_SetConfig+0x26c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d027      	beq.n	80061fe <DMA_SetConfig+0x10a>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a6c      	ldr	r2, [pc, #432]	; (8006364 <DMA_SetConfig+0x270>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d022      	beq.n	80061fe <DMA_SetConfig+0x10a>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a6a      	ldr	r2, [pc, #424]	; (8006368 <DMA_SetConfig+0x274>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d01d      	beq.n	80061fe <DMA_SetConfig+0x10a>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a69      	ldr	r2, [pc, #420]	; (800636c <DMA_SetConfig+0x278>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d018      	beq.n	80061fe <DMA_SetConfig+0x10a>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a67      	ldr	r2, [pc, #412]	; (8006370 <DMA_SetConfig+0x27c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d013      	beq.n	80061fe <DMA_SetConfig+0x10a>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a66      	ldr	r2, [pc, #408]	; (8006374 <DMA_SetConfig+0x280>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00e      	beq.n	80061fe <DMA_SetConfig+0x10a>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a64      	ldr	r2, [pc, #400]	; (8006378 <DMA_SetConfig+0x284>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d009      	beq.n	80061fe <DMA_SetConfig+0x10a>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a63      	ldr	r2, [pc, #396]	; (800637c <DMA_SetConfig+0x288>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d004      	beq.n	80061fe <DMA_SetConfig+0x10a>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a61      	ldr	r2, [pc, #388]	; (8006380 <DMA_SetConfig+0x28c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d101      	bne.n	8006202 <DMA_SetConfig+0x10e>
 80061fe:	2301      	movs	r3, #1
 8006200:	e000      	b.n	8006204 <DMA_SetConfig+0x110>
 8006202:	2300      	movs	r3, #0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00d      	beq.n	8006224 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006210:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006216:	2b00      	cmp	r3, #0
 8006218:	d004      	beq.n	8006224 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006222:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a3e      	ldr	r2, [pc, #248]	; (8006324 <DMA_SetConfig+0x230>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d04a      	beq.n	80062c4 <DMA_SetConfig+0x1d0>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a3d      	ldr	r2, [pc, #244]	; (8006328 <DMA_SetConfig+0x234>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d045      	beq.n	80062c4 <DMA_SetConfig+0x1d0>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a3b      	ldr	r2, [pc, #236]	; (800632c <DMA_SetConfig+0x238>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d040      	beq.n	80062c4 <DMA_SetConfig+0x1d0>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a3a      	ldr	r2, [pc, #232]	; (8006330 <DMA_SetConfig+0x23c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d03b      	beq.n	80062c4 <DMA_SetConfig+0x1d0>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a38      	ldr	r2, [pc, #224]	; (8006334 <DMA_SetConfig+0x240>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d036      	beq.n	80062c4 <DMA_SetConfig+0x1d0>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a37      	ldr	r2, [pc, #220]	; (8006338 <DMA_SetConfig+0x244>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d031      	beq.n	80062c4 <DMA_SetConfig+0x1d0>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a35      	ldr	r2, [pc, #212]	; (800633c <DMA_SetConfig+0x248>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d02c      	beq.n	80062c4 <DMA_SetConfig+0x1d0>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a34      	ldr	r2, [pc, #208]	; (8006340 <DMA_SetConfig+0x24c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d027      	beq.n	80062c4 <DMA_SetConfig+0x1d0>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a32      	ldr	r2, [pc, #200]	; (8006344 <DMA_SetConfig+0x250>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d022      	beq.n	80062c4 <DMA_SetConfig+0x1d0>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a31      	ldr	r2, [pc, #196]	; (8006348 <DMA_SetConfig+0x254>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d01d      	beq.n	80062c4 <DMA_SetConfig+0x1d0>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a2f      	ldr	r2, [pc, #188]	; (800634c <DMA_SetConfig+0x258>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d018      	beq.n	80062c4 <DMA_SetConfig+0x1d0>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a2e      	ldr	r2, [pc, #184]	; (8006350 <DMA_SetConfig+0x25c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d013      	beq.n	80062c4 <DMA_SetConfig+0x1d0>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a2c      	ldr	r2, [pc, #176]	; (8006354 <DMA_SetConfig+0x260>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00e      	beq.n	80062c4 <DMA_SetConfig+0x1d0>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a2b      	ldr	r2, [pc, #172]	; (8006358 <DMA_SetConfig+0x264>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d009      	beq.n	80062c4 <DMA_SetConfig+0x1d0>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a29      	ldr	r2, [pc, #164]	; (800635c <DMA_SetConfig+0x268>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d004      	beq.n	80062c4 <DMA_SetConfig+0x1d0>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a28      	ldr	r2, [pc, #160]	; (8006360 <DMA_SetConfig+0x26c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d101      	bne.n	80062c8 <DMA_SetConfig+0x1d4>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <DMA_SetConfig+0x1d6>
 80062c8:	2300      	movs	r3, #0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d05a      	beq.n	8006384 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d2:	f003 031f 	and.w	r3, r3, #31
 80062d6:	223f      	movs	r2, #63	; 0x3f
 80062d8:	409a      	lsls	r2, r3
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062ec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	2b40      	cmp	r3, #64	; 0x40
 80062fc:	d108      	bne.n	8006310 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800630e:	e087      	b.n	8006420 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	60da      	str	r2, [r3, #12]
}
 8006320:	e07e      	b.n	8006420 <DMA_SetConfig+0x32c>
 8006322:	bf00      	nop
 8006324:	40020010 	.word	0x40020010
 8006328:	40020028 	.word	0x40020028
 800632c:	40020040 	.word	0x40020040
 8006330:	40020058 	.word	0x40020058
 8006334:	40020070 	.word	0x40020070
 8006338:	40020088 	.word	0x40020088
 800633c:	400200a0 	.word	0x400200a0
 8006340:	400200b8 	.word	0x400200b8
 8006344:	40020410 	.word	0x40020410
 8006348:	40020428 	.word	0x40020428
 800634c:	40020440 	.word	0x40020440
 8006350:	40020458 	.word	0x40020458
 8006354:	40020470 	.word	0x40020470
 8006358:	40020488 	.word	0x40020488
 800635c:	400204a0 	.word	0x400204a0
 8006360:	400204b8 	.word	0x400204b8
 8006364:	58025408 	.word	0x58025408
 8006368:	5802541c 	.word	0x5802541c
 800636c:	58025430 	.word	0x58025430
 8006370:	58025444 	.word	0x58025444
 8006374:	58025458 	.word	0x58025458
 8006378:	5802546c 	.word	0x5802546c
 800637c:	58025480 	.word	0x58025480
 8006380:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a28      	ldr	r2, [pc, #160]	; (800642c <DMA_SetConfig+0x338>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d022      	beq.n	80063d4 <DMA_SetConfig+0x2e0>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a27      	ldr	r2, [pc, #156]	; (8006430 <DMA_SetConfig+0x33c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d01d      	beq.n	80063d4 <DMA_SetConfig+0x2e0>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a25      	ldr	r2, [pc, #148]	; (8006434 <DMA_SetConfig+0x340>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d018      	beq.n	80063d4 <DMA_SetConfig+0x2e0>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a24      	ldr	r2, [pc, #144]	; (8006438 <DMA_SetConfig+0x344>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d013      	beq.n	80063d4 <DMA_SetConfig+0x2e0>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a22      	ldr	r2, [pc, #136]	; (800643c <DMA_SetConfig+0x348>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00e      	beq.n	80063d4 <DMA_SetConfig+0x2e0>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a21      	ldr	r2, [pc, #132]	; (8006440 <DMA_SetConfig+0x34c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d009      	beq.n	80063d4 <DMA_SetConfig+0x2e0>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a1f      	ldr	r2, [pc, #124]	; (8006444 <DMA_SetConfig+0x350>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d004      	beq.n	80063d4 <DMA_SetConfig+0x2e0>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a1e      	ldr	r2, [pc, #120]	; (8006448 <DMA_SetConfig+0x354>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d101      	bne.n	80063d8 <DMA_SetConfig+0x2e4>
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <DMA_SetConfig+0x2e6>
 80063d8:	2300      	movs	r3, #0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d020      	beq.n	8006420 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e2:	f003 031f 	and.w	r3, r3, #31
 80063e6:	2201      	movs	r2, #1
 80063e8:	409a      	lsls	r2, r3
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	2b40      	cmp	r3, #64	; 0x40
 80063fc:	d108      	bne.n	8006410 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	60da      	str	r2, [r3, #12]
}
 800640e:	e007      	b.n	8006420 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	60da      	str	r2, [r3, #12]
}
 8006420:	bf00      	nop
 8006422:	371c      	adds	r7, #28
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	58025408 	.word	0x58025408
 8006430:	5802541c 	.word	0x5802541c
 8006434:	58025430 	.word	0x58025430
 8006438:	58025444 	.word	0x58025444
 800643c:	58025458 	.word	0x58025458
 8006440:	5802546c 	.word	0x5802546c
 8006444:	58025480 	.word	0x58025480
 8006448:	58025494 	.word	0x58025494

0800644c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a42      	ldr	r2, [pc, #264]	; (8006564 <DMA_CalcBaseAndBitshift+0x118>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d04a      	beq.n	80064f4 <DMA_CalcBaseAndBitshift+0xa8>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a41      	ldr	r2, [pc, #260]	; (8006568 <DMA_CalcBaseAndBitshift+0x11c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d045      	beq.n	80064f4 <DMA_CalcBaseAndBitshift+0xa8>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a3f      	ldr	r2, [pc, #252]	; (800656c <DMA_CalcBaseAndBitshift+0x120>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d040      	beq.n	80064f4 <DMA_CalcBaseAndBitshift+0xa8>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a3e      	ldr	r2, [pc, #248]	; (8006570 <DMA_CalcBaseAndBitshift+0x124>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d03b      	beq.n	80064f4 <DMA_CalcBaseAndBitshift+0xa8>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a3c      	ldr	r2, [pc, #240]	; (8006574 <DMA_CalcBaseAndBitshift+0x128>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d036      	beq.n	80064f4 <DMA_CalcBaseAndBitshift+0xa8>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a3b      	ldr	r2, [pc, #236]	; (8006578 <DMA_CalcBaseAndBitshift+0x12c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d031      	beq.n	80064f4 <DMA_CalcBaseAndBitshift+0xa8>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a39      	ldr	r2, [pc, #228]	; (800657c <DMA_CalcBaseAndBitshift+0x130>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d02c      	beq.n	80064f4 <DMA_CalcBaseAndBitshift+0xa8>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a38      	ldr	r2, [pc, #224]	; (8006580 <DMA_CalcBaseAndBitshift+0x134>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d027      	beq.n	80064f4 <DMA_CalcBaseAndBitshift+0xa8>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a36      	ldr	r2, [pc, #216]	; (8006584 <DMA_CalcBaseAndBitshift+0x138>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d022      	beq.n	80064f4 <DMA_CalcBaseAndBitshift+0xa8>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a35      	ldr	r2, [pc, #212]	; (8006588 <DMA_CalcBaseAndBitshift+0x13c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d01d      	beq.n	80064f4 <DMA_CalcBaseAndBitshift+0xa8>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a33      	ldr	r2, [pc, #204]	; (800658c <DMA_CalcBaseAndBitshift+0x140>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d018      	beq.n	80064f4 <DMA_CalcBaseAndBitshift+0xa8>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a32      	ldr	r2, [pc, #200]	; (8006590 <DMA_CalcBaseAndBitshift+0x144>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d013      	beq.n	80064f4 <DMA_CalcBaseAndBitshift+0xa8>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a30      	ldr	r2, [pc, #192]	; (8006594 <DMA_CalcBaseAndBitshift+0x148>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d00e      	beq.n	80064f4 <DMA_CalcBaseAndBitshift+0xa8>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a2f      	ldr	r2, [pc, #188]	; (8006598 <DMA_CalcBaseAndBitshift+0x14c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d009      	beq.n	80064f4 <DMA_CalcBaseAndBitshift+0xa8>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a2d      	ldr	r2, [pc, #180]	; (800659c <DMA_CalcBaseAndBitshift+0x150>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d004      	beq.n	80064f4 <DMA_CalcBaseAndBitshift+0xa8>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a2c      	ldr	r2, [pc, #176]	; (80065a0 <DMA_CalcBaseAndBitshift+0x154>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d101      	bne.n	80064f8 <DMA_CalcBaseAndBitshift+0xac>
 80064f4:	2301      	movs	r3, #1
 80064f6:	e000      	b.n	80064fa <DMA_CalcBaseAndBitshift+0xae>
 80064f8:	2300      	movs	r3, #0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d024      	beq.n	8006548 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	b2db      	uxtb	r3, r3
 8006504:	3b10      	subs	r3, #16
 8006506:	4a27      	ldr	r2, [pc, #156]	; (80065a4 <DMA_CalcBaseAndBitshift+0x158>)
 8006508:	fba2 2303 	umull	r2, r3, r2, r3
 800650c:	091b      	lsrs	r3, r3, #4
 800650e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	4a24      	ldr	r2, [pc, #144]	; (80065a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006518:	5cd3      	ldrb	r3, [r2, r3]
 800651a:	461a      	mov	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2b03      	cmp	r3, #3
 8006524:	d908      	bls.n	8006538 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	461a      	mov	r2, r3
 800652c:	4b1f      	ldr	r3, [pc, #124]	; (80065ac <DMA_CalcBaseAndBitshift+0x160>)
 800652e:	4013      	ands	r3, r2
 8006530:	1d1a      	adds	r2, r3, #4
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	659a      	str	r2, [r3, #88]	; 0x58
 8006536:	e00d      	b.n	8006554 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	4b1b      	ldr	r3, [pc, #108]	; (80065ac <DMA_CalcBaseAndBitshift+0x160>)
 8006540:	4013      	ands	r3, r2
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6593      	str	r3, [r2, #88]	; 0x58
 8006546:	e005      	b.n	8006554 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	40020010 	.word	0x40020010
 8006568:	40020028 	.word	0x40020028
 800656c:	40020040 	.word	0x40020040
 8006570:	40020058 	.word	0x40020058
 8006574:	40020070 	.word	0x40020070
 8006578:	40020088 	.word	0x40020088
 800657c:	400200a0 	.word	0x400200a0
 8006580:	400200b8 	.word	0x400200b8
 8006584:	40020410 	.word	0x40020410
 8006588:	40020428 	.word	0x40020428
 800658c:	40020440 	.word	0x40020440
 8006590:	40020458 	.word	0x40020458
 8006594:	40020470 	.word	0x40020470
 8006598:	40020488 	.word	0x40020488
 800659c:	400204a0 	.word	0x400204a0
 80065a0:	400204b8 	.word	0x400204b8
 80065a4:	aaaaaaab 	.word	0xaaaaaaab
 80065a8:	0800d4a4 	.word	0x0800d4a4
 80065ac:	fffffc00 	.word	0xfffffc00

080065b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065b8:	2300      	movs	r3, #0
 80065ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d120      	bne.n	8006606 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d858      	bhi.n	800667e <DMA_CheckFifoParam+0xce>
 80065cc:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <DMA_CheckFifoParam+0x24>)
 80065ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d2:	bf00      	nop
 80065d4:	080065e5 	.word	0x080065e5
 80065d8:	080065f7 	.word	0x080065f7
 80065dc:	080065e5 	.word	0x080065e5
 80065e0:	0800667f 	.word	0x0800667f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d048      	beq.n	8006682 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80065f4:	e045      	b.n	8006682 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80065fe:	d142      	bne.n	8006686 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006604:	e03f      	b.n	8006686 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800660e:	d123      	bne.n	8006658 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006614:	2b03      	cmp	r3, #3
 8006616:	d838      	bhi.n	800668a <DMA_CheckFifoParam+0xda>
 8006618:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <DMA_CheckFifoParam+0x70>)
 800661a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661e:	bf00      	nop
 8006620:	08006631 	.word	0x08006631
 8006624:	08006637 	.word	0x08006637
 8006628:	08006631 	.word	0x08006631
 800662c:	08006649 	.word	0x08006649
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	73fb      	strb	r3, [r7, #15]
        break;
 8006634:	e030      	b.n	8006698 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d025      	beq.n	800668e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006646:	e022      	b.n	800668e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006650:	d11f      	bne.n	8006692 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006656:	e01c      	b.n	8006692 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665c:	2b02      	cmp	r3, #2
 800665e:	d902      	bls.n	8006666 <DMA_CheckFifoParam+0xb6>
 8006660:	2b03      	cmp	r3, #3
 8006662:	d003      	beq.n	800666c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006664:	e018      	b.n	8006698 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	73fb      	strb	r3, [r7, #15]
        break;
 800666a:	e015      	b.n	8006698 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00e      	beq.n	8006696 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	73fb      	strb	r3, [r7, #15]
    break;
 800667c:	e00b      	b.n	8006696 <DMA_CheckFifoParam+0xe6>
        break;
 800667e:	bf00      	nop
 8006680:	e00a      	b.n	8006698 <DMA_CheckFifoParam+0xe8>
        break;
 8006682:	bf00      	nop
 8006684:	e008      	b.n	8006698 <DMA_CheckFifoParam+0xe8>
        break;
 8006686:	bf00      	nop
 8006688:	e006      	b.n	8006698 <DMA_CheckFifoParam+0xe8>
        break;
 800668a:	bf00      	nop
 800668c:	e004      	b.n	8006698 <DMA_CheckFifoParam+0xe8>
        break;
 800668e:	bf00      	nop
 8006690:	e002      	b.n	8006698 <DMA_CheckFifoParam+0xe8>
        break;
 8006692:	bf00      	nop
 8006694:	e000      	b.n	8006698 <DMA_CheckFifoParam+0xe8>
    break;
 8006696:	bf00      	nop
    }
  }

  return status;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop

080066a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a38      	ldr	r2, [pc, #224]	; (800679c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d022      	beq.n	8006706 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a36      	ldr	r2, [pc, #216]	; (80067a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d01d      	beq.n	8006706 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a35      	ldr	r2, [pc, #212]	; (80067a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d018      	beq.n	8006706 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a33      	ldr	r2, [pc, #204]	; (80067a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d013      	beq.n	8006706 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a32      	ldr	r2, [pc, #200]	; (80067ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00e      	beq.n	8006706 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a30      	ldr	r2, [pc, #192]	; (80067b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d009      	beq.n	8006706 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a2f      	ldr	r2, [pc, #188]	; (80067b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d004      	beq.n	8006706 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a2d      	ldr	r2, [pc, #180]	; (80067b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d101      	bne.n	800670a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800670a:	2300      	movs	r3, #0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01a      	beq.n	8006746 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	b2db      	uxtb	r3, r3
 8006716:	3b08      	subs	r3, #8
 8006718:	4a28      	ldr	r2, [pc, #160]	; (80067bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800671a:	fba2 2303 	umull	r2, r3, r2, r3
 800671e:	091b      	lsrs	r3, r3, #4
 8006720:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4b26      	ldr	r3, [pc, #152]	; (80067c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	461a      	mov	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a24      	ldr	r2, [pc, #144]	; (80067c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006734:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f003 031f 	and.w	r3, r3, #31
 800673c:	2201      	movs	r2, #1
 800673e:	409a      	lsls	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006744:	e024      	b.n	8006790 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	b2db      	uxtb	r3, r3
 800674c:	3b10      	subs	r3, #16
 800674e:	4a1e      	ldr	r2, [pc, #120]	; (80067c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006750:	fba2 2303 	umull	r2, r3, r2, r3
 8006754:	091b      	lsrs	r3, r3, #4
 8006756:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	4a1c      	ldr	r2, [pc, #112]	; (80067cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d806      	bhi.n	800676e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	4a1b      	ldr	r2, [pc, #108]	; (80067d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d902      	bls.n	800676e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3308      	adds	r3, #8
 800676c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	4b18      	ldr	r3, [pc, #96]	; (80067d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	461a      	mov	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a16      	ldr	r2, [pc, #88]	; (80067d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006780:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f003 031f 	and.w	r3, r3, #31
 8006788:	2201      	movs	r2, #1
 800678a:	409a      	lsls	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006790:	bf00      	nop
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	58025408 	.word	0x58025408
 80067a0:	5802541c 	.word	0x5802541c
 80067a4:	58025430 	.word	0x58025430
 80067a8:	58025444 	.word	0x58025444
 80067ac:	58025458 	.word	0x58025458
 80067b0:	5802546c 	.word	0x5802546c
 80067b4:	58025480 	.word	0x58025480
 80067b8:	58025494 	.word	0x58025494
 80067bc:	cccccccd 	.word	0xcccccccd
 80067c0:	16009600 	.word	0x16009600
 80067c4:	58025880 	.word	0x58025880
 80067c8:	aaaaaaab 	.word	0xaaaaaaab
 80067cc:	400204b8 	.word	0x400204b8
 80067d0:	4002040f 	.word	0x4002040f
 80067d4:	10008200 	.word	0x10008200
 80067d8:	40020880 	.word	0x40020880

080067dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d04a      	beq.n	8006888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	d847      	bhi.n	8006888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a25      	ldr	r2, [pc, #148]	; (8006894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d022      	beq.n	8006848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a24      	ldr	r2, [pc, #144]	; (8006898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d01d      	beq.n	8006848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a22      	ldr	r2, [pc, #136]	; (800689c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d018      	beq.n	8006848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a21      	ldr	r2, [pc, #132]	; (80068a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d013      	beq.n	8006848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a1f      	ldr	r2, [pc, #124]	; (80068a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d00e      	beq.n	8006848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a1e      	ldr	r2, [pc, #120]	; (80068a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d009      	beq.n	8006848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a1c      	ldr	r2, [pc, #112]	; (80068ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d004      	beq.n	8006848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1b      	ldr	r2, [pc, #108]	; (80068b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d101      	bne.n	800684c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006848:	2301      	movs	r3, #1
 800684a:	e000      	b.n	800684e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800684c:	2300      	movs	r3, #0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4b17      	ldr	r3, [pc, #92]	; (80068b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006856:	4413      	add	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	461a      	mov	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a15      	ldr	r2, [pc, #84]	; (80068b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006864:	671a      	str	r2, [r3, #112]	; 0x70
 8006866:	e009      	b.n	800687c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	4b14      	ldr	r3, [pc, #80]	; (80068bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	461a      	mov	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a11      	ldr	r2, [pc, #68]	; (80068c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800687a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	3b01      	subs	r3, #1
 8006880:	2201      	movs	r2, #1
 8006882:	409a      	lsls	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006888:	bf00      	nop
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	58025408 	.word	0x58025408
 8006898:	5802541c 	.word	0x5802541c
 800689c:	58025430 	.word	0x58025430
 80068a0:	58025444 	.word	0x58025444
 80068a4:	58025458 	.word	0x58025458
 80068a8:	5802546c 	.word	0x5802546c
 80068ac:	58025480 	.word	0x58025480
 80068b0:	58025494 	.word	0x58025494
 80068b4:	1600963f 	.word	0x1600963f
 80068b8:	58025940 	.word	0x58025940
 80068bc:	1000823f 	.word	0x1000823f
 80068c0:	40020940 	.word	0x40020940

080068c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b089      	sub	sp, #36	; 0x24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80068d2:	4b89      	ldr	r3, [pc, #548]	; (8006af8 <HAL_GPIO_Init+0x234>)
 80068d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80068d6:	e194      	b.n	8006c02 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	2101      	movs	r1, #1
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	fa01 f303 	lsl.w	r3, r1, r3
 80068e4:	4013      	ands	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 8186 	beq.w	8006bfc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f003 0303 	and.w	r3, r3, #3
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d005      	beq.n	8006908 <HAL_GPIO_Init+0x44>
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d130      	bne.n	800696a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	2203      	movs	r2, #3
 8006914:	fa02 f303 	lsl.w	r3, r2, r3
 8006918:	43db      	mvns	r3, r3
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	4013      	ands	r3, r2
 800691e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	005b      	lsls	r3, r3, #1
 8006928:	fa02 f303 	lsl.w	r3, r2, r3
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	4313      	orrs	r3, r2
 8006930:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	69ba      	ldr	r2, [r7, #24]
 8006936:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800693e:	2201      	movs	r2, #1
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	fa02 f303 	lsl.w	r3, r2, r3
 8006946:	43db      	mvns	r3, r3
 8006948:	69ba      	ldr	r2, [r7, #24]
 800694a:	4013      	ands	r3, r2
 800694c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	091b      	lsrs	r3, r3, #4
 8006954:	f003 0201 	and.w	r2, r3, #1
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	fa02 f303 	lsl.w	r3, r2, r3
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	4313      	orrs	r3, r2
 8006962:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	2b03      	cmp	r3, #3
 8006974:	d017      	beq.n	80069a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	2203      	movs	r2, #3
 8006982:	fa02 f303 	lsl.w	r3, r2, r3
 8006986:	43db      	mvns	r3, r3
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	4013      	ands	r3, r2
 800698c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	fa02 f303 	lsl.w	r3, r2, r3
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	4313      	orrs	r3, r2
 800699e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f003 0303 	and.w	r3, r3, #3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d123      	bne.n	80069fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	08da      	lsrs	r2, r3, #3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3208      	adds	r2, #8
 80069ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	f003 0307 	and.w	r3, r3, #7
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	220f      	movs	r2, #15
 80069ca:	fa02 f303 	lsl.w	r3, r2, r3
 80069ce:	43db      	mvns	r3, r3
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	4013      	ands	r3, r2
 80069d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	691a      	ldr	r2, [r3, #16]
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	f003 0307 	and.w	r3, r3, #7
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	fa02 f303 	lsl.w	r3, r2, r3
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	08da      	lsrs	r2, r3, #3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3208      	adds	r2, #8
 80069f4:	69b9      	ldr	r1, [r7, #24]
 80069f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	2203      	movs	r2, #3
 8006a06:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0a:	43db      	mvns	r3, r3
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f003 0203 	and.w	r2, r3, #3
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	005b      	lsls	r3, r3, #1
 8006a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 80e0 	beq.w	8006bfc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a3c:	4b2f      	ldr	r3, [pc, #188]	; (8006afc <HAL_GPIO_Init+0x238>)
 8006a3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a42:	4a2e      	ldr	r2, [pc, #184]	; (8006afc <HAL_GPIO_Init+0x238>)
 8006a44:	f043 0302 	orr.w	r3, r3, #2
 8006a48:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006a4c:	4b2b      	ldr	r3, [pc, #172]	; (8006afc <HAL_GPIO_Init+0x238>)
 8006a4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a5a:	4a29      	ldr	r2, [pc, #164]	; (8006b00 <HAL_GPIO_Init+0x23c>)
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	089b      	lsrs	r3, r3, #2
 8006a60:	3302      	adds	r3, #2
 8006a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	f003 0303 	and.w	r3, r3, #3
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	220f      	movs	r2, #15
 8006a72:	fa02 f303 	lsl.w	r3, r2, r3
 8006a76:	43db      	mvns	r3, r3
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a20      	ldr	r2, [pc, #128]	; (8006b04 <HAL_GPIO_Init+0x240>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d052      	beq.n	8006b2c <HAL_GPIO_Init+0x268>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a1f      	ldr	r2, [pc, #124]	; (8006b08 <HAL_GPIO_Init+0x244>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d031      	beq.n	8006af2 <HAL_GPIO_Init+0x22e>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a1e      	ldr	r2, [pc, #120]	; (8006b0c <HAL_GPIO_Init+0x248>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d02b      	beq.n	8006aee <HAL_GPIO_Init+0x22a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a1d      	ldr	r2, [pc, #116]	; (8006b10 <HAL_GPIO_Init+0x24c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d025      	beq.n	8006aea <HAL_GPIO_Init+0x226>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a1c      	ldr	r2, [pc, #112]	; (8006b14 <HAL_GPIO_Init+0x250>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d01f      	beq.n	8006ae6 <HAL_GPIO_Init+0x222>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a1b      	ldr	r2, [pc, #108]	; (8006b18 <HAL_GPIO_Init+0x254>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d019      	beq.n	8006ae2 <HAL_GPIO_Init+0x21e>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a1a      	ldr	r2, [pc, #104]	; (8006b1c <HAL_GPIO_Init+0x258>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d013      	beq.n	8006ade <HAL_GPIO_Init+0x21a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a19      	ldr	r2, [pc, #100]	; (8006b20 <HAL_GPIO_Init+0x25c>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d00d      	beq.n	8006ada <HAL_GPIO_Init+0x216>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a18      	ldr	r2, [pc, #96]	; (8006b24 <HAL_GPIO_Init+0x260>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d007      	beq.n	8006ad6 <HAL_GPIO_Init+0x212>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a17      	ldr	r2, [pc, #92]	; (8006b28 <HAL_GPIO_Init+0x264>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d101      	bne.n	8006ad2 <HAL_GPIO_Init+0x20e>
 8006ace:	2309      	movs	r3, #9
 8006ad0:	e02d      	b.n	8006b2e <HAL_GPIO_Init+0x26a>
 8006ad2:	230a      	movs	r3, #10
 8006ad4:	e02b      	b.n	8006b2e <HAL_GPIO_Init+0x26a>
 8006ad6:	2308      	movs	r3, #8
 8006ad8:	e029      	b.n	8006b2e <HAL_GPIO_Init+0x26a>
 8006ada:	2307      	movs	r3, #7
 8006adc:	e027      	b.n	8006b2e <HAL_GPIO_Init+0x26a>
 8006ade:	2306      	movs	r3, #6
 8006ae0:	e025      	b.n	8006b2e <HAL_GPIO_Init+0x26a>
 8006ae2:	2305      	movs	r3, #5
 8006ae4:	e023      	b.n	8006b2e <HAL_GPIO_Init+0x26a>
 8006ae6:	2304      	movs	r3, #4
 8006ae8:	e021      	b.n	8006b2e <HAL_GPIO_Init+0x26a>
 8006aea:	2303      	movs	r3, #3
 8006aec:	e01f      	b.n	8006b2e <HAL_GPIO_Init+0x26a>
 8006aee:	2302      	movs	r3, #2
 8006af0:	e01d      	b.n	8006b2e <HAL_GPIO_Init+0x26a>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e01b      	b.n	8006b2e <HAL_GPIO_Init+0x26a>
 8006af6:	bf00      	nop
 8006af8:	58000080 	.word	0x58000080
 8006afc:	58024400 	.word	0x58024400
 8006b00:	58000400 	.word	0x58000400
 8006b04:	58020000 	.word	0x58020000
 8006b08:	58020400 	.word	0x58020400
 8006b0c:	58020800 	.word	0x58020800
 8006b10:	58020c00 	.word	0x58020c00
 8006b14:	58021000 	.word	0x58021000
 8006b18:	58021400 	.word	0x58021400
 8006b1c:	58021800 	.word	0x58021800
 8006b20:	58021c00 	.word	0x58021c00
 8006b24:	58022000 	.word	0x58022000
 8006b28:	58022400 	.word	0x58022400
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	69fa      	ldr	r2, [r7, #28]
 8006b30:	f002 0203 	and.w	r2, r2, #3
 8006b34:	0092      	lsls	r2, r2, #2
 8006b36:	4093      	lsls	r3, r2
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b3e:	4938      	ldr	r1, [pc, #224]	; (8006c20 <HAL_GPIO_Init+0x35c>)
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	089b      	lsrs	r3, r3, #2
 8006b44:	3302      	adds	r3, #2
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	43db      	mvns	r3, r3
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006b72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	43db      	mvns	r3, r3
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006ba0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	43db      	mvns	r3, r3
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d003      	beq.n	8006bcc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	43db      	mvns	r3, r3
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	4013      	ands	r3, r2
 8006be0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	fa22 f303 	lsr.w	r3, r2, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f47f ae63 	bne.w	80068d8 <HAL_GPIO_Init+0x14>
  }
}
 8006c12:	bf00      	nop
 8006c14:	bf00      	nop
 8006c16:	3724      	adds	r7, #36	; 0x24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	58000400 	.word	0x58000400

08006c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	807b      	strh	r3, [r7, #2]
 8006c30:	4613      	mov	r3, r2
 8006c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c34:	787b      	ldrb	r3, [r7, #1]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c3a:	887a      	ldrh	r2, [r7, #2]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006c40:	e003      	b.n	8006c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006c42:	887b      	ldrh	r3, [r7, #2]
 8006c44:	041a      	lsls	r2, r3, #16
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	619a      	str	r2, [r3, #24]
}
 8006c4a:	bf00      	nop
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b082      	sub	sp, #8
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c68:	88fb      	ldrh	r3, [r7, #6]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d008      	beq.n	8006c82 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c74:	88fb      	ldrh	r3, [r7, #6]
 8006c76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c7a:	88fb      	ldrh	r3, [r7, #6]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 f804 	bl	8006c8a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006c82:	bf00      	nop
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	4603      	mov	r3, r0
 8006c92:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006ca8:	4b19      	ldr	r3, [pc, #100]	; (8006d10 <HAL_PWREx_ConfigSupply+0x70>)
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d00a      	beq.n	8006cca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006cb4:	4b16      	ldr	r3, [pc, #88]	; (8006d10 <HAL_PWREx_ConfigSupply+0x70>)
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d001      	beq.n	8006cc6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e01f      	b.n	8006d06 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	e01d      	b.n	8006d06 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006cca:	4b11      	ldr	r3, [pc, #68]	; (8006d10 <HAL_PWREx_ConfigSupply+0x70>)
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f023 0207 	bic.w	r2, r3, #7
 8006cd2:	490f      	ldr	r1, [pc, #60]	; (8006d10 <HAL_PWREx_ConfigSupply+0x70>)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006cda:	f7fb ff59 	bl	8002b90 <HAL_GetTick>
 8006cde:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006ce0:	e009      	b.n	8006cf6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006ce2:	f7fb ff55 	bl	8002b90 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cf0:	d901      	bls.n	8006cf6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e007      	b.n	8006d06 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006cf6:	4b06      	ldr	r3, [pc, #24]	; (8006d10 <HAL_PWREx_ConfigSupply+0x70>)
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d02:	d1ee      	bne.n	8006ce2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	58024800 	.word	0x58024800

08006d14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08c      	sub	sp, #48	; 0x30
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d102      	bne.n	8006d28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	f000 bc1c 	b.w	8007560 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 8087 	beq.w	8006e44 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d36:	4b9e      	ldr	r3, [pc, #632]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d40:	4b9b      	ldr	r3, [pc, #620]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d44:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d48:	2b10      	cmp	r3, #16
 8006d4a:	d007      	beq.n	8006d5c <HAL_RCC_OscConfig+0x48>
 8006d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4e:	2b18      	cmp	r3, #24
 8006d50:	d110      	bne.n	8006d74 <HAL_RCC_OscConfig+0x60>
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	f003 0303 	and.w	r3, r3, #3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d10b      	bne.n	8006d74 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d5c:	4b94      	ldr	r3, [pc, #592]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d06c      	beq.n	8006e42 <HAL_RCC_OscConfig+0x12e>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d168      	bne.n	8006e42 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e3f5      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d7c:	d106      	bne.n	8006d8c <HAL_RCC_OscConfig+0x78>
 8006d7e:	4b8c      	ldr	r3, [pc, #560]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a8b      	ldr	r2, [pc, #556]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	e02e      	b.n	8006dea <HAL_RCC_OscConfig+0xd6>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10c      	bne.n	8006dae <HAL_RCC_OscConfig+0x9a>
 8006d94:	4b86      	ldr	r3, [pc, #536]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a85      	ldr	r2, [pc, #532]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d9e:	6013      	str	r3, [r2, #0]
 8006da0:	4b83      	ldr	r3, [pc, #524]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a82      	ldr	r2, [pc, #520]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	e01d      	b.n	8006dea <HAL_RCC_OscConfig+0xd6>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006db6:	d10c      	bne.n	8006dd2 <HAL_RCC_OscConfig+0xbe>
 8006db8:	4b7d      	ldr	r3, [pc, #500]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a7c      	ldr	r2, [pc, #496]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006dbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006dc2:	6013      	str	r3, [r2, #0]
 8006dc4:	4b7a      	ldr	r3, [pc, #488]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a79      	ldr	r2, [pc, #484]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dce:	6013      	str	r3, [r2, #0]
 8006dd0:	e00b      	b.n	8006dea <HAL_RCC_OscConfig+0xd6>
 8006dd2:	4b77      	ldr	r3, [pc, #476]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a76      	ldr	r2, [pc, #472]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	4b74      	ldr	r3, [pc, #464]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a73      	ldr	r2, [pc, #460]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006de8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d013      	beq.n	8006e1a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df2:	f7fb fecd 	bl	8002b90 <HAL_GetTick>
 8006df6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006df8:	e008      	b.n	8006e0c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dfa:	f7fb fec9 	bl	8002b90 <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	2b64      	cmp	r3, #100	; 0x64
 8006e06:	d901      	bls.n	8006e0c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e3a9      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e0c:	4b68      	ldr	r3, [pc, #416]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0f0      	beq.n	8006dfa <HAL_RCC_OscConfig+0xe6>
 8006e18:	e014      	b.n	8006e44 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e1a:	f7fb feb9 	bl	8002b90 <HAL_GetTick>
 8006e1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e20:	e008      	b.n	8006e34 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e22:	f7fb feb5 	bl	8002b90 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	2b64      	cmp	r3, #100	; 0x64
 8006e2e:	d901      	bls.n	8006e34 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e395      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e34:	4b5e      	ldr	r3, [pc, #376]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1f0      	bne.n	8006e22 <HAL_RCC_OscConfig+0x10e>
 8006e40:	e000      	b.n	8006e44 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e42:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 80ca 	beq.w	8006fe6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e52:	4b57      	ldr	r3, [pc, #348]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e5a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e5c:	4b54      	ldr	r3, [pc, #336]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e60:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d007      	beq.n	8006e78 <HAL_RCC_OscConfig+0x164>
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	2b18      	cmp	r3, #24
 8006e6c:	d156      	bne.n	8006f1c <HAL_RCC_OscConfig+0x208>
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	f003 0303 	and.w	r3, r3, #3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d151      	bne.n	8006f1c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e78:	4b4d      	ldr	r3, [pc, #308]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0304 	and.w	r3, r3, #4
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d005      	beq.n	8006e90 <HAL_RCC_OscConfig+0x17c>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e367      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e90:	4b47      	ldr	r3, [pc, #284]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f023 0219 	bic.w	r2, r3, #25
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	4944      	ldr	r1, [pc, #272]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ea2:	f7fb fe75 	bl	8002b90 <HAL_GetTick>
 8006ea6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ea8:	e008      	b.n	8006ebc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006eaa:	f7fb fe71 	bl	8002b90 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e351      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ebc:	4b3c      	ldr	r3, [pc, #240]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0f0      	beq.n	8006eaa <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ec8:	f7fb fe6e 	bl	8002ba8 <HAL_GetREVID>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d817      	bhi.n	8006f06 <HAL_RCC_OscConfig+0x1f2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	2b40      	cmp	r3, #64	; 0x40
 8006edc:	d108      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x1dc>
 8006ede:	4b34      	ldr	r3, [pc, #208]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006ee6:	4a32      	ldr	r2, [pc, #200]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eec:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006eee:	e07a      	b.n	8006fe6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ef0:	4b2f      	ldr	r3, [pc, #188]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	031b      	lsls	r3, r3, #12
 8006efe:	492c      	ldr	r1, [pc, #176]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f04:	e06f      	b.n	8006fe6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f06:	4b2a      	ldr	r3, [pc, #168]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	061b      	lsls	r3, r3, #24
 8006f14:	4926      	ldr	r1, [pc, #152]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f1a:	e064      	b.n	8006fe6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d047      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f24:	4b22      	ldr	r3, [pc, #136]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f023 0219 	bic.w	r2, r3, #25
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	491f      	ldr	r1, [pc, #124]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f36:	f7fb fe2b 	bl	8002b90 <HAL_GetTick>
 8006f3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f3c:	e008      	b.n	8006f50 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f3e:	f7fb fe27 	bl	8002b90 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e307      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f50:	4b17      	ldr	r3, [pc, #92]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0304 	and.w	r3, r3, #4
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d0f0      	beq.n	8006f3e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f5c:	f7fb fe24 	bl	8002ba8 <HAL_GetREVID>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d817      	bhi.n	8006f9a <HAL_RCC_OscConfig+0x286>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	2b40      	cmp	r3, #64	; 0x40
 8006f70:	d108      	bne.n	8006f84 <HAL_RCC_OscConfig+0x270>
 8006f72:	4b0f      	ldr	r3, [pc, #60]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006f7a:	4a0d      	ldr	r2, [pc, #52]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f80:	6053      	str	r3, [r2, #4]
 8006f82:	e030      	b.n	8006fe6 <HAL_RCC_OscConfig+0x2d2>
 8006f84:	4b0a      	ldr	r3, [pc, #40]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	031b      	lsls	r3, r3, #12
 8006f92:	4907      	ldr	r1, [pc, #28]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	604b      	str	r3, [r1, #4]
 8006f98:	e025      	b.n	8006fe6 <HAL_RCC_OscConfig+0x2d2>
 8006f9a:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	061b      	lsls	r3, r3, #24
 8006fa8:	4901      	ldr	r1, [pc, #4]	; (8006fb0 <HAL_RCC_OscConfig+0x29c>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	604b      	str	r3, [r1, #4]
 8006fae:	e01a      	b.n	8006fe6 <HAL_RCC_OscConfig+0x2d2>
 8006fb0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fb4:	4b9e      	ldr	r3, [pc, #632]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a9d      	ldr	r2, [pc, #628]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 8006fba:	f023 0301 	bic.w	r3, r3, #1
 8006fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc0:	f7fb fde6 	bl	8002b90 <HAL_GetTick>
 8006fc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fc6:	e008      	b.n	8006fda <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fc8:	f7fb fde2 	bl	8002b90 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d901      	bls.n	8006fda <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e2c2      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fda:	4b95      	ldr	r3, [pc, #596]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0304 	and.w	r3, r3, #4
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1f0      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0310 	and.w	r3, r3, #16
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 80a9 	beq.w	8007146 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ff4:	4b8e      	ldr	r3, [pc, #568]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ffc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ffe:	4b8c      	ldr	r3, [pc, #560]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 8007000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007002:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	2b08      	cmp	r3, #8
 8007008:	d007      	beq.n	800701a <HAL_RCC_OscConfig+0x306>
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	2b18      	cmp	r3, #24
 800700e:	d13a      	bne.n	8007086 <HAL_RCC_OscConfig+0x372>
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f003 0303 	and.w	r3, r3, #3
 8007016:	2b01      	cmp	r3, #1
 8007018:	d135      	bne.n	8007086 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800701a:	4b85      	ldr	r3, [pc, #532]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <HAL_RCC_OscConfig+0x31e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	2b80      	cmp	r3, #128	; 0x80
 800702c:	d001      	beq.n	8007032 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e296      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007032:	f7fb fdb9 	bl	8002ba8 <HAL_GetREVID>
 8007036:	4603      	mov	r3, r0
 8007038:	f241 0203 	movw	r2, #4099	; 0x1003
 800703c:	4293      	cmp	r3, r2
 800703e:	d817      	bhi.n	8007070 <HAL_RCC_OscConfig+0x35c>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	2b20      	cmp	r3, #32
 8007046:	d108      	bne.n	800705a <HAL_RCC_OscConfig+0x346>
 8007048:	4b79      	ldr	r3, [pc, #484]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007050:	4a77      	ldr	r2, [pc, #476]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 8007052:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007056:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007058:	e075      	b.n	8007146 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800705a:	4b75      	ldr	r3, [pc, #468]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	069b      	lsls	r3, r3, #26
 8007068:	4971      	ldr	r1, [pc, #452]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 800706a:	4313      	orrs	r3, r2
 800706c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800706e:	e06a      	b.n	8007146 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007070:	4b6f      	ldr	r3, [pc, #444]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	061b      	lsls	r3, r3, #24
 800707e:	496c      	ldr	r1, [pc, #432]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 8007080:	4313      	orrs	r3, r2
 8007082:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007084:	e05f      	b.n	8007146 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d042      	beq.n	8007114 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800708e:	4b68      	ldr	r3, [pc, #416]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a67      	ldr	r2, [pc, #412]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 8007094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800709a:	f7fb fd79 	bl	8002b90 <HAL_GetTick>
 800709e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070a0:	e008      	b.n	80070b4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80070a2:	f7fb fd75 	bl	8002b90 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d901      	bls.n	80070b4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e255      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070b4:	4b5e      	ldr	r3, [pc, #376]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d0f0      	beq.n	80070a2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070c0:	f7fb fd72 	bl	8002ba8 <HAL_GetREVID>
 80070c4:	4603      	mov	r3, r0
 80070c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d817      	bhi.n	80070fe <HAL_RCC_OscConfig+0x3ea>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	d108      	bne.n	80070e8 <HAL_RCC_OscConfig+0x3d4>
 80070d6:	4b56      	ldr	r3, [pc, #344]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80070de:	4a54      	ldr	r2, [pc, #336]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 80070e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070e4:	6053      	str	r3, [r2, #4]
 80070e6:	e02e      	b.n	8007146 <HAL_RCC_OscConfig+0x432>
 80070e8:	4b51      	ldr	r3, [pc, #324]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	069b      	lsls	r3, r3, #26
 80070f6:	494e      	ldr	r1, [pc, #312]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	604b      	str	r3, [r1, #4]
 80070fc:	e023      	b.n	8007146 <HAL_RCC_OscConfig+0x432>
 80070fe:	4b4c      	ldr	r3, [pc, #304]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	061b      	lsls	r3, r3, #24
 800710c:	4948      	ldr	r1, [pc, #288]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 800710e:	4313      	orrs	r3, r2
 8007110:	60cb      	str	r3, [r1, #12]
 8007112:	e018      	b.n	8007146 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007114:	4b46      	ldr	r3, [pc, #280]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a45      	ldr	r2, [pc, #276]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 800711a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800711e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007120:	f7fb fd36 	bl	8002b90 <HAL_GetTick>
 8007124:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007128:	f7fb fd32 	bl	8002b90 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e212      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800713a:	4b3d      	ldr	r3, [pc, #244]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1f0      	bne.n	8007128 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0308 	and.w	r3, r3, #8
 800714e:	2b00      	cmp	r3, #0
 8007150:	d036      	beq.n	80071c0 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d019      	beq.n	800718e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800715a:	4b35      	ldr	r3, [pc, #212]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 800715c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800715e:	4a34      	ldr	r2, [pc, #208]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 8007160:	f043 0301 	orr.w	r3, r3, #1
 8007164:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007166:	f7fb fd13 	bl	8002b90 <HAL_GetTick>
 800716a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800716c:	e008      	b.n	8007180 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800716e:	f7fb fd0f 	bl	8002b90 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b02      	cmp	r3, #2
 800717a:	d901      	bls.n	8007180 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e1ef      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007180:	4b2b      	ldr	r3, [pc, #172]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 8007182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d0f0      	beq.n	800716e <HAL_RCC_OscConfig+0x45a>
 800718c:	e018      	b.n	80071c0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800718e:	4b28      	ldr	r3, [pc, #160]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 8007190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007192:	4a27      	ldr	r2, [pc, #156]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 8007194:	f023 0301 	bic.w	r3, r3, #1
 8007198:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800719a:	f7fb fcf9 	bl	8002b90 <HAL_GetTick>
 800719e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071a0:	e008      	b.n	80071b4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071a2:	f7fb fcf5 	bl	8002b90 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d901      	bls.n	80071b4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e1d5      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071b4:	4b1e      	ldr	r3, [pc, #120]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 80071b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1f0      	bne.n	80071a2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0320 	and.w	r3, r3, #32
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d039      	beq.n	8007240 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d019      	beq.n	8007208 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071d4:	4b16      	ldr	r3, [pc, #88]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a15      	ldr	r2, [pc, #84]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 80071da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80071de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80071e0:	f7fb fcd6 	bl	8002b90 <HAL_GetTick>
 80071e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071e6:	e008      	b.n	80071fa <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80071e8:	f7fb fcd2 	bl	8002b90 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e1b2      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071fa:	4b0d      	ldr	r3, [pc, #52]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0f0      	beq.n	80071e8 <HAL_RCC_OscConfig+0x4d4>
 8007206:	e01b      	b.n	8007240 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007208:	4b09      	ldr	r3, [pc, #36]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a08      	ldr	r2, [pc, #32]	; (8007230 <HAL_RCC_OscConfig+0x51c>)
 800720e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007212:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007214:	f7fb fcbc 	bl	8002b90 <HAL_GetTick>
 8007218:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800721a:	e00b      	b.n	8007234 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800721c:	f7fb fcb8 	bl	8002b90 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b02      	cmp	r3, #2
 8007228:	d904      	bls.n	8007234 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e198      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
 800722e:	bf00      	nop
 8007230:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007234:	4ba3      	ldr	r3, [pc, #652]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1ed      	bne.n	800721c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0304 	and.w	r3, r3, #4
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 8081 	beq.w	8007350 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800724e:	4b9e      	ldr	r3, [pc, #632]	; (80074c8 <HAL_RCC_OscConfig+0x7b4>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a9d      	ldr	r2, [pc, #628]	; (80074c8 <HAL_RCC_OscConfig+0x7b4>)
 8007254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007258:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800725a:	f7fb fc99 	bl	8002b90 <HAL_GetTick>
 800725e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007260:	e008      	b.n	8007274 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007262:	f7fb fc95 	bl	8002b90 <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	2b64      	cmp	r3, #100	; 0x64
 800726e:	d901      	bls.n	8007274 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e175      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007274:	4b94      	ldr	r3, [pc, #592]	; (80074c8 <HAL_RCC_OscConfig+0x7b4>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0f0      	beq.n	8007262 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d106      	bne.n	8007296 <HAL_RCC_OscConfig+0x582>
 8007288:	4b8e      	ldr	r3, [pc, #568]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 800728a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728c:	4a8d      	ldr	r2, [pc, #564]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 800728e:	f043 0301 	orr.w	r3, r3, #1
 8007292:	6713      	str	r3, [r2, #112]	; 0x70
 8007294:	e02d      	b.n	80072f2 <HAL_RCC_OscConfig+0x5de>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10c      	bne.n	80072b8 <HAL_RCC_OscConfig+0x5a4>
 800729e:	4b89      	ldr	r3, [pc, #548]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 80072a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a2:	4a88      	ldr	r2, [pc, #544]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 80072a4:	f023 0301 	bic.w	r3, r3, #1
 80072a8:	6713      	str	r3, [r2, #112]	; 0x70
 80072aa:	4b86      	ldr	r3, [pc, #536]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 80072ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ae:	4a85      	ldr	r2, [pc, #532]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 80072b0:	f023 0304 	bic.w	r3, r3, #4
 80072b4:	6713      	str	r3, [r2, #112]	; 0x70
 80072b6:	e01c      	b.n	80072f2 <HAL_RCC_OscConfig+0x5de>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	2b05      	cmp	r3, #5
 80072be:	d10c      	bne.n	80072da <HAL_RCC_OscConfig+0x5c6>
 80072c0:	4b80      	ldr	r3, [pc, #512]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 80072c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c4:	4a7f      	ldr	r2, [pc, #508]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 80072c6:	f043 0304 	orr.w	r3, r3, #4
 80072ca:	6713      	str	r3, [r2, #112]	; 0x70
 80072cc:	4b7d      	ldr	r3, [pc, #500]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 80072ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d0:	4a7c      	ldr	r2, [pc, #496]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 80072d2:	f043 0301 	orr.w	r3, r3, #1
 80072d6:	6713      	str	r3, [r2, #112]	; 0x70
 80072d8:	e00b      	b.n	80072f2 <HAL_RCC_OscConfig+0x5de>
 80072da:	4b7a      	ldr	r3, [pc, #488]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 80072dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072de:	4a79      	ldr	r2, [pc, #484]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 80072e0:	f023 0301 	bic.w	r3, r3, #1
 80072e4:	6713      	str	r3, [r2, #112]	; 0x70
 80072e6:	4b77      	ldr	r3, [pc, #476]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 80072e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ea:	4a76      	ldr	r2, [pc, #472]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 80072ec:	f023 0304 	bic.w	r3, r3, #4
 80072f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d015      	beq.n	8007326 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072fa:	f7fb fc49 	bl	8002b90 <HAL_GetTick>
 80072fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007300:	e00a      	b.n	8007318 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007302:	f7fb fc45 	bl	8002b90 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007310:	4293      	cmp	r3, r2
 8007312:	d901      	bls.n	8007318 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e123      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007318:	4b6a      	ldr	r3, [pc, #424]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 800731a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731c:	f003 0302 	and.w	r3, r3, #2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d0ee      	beq.n	8007302 <HAL_RCC_OscConfig+0x5ee>
 8007324:	e014      	b.n	8007350 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007326:	f7fb fc33 	bl	8002b90 <HAL_GetTick>
 800732a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800732c:	e00a      	b.n	8007344 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800732e:	f7fb fc2f 	bl	8002b90 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	f241 3288 	movw	r2, #5000	; 0x1388
 800733c:	4293      	cmp	r3, r2
 800733e:	d901      	bls.n	8007344 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e10d      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007344:	4b5f      	ldr	r3, [pc, #380]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 8007346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1ee      	bne.n	800732e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 8102 	beq.w	800755e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800735a:	4b5a      	ldr	r3, [pc, #360]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007362:	2b18      	cmp	r3, #24
 8007364:	f000 80bd 	beq.w	80074e2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736c:	2b02      	cmp	r3, #2
 800736e:	f040 8095 	bne.w	800749c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007372:	4b54      	ldr	r3, [pc, #336]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a53      	ldr	r2, [pc, #332]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 8007378:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800737c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800737e:	f7fb fc07 	bl	8002b90 <HAL_GetTick>
 8007382:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007384:	e008      	b.n	8007398 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007386:	f7fb fc03 	bl	8002b90 <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	2b02      	cmp	r3, #2
 8007392:	d901      	bls.n	8007398 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e0e3      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007398:	4b4a      	ldr	r3, [pc, #296]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f0      	bne.n	8007386 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073a4:	4b47      	ldr	r3, [pc, #284]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 80073a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073a8:	4b48      	ldr	r3, [pc, #288]	; (80074cc <HAL_RCC_OscConfig+0x7b8>)
 80073aa:	4013      	ands	r3, r2
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80073b4:	0112      	lsls	r2, r2, #4
 80073b6:	430a      	orrs	r2, r1
 80073b8:	4942      	ldr	r1, [pc, #264]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	628b      	str	r3, [r1, #40]	; 0x28
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c2:	3b01      	subs	r3, #1
 80073c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073cc:	3b01      	subs	r3, #1
 80073ce:	025b      	lsls	r3, r3, #9
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d8:	3b01      	subs	r3, #1
 80073da:	041b      	lsls	r3, r3, #16
 80073dc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80073e0:	431a      	orrs	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e6:	3b01      	subs	r3, #1
 80073e8:	061b      	lsls	r3, r3, #24
 80073ea:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80073ee:	4935      	ldr	r1, [pc, #212]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80073f4:	4b33      	ldr	r3, [pc, #204]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 80073f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f8:	4a32      	ldr	r2, [pc, #200]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 80073fa:	f023 0301 	bic.w	r3, r3, #1
 80073fe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007400:	4b30      	ldr	r3, [pc, #192]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 8007402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007404:	4b32      	ldr	r3, [pc, #200]	; (80074d0 <HAL_RCC_OscConfig+0x7bc>)
 8007406:	4013      	ands	r3, r2
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800740c:	00d2      	lsls	r2, r2, #3
 800740e:	492d      	ldr	r1, [pc, #180]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 8007410:	4313      	orrs	r3, r2
 8007412:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007414:	4b2b      	ldr	r3, [pc, #172]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 8007416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007418:	f023 020c 	bic.w	r2, r3, #12
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007420:	4928      	ldr	r1, [pc, #160]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 8007422:	4313      	orrs	r3, r2
 8007424:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007426:	4b27      	ldr	r3, [pc, #156]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 8007428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742a:	f023 0202 	bic.w	r2, r3, #2
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007432:	4924      	ldr	r1, [pc, #144]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 8007434:	4313      	orrs	r3, r2
 8007436:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007438:	4b22      	ldr	r3, [pc, #136]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	4a21      	ldr	r2, [pc, #132]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 800743e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007442:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007444:	4b1f      	ldr	r3, [pc, #124]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 8007446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007448:	4a1e      	ldr	r2, [pc, #120]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 800744a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800744e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007450:	4b1c      	ldr	r3, [pc, #112]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 8007452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007454:	4a1b      	ldr	r2, [pc, #108]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 8007456:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800745a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800745c:	4b19      	ldr	r3, [pc, #100]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	4a18      	ldr	r2, [pc, #96]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 8007462:	f043 0301 	orr.w	r3, r3, #1
 8007466:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007468:	4b16      	ldr	r3, [pc, #88]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a15      	ldr	r2, [pc, #84]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 800746e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007474:	f7fb fb8c 	bl	8002b90 <HAL_GetTick>
 8007478:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800747a:	e008      	b.n	800748e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800747c:	f7fb fb88 	bl	8002b90 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b02      	cmp	r3, #2
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e068      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800748e:	4b0d      	ldr	r3, [pc, #52]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0f0      	beq.n	800747c <HAL_RCC_OscConfig+0x768>
 800749a:	e060      	b.n	800755e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800749c:	4b09      	ldr	r3, [pc, #36]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a08      	ldr	r2, [pc, #32]	; (80074c4 <HAL_RCC_OscConfig+0x7b0>)
 80074a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a8:	f7fb fb72 	bl	8002b90 <HAL_GetTick>
 80074ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074ae:	e011      	b.n	80074d4 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074b0:	f7fb fb6e 	bl	8002b90 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d90a      	bls.n	80074d4 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e04e      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
 80074c2:	bf00      	nop
 80074c4:	58024400 	.word	0x58024400
 80074c8:	58024800 	.word	0x58024800
 80074cc:	fffffc0c 	.word	0xfffffc0c
 80074d0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074d4:	4b24      	ldr	r3, [pc, #144]	; (8007568 <HAL_RCC_OscConfig+0x854>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e7      	bne.n	80074b0 <HAL_RCC_OscConfig+0x79c>
 80074e0:	e03d      	b.n	800755e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80074e2:	4b21      	ldr	r3, [pc, #132]	; (8007568 <HAL_RCC_OscConfig+0x854>)
 80074e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80074e8:	4b1f      	ldr	r3, [pc, #124]	; (8007568 <HAL_RCC_OscConfig+0x854>)
 80074ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ec:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d031      	beq.n	800755a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f003 0203 	and.w	r2, r3, #3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007500:	429a      	cmp	r2, r3
 8007502:	d12a      	bne.n	800755a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	091b      	lsrs	r3, r3, #4
 8007508:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007510:	429a      	cmp	r2, r3
 8007512:	d122      	bne.n	800755a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007520:	429a      	cmp	r2, r3
 8007522:	d11a      	bne.n	800755a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	0a5b      	lsrs	r3, r3, #9
 8007528:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007530:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007532:	429a      	cmp	r2, r3
 8007534:	d111      	bne.n	800755a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	0c1b      	lsrs	r3, r3, #16
 800753a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007542:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007544:	429a      	cmp	r2, r3
 8007546:	d108      	bne.n	800755a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	0e1b      	lsrs	r3, r3, #24
 800754c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007554:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007556:	429a      	cmp	r2, r3
 8007558:	d001      	beq.n	800755e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e000      	b.n	8007560 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3730      	adds	r7, #48	; 0x30
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	58024400 	.word	0x58024400

0800756c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e19c      	b.n	80078ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007580:	4b8a      	ldr	r3, [pc, #552]	; (80077ac <HAL_RCC_ClockConfig+0x240>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 030f 	and.w	r3, r3, #15
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	429a      	cmp	r2, r3
 800758c:	d910      	bls.n	80075b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800758e:	4b87      	ldr	r3, [pc, #540]	; (80077ac <HAL_RCC_ClockConfig+0x240>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f023 020f 	bic.w	r2, r3, #15
 8007596:	4985      	ldr	r1, [pc, #532]	; (80077ac <HAL_RCC_ClockConfig+0x240>)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	4313      	orrs	r3, r2
 800759c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800759e:	4b83      	ldr	r3, [pc, #524]	; (80077ac <HAL_RCC_ClockConfig+0x240>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 030f 	and.w	r3, r3, #15
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d001      	beq.n	80075b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e184      	b.n	80078ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d010      	beq.n	80075de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	691a      	ldr	r2, [r3, #16]
 80075c0:	4b7b      	ldr	r3, [pc, #492]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d908      	bls.n	80075de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075cc:	4b78      	ldr	r3, [pc, #480]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	4975      	ldr	r1, [pc, #468]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0308 	and.w	r3, r3, #8
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d010      	beq.n	800760c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	695a      	ldr	r2, [r3, #20]
 80075ee:	4b70      	ldr	r3, [pc, #448]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d908      	bls.n	800760c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075fa:	4b6d      	ldr	r3, [pc, #436]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	496a      	ldr	r1, [pc, #424]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 8007608:	4313      	orrs	r3, r2
 800760a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0310 	and.w	r3, r3, #16
 8007614:	2b00      	cmp	r3, #0
 8007616:	d010      	beq.n	800763a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	699a      	ldr	r2, [r3, #24]
 800761c:	4b64      	ldr	r3, [pc, #400]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007624:	429a      	cmp	r2, r3
 8007626:	d908      	bls.n	800763a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007628:	4b61      	ldr	r3, [pc, #388]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	495e      	ldr	r1, [pc, #376]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 8007636:	4313      	orrs	r3, r2
 8007638:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b00      	cmp	r3, #0
 8007644:	d010      	beq.n	8007668 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	69da      	ldr	r2, [r3, #28]
 800764a:	4b59      	ldr	r3, [pc, #356]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007652:	429a      	cmp	r2, r3
 8007654:	d908      	bls.n	8007668 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007656:	4b56      	ldr	r3, [pc, #344]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	4953      	ldr	r1, [pc, #332]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 8007664:	4313      	orrs	r3, r2
 8007666:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	2b00      	cmp	r3, #0
 8007672:	d010      	beq.n	8007696 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	68da      	ldr	r2, [r3, #12]
 8007678:	4b4d      	ldr	r3, [pc, #308]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	f003 030f 	and.w	r3, r3, #15
 8007680:	429a      	cmp	r2, r3
 8007682:	d908      	bls.n	8007696 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007684:	4b4a      	ldr	r3, [pc, #296]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	f023 020f 	bic.w	r2, r3, #15
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	4947      	ldr	r1, [pc, #284]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 8007692:	4313      	orrs	r3, r2
 8007694:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d055      	beq.n	800774e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80076a2:	4b43      	ldr	r3, [pc, #268]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	4940      	ldr	r1, [pc, #256]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d107      	bne.n	80076cc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076bc:	4b3c      	ldr	r3, [pc, #240]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d121      	bne.n	800770c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e0f6      	b.n	80078ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d107      	bne.n	80076e4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076d4:	4b36      	ldr	r3, [pc, #216]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d115      	bne.n	800770c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e0ea      	b.n	80078ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d107      	bne.n	80076fc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80076ec:	4b30      	ldr	r3, [pc, #192]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d109      	bne.n	800770c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e0de      	b.n	80078ba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076fc:	4b2c      	ldr	r3, [pc, #176]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e0d6      	b.n	80078ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800770c:	4b28      	ldr	r3, [pc, #160]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f023 0207 	bic.w	r2, r3, #7
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	4925      	ldr	r1, [pc, #148]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 800771a:	4313      	orrs	r3, r2
 800771c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800771e:	f7fb fa37 	bl	8002b90 <HAL_GetTick>
 8007722:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007724:	e00a      	b.n	800773c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007726:	f7fb fa33 	bl	8002b90 <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	f241 3288 	movw	r2, #5000	; 0x1388
 8007734:	4293      	cmp	r3, r2
 8007736:	d901      	bls.n	800773c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	e0be      	b.n	80078ba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800773c:	4b1c      	ldr	r3, [pc, #112]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	429a      	cmp	r2, r3
 800774c:	d1eb      	bne.n	8007726 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d010      	beq.n	800777c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	4b14      	ldr	r3, [pc, #80]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	f003 030f 	and.w	r3, r3, #15
 8007766:	429a      	cmp	r2, r3
 8007768:	d208      	bcs.n	800777c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800776a:	4b11      	ldr	r3, [pc, #68]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	f023 020f 	bic.w	r2, r3, #15
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	490e      	ldr	r1, [pc, #56]	; (80077b0 <HAL_RCC_ClockConfig+0x244>)
 8007778:	4313      	orrs	r3, r2
 800777a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800777c:	4b0b      	ldr	r3, [pc, #44]	; (80077ac <HAL_RCC_ClockConfig+0x240>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 030f 	and.w	r3, r3, #15
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d214      	bcs.n	80077b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800778a:	4b08      	ldr	r3, [pc, #32]	; (80077ac <HAL_RCC_ClockConfig+0x240>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f023 020f 	bic.w	r2, r3, #15
 8007792:	4906      	ldr	r1, [pc, #24]	; (80077ac <HAL_RCC_ClockConfig+0x240>)
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	4313      	orrs	r3, r2
 8007798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800779a:	4b04      	ldr	r3, [pc, #16]	; (80077ac <HAL_RCC_ClockConfig+0x240>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 030f 	and.w	r3, r3, #15
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d005      	beq.n	80077b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e086      	b.n	80078ba <HAL_RCC_ClockConfig+0x34e>
 80077ac:	52002000 	.word	0x52002000
 80077b0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0304 	and.w	r3, r3, #4
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d010      	beq.n	80077e2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	4b3f      	ldr	r3, [pc, #252]	; (80078c4 <HAL_RCC_ClockConfig+0x358>)
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d208      	bcs.n	80077e2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80077d0:	4b3c      	ldr	r3, [pc, #240]	; (80078c4 <HAL_RCC_ClockConfig+0x358>)
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	4939      	ldr	r1, [pc, #228]	; (80078c4 <HAL_RCC_ClockConfig+0x358>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0308 	and.w	r3, r3, #8
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d010      	beq.n	8007810 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	695a      	ldr	r2, [r3, #20]
 80077f2:	4b34      	ldr	r3, [pc, #208]	; (80078c4 <HAL_RCC_ClockConfig+0x358>)
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d208      	bcs.n	8007810 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80077fe:	4b31      	ldr	r3, [pc, #196]	; (80078c4 <HAL_RCC_ClockConfig+0x358>)
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	492e      	ldr	r1, [pc, #184]	; (80078c4 <HAL_RCC_ClockConfig+0x358>)
 800780c:	4313      	orrs	r3, r2
 800780e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0310 	and.w	r3, r3, #16
 8007818:	2b00      	cmp	r3, #0
 800781a:	d010      	beq.n	800783e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	699a      	ldr	r2, [r3, #24]
 8007820:	4b28      	ldr	r3, [pc, #160]	; (80078c4 <HAL_RCC_ClockConfig+0x358>)
 8007822:	69db      	ldr	r3, [r3, #28]
 8007824:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007828:	429a      	cmp	r2, r3
 800782a:	d208      	bcs.n	800783e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800782c:	4b25      	ldr	r3, [pc, #148]	; (80078c4 <HAL_RCC_ClockConfig+0x358>)
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	4922      	ldr	r1, [pc, #136]	; (80078c4 <HAL_RCC_ClockConfig+0x358>)
 800783a:	4313      	orrs	r3, r2
 800783c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0320 	and.w	r3, r3, #32
 8007846:	2b00      	cmp	r3, #0
 8007848:	d010      	beq.n	800786c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	69da      	ldr	r2, [r3, #28]
 800784e:	4b1d      	ldr	r3, [pc, #116]	; (80078c4 <HAL_RCC_ClockConfig+0x358>)
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007856:	429a      	cmp	r2, r3
 8007858:	d208      	bcs.n	800786c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800785a:	4b1a      	ldr	r3, [pc, #104]	; (80078c4 <HAL_RCC_ClockConfig+0x358>)
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	4917      	ldr	r1, [pc, #92]	; (80078c4 <HAL_RCC_ClockConfig+0x358>)
 8007868:	4313      	orrs	r3, r2
 800786a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800786c:	f000 f834 	bl	80078d8 <HAL_RCC_GetSysClockFreq>
 8007870:	4602      	mov	r2, r0
 8007872:	4b14      	ldr	r3, [pc, #80]	; (80078c4 <HAL_RCC_ClockConfig+0x358>)
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	0a1b      	lsrs	r3, r3, #8
 8007878:	f003 030f 	and.w	r3, r3, #15
 800787c:	4912      	ldr	r1, [pc, #72]	; (80078c8 <HAL_RCC_ClockConfig+0x35c>)
 800787e:	5ccb      	ldrb	r3, [r1, r3]
 8007880:	f003 031f 	and.w	r3, r3, #31
 8007884:	fa22 f303 	lsr.w	r3, r2, r3
 8007888:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800788a:	4b0e      	ldr	r3, [pc, #56]	; (80078c4 <HAL_RCC_ClockConfig+0x358>)
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	4a0d      	ldr	r2, [pc, #52]	; (80078c8 <HAL_RCC_ClockConfig+0x35c>)
 8007894:	5cd3      	ldrb	r3, [r2, r3]
 8007896:	f003 031f 	and.w	r3, r3, #31
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	fa22 f303 	lsr.w	r3, r2, r3
 80078a0:	4a0a      	ldr	r2, [pc, #40]	; (80078cc <HAL_RCC_ClockConfig+0x360>)
 80078a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80078a4:	4a0a      	ldr	r2, [pc, #40]	; (80078d0 <HAL_RCC_ClockConfig+0x364>)
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80078aa:	4b0a      	ldr	r3, [pc, #40]	; (80078d4 <HAL_RCC_ClockConfig+0x368>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fb f924 	bl	8002afc <HAL_InitTick>
 80078b4:	4603      	mov	r3, r0
 80078b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	58024400 	.word	0x58024400
 80078c8:	0800d494 	.word	0x0800d494
 80078cc:	20000028 	.word	0x20000028
 80078d0:	20000024 	.word	0x20000024
 80078d4:	2000002c 	.word	0x2000002c

080078d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078d8:	b480      	push	{r7}
 80078da:	b089      	sub	sp, #36	; 0x24
 80078dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078de:	4bb3      	ldr	r3, [pc, #716]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078e6:	2b18      	cmp	r3, #24
 80078e8:	f200 8155 	bhi.w	8007b96 <HAL_RCC_GetSysClockFreq+0x2be>
 80078ec:	a201      	add	r2, pc, #4	; (adr r2, 80078f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80078ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f2:	bf00      	nop
 80078f4:	08007959 	.word	0x08007959
 80078f8:	08007b97 	.word	0x08007b97
 80078fc:	08007b97 	.word	0x08007b97
 8007900:	08007b97 	.word	0x08007b97
 8007904:	08007b97 	.word	0x08007b97
 8007908:	08007b97 	.word	0x08007b97
 800790c:	08007b97 	.word	0x08007b97
 8007910:	08007b97 	.word	0x08007b97
 8007914:	0800797f 	.word	0x0800797f
 8007918:	08007b97 	.word	0x08007b97
 800791c:	08007b97 	.word	0x08007b97
 8007920:	08007b97 	.word	0x08007b97
 8007924:	08007b97 	.word	0x08007b97
 8007928:	08007b97 	.word	0x08007b97
 800792c:	08007b97 	.word	0x08007b97
 8007930:	08007b97 	.word	0x08007b97
 8007934:	08007985 	.word	0x08007985
 8007938:	08007b97 	.word	0x08007b97
 800793c:	08007b97 	.word	0x08007b97
 8007940:	08007b97 	.word	0x08007b97
 8007944:	08007b97 	.word	0x08007b97
 8007948:	08007b97 	.word	0x08007b97
 800794c:	08007b97 	.word	0x08007b97
 8007950:	08007b97 	.word	0x08007b97
 8007954:	0800798b 	.word	0x0800798b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007958:	4b94      	ldr	r3, [pc, #592]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0320 	and.w	r3, r3, #32
 8007960:	2b00      	cmp	r3, #0
 8007962:	d009      	beq.n	8007978 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007964:	4b91      	ldr	r3, [pc, #580]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	08db      	lsrs	r3, r3, #3
 800796a:	f003 0303 	and.w	r3, r3, #3
 800796e:	4a90      	ldr	r2, [pc, #576]	; (8007bb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007970:	fa22 f303 	lsr.w	r3, r2, r3
 8007974:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007976:	e111      	b.n	8007b9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007978:	4b8d      	ldr	r3, [pc, #564]	; (8007bb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800797a:	61bb      	str	r3, [r7, #24]
    break;
 800797c:	e10e      	b.n	8007b9c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800797e:	4b8d      	ldr	r3, [pc, #564]	; (8007bb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007980:	61bb      	str	r3, [r7, #24]
    break;
 8007982:	e10b      	b.n	8007b9c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007984:	4b8c      	ldr	r3, [pc, #560]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007986:	61bb      	str	r3, [r7, #24]
    break;
 8007988:	e108      	b.n	8007b9c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800798a:	4b88      	ldr	r3, [pc, #544]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	f003 0303 	and.w	r3, r3, #3
 8007992:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007994:	4b85      	ldr	r3, [pc, #532]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007998:	091b      	lsrs	r3, r3, #4
 800799a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800799e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80079a0:	4b82      	ldr	r3, [pc, #520]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80079aa:	4b80      	ldr	r3, [pc, #512]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ae:	08db      	lsrs	r3, r3, #3
 80079b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	fb02 f303 	mul.w	r3, r2, r3
 80079ba:	ee07 3a90 	vmov	s15, r3
 80079be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 80e1 	beq.w	8007b90 <HAL_RCC_GetSysClockFreq+0x2b8>
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	f000 8083 	beq.w	8007adc <HAL_RCC_GetSysClockFreq+0x204>
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	f200 80a1 	bhi.w	8007b20 <HAL_RCC_GetSysClockFreq+0x248>
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <HAL_RCC_GetSysClockFreq+0x114>
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d056      	beq.n	8007a98 <HAL_RCC_GetSysClockFreq+0x1c0>
 80079ea:	e099      	b.n	8007b20 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079ec:	4b6f      	ldr	r3, [pc, #444]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0320 	and.w	r3, r3, #32
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d02d      	beq.n	8007a54 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079f8:	4b6c      	ldr	r3, [pc, #432]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	08db      	lsrs	r3, r3, #3
 80079fe:	f003 0303 	and.w	r3, r3, #3
 8007a02:	4a6b      	ldr	r2, [pc, #428]	; (8007bb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a04:	fa22 f303 	lsr.w	r3, r2, r3
 8007a08:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	ee07 3a90 	vmov	s15, r3
 8007a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	ee07 3a90 	vmov	s15, r3
 8007a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a22:	4b62      	ldr	r3, [pc, #392]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a2a:	ee07 3a90 	vmov	s15, r3
 8007a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a32:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a36:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007a52:	e087      	b.n	8007b64 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	ee07 3a90 	vmov	s15, r3
 8007a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007bc0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a66:	4b51      	ldr	r3, [pc, #324]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a6e:	ee07 3a90 	vmov	s15, r3
 8007a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a76:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a7a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a96:	e065      	b.n	8007b64 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	ee07 3a90 	vmov	s15, r3
 8007a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007bc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aaa:	4b40      	ldr	r3, [pc, #256]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab2:	ee07 3a90 	vmov	s15, r3
 8007ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8007abe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ada:	e043      	b.n	8007b64 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	ee07 3a90 	vmov	s15, r3
 8007ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007bc8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aee:	4b2f      	ldr	r3, [pc, #188]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af6:	ee07 3a90 	vmov	s15, r3
 8007afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007afe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b02:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b1e:	e021      	b.n	8007b64 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	ee07 3a90 	vmov	s15, r3
 8007b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b2a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007bc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b32:	4b1e      	ldr	r3, [pc, #120]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b3a:	ee07 3a90 	vmov	s15, r3
 8007b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b42:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b46:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b62:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007b64:	4b11      	ldr	r3, [pc, #68]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b68:	0a5b      	lsrs	r3, r3, #9
 8007b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b6e:	3301      	adds	r3, #1
 8007b70:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	ee07 3a90 	vmov	s15, r3
 8007b78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007b7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b88:	ee17 3a90 	vmov	r3, s15
 8007b8c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007b8e:	e005      	b.n	8007b9c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	61bb      	str	r3, [r7, #24]
    break;
 8007b94:	e002      	b.n	8007b9c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007b96:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b98:	61bb      	str	r3, [r7, #24]
    break;
 8007b9a:	bf00      	nop
  }

  return sysclockfreq;
 8007b9c:	69bb      	ldr	r3, [r7, #24]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3724      	adds	r7, #36	; 0x24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	58024400 	.word	0x58024400
 8007bb0:	03d09000 	.word	0x03d09000
 8007bb4:	003d0900 	.word	0x003d0900
 8007bb8:	007a1200 	.word	0x007a1200
 8007bbc:	46000000 	.word	0x46000000
 8007bc0:	4c742400 	.word	0x4c742400
 8007bc4:	4a742400 	.word	0x4a742400
 8007bc8:	4af42400 	.word	0x4af42400

08007bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007bd2:	f7ff fe81 	bl	80078d8 <HAL_RCC_GetSysClockFreq>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	4b10      	ldr	r3, [pc, #64]	; (8007c1c <HAL_RCC_GetHCLKFreq+0x50>)
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	0a1b      	lsrs	r3, r3, #8
 8007bde:	f003 030f 	and.w	r3, r3, #15
 8007be2:	490f      	ldr	r1, [pc, #60]	; (8007c20 <HAL_RCC_GetHCLKFreq+0x54>)
 8007be4:	5ccb      	ldrb	r3, [r1, r3]
 8007be6:	f003 031f 	and.w	r3, r3, #31
 8007bea:	fa22 f303 	lsr.w	r3, r2, r3
 8007bee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007bf0:	4b0a      	ldr	r3, [pc, #40]	; (8007c1c <HAL_RCC_GetHCLKFreq+0x50>)
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	f003 030f 	and.w	r3, r3, #15
 8007bf8:	4a09      	ldr	r2, [pc, #36]	; (8007c20 <HAL_RCC_GetHCLKFreq+0x54>)
 8007bfa:	5cd3      	ldrb	r3, [r2, r3]
 8007bfc:	f003 031f 	and.w	r3, r3, #31
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	fa22 f303 	lsr.w	r3, r2, r3
 8007c06:	4a07      	ldr	r2, [pc, #28]	; (8007c24 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c0a:	4a07      	ldr	r2, [pc, #28]	; (8007c28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007c10:	4b04      	ldr	r3, [pc, #16]	; (8007c24 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c12:	681b      	ldr	r3, [r3, #0]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	58024400 	.word	0x58024400
 8007c20:	0800d494 	.word	0x0800d494
 8007c24:	20000028 	.word	0x20000028
 8007c28:	20000024 	.word	0x20000024

08007c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007c30:	f7ff ffcc 	bl	8007bcc <HAL_RCC_GetHCLKFreq>
 8007c34:	4602      	mov	r2, r0
 8007c36:	4b06      	ldr	r3, [pc, #24]	; (8007c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	091b      	lsrs	r3, r3, #4
 8007c3c:	f003 0307 	and.w	r3, r3, #7
 8007c40:	4904      	ldr	r1, [pc, #16]	; (8007c54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007c42:	5ccb      	ldrb	r3, [r1, r3]
 8007c44:	f003 031f 	and.w	r3, r3, #31
 8007c48:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	58024400 	.word	0x58024400
 8007c54:	0800d494 	.word	0x0800d494

08007c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007c5c:	f7ff ffb6 	bl	8007bcc <HAL_RCC_GetHCLKFreq>
 8007c60:	4602      	mov	r2, r0
 8007c62:	4b06      	ldr	r3, [pc, #24]	; (8007c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	0a1b      	lsrs	r3, r3, #8
 8007c68:	f003 0307 	and.w	r3, r3, #7
 8007c6c:	4904      	ldr	r1, [pc, #16]	; (8007c80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007c6e:	5ccb      	ldrb	r3, [r1, r3]
 8007c70:	f003 031f 	and.w	r3, r3, #31
 8007c74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	58024400 	.word	0x58024400
 8007c80:	0800d494 	.word	0x0800d494

08007c84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c90:	2300      	movs	r3, #0
 8007c92:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d03f      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ca4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ca8:	d02a      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007caa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007cae:	d824      	bhi.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007cb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cb4:	d018      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007cb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cba:	d81e      	bhi.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007cc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cc4:	d007      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007cc6:	e018      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc8:	4bab      	ldr	r3, [pc, #684]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	4aaa      	ldr	r2, [pc, #680]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007cd4:	e015      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	2102      	movs	r1, #2
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f001 fff3 	bl	8009cc8 <RCCEx_PLL2_Config>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ce6:	e00c      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3324      	adds	r3, #36	; 0x24
 8007cec:	2102      	movs	r1, #2
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f002 f89c 	bl	8009e2c <RCCEx_PLL3_Config>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007cf8:	e003      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8007cfe:	e000      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d02:	7dfb      	ldrb	r3, [r7, #23]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d109      	bne.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007d08:	4b9b      	ldr	r3, [pc, #620]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d14:	4998      	ldr	r1, [pc, #608]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	650b      	str	r3, [r1, #80]	; 0x50
 8007d1a:	e001      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d1c:	7dfb      	ldrb	r3, [r7, #23]
 8007d1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d03d      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d30:	2b04      	cmp	r3, #4
 8007d32:	d826      	bhi.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007d34:	a201      	add	r2, pc, #4	; (adr r2, 8007d3c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3a:	bf00      	nop
 8007d3c:	08007d51 	.word	0x08007d51
 8007d40:	08007d5f 	.word	0x08007d5f
 8007d44:	08007d71 	.word	0x08007d71
 8007d48:	08007d89 	.word	0x08007d89
 8007d4c:	08007d89 	.word	0x08007d89
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d50:	4b89      	ldr	r3, [pc, #548]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	4a88      	ldr	r2, [pc, #544]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d5c:	e015      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3304      	adds	r3, #4
 8007d62:	2100      	movs	r1, #0
 8007d64:	4618      	mov	r0, r3
 8007d66:	f001 ffaf 	bl	8009cc8 <RCCEx_PLL2_Config>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d6e:	e00c      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3324      	adds	r3, #36	; 0x24
 8007d74:	2100      	movs	r1, #0
 8007d76:	4618      	mov	r0, r3
 8007d78:	f002 f858 	bl	8009e2c <RCCEx_PLL3_Config>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d80:	e003      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	75fb      	strb	r3, [r7, #23]
      break;
 8007d86:	e000      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d8a:	7dfb      	ldrb	r3, [r7, #23]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d109      	bne.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d90:	4b79      	ldr	r3, [pc, #484]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d94:	f023 0207 	bic.w	r2, r3, #7
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9c:	4976      	ldr	r1, [pc, #472]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	650b      	str	r3, [r1, #80]	; 0x50
 8007da2:	e001      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
 8007da6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d042      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dbc:	d02b      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dc2:	d825      	bhi.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007dc4:	2bc0      	cmp	r3, #192	; 0xc0
 8007dc6:	d028      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007dc8:	2bc0      	cmp	r3, #192	; 0xc0
 8007dca:	d821      	bhi.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007dcc:	2b80      	cmp	r3, #128	; 0x80
 8007dce:	d016      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007dd0:	2b80      	cmp	r3, #128	; 0x80
 8007dd2:	d81d      	bhi.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007dd8:	2b40      	cmp	r3, #64	; 0x40
 8007dda:	d007      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007ddc:	e018      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dde:	4b66      	ldr	r3, [pc, #408]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de2:	4a65      	ldr	r2, [pc, #404]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007de8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007dea:	e017      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	3304      	adds	r3, #4
 8007df0:	2100      	movs	r1, #0
 8007df2:	4618      	mov	r0, r3
 8007df4:	f001 ff68 	bl	8009cc8 <RCCEx_PLL2_Config>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007dfc:	e00e      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3324      	adds	r3, #36	; 0x24
 8007e02:	2100      	movs	r1, #0
 8007e04:	4618      	mov	r0, r3
 8007e06:	f002 f811 	bl	8009e2c <RCCEx_PLL3_Config>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e0e:	e005      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	75fb      	strb	r3, [r7, #23]
      break;
 8007e14:	e002      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007e16:	bf00      	nop
 8007e18:	e000      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d109      	bne.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007e22:	4b55      	ldr	r3, [pc, #340]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e26:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2e:	4952      	ldr	r1, [pc, #328]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	650b      	str	r3, [r1, #80]	; 0x50
 8007e34:	e001      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
 8007e38:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d049      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e50:	d030      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007e52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e56:	d82a      	bhi.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007e58:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e5c:	d02c      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007e5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e62:	d824      	bhi.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007e64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e68:	d018      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e6e:	d81e      	bhi.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d003      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007e74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e78:	d007      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007e7a:	e018      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e7c:	4b3e      	ldr	r3, [pc, #248]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e80:	4a3d      	ldr	r2, [pc, #244]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e88:	e017      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	2100      	movs	r1, #0
 8007e90:	4618      	mov	r0, r3
 8007e92:	f001 ff19 	bl	8009cc8 <RCCEx_PLL2_Config>
 8007e96:	4603      	mov	r3, r0
 8007e98:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007e9a:	e00e      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	3324      	adds	r3, #36	; 0x24
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f001 ffc2 	bl	8009e2c <RCCEx_PLL3_Config>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007eac:	e005      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8007eb2:	e002      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007eb4:	bf00      	nop
 8007eb6:	e000      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007eb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10a      	bne.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007ec0:	4b2d      	ldr	r3, [pc, #180]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ece:	492a      	ldr	r1, [pc, #168]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	658b      	str	r3, [r1, #88]	; 0x58
 8007ed4:	e001      	b.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed6:	7dfb      	ldrb	r3, [r7, #23]
 8007ed8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d04c      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007eec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ef0:	d030      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007ef2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ef6:	d82a      	bhi.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007ef8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007efc:	d02c      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007efe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f02:	d824      	bhi.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007f04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f08:	d018      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007f0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f0e:	d81e      	bhi.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d003      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f18:	d007      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007f1a:	e018      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f1c:	4b16      	ldr	r3, [pc, #88]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f20:	4a15      	ldr	r2, [pc, #84]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f28:	e017      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	2100      	movs	r1, #0
 8007f30:	4618      	mov	r0, r3
 8007f32:	f001 fec9 	bl	8009cc8 <RCCEx_PLL2_Config>
 8007f36:	4603      	mov	r3, r0
 8007f38:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007f3a:	e00e      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3324      	adds	r3, #36	; 0x24
 8007f40:	2100      	movs	r1, #0
 8007f42:	4618      	mov	r0, r3
 8007f44:	f001 ff72 	bl	8009e2c <RCCEx_PLL3_Config>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f4c:	e005      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	75fb      	strb	r3, [r7, #23]
      break;
 8007f52:	e002      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007f54:	bf00      	nop
 8007f56:	e000      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007f58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10d      	bne.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007f60:	4b05      	ldr	r3, [pc, #20]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f64:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f6e:	4902      	ldr	r1, [pc, #8]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	658b      	str	r3, [r1, #88]	; 0x58
 8007f74:	e004      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007f76:	bf00      	nop
 8007f78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f7c:	7dfb      	ldrb	r3, [r7, #23]
 8007f7e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d032      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f90:	2b30      	cmp	r3, #48	; 0x30
 8007f92:	d01c      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007f94:	2b30      	cmp	r3, #48	; 0x30
 8007f96:	d817      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	d00c      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007f9c:	2b20      	cmp	r3, #32
 8007f9e:	d813      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d016      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007fa4:	2b10      	cmp	r3, #16
 8007fa6:	d10f      	bne.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fa8:	4baf      	ldr	r3, [pc, #700]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fac:	4aae      	ldr	r2, [pc, #696]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007fb4:	e00e      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3304      	adds	r3, #4
 8007fba:	2102      	movs	r1, #2
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f001 fe83 	bl	8009cc8 <RCCEx_PLL2_Config>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007fc6:	e005      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	75fb      	strb	r3, [r7, #23]
      break;
 8007fcc:	e002      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007fce:	bf00      	nop
 8007fd0:	e000      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d109      	bne.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007fda:	4ba3      	ldr	r3, [pc, #652]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fde:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fe6:	49a0      	ldr	r1, [pc, #640]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007fec:	e001      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
 8007ff0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d047      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008002:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008006:	d030      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800800c:	d82a      	bhi.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800800e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008012:	d02c      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008014:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008018:	d824      	bhi.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800801a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800801e:	d018      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008024:	d81e      	bhi.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800802a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800802e:	d007      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008030:	e018      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008032:	4b8d      	ldr	r3, [pc, #564]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008036:	4a8c      	ldr	r2, [pc, #560]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800803c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800803e:	e017      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3304      	adds	r3, #4
 8008044:	2100      	movs	r1, #0
 8008046:	4618      	mov	r0, r3
 8008048:	f001 fe3e 	bl	8009cc8 <RCCEx_PLL2_Config>
 800804c:	4603      	mov	r3, r0
 800804e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008050:	e00e      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3324      	adds	r3, #36	; 0x24
 8008056:	2100      	movs	r1, #0
 8008058:	4618      	mov	r0, r3
 800805a:	f001 fee7 	bl	8009e2c <RCCEx_PLL3_Config>
 800805e:	4603      	mov	r3, r0
 8008060:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008062:	e005      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	75fb      	strb	r3, [r7, #23]
      break;
 8008068:	e002      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800806a:	bf00      	nop
 800806c:	e000      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800806e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008070:	7dfb      	ldrb	r3, [r7, #23]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d109      	bne.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008076:	4b7c      	ldr	r3, [pc, #496]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800807a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008082:	4979      	ldr	r1, [pc, #484]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008084:	4313      	orrs	r3, r2
 8008086:	650b      	str	r3, [r1, #80]	; 0x50
 8008088:	e001      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800808a:	7dfb      	ldrb	r3, [r7, #23]
 800808c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d049      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800809e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080a2:	d02e      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80080a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080a8:	d828      	bhi.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x478>
 80080aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080ae:	d02a      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80080b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080b4:	d822      	bhi.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x478>
 80080b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080ba:	d026      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80080bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080c0:	d81c      	bhi.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x478>
 80080c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080c6:	d010      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x466>
 80080c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080cc:	d816      	bhi.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x478>
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d01d      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80080d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080d6:	d111      	bne.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3304      	adds	r3, #4
 80080dc:	2101      	movs	r1, #1
 80080de:	4618      	mov	r0, r3
 80080e0:	f001 fdf2 	bl	8009cc8 <RCCEx_PLL2_Config>
 80080e4:	4603      	mov	r3, r0
 80080e6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80080e8:	e012      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3324      	adds	r3, #36	; 0x24
 80080ee:	2101      	movs	r1, #1
 80080f0:	4618      	mov	r0, r3
 80080f2:	f001 fe9b 	bl	8009e2c <RCCEx_PLL3_Config>
 80080f6:	4603      	mov	r3, r0
 80080f8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80080fa:	e009      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008100:	e006      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008102:	bf00      	nop
 8008104:	e004      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008106:	bf00      	nop
 8008108:	e002      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800810a:	bf00      	nop
 800810c:	e000      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800810e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008110:	7dfb      	ldrb	r3, [r7, #23]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d109      	bne.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008116:	4b54      	ldr	r3, [pc, #336]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800811a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008122:	4951      	ldr	r1, [pc, #324]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008124:	4313      	orrs	r3, r2
 8008126:	650b      	str	r3, [r1, #80]	; 0x50
 8008128:	e001      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d04b      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008140:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008144:	d02e      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8008146:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800814a:	d828      	bhi.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800814c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008150:	d02a      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008156:	d822      	bhi.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008158:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800815c:	d026      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x528>
 800815e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008162:	d81c      	bhi.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008168:	d010      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800816a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800816e:	d816      	bhi.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01d      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008174:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008178:	d111      	bne.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	3304      	adds	r3, #4
 800817e:	2101      	movs	r1, #1
 8008180:	4618      	mov	r0, r3
 8008182:	f001 fda1 	bl	8009cc8 <RCCEx_PLL2_Config>
 8008186:	4603      	mov	r3, r0
 8008188:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800818a:	e012      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3324      	adds	r3, #36	; 0x24
 8008190:	2101      	movs	r1, #1
 8008192:	4618      	mov	r0, r3
 8008194:	f001 fe4a 	bl	8009e2c <RCCEx_PLL3_Config>
 8008198:	4603      	mov	r3, r0
 800819a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800819c:	e009      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	75fb      	strb	r3, [r7, #23]
      break;
 80081a2:	e006      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80081a4:	bf00      	nop
 80081a6:	e004      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80081a8:	bf00      	nop
 80081aa:	e002      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80081ac:	bf00      	nop
 80081ae:	e000      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80081b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081b2:	7dfb      	ldrb	r3, [r7, #23]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10a      	bne.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80081b8:	4b2b      	ldr	r3, [pc, #172]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081bc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80081c6:	4928      	ldr	r1, [pc, #160]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	658b      	str	r3, [r1, #88]	; 0x58
 80081cc:	e001      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
 80081d0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d02f      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081e6:	d00e      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80081e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081ec:	d814      	bhi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d015      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80081f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081f6:	d10f      	bne.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081f8:	4b1b      	ldr	r3, [pc, #108]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fc:	4a1a      	ldr	r2, [pc, #104]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008202:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008204:	e00c      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	3304      	adds	r3, #4
 800820a:	2101      	movs	r1, #1
 800820c:	4618      	mov	r0, r3
 800820e:	f001 fd5b 	bl	8009cc8 <RCCEx_PLL2_Config>
 8008212:	4603      	mov	r3, r0
 8008214:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008216:	e003      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	75fb      	strb	r3, [r7, #23]
      break;
 800821c:	e000      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800821e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d109      	bne.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008226:	4b10      	ldr	r3, [pc, #64]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008232:	490d      	ldr	r1, [pc, #52]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008234:	4313      	orrs	r3, r2
 8008236:	650b      	str	r3, [r1, #80]	; 0x50
 8008238:	e001      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800823a:	7dfb      	ldrb	r3, [r7, #23]
 800823c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d033      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800824e:	2b03      	cmp	r3, #3
 8008250:	d81c      	bhi.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008252:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8008254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008258:	08008293 	.word	0x08008293
 800825c:	0800826d 	.word	0x0800826d
 8008260:	0800827b 	.word	0x0800827b
 8008264:	08008293 	.word	0x08008293
 8008268:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800826c:	4bb8      	ldr	r3, [pc, #736]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800826e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008270:	4ab7      	ldr	r2, [pc, #732]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008276:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008278:	e00c      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	3304      	adds	r3, #4
 800827e:	2102      	movs	r1, #2
 8008280:	4618      	mov	r0, r3
 8008282:	f001 fd21 	bl	8009cc8 <RCCEx_PLL2_Config>
 8008286:	4603      	mov	r3, r0
 8008288:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800828a:	e003      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	75fb      	strb	r3, [r7, #23]
      break;
 8008290:	e000      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008294:	7dfb      	ldrb	r3, [r7, #23]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d109      	bne.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800829a:	4bad      	ldr	r3, [pc, #692]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800829c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800829e:	f023 0203 	bic.w	r2, r3, #3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a6:	49aa      	ldr	r1, [pc, #680]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082a8:	4313      	orrs	r3, r2
 80082aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80082ac:	e001      	b.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
 80082b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f000 8086 	beq.w	80083cc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082c0:	4ba4      	ldr	r3, [pc, #656]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4aa3      	ldr	r2, [pc, #652]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80082c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082cc:	f7fa fc60 	bl	8002b90 <HAL_GetTick>
 80082d0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082d2:	e009      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082d4:	f7fa fc5c 	bl	8002b90 <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	2b64      	cmp	r3, #100	; 0x64
 80082e0:	d902      	bls.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	75fb      	strb	r3, [r7, #23]
        break;
 80082e6:	e005      	b.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082e8:	4b9a      	ldr	r3, [pc, #616]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d0ef      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80082f4:	7dfb      	ldrb	r3, [r7, #23]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d166      	bne.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80082fa:	4b95      	ldr	r3, [pc, #596]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008304:	4053      	eors	r3, r2
 8008306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800830a:	2b00      	cmp	r3, #0
 800830c:	d013      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800830e:	4b90      	ldr	r3, [pc, #576]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008316:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008318:	4b8d      	ldr	r3, [pc, #564]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800831a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831c:	4a8c      	ldr	r2, [pc, #560]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800831e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008322:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008324:	4b8a      	ldr	r3, [pc, #552]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008328:	4a89      	ldr	r2, [pc, #548]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800832a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800832e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008330:	4a87      	ldr	r2, [pc, #540]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800833c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008340:	d115      	bne.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008342:	f7fa fc25 	bl	8002b90 <HAL_GetTick>
 8008346:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008348:	e00b      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800834a:	f7fa fc21 	bl	8002b90 <HAL_GetTick>
 800834e:	4602      	mov	r2, r0
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	f241 3288 	movw	r2, #5000	; 0x1388
 8008358:	4293      	cmp	r3, r2
 800835a:	d902      	bls.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800835c:	2303      	movs	r3, #3
 800835e:	75fb      	strb	r3, [r7, #23]
            break;
 8008360:	e005      	b.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008362:	4b7b      	ldr	r3, [pc, #492]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008366:	f003 0302 	and.w	r3, r3, #2
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0ed      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800836e:	7dfb      	ldrb	r3, [r7, #23]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d126      	bne.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800837a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800837e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008382:	d10d      	bne.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008384:	4b72      	ldr	r3, [pc, #456]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008392:	0919      	lsrs	r1, r3, #4
 8008394:	4b70      	ldr	r3, [pc, #448]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008396:	400b      	ands	r3, r1
 8008398:	496d      	ldr	r1, [pc, #436]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800839a:	4313      	orrs	r3, r2
 800839c:	610b      	str	r3, [r1, #16]
 800839e:	e005      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x728>
 80083a0:	4b6b      	ldr	r3, [pc, #428]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	4a6a      	ldr	r2, [pc, #424]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80083aa:	6113      	str	r3, [r2, #16]
 80083ac:	4b68      	ldr	r3, [pc, #416]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083ba:	4965      	ldr	r1, [pc, #404]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083bc:	4313      	orrs	r3, r2
 80083be:	670b      	str	r3, [r1, #112]	; 0x70
 80083c0:	e004      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083c2:	7dfb      	ldrb	r3, [r7, #23]
 80083c4:	75bb      	strb	r3, [r7, #22]
 80083c6:	e001      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
 80083ca:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d07e      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083dc:	2b28      	cmp	r3, #40	; 0x28
 80083de:	d867      	bhi.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80083e0:	a201      	add	r2, pc, #4	; (adr r2, 80083e8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80083e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e6:	bf00      	nop
 80083e8:	080084b7 	.word	0x080084b7
 80083ec:	080084b1 	.word	0x080084b1
 80083f0:	080084b1 	.word	0x080084b1
 80083f4:	080084b1 	.word	0x080084b1
 80083f8:	080084b1 	.word	0x080084b1
 80083fc:	080084b1 	.word	0x080084b1
 8008400:	080084b1 	.word	0x080084b1
 8008404:	080084b1 	.word	0x080084b1
 8008408:	0800848d 	.word	0x0800848d
 800840c:	080084b1 	.word	0x080084b1
 8008410:	080084b1 	.word	0x080084b1
 8008414:	080084b1 	.word	0x080084b1
 8008418:	080084b1 	.word	0x080084b1
 800841c:	080084b1 	.word	0x080084b1
 8008420:	080084b1 	.word	0x080084b1
 8008424:	080084b1 	.word	0x080084b1
 8008428:	0800849f 	.word	0x0800849f
 800842c:	080084b1 	.word	0x080084b1
 8008430:	080084b1 	.word	0x080084b1
 8008434:	080084b1 	.word	0x080084b1
 8008438:	080084b1 	.word	0x080084b1
 800843c:	080084b1 	.word	0x080084b1
 8008440:	080084b1 	.word	0x080084b1
 8008444:	080084b1 	.word	0x080084b1
 8008448:	080084b7 	.word	0x080084b7
 800844c:	080084b1 	.word	0x080084b1
 8008450:	080084b1 	.word	0x080084b1
 8008454:	080084b1 	.word	0x080084b1
 8008458:	080084b1 	.word	0x080084b1
 800845c:	080084b1 	.word	0x080084b1
 8008460:	080084b1 	.word	0x080084b1
 8008464:	080084b1 	.word	0x080084b1
 8008468:	080084b7 	.word	0x080084b7
 800846c:	080084b1 	.word	0x080084b1
 8008470:	080084b1 	.word	0x080084b1
 8008474:	080084b1 	.word	0x080084b1
 8008478:	080084b1 	.word	0x080084b1
 800847c:	080084b1 	.word	0x080084b1
 8008480:	080084b1 	.word	0x080084b1
 8008484:	080084b1 	.word	0x080084b1
 8008488:	080084b7 	.word	0x080084b7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	3304      	adds	r3, #4
 8008490:	2101      	movs	r1, #1
 8008492:	4618      	mov	r0, r3
 8008494:	f001 fc18 	bl	8009cc8 <RCCEx_PLL2_Config>
 8008498:	4603      	mov	r3, r0
 800849a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800849c:	e00c      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	3324      	adds	r3, #36	; 0x24
 80084a2:	2101      	movs	r1, #1
 80084a4:	4618      	mov	r0, r3
 80084a6:	f001 fcc1 	bl	8009e2c <RCCEx_PLL3_Config>
 80084aa:	4603      	mov	r3, r0
 80084ac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80084ae:	e003      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	75fb      	strb	r3, [r7, #23]
      break;
 80084b4:	e000      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80084b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d109      	bne.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80084be:	4b24      	ldr	r3, [pc, #144]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084c2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084ca:	4921      	ldr	r1, [pc, #132]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084cc:	4313      	orrs	r3, r2
 80084ce:	654b      	str	r3, [r1, #84]	; 0x54
 80084d0:	e001      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d2:	7dfb      	ldrb	r3, [r7, #23]
 80084d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0302 	and.w	r3, r3, #2
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d03e      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084e6:	2b05      	cmp	r3, #5
 80084e8:	d820      	bhi.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80084ea:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	08008533 	.word	0x08008533
 80084f4:	08008509 	.word	0x08008509
 80084f8:	0800851b 	.word	0x0800851b
 80084fc:	08008533 	.word	0x08008533
 8008500:	08008533 	.word	0x08008533
 8008504:	08008533 	.word	0x08008533
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	3304      	adds	r3, #4
 800850c:	2101      	movs	r1, #1
 800850e:	4618      	mov	r0, r3
 8008510:	f001 fbda 	bl	8009cc8 <RCCEx_PLL2_Config>
 8008514:	4603      	mov	r3, r0
 8008516:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008518:	e00c      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	3324      	adds	r3, #36	; 0x24
 800851e:	2101      	movs	r1, #1
 8008520:	4618      	mov	r0, r3
 8008522:	f001 fc83 	bl	8009e2c <RCCEx_PLL3_Config>
 8008526:	4603      	mov	r3, r0
 8008528:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800852a:	e003      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	75fb      	strb	r3, [r7, #23]
      break;
 8008530:	e000      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008534:	7dfb      	ldrb	r3, [r7, #23]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d110      	bne.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800853a:	4b05      	ldr	r3, [pc, #20]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800853c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800853e:	f023 0207 	bic.w	r2, r3, #7
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008546:	4902      	ldr	r1, [pc, #8]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008548:	4313      	orrs	r3, r2
 800854a:	654b      	str	r3, [r1, #84]	; 0x54
 800854c:	e008      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800854e:	bf00      	nop
 8008550:	58024400 	.word	0x58024400
 8008554:	58024800 	.word	0x58024800
 8008558:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855c:	7dfb      	ldrb	r3, [r7, #23]
 800855e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0304 	and.w	r3, r3, #4
 8008568:	2b00      	cmp	r3, #0
 800856a:	d039      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008572:	2b05      	cmp	r3, #5
 8008574:	d820      	bhi.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008576:	a201      	add	r2, pc, #4	; (adr r2, 800857c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857c:	080085bf 	.word	0x080085bf
 8008580:	08008595 	.word	0x08008595
 8008584:	080085a7 	.word	0x080085a7
 8008588:	080085bf 	.word	0x080085bf
 800858c:	080085bf 	.word	0x080085bf
 8008590:	080085bf 	.word	0x080085bf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	3304      	adds	r3, #4
 8008598:	2101      	movs	r1, #1
 800859a:	4618      	mov	r0, r3
 800859c:	f001 fb94 	bl	8009cc8 <RCCEx_PLL2_Config>
 80085a0:	4603      	mov	r3, r0
 80085a2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80085a4:	e00c      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	3324      	adds	r3, #36	; 0x24
 80085aa:	2101      	movs	r1, #1
 80085ac:	4618      	mov	r0, r3
 80085ae:	f001 fc3d 	bl	8009e2c <RCCEx_PLL3_Config>
 80085b2:	4603      	mov	r3, r0
 80085b4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80085b6:	e003      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	75fb      	strb	r3, [r7, #23]
      break;
 80085bc:	e000      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80085be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085c0:	7dfb      	ldrb	r3, [r7, #23]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10a      	bne.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085c6:	4bb7      	ldr	r3, [pc, #732]	; (80088a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ca:	f023 0207 	bic.w	r2, r3, #7
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d4:	49b3      	ldr	r1, [pc, #716]	; (80088a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	658b      	str	r3, [r1, #88]	; 0x58
 80085da:	e001      	b.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085dc:	7dfb      	ldrb	r3, [r7, #23]
 80085de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0320 	and.w	r3, r3, #32
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d04b      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085f6:	d02e      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80085f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085fc:	d828      	bhi.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80085fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008602:	d02a      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008608:	d822      	bhi.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800860a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800860e:	d026      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008610:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008614:	d81c      	bhi.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800861a:	d010      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800861c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008620:	d816      	bhi.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008622:	2b00      	cmp	r3, #0
 8008624:	d01d      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800862a:	d111      	bne.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	3304      	adds	r3, #4
 8008630:	2100      	movs	r1, #0
 8008632:	4618      	mov	r0, r3
 8008634:	f001 fb48 	bl	8009cc8 <RCCEx_PLL2_Config>
 8008638:	4603      	mov	r3, r0
 800863a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800863c:	e012      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	3324      	adds	r3, #36	; 0x24
 8008642:	2102      	movs	r1, #2
 8008644:	4618      	mov	r0, r3
 8008646:	f001 fbf1 	bl	8009e2c <RCCEx_PLL3_Config>
 800864a:	4603      	mov	r3, r0
 800864c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800864e:	e009      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	75fb      	strb	r3, [r7, #23]
      break;
 8008654:	e006      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008656:	bf00      	nop
 8008658:	e004      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800865a:	bf00      	nop
 800865c:	e002      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800865e:	bf00      	nop
 8008660:	e000      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008664:	7dfb      	ldrb	r3, [r7, #23]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10a      	bne.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800866a:	4b8e      	ldr	r3, [pc, #568]	; (80088a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800866c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800866e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008678:	498a      	ldr	r1, [pc, #552]	; (80088a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800867a:	4313      	orrs	r3, r2
 800867c:	654b      	str	r3, [r1, #84]	; 0x54
 800867e:	e001      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008680:	7dfb      	ldrb	r3, [r7, #23]
 8008682:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868c:	2b00      	cmp	r3, #0
 800868e:	d04b      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008696:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800869a:	d02e      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800869c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80086a0:	d828      	bhi.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80086a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a6:	d02a      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80086a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ac:	d822      	bhi.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80086ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086b2:	d026      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80086b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086b8:	d81c      	bhi.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80086ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086be:	d010      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80086c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086c4:	d816      	bhi.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d01d      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80086ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086ce:	d111      	bne.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3304      	adds	r3, #4
 80086d4:	2100      	movs	r1, #0
 80086d6:	4618      	mov	r0, r3
 80086d8:	f001 faf6 	bl	8009cc8 <RCCEx_PLL2_Config>
 80086dc:	4603      	mov	r3, r0
 80086de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80086e0:	e012      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	3324      	adds	r3, #36	; 0x24
 80086e6:	2102      	movs	r1, #2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f001 fb9f 	bl	8009e2c <RCCEx_PLL3_Config>
 80086ee:	4603      	mov	r3, r0
 80086f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80086f2:	e009      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	75fb      	strb	r3, [r7, #23]
      break;
 80086f8:	e006      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80086fa:	bf00      	nop
 80086fc:	e004      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80086fe:	bf00      	nop
 8008700:	e002      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008702:	bf00      	nop
 8008704:	e000      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008706:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008708:	7dfb      	ldrb	r3, [r7, #23]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10a      	bne.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800870e:	4b65      	ldr	r3, [pc, #404]	; (80088a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008712:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800871c:	4961      	ldr	r1, [pc, #388]	; (80088a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800871e:	4313      	orrs	r3, r2
 8008720:	658b      	str	r3, [r1, #88]	; 0x58
 8008722:	e001      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008724:	7dfb      	ldrb	r3, [r7, #23]
 8008726:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008730:	2b00      	cmp	r3, #0
 8008732:	d04b      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800873a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800873e:	d02e      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008740:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008744:	d828      	bhi.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800874a:	d02a      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800874c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008750:	d822      	bhi.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008752:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008756:	d026      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008758:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800875c:	d81c      	bhi.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800875e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008762:	d010      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008768:	d816      	bhi.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800876a:	2b00      	cmp	r3, #0
 800876c:	d01d      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800876e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008772:	d111      	bne.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	3304      	adds	r3, #4
 8008778:	2100      	movs	r1, #0
 800877a:	4618      	mov	r0, r3
 800877c:	f001 faa4 	bl	8009cc8 <RCCEx_PLL2_Config>
 8008780:	4603      	mov	r3, r0
 8008782:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008784:	e012      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	3324      	adds	r3, #36	; 0x24
 800878a:	2102      	movs	r1, #2
 800878c:	4618      	mov	r0, r3
 800878e:	f001 fb4d 	bl	8009e2c <RCCEx_PLL3_Config>
 8008792:	4603      	mov	r3, r0
 8008794:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008796:	e009      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	75fb      	strb	r3, [r7, #23]
      break;
 800879c:	e006      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800879e:	bf00      	nop
 80087a0:	e004      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80087a2:	bf00      	nop
 80087a4:	e002      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80087a6:	bf00      	nop
 80087a8:	e000      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80087aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087ac:	7dfb      	ldrb	r3, [r7, #23]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10a      	bne.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80087b2:	4b3c      	ldr	r3, [pc, #240]	; (80088a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80087b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80087c0:	4938      	ldr	r1, [pc, #224]	; (80088a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80087c2:	4313      	orrs	r3, r2
 80087c4:	658b      	str	r3, [r1, #88]	; 0x58
 80087c6:	e001      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c8:	7dfb      	ldrb	r3, [r7, #23]
 80087ca:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 0308 	and.w	r3, r3, #8
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d01a      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e2:	d10a      	bne.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	3324      	adds	r3, #36	; 0x24
 80087e8:	2102      	movs	r1, #2
 80087ea:	4618      	mov	r0, r3
 80087ec:	f001 fb1e 	bl	8009e2c <RCCEx_PLL3_Config>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d001      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80087fa:	4b2a      	ldr	r3, [pc, #168]	; (80088a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80087fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008808:	4926      	ldr	r1, [pc, #152]	; (80088a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800880a:	4313      	orrs	r3, r2
 800880c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0310 	and.w	r3, r3, #16
 8008816:	2b00      	cmp	r3, #0
 8008818:	d01a      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008824:	d10a      	bne.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3324      	adds	r3, #36	; 0x24
 800882a:	2102      	movs	r1, #2
 800882c:	4618      	mov	r0, r3
 800882e:	f001 fafd 	bl	8009e2c <RCCEx_PLL3_Config>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800883c:	4b19      	ldr	r3, [pc, #100]	; (80088a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800883e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800884a:	4916      	ldr	r1, [pc, #88]	; (80088a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800884c:	4313      	orrs	r3, r2
 800884e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d036      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008862:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008866:	d01f      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008868:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800886c:	d817      	bhi.n	800889e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800886e:	2b00      	cmp	r3, #0
 8008870:	d003      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008876:	d009      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008878:	e011      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	3304      	adds	r3, #4
 800887e:	2100      	movs	r1, #0
 8008880:	4618      	mov	r0, r3
 8008882:	f001 fa21 	bl	8009cc8 <RCCEx_PLL2_Config>
 8008886:	4603      	mov	r3, r0
 8008888:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800888a:	e00e      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	3324      	adds	r3, #36	; 0x24
 8008890:	2102      	movs	r1, #2
 8008892:	4618      	mov	r0, r3
 8008894:	f001 faca 	bl	8009e2c <RCCEx_PLL3_Config>
 8008898:	4603      	mov	r3, r0
 800889a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800889c:	e005      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	75fb      	strb	r3, [r7, #23]
      break;
 80088a2:	e002      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80088a4:	58024400 	.word	0x58024400
      break;
 80088a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088aa:	7dfb      	ldrb	r3, [r7, #23]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10a      	bne.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80088b0:	4b93      	ldr	r3, [pc, #588]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80088be:	4990      	ldr	r1, [pc, #576]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	658b      	str	r3, [r1, #88]	; 0x58
 80088c4:	e001      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d033      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088e0:	d01c      	beq.n	800891c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80088e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088e6:	d816      	bhi.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80088e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088ec:	d003      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80088ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088f2:	d007      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80088f4:	e00f      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088f6:	4b82      	ldr	r3, [pc, #520]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fa:	4a81      	ldr	r2, [pc, #516]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008900:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008902:	e00c      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	3324      	adds	r3, #36	; 0x24
 8008908:	2101      	movs	r1, #1
 800890a:	4618      	mov	r0, r3
 800890c:	f001 fa8e 	bl	8009e2c <RCCEx_PLL3_Config>
 8008910:	4603      	mov	r3, r0
 8008912:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008914:	e003      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	75fb      	strb	r3, [r7, #23]
      break;
 800891a:	e000      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800891c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800891e:	7dfb      	ldrb	r3, [r7, #23]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10a      	bne.n	800893a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008924:	4b76      	ldr	r3, [pc, #472]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008928:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008932:	4973      	ldr	r1, [pc, #460]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008934:	4313      	orrs	r3, r2
 8008936:	654b      	str	r3, [r1, #84]	; 0x54
 8008938:	e001      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800893a:	7dfb      	ldrb	r3, [r7, #23]
 800893c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d029      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800894e:	2b00      	cmp	r3, #0
 8008950:	d003      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008956:	d007      	beq.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008958:	e00f      	b.n	800897a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800895a:	4b69      	ldr	r3, [pc, #420]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800895c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895e:	4a68      	ldr	r2, [pc, #416]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008964:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008966:	e00b      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	3304      	adds	r3, #4
 800896c:	2102      	movs	r1, #2
 800896e:	4618      	mov	r0, r3
 8008970:	f001 f9aa 	bl	8009cc8 <RCCEx_PLL2_Config>
 8008974:	4603      	mov	r3, r0
 8008976:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008978:	e002      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	75fb      	strb	r3, [r7, #23]
      break;
 800897e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008980:	7dfb      	ldrb	r3, [r7, #23]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d109      	bne.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008986:	4b5e      	ldr	r3, [pc, #376]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800898a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008992:	495b      	ldr	r1, [pc, #364]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008994:	4313      	orrs	r3, r2
 8008996:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008998:	e001      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800899a:	7dfb      	ldrb	r3, [r7, #23]
 800899c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00a      	beq.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	3324      	adds	r3, #36	; 0x24
 80089ae:	2102      	movs	r1, #2
 80089b0:	4618      	mov	r0, r3
 80089b2:	f001 fa3b 	bl	8009e2c <RCCEx_PLL3_Config>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d030      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089d4:	d017      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80089d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089da:	d811      	bhi.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80089dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089e0:	d013      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80089e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089e6:	d80b      	bhi.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d010      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80089ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089f0:	d106      	bne.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089f2:	4b43      	ldr	r3, [pc, #268]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f6:	4a42      	ldr	r2, [pc, #264]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80089fe:	e007      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	75fb      	strb	r3, [r7, #23]
      break;
 8008a04:	e004      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008a06:	bf00      	nop
 8008a08:	e002      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008a0a:	bf00      	nop
 8008a0c:	e000      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008a0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a10:	7dfb      	ldrb	r3, [r7, #23]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d109      	bne.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a16:	4b3a      	ldr	r3, [pc, #232]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a22:	4937      	ldr	r1, [pc, #220]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a24:	4313      	orrs	r3, r2
 8008a26:	654b      	str	r3, [r1, #84]	; 0x54
 8008a28:	e001      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a2a:	7dfb      	ldrb	r3, [r7, #23]
 8008a2c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d008      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008a3a:	4b31      	ldr	r3, [pc, #196]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a46:	492e      	ldr	r1, [pc, #184]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d009      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008a58:	4b29      	ldr	r3, [pc, #164]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008a66:	4926      	ldr	r1, [pc, #152]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d008      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a78:	4b21      	ldr	r3, [pc, #132]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a84:	491e      	ldr	r1, [pc, #120]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a86:	4313      	orrs	r3, r2
 8008a88:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00d      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a96:	4b1a      	ldr	r3, [pc, #104]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	4a19      	ldr	r2, [pc, #100]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008aa0:	6113      	str	r3, [r2, #16]
 8008aa2:	4b17      	ldr	r3, [pc, #92]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008aa4:	691a      	ldr	r2, [r3, #16]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008aac:	4914      	ldr	r1, [pc, #80]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	da08      	bge.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008aba:	4b11      	ldr	r3, [pc, #68]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008abe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac6:	490e      	ldr	r1, [pc, #56]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d009      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ad8:	4b09      	ldr	r3, [pc, #36]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008adc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ae6:	4906      	ldr	r1, [pc, #24]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008aec:	7dbb      	ldrb	r3, [r7, #22]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d101      	bne.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	e000      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3718      	adds	r7, #24
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	58024400 	.word	0x58024400

08008b04 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b090      	sub	sp, #64	; 0x40
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b12:	f040 8095 	bne.w	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008b16:	4bae      	ldr	r3, [pc, #696]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b1a:	f003 0307 	and.w	r3, r3, #7
 8008b1e:	633b      	str	r3, [r7, #48]	; 0x30
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	2b04      	cmp	r3, #4
 8008b24:	f200 8088 	bhi.w	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008b28:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2e:	bf00      	nop
 8008b30:	08008b45 	.word	0x08008b45
 8008b34:	08008b6d 	.word	0x08008b6d
 8008b38:	08008b95 	.word	0x08008b95
 8008b3c:	08008c31 	.word	0x08008c31
 8008b40:	08008bbd 	.word	0x08008bbd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b44:	4ba2      	ldr	r3, [pc, #648]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b50:	d108      	bne.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 ff64 	bl	8009a24 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b60:	f000 bc95 	b.w	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b68:	f000 bc91 	b.w	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b6c:	4b98      	ldr	r3, [pc, #608]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b78:	d108      	bne.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b7a:	f107 0318 	add.w	r3, r7, #24
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 fca8 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b88:	f000 bc81 	b.w	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b90:	f000 bc7d 	b.w	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b94:	4b8e      	ldr	r3, [pc, #568]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ba0:	d108      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ba2:	f107 030c 	add.w	r3, r7, #12
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 fde8 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008bb0:	f000 bc6d 	b.w	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bb8:	f000 bc69 	b.w	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008bbc:	4b84      	ldr	r3, [pc, #528]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bc4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bc6:	4b82      	ldr	r3, [pc, #520]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0304 	and.w	r3, r3, #4
 8008bce:	2b04      	cmp	r3, #4
 8008bd0:	d10c      	bne.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d109      	bne.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bd8:	4b7d      	ldr	r3, [pc, #500]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	08db      	lsrs	r3, r3, #3
 8008bde:	f003 0303 	and.w	r3, r3, #3
 8008be2:	4a7c      	ldr	r2, [pc, #496]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008be4:	fa22 f303 	lsr.w	r3, r2, r3
 8008be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bea:	e01f      	b.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bec:	4b78      	ldr	r3, [pc, #480]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bf8:	d106      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c00:	d102      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008c02:	4b75      	ldr	r3, [pc, #468]	; (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c06:	e011      	b.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c08:	4b71      	ldr	r3, [pc, #452]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c14:	d106      	bne.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c1c:	d102      	bne.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008c1e:	4b6f      	ldr	r3, [pc, #444]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c22:	e003      	b.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008c24:	2300      	movs	r3, #0
 8008c26:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008c28:	f000 bc31 	b.w	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c2c:	f000 bc2f 	b.w	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c30:	4b6b      	ldr	r3, [pc, #428]	; (8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008c32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c34:	f000 bc2b 	b.w	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c3c:	f000 bc27 	b.w	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c46:	f040 8095 	bne.w	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008c4a:	4b61      	ldr	r3, [pc, #388]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c4e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008c52:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c5a:	d04d      	beq.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c62:	f200 8084 	bhi.w	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	2bc0      	cmp	r3, #192	; 0xc0
 8008c6a:	d07d      	beq.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6e:	2bc0      	cmp	r3, #192	; 0xc0
 8008c70:	d87d      	bhi.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c74:	2b80      	cmp	r3, #128	; 0x80
 8008c76:	d02d      	beq.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7a:	2b80      	cmp	r3, #128	; 0x80
 8008c7c:	d877      	bhi.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d003      	beq.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c86:	2b40      	cmp	r3, #64	; 0x40
 8008c88:	d012      	beq.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008c8a:	e070      	b.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c8c:	4b50      	ldr	r3, [pc, #320]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c98:	d107      	bne.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 fec0 	bl	8009a24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ca8:	e3f1      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cae:	e3ee      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cb0:	4b47      	ldr	r3, [pc, #284]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cbc:	d107      	bne.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cbe:	f107 0318 	add.w	r3, r7, #24
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 fc06 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ccc:	e3df      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cd2:	e3dc      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cd4:	4b3e      	ldr	r3, [pc, #248]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ce0:	d107      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ce2:	f107 030c 	add.w	r3, r7, #12
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 fd48 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008cf0:	e3cd      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cf6:	e3ca      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008cf8:	4b35      	ldr	r3, [pc, #212]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d00:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d02:	4b33      	ldr	r3, [pc, #204]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0304 	and.w	r3, r3, #4
 8008d0a:	2b04      	cmp	r3, #4
 8008d0c:	d10c      	bne.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d109      	bne.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d14:	4b2e      	ldr	r3, [pc, #184]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	08db      	lsrs	r3, r3, #3
 8008d1a:	f003 0303 	and.w	r3, r3, #3
 8008d1e:	4a2d      	ldr	r2, [pc, #180]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008d20:	fa22 f303 	lsr.w	r3, r2, r3
 8008d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d26:	e01e      	b.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d28:	4b29      	ldr	r3, [pc, #164]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d34:	d106      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d3c:	d102      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008d3e:	4b26      	ldr	r3, [pc, #152]	; (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d42:	e010      	b.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d44:	4b22      	ldr	r3, [pc, #136]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d50:	d106      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d58:	d102      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008d5a:	4b20      	ldr	r3, [pc, #128]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d5e:	e002      	b.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008d64:	e393      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d66:	e392      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d68:	4b1d      	ldr	r3, [pc, #116]	; (8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d6c:	e38f      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d72:	e38c      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d7a:	f040 80a7 	bne.w	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008d7e:	4b14      	ldr	r3, [pc, #80]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d82:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008d86:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d8e:	d05f      	beq.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d96:	f200 8096 	bhi.w	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008da0:	f000 808e 	beq.w	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008daa:	f200 808c 	bhi.w	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008db4:	d03a      	beq.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dbc:	f200 8083 	bhi.w	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00e      	beq.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dcc:	d01c      	beq.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8008dce:	e07a      	b.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008dd0:	58024400 	.word	0x58024400
 8008dd4:	03d09000 	.word	0x03d09000
 8008dd8:	003d0900 	.word	0x003d0900
 8008ddc:	007a1200 	.word	0x007a1200
 8008de0:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008de4:	4baa      	ldr	r3, [pc, #680]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008df0:	d107      	bne.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 fe14 	bl	8009a24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e00:	e345      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e02:	2300      	movs	r3, #0
 8008e04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e06:	e342      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e08:	4ba1      	ldr	r3, [pc, #644]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e14:	d107      	bne.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e16:	f107 0318 	add.w	r3, r7, #24
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 fb5a 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e24:	e333      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e26:	2300      	movs	r3, #0
 8008e28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e2a:	e330      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e2c:	4b98      	ldr	r3, [pc, #608]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e38:	d107      	bne.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e3a:	f107 030c 	add.w	r3, r7, #12
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 fc9c 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e48:	e321      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e4e:	e31e      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e50:	4b8f      	ldr	r3, [pc, #572]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e58:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e5a:	4b8d      	ldr	r3, [pc, #564]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0304 	and.w	r3, r3, #4
 8008e62:	2b04      	cmp	r3, #4
 8008e64:	d10c      	bne.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d109      	bne.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e6c:	4b88      	ldr	r3, [pc, #544]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	08db      	lsrs	r3, r3, #3
 8008e72:	f003 0303 	and.w	r3, r3, #3
 8008e76:	4a87      	ldr	r2, [pc, #540]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008e78:	fa22 f303 	lsr.w	r3, r2, r3
 8008e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e7e:	e01e      	b.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e80:	4b83      	ldr	r3, [pc, #524]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e8c:	d106      	bne.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8008e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e94:	d102      	bne.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008e96:	4b80      	ldr	r3, [pc, #512]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008e98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e9a:	e010      	b.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e9c:	4b7c      	ldr	r3, [pc, #496]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ea8:	d106      	bne.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8008eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eb0:	d102      	bne.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008eb2:	4b7a      	ldr	r3, [pc, #488]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eb6:	e002      	b.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008ebc:	e2e7      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ebe:	e2e6      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008ec0:	4b77      	ldr	r3, [pc, #476]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ec4:	e2e3      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eca:	e2e0      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ed2:	f040 809c 	bne.w	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008ed6:	4b6e      	ldr	r3, [pc, #440]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eda:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008ede:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ee6:	d054      	beq.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008eee:	f200 808b 	bhi.w	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ef8:	f000 8083 	beq.w	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f02:	f200 8081 	bhi.w	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f0c:	d02f      	beq.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f14:	d878      	bhi.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d004      	beq.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f22:	d012      	beq.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008f24:	e070      	b.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f26:	4b5a      	ldr	r3, [pc, #360]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f32:	d107      	bne.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 fd73 	bl	8009a24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f42:	e2a4      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f48:	e2a1      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f4a:	4b51      	ldr	r3, [pc, #324]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f56:	d107      	bne.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f58:	f107 0318 	add.w	r3, r7, #24
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 fab9 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008f66:	e292      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f6c:	e28f      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f6e:	4b48      	ldr	r3, [pc, #288]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f7a:	d107      	bne.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f7c:	f107 030c 	add.w	r3, r7, #12
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 fbfb 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f8a:	e280      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f90:	e27d      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f92:	4b3f      	ldr	r3, [pc, #252]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f9a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f9c:	4b3c      	ldr	r3, [pc, #240]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	d10c      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d109      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008fae:	4b38      	ldr	r3, [pc, #224]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	08db      	lsrs	r3, r3, #3
 8008fb4:	f003 0303 	and.w	r3, r3, #3
 8008fb8:	4a36      	ldr	r2, [pc, #216]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008fba:	fa22 f303 	lsr.w	r3, r2, r3
 8008fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fc0:	e01e      	b.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fc2:	4b33      	ldr	r3, [pc, #204]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fce:	d106      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fd6:	d102      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008fd8:	4b2f      	ldr	r3, [pc, #188]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fdc:	e010      	b.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fde:	4b2c      	ldr	r3, [pc, #176]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fea:	d106      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ff2:	d102      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008ff4:	4b29      	ldr	r3, [pc, #164]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ff8:	e002      	b.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008ffe:	e246      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009000:	e245      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009002:	4b27      	ldr	r3, [pc, #156]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009004:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009006:	e242      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009008:	2300      	movs	r3, #0
 800900a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800900c:	e23f      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009014:	f040 80a8 	bne.w	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009018:	4b1d      	ldr	r3, [pc, #116]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800901a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800901c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009020:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009024:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009028:	d060      	beq.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800902a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009030:	f200 8097 	bhi.w	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009036:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800903a:	f000 808f 	beq.w	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800903e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009040:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009044:	f200 808d 	bhi.w	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800904e:	d03b      	beq.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8009050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009056:	f200 8084 	bhi.w	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800905a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905c:	2b00      	cmp	r3, #0
 800905e:	d004      	beq.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8009060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009066:	d01d      	beq.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8009068:	e07b      	b.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800906a:	4b09      	ldr	r3, [pc, #36]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009072:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009076:	d107      	bne.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800907c:	4618      	mov	r0, r3
 800907e:	f000 fcd1 	bl	8009a24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009084:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009086:	e202      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009088:	2300      	movs	r3, #0
 800908a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800908c:	e1ff      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800908e:	bf00      	nop
 8009090:	58024400 	.word	0x58024400
 8009094:	03d09000 	.word	0x03d09000
 8009098:	003d0900 	.word	0x003d0900
 800909c:	007a1200 	.word	0x007a1200
 80090a0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090a4:	4ba3      	ldr	r3, [pc, #652]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090b0:	d107      	bne.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090b2:	f107 0318 	add.w	r3, r7, #24
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 fa0c 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090c0:	e1e5      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80090c2:	2300      	movs	r3, #0
 80090c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090c6:	e1e2      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090c8:	4b9a      	ldr	r3, [pc, #616]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090d4:	d107      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090d6:	f107 030c 	add.w	r3, r7, #12
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 fb4e 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090e4:	e1d3      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80090e6:	2300      	movs	r3, #0
 80090e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090ea:	e1d0      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80090ec:	4b91      	ldr	r3, [pc, #580]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80090ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090f4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090f6:	4b8f      	ldr	r3, [pc, #572]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 0304 	and.w	r3, r3, #4
 80090fe:	2b04      	cmp	r3, #4
 8009100:	d10c      	bne.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8009102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009104:	2b00      	cmp	r3, #0
 8009106:	d109      	bne.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009108:	4b8a      	ldr	r3, [pc, #552]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	08db      	lsrs	r3, r3, #3
 800910e:	f003 0303 	and.w	r3, r3, #3
 8009112:	4a89      	ldr	r2, [pc, #548]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009114:	fa22 f303 	lsr.w	r3, r2, r3
 8009118:	63fb      	str	r3, [r7, #60]	; 0x3c
 800911a:	e01e      	b.n	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800911c:	4b85      	ldr	r3, [pc, #532]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009128:	d106      	bne.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800912a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800912c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009130:	d102      	bne.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009132:	4b82      	ldr	r3, [pc, #520]	; (800933c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009136:	e010      	b.n	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009138:	4b7e      	ldr	r3, [pc, #504]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009144:	d106      	bne.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800914c:	d102      	bne.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800914e:	4b7c      	ldr	r3, [pc, #496]	; (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009150:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009152:	e002      	b.n	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009154:	2300      	movs	r3, #0
 8009156:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009158:	e199      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800915a:	e198      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800915c:	4b79      	ldr	r3, [pc, #484]	; (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800915e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009160:	e195      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009162:	2300      	movs	r3, #0
 8009164:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009166:	e192      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800916e:	d173      	bne.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009170:	4b70      	ldr	r3, [pc, #448]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009174:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009178:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800917a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009180:	d02f      	beq.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8009182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009188:	d863      	bhi.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800918a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918c:	2b00      	cmp	r3, #0
 800918e:	d004      	beq.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8009190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009196:	d012      	beq.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8009198:	e05b      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800919a:	4b66      	ldr	r3, [pc, #408]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091a6:	d107      	bne.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091a8:	f107 0318 	add.w	r3, r7, #24
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 f991 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091b6:	e16a      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80091b8:	2300      	movs	r3, #0
 80091ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091bc:	e167      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091be:	4b5d      	ldr	r3, [pc, #372]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091ca:	d107      	bne.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091cc:	f107 030c 	add.w	r3, r7, #12
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 fad3 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091da:	e158      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80091dc:	2300      	movs	r3, #0
 80091de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091e0:	e155      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80091e2:	4b54      	ldr	r3, [pc, #336]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091ea:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091ec:	4b51      	ldr	r3, [pc, #324]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 0304 	and.w	r3, r3, #4
 80091f4:	2b04      	cmp	r3, #4
 80091f6:	d10c      	bne.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80091f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d109      	bne.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80091fe:	4b4d      	ldr	r3, [pc, #308]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	08db      	lsrs	r3, r3, #3
 8009204:	f003 0303 	and.w	r3, r3, #3
 8009208:	4a4b      	ldr	r2, [pc, #300]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800920a:	fa22 f303 	lsr.w	r3, r2, r3
 800920e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009210:	e01e      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009212:	4b48      	ldr	r3, [pc, #288]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800921a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800921e:	d106      	bne.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8009220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009222:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009226:	d102      	bne.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009228:	4b44      	ldr	r3, [pc, #272]	; (800933c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800922a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800922c:	e010      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800922e:	4b41      	ldr	r3, [pc, #260]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800923a:	d106      	bne.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800923c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800923e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009242:	d102      	bne.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009244:	4b3e      	ldr	r3, [pc, #248]	; (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009248:	e002      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800924e:	e11e      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009250:	e11d      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009252:	2300      	movs	r3, #0
 8009254:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009256:	e11a      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800925e:	d133      	bne.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009260:	4b34      	ldr	r3, [pc, #208]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009268:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800926a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926c:	2b00      	cmp	r3, #0
 800926e:	d004      	beq.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8009270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009276:	d012      	beq.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009278:	e023      	b.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800927a:	4b2e      	ldr	r3, [pc, #184]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009286:	d107      	bne.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800928c:	4618      	mov	r0, r3
 800928e:	f000 fbc9 	bl	8009a24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009294:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009296:	e0fa      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800929c:	e0f7      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800929e:	4b25      	ldr	r3, [pc, #148]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092aa:	d107      	bne.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092ac:	f107 0318 	add.w	r3, r7, #24
 80092b0:	4618      	mov	r0, r3
 80092b2:	f000 f90f 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80092b6:	6a3b      	ldr	r3, [r7, #32]
 80092b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80092ba:	e0e8      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092bc:	2300      	movs	r3, #0
 80092be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092c0:	e0e5      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092c6:	e0e2      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092ce:	f040 808f 	bne.w	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80092d2:	4b18      	ldr	r3, [pc, #96]	; (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80092d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80092da:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80092dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092e2:	d075      	beq.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80092e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092ea:	d87e      	bhi.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80092ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092f2:	d060      	beq.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80092f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092fa:	d876      	bhi.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80092fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009302:	d045      	beq.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8009304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009306:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800930a:	d86e      	bhi.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800930c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009312:	d02b      	beq.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8009314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800931a:	d866      	bhi.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800931c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931e:	2b00      	cmp	r3, #0
 8009320:	d004      	beq.n	800932c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8009322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009324:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009328:	d00e      	beq.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800932a:	e05e      	b.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800932c:	f000 f8bc 	bl	80094a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009330:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009332:	e0ac      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009334:	58024400 	.word	0x58024400
 8009338:	03d09000 	.word	0x03d09000
 800933c:	003d0900 	.word	0x003d0900
 8009340:	007a1200 	.word	0x007a1200
 8009344:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009348:	4b53      	ldr	r3, [pc, #332]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009350:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009354:	d107      	bne.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009356:	f107 0318 	add.w	r3, r7, #24
 800935a:	4618      	mov	r0, r3
 800935c:	f000 f8ba 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009364:	e093      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009366:	2300      	movs	r3, #0
 8009368:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800936a:	e090      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800936c:	4b4a      	ldr	r3, [pc, #296]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009378:	d107      	bne.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800937a:	f107 030c 	add.w	r3, r7, #12
 800937e:	4618      	mov	r0, r3
 8009380:	f000 f9fc 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009388:	e081      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800938a:	2300      	movs	r3, #0
 800938c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800938e:	e07e      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009390:	4b41      	ldr	r3, [pc, #260]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 0304 	and.w	r3, r3, #4
 8009398:	2b04      	cmp	r3, #4
 800939a:	d109      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800939c:	4b3e      	ldr	r3, [pc, #248]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	08db      	lsrs	r3, r3, #3
 80093a2:	f003 0303 	and.w	r3, r3, #3
 80093a6:	4a3d      	ldr	r2, [pc, #244]	; (800949c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80093a8:	fa22 f303 	lsr.w	r3, r2, r3
 80093ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80093ae:	e06e      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093b0:	2300      	movs	r3, #0
 80093b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093b4:	e06b      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80093b6:	4b38      	ldr	r3, [pc, #224]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093c2:	d102      	bne.n	80093ca <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80093c4:	4b36      	ldr	r3, [pc, #216]	; (80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80093c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093c8:	e061      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80093ca:	2300      	movs	r3, #0
 80093cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093ce:	e05e      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80093d0:	4b31      	ldr	r3, [pc, #196]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093dc:	d102      	bne.n	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80093de:	4b31      	ldr	r3, [pc, #196]	; (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80093e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80093e2:	e054      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093e4:	2300      	movs	r3, #0
 80093e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093e8:	e051      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093ee:	e04e      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093f6:	d148      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80093f8:	4b27      	ldr	r3, [pc, #156]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009400:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009408:	d02a      	beq.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800940a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009410:	d838      	bhi.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009414:	2b00      	cmp	r3, #0
 8009416:	d004      	beq.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800941e:	d00d      	beq.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009420:	e030      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009422:	4b1d      	ldr	r3, [pc, #116]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800942a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800942e:	d102      	bne.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8009430:	4b1c      	ldr	r3, [pc, #112]	; (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009432:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009434:	e02b      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009436:	2300      	movs	r3, #0
 8009438:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800943a:	e028      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800943c:	4b16      	ldr	r3, [pc, #88]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009444:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009448:	d107      	bne.n	800945a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800944a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800944e:	4618      	mov	r0, r3
 8009450:	f000 fae8 	bl	8009a24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009456:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009458:	e019      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800945a:	2300      	movs	r3, #0
 800945c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800945e:	e016      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009460:	4b0d      	ldr	r3, [pc, #52]	; (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800946c:	d107      	bne.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800946e:	f107 0318 	add.w	r3, r7, #24
 8009472:	4618      	mov	r0, r3
 8009474:	f000 f82e 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800947c:	e007      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800947e:	2300      	movs	r3, #0
 8009480:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009482:	e004      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009484:	2300      	movs	r3, #0
 8009486:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009488:	e001      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800948e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009490:	4618      	mov	r0, r3
 8009492:	3740      	adds	r7, #64	; 0x40
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	58024400 	.word	0x58024400
 800949c:	03d09000 	.word	0x03d09000
 80094a0:	003d0900 	.word	0x003d0900
 80094a4:	007a1200 	.word	0x007a1200

080094a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80094ac:	f7fe fb8e 	bl	8007bcc <HAL_RCC_GetHCLKFreq>
 80094b0:	4602      	mov	r2, r0
 80094b2:	4b06      	ldr	r3, [pc, #24]	; (80094cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80094b4:	6a1b      	ldr	r3, [r3, #32]
 80094b6:	091b      	lsrs	r3, r3, #4
 80094b8:	f003 0307 	and.w	r3, r3, #7
 80094bc:	4904      	ldr	r1, [pc, #16]	; (80094d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80094be:	5ccb      	ldrb	r3, [r1, r3]
 80094c0:	f003 031f 	and.w	r3, r3, #31
 80094c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	58024400 	.word	0x58024400
 80094d0:	0800d494 	.word	0x0800d494

080094d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b089      	sub	sp, #36	; 0x24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094dc:	4ba1      	ldr	r3, [pc, #644]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e0:	f003 0303 	and.w	r3, r3, #3
 80094e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80094e6:	4b9f      	ldr	r3, [pc, #636]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ea:	0b1b      	lsrs	r3, r3, #12
 80094ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80094f2:	4b9c      	ldr	r3, [pc, #624]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f6:	091b      	lsrs	r3, r3, #4
 80094f8:	f003 0301 	and.w	r3, r3, #1
 80094fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80094fe:	4b99      	ldr	r3, [pc, #612]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009502:	08db      	lsrs	r3, r3, #3
 8009504:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	fb02 f303 	mul.w	r3, r2, r3
 800950e:	ee07 3a90 	vmov	s15, r3
 8009512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009516:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 8111 	beq.w	8009744 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	2b02      	cmp	r3, #2
 8009526:	f000 8083 	beq.w	8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	2b02      	cmp	r3, #2
 800952e:	f200 80a1 	bhi.w	8009674 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d003      	beq.n	8009540 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d056      	beq.n	80095ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800953e:	e099      	b.n	8009674 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009540:	4b88      	ldr	r3, [pc, #544]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 0320 	and.w	r3, r3, #32
 8009548:	2b00      	cmp	r3, #0
 800954a:	d02d      	beq.n	80095a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800954c:	4b85      	ldr	r3, [pc, #532]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	08db      	lsrs	r3, r3, #3
 8009552:	f003 0303 	and.w	r3, r3, #3
 8009556:	4a84      	ldr	r2, [pc, #528]	; (8009768 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009558:	fa22 f303 	lsr.w	r3, r2, r3
 800955c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	ee07 3a90 	vmov	s15, r3
 8009564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	ee07 3a90 	vmov	s15, r3
 800956e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009576:	4b7b      	ldr	r3, [pc, #492]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800957e:	ee07 3a90 	vmov	s15, r3
 8009582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009586:	ed97 6a03 	vldr	s12, [r7, #12]
 800958a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800976c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800958e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800959a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800959e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80095a6:	e087      	b.n	80096b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	ee07 3a90 	vmov	s15, r3
 80095ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009770 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80095b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ba:	4b6a      	ldr	r3, [pc, #424]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095c2:	ee07 3a90 	vmov	s15, r3
 80095c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800976c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80095d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095ea:	e065      	b.n	80096b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	ee07 3a90 	vmov	s15, r3
 80095f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009774 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80095fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095fe:	4b59      	ldr	r3, [pc, #356]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009606:	ee07 3a90 	vmov	s15, r3
 800960a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800960e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009612:	eddf 5a56 	vldr	s11, [pc, #344]	; 800976c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800961a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800961e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800962a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800962e:	e043      	b.n	80096b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	ee07 3a90 	vmov	s15, r3
 8009636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800963a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009778 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800963e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009642:	4b48      	ldr	r3, [pc, #288]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800964a:	ee07 3a90 	vmov	s15, r3
 800964e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009652:	ed97 6a03 	vldr	s12, [r7, #12]
 8009656:	eddf 5a45 	vldr	s11, [pc, #276]	; 800976c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800965a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800965e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800966a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800966e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009672:	e021      	b.n	80096b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	ee07 3a90 	vmov	s15, r3
 800967a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800967e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009774 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009686:	4b37      	ldr	r3, [pc, #220]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800968e:	ee07 3a90 	vmov	s15, r3
 8009692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009696:	ed97 6a03 	vldr	s12, [r7, #12]
 800969a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800976c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800969e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80096b8:	4b2a      	ldr	r3, [pc, #168]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096bc:	0a5b      	lsrs	r3, r3, #9
 80096be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096c2:	ee07 3a90 	vmov	s15, r3
 80096c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80096d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096de:	ee17 2a90 	vmov	r2, s15
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80096e6:	4b1f      	ldr	r3, [pc, #124]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ea:	0c1b      	lsrs	r3, r3, #16
 80096ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f0:	ee07 3a90 	vmov	s15, r3
 80096f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009700:	edd7 6a07 	vldr	s13, [r7, #28]
 8009704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800970c:	ee17 2a90 	vmov	r2, s15
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009714:	4b13      	ldr	r3, [pc, #76]	; (8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009718:	0e1b      	lsrs	r3, r3, #24
 800971a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800971e:	ee07 3a90 	vmov	s15, r3
 8009722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009726:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800972a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800972e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800973a:	ee17 2a90 	vmov	r2, s15
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009742:	e008      	b.n	8009756 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	609a      	str	r2, [r3, #8]
}
 8009756:	bf00      	nop
 8009758:	3724      	adds	r7, #36	; 0x24
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	58024400 	.word	0x58024400
 8009768:	03d09000 	.word	0x03d09000
 800976c:	46000000 	.word	0x46000000
 8009770:	4c742400 	.word	0x4c742400
 8009774:	4a742400 	.word	0x4a742400
 8009778:	4af42400 	.word	0x4af42400

0800977c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800977c:	b480      	push	{r7}
 800977e:	b089      	sub	sp, #36	; 0x24
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009784:	4ba1      	ldr	r3, [pc, #644]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009788:	f003 0303 	and.w	r3, r3, #3
 800978c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800978e:	4b9f      	ldr	r3, [pc, #636]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009792:	0d1b      	lsrs	r3, r3, #20
 8009794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009798:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800979a:	4b9c      	ldr	r3, [pc, #624]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800979c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979e:	0a1b      	lsrs	r3, r3, #8
 80097a0:	f003 0301 	and.w	r3, r3, #1
 80097a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80097a6:	4b99      	ldr	r3, [pc, #612]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097aa:	08db      	lsrs	r3, r3, #3
 80097ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097b0:	693a      	ldr	r2, [r7, #16]
 80097b2:	fb02 f303 	mul.w	r3, r2, r3
 80097b6:	ee07 3a90 	vmov	s15, r3
 80097ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f000 8111 	beq.w	80099ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	f000 8083 	beq.w	80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	f200 80a1 	bhi.w	800991c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d003      	beq.n	80097e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d056      	beq.n	8009894 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80097e6:	e099      	b.n	800991c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097e8:	4b88      	ldr	r3, [pc, #544]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 0320 	and.w	r3, r3, #32
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d02d      	beq.n	8009850 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097f4:	4b85      	ldr	r3, [pc, #532]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	08db      	lsrs	r3, r3, #3
 80097fa:	f003 0303 	and.w	r3, r3, #3
 80097fe:	4a84      	ldr	r2, [pc, #528]	; (8009a10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009800:	fa22 f303 	lsr.w	r3, r2, r3
 8009804:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	ee07 3a90 	vmov	s15, r3
 800980c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	ee07 3a90 	vmov	s15, r3
 8009816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800981a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800981e:	4b7b      	ldr	r3, [pc, #492]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009826:	ee07 3a90 	vmov	s15, r3
 800982a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800982e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009832:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800983a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800983e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800984a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800984e:	e087      	b.n	8009960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	ee07 3a90 	vmov	s15, r3
 8009856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800985a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800985e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009862:	4b6a      	ldr	r3, [pc, #424]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986a:	ee07 3a90 	vmov	s15, r3
 800986e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009872:	ed97 6a03 	vldr	s12, [r7, #12]
 8009876:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800987a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800987e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800988a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800988e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009892:	e065      	b.n	8009960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	ee07 3a90 	vmov	s15, r3
 800989a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800989e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80098a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098a6:	4b59      	ldr	r3, [pc, #356]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ae:	ee07 3a90 	vmov	s15, r3
 80098b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098d6:	e043      	b.n	8009960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	ee07 3a90 	vmov	s15, r3
 80098de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80098e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ea:	4b48      	ldr	r3, [pc, #288]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f2:	ee07 3a90 	vmov	s15, r3
 80098f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80098fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800990a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800990e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009916:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800991a:	e021      	b.n	8009960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	ee07 3a90 	vmov	s15, r3
 8009922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009926:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800992a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800992e:	4b37      	ldr	r3, [pc, #220]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800993e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009942:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800994a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800994e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800995a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800995e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009960:	4b2a      	ldr	r3, [pc, #168]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009964:	0a5b      	lsrs	r3, r3, #9
 8009966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800996a:	ee07 3a90 	vmov	s15, r3
 800996e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800997a:	edd7 6a07 	vldr	s13, [r7, #28]
 800997e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009986:	ee17 2a90 	vmov	r2, s15
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800998e:	4b1f      	ldr	r3, [pc, #124]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009992:	0c1b      	lsrs	r3, r3, #16
 8009994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009998:	ee07 3a90 	vmov	s15, r3
 800999c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80099ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099b4:	ee17 2a90 	vmov	r2, s15
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80099bc:	4b13      	ldr	r3, [pc, #76]	; (8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c0:	0e1b      	lsrs	r3, r3, #24
 80099c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099c6:	ee07 3a90 	vmov	s15, r3
 80099ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80099da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099e2:	ee17 2a90 	vmov	r2, s15
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80099ea:	e008      	b.n	80099fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	609a      	str	r2, [r3, #8]
}
 80099fe:	bf00      	nop
 8009a00:	3724      	adds	r7, #36	; 0x24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	58024400 	.word	0x58024400
 8009a10:	03d09000 	.word	0x03d09000
 8009a14:	46000000 	.word	0x46000000
 8009a18:	4c742400 	.word	0x4c742400
 8009a1c:	4a742400 	.word	0x4a742400
 8009a20:	4af42400 	.word	0x4af42400

08009a24 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b089      	sub	sp, #36	; 0x24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a2c:	4ba0      	ldr	r3, [pc, #640]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a30:	f003 0303 	and.w	r3, r3, #3
 8009a34:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009a36:	4b9e      	ldr	r3, [pc, #632]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3a:	091b      	lsrs	r3, r3, #4
 8009a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a40:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009a42:	4b9b      	ldr	r3, [pc, #620]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009a4c:	4b98      	ldr	r3, [pc, #608]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a50:	08db      	lsrs	r3, r3, #3
 8009a52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a56:	693a      	ldr	r2, [r7, #16]
 8009a58:	fb02 f303 	mul.w	r3, r2, r3
 8009a5c:	ee07 3a90 	vmov	s15, r3
 8009a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a64:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f000 8111 	beq.w	8009c92 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	f000 8083 	beq.w	8009b7e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	f200 80a1 	bhi.w	8009bc2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d003      	beq.n	8009a8e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d056      	beq.n	8009b3a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009a8c:	e099      	b.n	8009bc2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a8e:	4b88      	ldr	r3, [pc, #544]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 0320 	and.w	r3, r3, #32
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d02d      	beq.n	8009af6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a9a:	4b85      	ldr	r3, [pc, #532]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	08db      	lsrs	r3, r3, #3
 8009aa0:	f003 0303 	and.w	r3, r3, #3
 8009aa4:	4a83      	ldr	r2, [pc, #524]	; (8009cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aaa:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	ee07 3a90 	vmov	s15, r3
 8009abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ac4:	4b7a      	ldr	r3, [pc, #488]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009acc:	ee07 3a90 	vmov	s15, r3
 8009ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ad4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ad8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009adc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ae0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ae4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009af0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009af4:	e087      	b.n	8009c06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	ee07 3a90 	vmov	s15, r3
 8009afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b00:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009cbc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009b04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b08:	4b69      	ldr	r3, [pc, #420]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b10:	ee07 3a90 	vmov	s15, r3
 8009b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b18:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b1c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b38:	e065      	b.n	8009c06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	ee07 3a90 	vmov	s15, r3
 8009b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b44:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009b48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b4c:	4b58      	ldr	r3, [pc, #352]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b54:	ee07 3a90 	vmov	s15, r3
 8009b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b60:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b7c:	e043      	b.n	8009c06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	ee07 3a90 	vmov	s15, r3
 8009b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b88:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009b8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b90:	4b47      	ldr	r3, [pc, #284]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b98:	ee07 3a90 	vmov	s15, r3
 8009b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ba0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ba4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bc0:	e021      	b.n	8009c06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	ee07 3a90 	vmov	s15, r3
 8009bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bcc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009cbc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009bd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bd4:	4b36      	ldr	r3, [pc, #216]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bdc:	ee07 3a90 	vmov	s15, r3
 8009be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009be4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009be8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009bec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c04:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009c06:	4b2a      	ldr	r3, [pc, #168]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c0a:	0a5b      	lsrs	r3, r3, #9
 8009c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c10:	ee07 3a90 	vmov	s15, r3
 8009c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c2c:	ee17 2a90 	vmov	r2, s15
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009c34:	4b1e      	ldr	r3, [pc, #120]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c38:	0c1b      	lsrs	r3, r3, #16
 8009c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c3e:	ee07 3a90 	vmov	s15, r3
 8009c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c5a:	ee17 2a90 	vmov	r2, s15
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009c62:	4b13      	ldr	r3, [pc, #76]	; (8009cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c66:	0e1b      	lsrs	r3, r3, #24
 8009c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c6c:	ee07 3a90 	vmov	s15, r3
 8009c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c88:	ee17 2a90 	vmov	r2, s15
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009c90:	e008      	b.n	8009ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	609a      	str	r2, [r3, #8]
}
 8009ca4:	bf00      	nop
 8009ca6:	3724      	adds	r7, #36	; 0x24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	58024400 	.word	0x58024400
 8009cb4:	03d09000 	.word	0x03d09000
 8009cb8:	46000000 	.word	0x46000000
 8009cbc:	4c742400 	.word	0x4c742400
 8009cc0:	4a742400 	.word	0x4a742400
 8009cc4:	4af42400 	.word	0x4af42400

08009cc8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009cd6:	4b53      	ldr	r3, [pc, #332]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cda:	f003 0303 	and.w	r3, r3, #3
 8009cde:	2b03      	cmp	r3, #3
 8009ce0:	d101      	bne.n	8009ce6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e099      	b.n	8009e1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009ce6:	4b4f      	ldr	r3, [pc, #316]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a4e      	ldr	r2, [pc, #312]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009cec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009cf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cf2:	f7f8 ff4d 	bl	8002b90 <HAL_GetTick>
 8009cf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009cf8:	e008      	b.n	8009d0c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009cfa:	f7f8 ff49 	bl	8002b90 <HAL_GetTick>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	2b02      	cmp	r3, #2
 8009d06:	d901      	bls.n	8009d0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d08:	2303      	movs	r3, #3
 8009d0a:	e086      	b.n	8009e1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d0c:	4b45      	ldr	r3, [pc, #276]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1f0      	bne.n	8009cfa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009d18:	4b42      	ldr	r3, [pc, #264]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	031b      	lsls	r3, r3, #12
 8009d26:	493f      	ldr	r1, [pc, #252]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	628b      	str	r3, [r1, #40]	; 0x28
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	3b01      	subs	r3, #1
 8009d32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	025b      	lsls	r3, r3, #9
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	431a      	orrs	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	3b01      	subs	r3, #1
 8009d48:	041b      	lsls	r3, r3, #16
 8009d4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d4e:	431a      	orrs	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	3b01      	subs	r3, #1
 8009d56:	061b      	lsls	r3, r3, #24
 8009d58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d5c:	4931      	ldr	r1, [pc, #196]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009d62:	4b30      	ldr	r3, [pc, #192]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	695b      	ldr	r3, [r3, #20]
 8009d6e:	492d      	ldr	r1, [pc, #180]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d70:	4313      	orrs	r3, r2
 8009d72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009d74:	4b2b      	ldr	r3, [pc, #172]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d78:	f023 0220 	bic.w	r2, r3, #32
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	699b      	ldr	r3, [r3, #24]
 8009d80:	4928      	ldr	r1, [pc, #160]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d82:	4313      	orrs	r3, r2
 8009d84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009d86:	4b27      	ldr	r3, [pc, #156]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8a:	4a26      	ldr	r2, [pc, #152]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d8c:	f023 0310 	bic.w	r3, r3, #16
 8009d90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009d92:	4b24      	ldr	r3, [pc, #144]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009d94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d96:	4b24      	ldr	r3, [pc, #144]	; (8009e28 <RCCEx_PLL2_Config+0x160>)
 8009d98:	4013      	ands	r3, r2
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	69d2      	ldr	r2, [r2, #28]
 8009d9e:	00d2      	lsls	r2, r2, #3
 8009da0:	4920      	ldr	r1, [pc, #128]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009da2:	4313      	orrs	r3, r2
 8009da4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009da6:	4b1f      	ldr	r3, [pc, #124]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009daa:	4a1e      	ldr	r2, [pc, #120]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009dac:	f043 0310 	orr.w	r3, r3, #16
 8009db0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d106      	bne.n	8009dc6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009db8:	4b1a      	ldr	r3, [pc, #104]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbc:	4a19      	ldr	r2, [pc, #100]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009dbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009dc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009dc4:	e00f      	b.n	8009de6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d106      	bne.n	8009dda <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009dcc:	4b15      	ldr	r3, [pc, #84]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd0:	4a14      	ldr	r2, [pc, #80]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009dd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009dd8:	e005      	b.n	8009de6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009dda:	4b12      	ldr	r3, [pc, #72]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dde:	4a11      	ldr	r2, [pc, #68]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009de0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009de4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009de6:	4b0f      	ldr	r3, [pc, #60]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a0e      	ldr	r2, [pc, #56]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009dec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009df0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009df2:	f7f8 fecd 	bl	8002b90 <HAL_GetTick>
 8009df6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009df8:	e008      	b.n	8009e0c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009dfa:	f7f8 fec9 	bl	8002b90 <HAL_GetTick>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d901      	bls.n	8009e0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e08:	2303      	movs	r3, #3
 8009e0a:	e006      	b.n	8009e1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e0c:	4b05      	ldr	r3, [pc, #20]	; (8009e24 <RCCEx_PLL2_Config+0x15c>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d0f0      	beq.n	8009dfa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	58024400 	.word	0x58024400
 8009e28:	ffff0007 	.word	0xffff0007

08009e2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e3a:	4b53      	ldr	r3, [pc, #332]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3e:	f003 0303 	and.w	r3, r3, #3
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	d101      	bne.n	8009e4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e099      	b.n	8009f7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009e4a:	4b4f      	ldr	r3, [pc, #316]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a4e      	ldr	r2, [pc, #312]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e56:	f7f8 fe9b 	bl	8002b90 <HAL_GetTick>
 8009e5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e5c:	e008      	b.n	8009e70 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009e5e:	f7f8 fe97 	bl	8002b90 <HAL_GetTick>
 8009e62:	4602      	mov	r2, r0
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	1ad3      	subs	r3, r2, r3
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d901      	bls.n	8009e70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	e086      	b.n	8009f7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e70:	4b45      	ldr	r3, [pc, #276]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1f0      	bne.n	8009e5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009e7c:	4b42      	ldr	r3, [pc, #264]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	051b      	lsls	r3, r3, #20
 8009e8a:	493f      	ldr	r1, [pc, #252]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	628b      	str	r3, [r1, #40]	; 0x28
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	3b01      	subs	r3, #1
 8009e96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	025b      	lsls	r3, r3, #9
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	431a      	orrs	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	041b      	lsls	r3, r3, #16
 8009eae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	061b      	lsls	r3, r3, #24
 8009ebc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ec0:	4931      	ldr	r1, [pc, #196]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009ec6:	4b30      	ldr	r3, [pc, #192]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	695b      	ldr	r3, [r3, #20]
 8009ed2:	492d      	ldr	r1, [pc, #180]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009ed8:	4b2b      	ldr	r3, [pc, #172]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009edc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	699b      	ldr	r3, [r3, #24]
 8009ee4:	4928      	ldr	r1, [pc, #160]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009eea:	4b27      	ldr	r3, [pc, #156]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eee:	4a26      	ldr	r2, [pc, #152]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009ef6:	4b24      	ldr	r3, [pc, #144]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009efa:	4b24      	ldr	r3, [pc, #144]	; (8009f8c <RCCEx_PLL3_Config+0x160>)
 8009efc:	4013      	ands	r3, r2
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	69d2      	ldr	r2, [r2, #28]
 8009f02:	00d2      	lsls	r2, r2, #3
 8009f04:	4920      	ldr	r1, [pc, #128]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f06:	4313      	orrs	r3, r2
 8009f08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009f0a:	4b1f      	ldr	r3, [pc, #124]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0e:	4a1e      	ldr	r2, [pc, #120]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d106      	bne.n	8009f2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009f1c:	4b1a      	ldr	r3, [pc, #104]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f20:	4a19      	ldr	r2, [pc, #100]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009f26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f28:	e00f      	b.n	8009f4a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d106      	bne.n	8009f3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009f30:	4b15      	ldr	r3, [pc, #84]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f34:	4a14      	ldr	r2, [pc, #80]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f3c:	e005      	b.n	8009f4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009f3e:	4b12      	ldr	r3, [pc, #72]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f42:	4a11      	ldr	r2, [pc, #68]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009f4a:	4b0f      	ldr	r3, [pc, #60]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a0e      	ldr	r2, [pc, #56]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f56:	f7f8 fe1b 	bl	8002b90 <HAL_GetTick>
 8009f5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009f5c:	e008      	b.n	8009f70 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009f5e:	f7f8 fe17 	bl	8002b90 <HAL_GetTick>
 8009f62:	4602      	mov	r2, r0
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	d901      	bls.n	8009f70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	e006      	b.n	8009f7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009f70:	4b05      	ldr	r3, [pc, #20]	; (8009f88 <RCCEx_PLL3_Config+0x15c>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d0f0      	beq.n	8009f5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	58024400 	.word	0x58024400
 8009f8c:	ffff0007 	.word	0xffff0007

08009f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e049      	b.n	800a036 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d106      	bne.n	8009fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7f8 fae0 	bl	800257c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2202      	movs	r2, #2
 8009fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	3304      	adds	r3, #4
 8009fcc:	4619      	mov	r1, r3
 8009fce:	4610      	mov	r0, r2
 8009fd0:	f000 ff90 	bl	800aef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3708      	adds	r7, #8
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b082      	sub	sp, #8
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d101      	bne.n	800a050 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e049      	b.n	800a0e4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a056:	b2db      	uxtb	r3, r3
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d106      	bne.n	800a06a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f841 	bl	800a0ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2202      	movs	r2, #2
 800a06e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	3304      	adds	r3, #4
 800a07a:	4619      	mov	r1, r3
 800a07c:	4610      	mov	r0, r2
 800a07e:	f000 ff39 	bl	800aef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d109      	bne.n	800a124 <HAL_TIM_PWM_Start+0x24>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a116:	b2db      	uxtb	r3, r3
 800a118:	2b01      	cmp	r3, #1
 800a11a:	bf14      	ite	ne
 800a11c:	2301      	movne	r3, #1
 800a11e:	2300      	moveq	r3, #0
 800a120:	b2db      	uxtb	r3, r3
 800a122:	e03c      	b.n	800a19e <HAL_TIM_PWM_Start+0x9e>
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	2b04      	cmp	r3, #4
 800a128:	d109      	bne.n	800a13e <HAL_TIM_PWM_Start+0x3e>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a130:	b2db      	uxtb	r3, r3
 800a132:	2b01      	cmp	r3, #1
 800a134:	bf14      	ite	ne
 800a136:	2301      	movne	r3, #1
 800a138:	2300      	moveq	r3, #0
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	e02f      	b.n	800a19e <HAL_TIM_PWM_Start+0x9e>
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	2b08      	cmp	r3, #8
 800a142:	d109      	bne.n	800a158 <HAL_TIM_PWM_Start+0x58>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	bf14      	ite	ne
 800a150:	2301      	movne	r3, #1
 800a152:	2300      	moveq	r3, #0
 800a154:	b2db      	uxtb	r3, r3
 800a156:	e022      	b.n	800a19e <HAL_TIM_PWM_Start+0x9e>
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	2b0c      	cmp	r3, #12
 800a15c:	d109      	bne.n	800a172 <HAL_TIM_PWM_Start+0x72>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b01      	cmp	r3, #1
 800a168:	bf14      	ite	ne
 800a16a:	2301      	movne	r3, #1
 800a16c:	2300      	moveq	r3, #0
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	e015      	b.n	800a19e <HAL_TIM_PWM_Start+0x9e>
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2b10      	cmp	r3, #16
 800a176:	d109      	bne.n	800a18c <HAL_TIM_PWM_Start+0x8c>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	2b01      	cmp	r3, #1
 800a182:	bf14      	ite	ne
 800a184:	2301      	movne	r3, #1
 800a186:	2300      	moveq	r3, #0
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	e008      	b.n	800a19e <HAL_TIM_PWM_Start+0x9e>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a192:	b2db      	uxtb	r3, r3
 800a194:	2b01      	cmp	r3, #1
 800a196:	bf14      	ite	ne
 800a198:	2301      	movne	r3, #1
 800a19a:	2300      	moveq	r3, #0
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d001      	beq.n	800a1a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e0a1      	b.n	800a2ea <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d104      	bne.n	800a1b6 <HAL_TIM_PWM_Start+0xb6>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1b4:	e023      	b.n	800a1fe <HAL_TIM_PWM_Start+0xfe>
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2b04      	cmp	r3, #4
 800a1ba:	d104      	bne.n	800a1c6 <HAL_TIM_PWM_Start+0xc6>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2202      	movs	r2, #2
 800a1c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1c4:	e01b      	b.n	800a1fe <HAL_TIM_PWM_Start+0xfe>
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	2b08      	cmp	r3, #8
 800a1ca:	d104      	bne.n	800a1d6 <HAL_TIM_PWM_Start+0xd6>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2202      	movs	r2, #2
 800a1d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1d4:	e013      	b.n	800a1fe <HAL_TIM_PWM_Start+0xfe>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b0c      	cmp	r3, #12
 800a1da:	d104      	bne.n	800a1e6 <HAL_TIM_PWM_Start+0xe6>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2202      	movs	r2, #2
 800a1e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1e4:	e00b      	b.n	800a1fe <HAL_TIM_PWM_Start+0xfe>
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	2b10      	cmp	r3, #16
 800a1ea:	d104      	bne.n	800a1f6 <HAL_TIM_PWM_Start+0xf6>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1f4:	e003      	b.n	800a1fe <HAL_TIM_PWM_Start+0xfe>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2202      	movs	r2, #2
 800a1fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2201      	movs	r2, #1
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	4618      	mov	r0, r3
 800a208:	f001 fa82 	bl	800b710 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a38      	ldr	r2, [pc, #224]	; (800a2f4 <HAL_TIM_PWM_Start+0x1f4>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d013      	beq.n	800a23e <HAL_TIM_PWM_Start+0x13e>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a37      	ldr	r2, [pc, #220]	; (800a2f8 <HAL_TIM_PWM_Start+0x1f8>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d00e      	beq.n	800a23e <HAL_TIM_PWM_Start+0x13e>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a35      	ldr	r2, [pc, #212]	; (800a2fc <HAL_TIM_PWM_Start+0x1fc>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d009      	beq.n	800a23e <HAL_TIM_PWM_Start+0x13e>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a34      	ldr	r2, [pc, #208]	; (800a300 <HAL_TIM_PWM_Start+0x200>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d004      	beq.n	800a23e <HAL_TIM_PWM_Start+0x13e>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a32      	ldr	r2, [pc, #200]	; (800a304 <HAL_TIM_PWM_Start+0x204>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d101      	bne.n	800a242 <HAL_TIM_PWM_Start+0x142>
 800a23e:	2301      	movs	r3, #1
 800a240:	e000      	b.n	800a244 <HAL_TIM_PWM_Start+0x144>
 800a242:	2300      	movs	r3, #0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d007      	beq.n	800a258 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a256:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a25      	ldr	r2, [pc, #148]	; (800a2f4 <HAL_TIM_PWM_Start+0x1f4>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d022      	beq.n	800a2a8 <HAL_TIM_PWM_Start+0x1a8>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a26a:	d01d      	beq.n	800a2a8 <HAL_TIM_PWM_Start+0x1a8>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a25      	ldr	r2, [pc, #148]	; (800a308 <HAL_TIM_PWM_Start+0x208>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d018      	beq.n	800a2a8 <HAL_TIM_PWM_Start+0x1a8>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a24      	ldr	r2, [pc, #144]	; (800a30c <HAL_TIM_PWM_Start+0x20c>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d013      	beq.n	800a2a8 <HAL_TIM_PWM_Start+0x1a8>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a22      	ldr	r2, [pc, #136]	; (800a310 <HAL_TIM_PWM_Start+0x210>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d00e      	beq.n	800a2a8 <HAL_TIM_PWM_Start+0x1a8>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a1a      	ldr	r2, [pc, #104]	; (800a2f8 <HAL_TIM_PWM_Start+0x1f8>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d009      	beq.n	800a2a8 <HAL_TIM_PWM_Start+0x1a8>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a1e      	ldr	r2, [pc, #120]	; (800a314 <HAL_TIM_PWM_Start+0x214>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d004      	beq.n	800a2a8 <HAL_TIM_PWM_Start+0x1a8>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a16      	ldr	r2, [pc, #88]	; (800a2fc <HAL_TIM_PWM_Start+0x1fc>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d115      	bne.n	800a2d4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	689a      	ldr	r2, [r3, #8]
 800a2ae:	4b1a      	ldr	r3, [pc, #104]	; (800a318 <HAL_TIM_PWM_Start+0x218>)
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2b06      	cmp	r3, #6
 800a2b8:	d015      	beq.n	800a2e6 <HAL_TIM_PWM_Start+0x1e6>
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2c0:	d011      	beq.n	800a2e6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f042 0201 	orr.w	r2, r2, #1
 800a2d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2d2:	e008      	b.n	800a2e6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f042 0201 	orr.w	r2, r2, #1
 800a2e2:	601a      	str	r2, [r3, #0]
 800a2e4:	e000      	b.n	800a2e8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	40010000 	.word	0x40010000
 800a2f8:	40010400 	.word	0x40010400
 800a2fc:	40014000 	.word	0x40014000
 800a300:	40014400 	.word	0x40014400
 800a304:	40014800 	.word	0x40014800
 800a308:	40000400 	.word	0x40000400
 800a30c:	40000800 	.word	0x40000800
 800a310:	40000c00 	.word	0x40000c00
 800a314:	40001800 	.word	0x40001800
 800a318:	00010007 	.word	0x00010007

0800a31c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a326:	2300      	movs	r3, #0
 800a328:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d109      	bne.n	800a344 <HAL_TIM_PWM_Start_IT+0x28>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a336:	b2db      	uxtb	r3, r3
 800a338:	2b01      	cmp	r3, #1
 800a33a:	bf14      	ite	ne
 800a33c:	2301      	movne	r3, #1
 800a33e:	2300      	moveq	r3, #0
 800a340:	b2db      	uxtb	r3, r3
 800a342:	e03c      	b.n	800a3be <HAL_TIM_PWM_Start_IT+0xa2>
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	2b04      	cmp	r3, #4
 800a348:	d109      	bne.n	800a35e <HAL_TIM_PWM_Start_IT+0x42>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a350:	b2db      	uxtb	r3, r3
 800a352:	2b01      	cmp	r3, #1
 800a354:	bf14      	ite	ne
 800a356:	2301      	movne	r3, #1
 800a358:	2300      	moveq	r3, #0
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	e02f      	b.n	800a3be <HAL_TIM_PWM_Start_IT+0xa2>
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	2b08      	cmp	r3, #8
 800a362:	d109      	bne.n	800a378 <HAL_TIM_PWM_Start_IT+0x5c>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	bf14      	ite	ne
 800a370:	2301      	movne	r3, #1
 800a372:	2300      	moveq	r3, #0
 800a374:	b2db      	uxtb	r3, r3
 800a376:	e022      	b.n	800a3be <HAL_TIM_PWM_Start_IT+0xa2>
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	2b0c      	cmp	r3, #12
 800a37c:	d109      	bne.n	800a392 <HAL_TIM_PWM_Start_IT+0x76>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a384:	b2db      	uxtb	r3, r3
 800a386:	2b01      	cmp	r3, #1
 800a388:	bf14      	ite	ne
 800a38a:	2301      	movne	r3, #1
 800a38c:	2300      	moveq	r3, #0
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	e015      	b.n	800a3be <HAL_TIM_PWM_Start_IT+0xa2>
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	2b10      	cmp	r3, #16
 800a396:	d109      	bne.n	800a3ac <HAL_TIM_PWM_Start_IT+0x90>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	bf14      	ite	ne
 800a3a4:	2301      	movne	r3, #1
 800a3a6:	2300      	moveq	r3, #0
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	e008      	b.n	800a3be <HAL_TIM_PWM_Start_IT+0xa2>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	bf14      	ite	ne
 800a3b8:	2301      	movne	r3, #1
 800a3ba:	2300      	moveq	r3, #0
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e0ec      	b.n	800a5a0 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d104      	bne.n	800a3d6 <HAL_TIM_PWM_Start_IT+0xba>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3d4:	e023      	b.n	800a41e <HAL_TIM_PWM_Start_IT+0x102>
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	2b04      	cmp	r3, #4
 800a3da:	d104      	bne.n	800a3e6 <HAL_TIM_PWM_Start_IT+0xca>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2202      	movs	r2, #2
 800a3e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3e4:	e01b      	b.n	800a41e <HAL_TIM_PWM_Start_IT+0x102>
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	2b08      	cmp	r3, #8
 800a3ea:	d104      	bne.n	800a3f6 <HAL_TIM_PWM_Start_IT+0xda>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2202      	movs	r2, #2
 800a3f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3f4:	e013      	b.n	800a41e <HAL_TIM_PWM_Start_IT+0x102>
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	2b0c      	cmp	r3, #12
 800a3fa:	d104      	bne.n	800a406 <HAL_TIM_PWM_Start_IT+0xea>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2202      	movs	r2, #2
 800a400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a404:	e00b      	b.n	800a41e <HAL_TIM_PWM_Start_IT+0x102>
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	2b10      	cmp	r3, #16
 800a40a:	d104      	bne.n	800a416 <HAL_TIM_PWM_Start_IT+0xfa>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2202      	movs	r2, #2
 800a410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a414:	e003      	b.n	800a41e <HAL_TIM_PWM_Start_IT+0x102>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2202      	movs	r2, #2
 800a41a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	2b0c      	cmp	r3, #12
 800a422:	d841      	bhi.n	800a4a8 <HAL_TIM_PWM_Start_IT+0x18c>
 800a424:	a201      	add	r2, pc, #4	; (adr r2, 800a42c <HAL_TIM_PWM_Start_IT+0x110>)
 800a426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42a:	bf00      	nop
 800a42c:	0800a461 	.word	0x0800a461
 800a430:	0800a4a9 	.word	0x0800a4a9
 800a434:	0800a4a9 	.word	0x0800a4a9
 800a438:	0800a4a9 	.word	0x0800a4a9
 800a43c:	0800a473 	.word	0x0800a473
 800a440:	0800a4a9 	.word	0x0800a4a9
 800a444:	0800a4a9 	.word	0x0800a4a9
 800a448:	0800a4a9 	.word	0x0800a4a9
 800a44c:	0800a485 	.word	0x0800a485
 800a450:	0800a4a9 	.word	0x0800a4a9
 800a454:	0800a4a9 	.word	0x0800a4a9
 800a458:	0800a4a9 	.word	0x0800a4a9
 800a45c:	0800a497 	.word	0x0800a497
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68da      	ldr	r2, [r3, #12]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f042 0202 	orr.w	r2, r2, #2
 800a46e:	60da      	str	r2, [r3, #12]
      break;
 800a470:	e01d      	b.n	800a4ae <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68da      	ldr	r2, [r3, #12]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f042 0204 	orr.w	r2, r2, #4
 800a480:	60da      	str	r2, [r3, #12]
      break;
 800a482:	e014      	b.n	800a4ae <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	68da      	ldr	r2, [r3, #12]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f042 0208 	orr.w	r2, r2, #8
 800a492:	60da      	str	r2, [r3, #12]
      break;
 800a494:	e00b      	b.n	800a4ae <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68da      	ldr	r2, [r3, #12]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f042 0210 	orr.w	r2, r2, #16
 800a4a4:	60da      	str	r2, [r3, #12]
      break;
 800a4a6:	e002      	b.n	800a4ae <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	73fb      	strb	r3, [r7, #15]
      break;
 800a4ac:	bf00      	nop
  }

  if (status == HAL_OK)
 800a4ae:	7bfb      	ldrb	r3, [r7, #15]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d174      	bne.n	800a59e <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	6839      	ldr	r1, [r7, #0]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f001 f927 	bl	800b710 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a38      	ldr	r2, [pc, #224]	; (800a5a8 <HAL_TIM_PWM_Start_IT+0x28c>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d013      	beq.n	800a4f4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a36      	ldr	r2, [pc, #216]	; (800a5ac <HAL_TIM_PWM_Start_IT+0x290>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d00e      	beq.n	800a4f4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a35      	ldr	r2, [pc, #212]	; (800a5b0 <HAL_TIM_PWM_Start_IT+0x294>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d009      	beq.n	800a4f4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a33      	ldr	r2, [pc, #204]	; (800a5b4 <HAL_TIM_PWM_Start_IT+0x298>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d004      	beq.n	800a4f4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a32      	ldr	r2, [pc, #200]	; (800a5b8 <HAL_TIM_PWM_Start_IT+0x29c>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d101      	bne.n	800a4f8 <HAL_TIM_PWM_Start_IT+0x1dc>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e000      	b.n	800a4fa <HAL_TIM_PWM_Start_IT+0x1de>
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d007      	beq.n	800a50e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a50c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a25      	ldr	r2, [pc, #148]	; (800a5a8 <HAL_TIM_PWM_Start_IT+0x28c>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d022      	beq.n	800a55e <HAL_TIM_PWM_Start_IT+0x242>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a520:	d01d      	beq.n	800a55e <HAL_TIM_PWM_Start_IT+0x242>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a25      	ldr	r2, [pc, #148]	; (800a5bc <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d018      	beq.n	800a55e <HAL_TIM_PWM_Start_IT+0x242>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a23      	ldr	r2, [pc, #140]	; (800a5c0 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d013      	beq.n	800a55e <HAL_TIM_PWM_Start_IT+0x242>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a22      	ldr	r2, [pc, #136]	; (800a5c4 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d00e      	beq.n	800a55e <HAL_TIM_PWM_Start_IT+0x242>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a19      	ldr	r2, [pc, #100]	; (800a5ac <HAL_TIM_PWM_Start_IT+0x290>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d009      	beq.n	800a55e <HAL_TIM_PWM_Start_IT+0x242>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a1e      	ldr	r2, [pc, #120]	; (800a5c8 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d004      	beq.n	800a55e <HAL_TIM_PWM_Start_IT+0x242>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a15      	ldr	r2, [pc, #84]	; (800a5b0 <HAL_TIM_PWM_Start_IT+0x294>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d115      	bne.n	800a58a <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	689a      	ldr	r2, [r3, #8]
 800a564:	4b19      	ldr	r3, [pc, #100]	; (800a5cc <HAL_TIM_PWM_Start_IT+0x2b0>)
 800a566:	4013      	ands	r3, r2
 800a568:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	2b06      	cmp	r3, #6
 800a56e:	d015      	beq.n	800a59c <HAL_TIM_PWM_Start_IT+0x280>
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a576:	d011      	beq.n	800a59c <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f042 0201 	orr.w	r2, r2, #1
 800a586:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a588:	e008      	b.n	800a59c <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f042 0201 	orr.w	r2, r2, #1
 800a598:	601a      	str	r2, [r3, #0]
 800a59a:	e000      	b.n	800a59e <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a59c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3710      	adds	r7, #16
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	40010000 	.word	0x40010000
 800a5ac:	40010400 	.word	0x40010400
 800a5b0:	40014000 	.word	0x40014000
 800a5b4:	40014400 	.word	0x40014400
 800a5b8:	40014800 	.word	0x40014800
 800a5bc:	40000400 	.word	0x40000400
 800a5c0:	40000800 	.word	0x40000800
 800a5c4:	40000c00 	.word	0x40000c00
 800a5c8:	40001800 	.word	0x40001800
 800a5cc:	00010007 	.word	0x00010007

0800a5d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d101      	bne.n	800a5e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e08f      	b.n	800a704 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d106      	bne.n	800a5fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7f8 f809 	bl	8002610 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2202      	movs	r2, #2
 800a602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	6899      	ldr	r1, [r3, #8]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	4b3e      	ldr	r3, [pc, #248]	; (800a70c <HAL_TIM_Encoder_Init+0x13c>)
 800a612:	400b      	ands	r3, r1
 800a614:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	3304      	adds	r3, #4
 800a61e:	4619      	mov	r1, r3
 800a620:	4610      	mov	r0, r2
 800a622:	f000 fc67 	bl	800aef4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	699b      	ldr	r3, [r3, #24]
 800a634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	6a1b      	ldr	r3, [r3, #32]
 800a63c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	4313      	orrs	r3, r2
 800a646:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a648:	693a      	ldr	r2, [r7, #16]
 800a64a:	4b31      	ldr	r3, [pc, #196]	; (800a710 <HAL_TIM_Encoder_Init+0x140>)
 800a64c:	4013      	ands	r3, r2
 800a64e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	689a      	ldr	r2, [r3, #8]
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	699b      	ldr	r3, [r3, #24]
 800a658:	021b      	lsls	r3, r3, #8
 800a65a:	4313      	orrs	r3, r2
 800a65c:	693a      	ldr	r2, [r7, #16]
 800a65e:	4313      	orrs	r3, r2
 800a660:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	4b2b      	ldr	r3, [pc, #172]	; (800a714 <HAL_TIM_Encoder_Init+0x144>)
 800a666:	4013      	ands	r3, r2
 800a668:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	4b2a      	ldr	r3, [pc, #168]	; (800a718 <HAL_TIM_Encoder_Init+0x148>)
 800a66e:	4013      	ands	r3, r2
 800a670:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	68da      	ldr	r2, [r3, #12]
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	69db      	ldr	r3, [r3, #28]
 800a67a:	021b      	lsls	r3, r3, #8
 800a67c:	4313      	orrs	r3, r2
 800a67e:	693a      	ldr	r2, [r7, #16]
 800a680:	4313      	orrs	r3, r2
 800a682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	011a      	lsls	r2, r3, #4
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	031b      	lsls	r3, r3, #12
 800a690:	4313      	orrs	r3, r2
 800a692:	693a      	ldr	r2, [r7, #16]
 800a694:	4313      	orrs	r3, r2
 800a696:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a69e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a6a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	695b      	ldr	r3, [r3, #20]
 800a6b0:	011b      	lsls	r3, r3, #4
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	68fa      	ldr	r2, [r7, #12]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	693a      	ldr	r2, [r7, #16]
 800a6c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3718      	adds	r7, #24
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	fffebff8 	.word	0xfffebff8
 800a710:	fffffcfc 	.word	0xfffffcfc
 800a714:	fffff3f3 	.word	0xfffff3f3
 800a718:	ffff0f0f 	.word	0xffff0f0f

0800a71c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a72c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a734:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a73c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a744:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d110      	bne.n	800a76e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a74c:	7bfb      	ldrb	r3, [r7, #15]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d102      	bne.n	800a758 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a752:	7b7b      	ldrb	r3, [r7, #13]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d001      	beq.n	800a75c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	e069      	b.n	800a830 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2202      	movs	r2, #2
 800a760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2202      	movs	r2, #2
 800a768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a76c:	e031      	b.n	800a7d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	2b04      	cmp	r3, #4
 800a772:	d110      	bne.n	800a796 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a774:	7bbb      	ldrb	r3, [r7, #14]
 800a776:	2b01      	cmp	r3, #1
 800a778:	d102      	bne.n	800a780 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a77a:	7b3b      	ldrb	r3, [r7, #12]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d001      	beq.n	800a784 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	e055      	b.n	800a830 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2202      	movs	r2, #2
 800a788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2202      	movs	r2, #2
 800a790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a794:	e01d      	b.n	800a7d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a796:	7bfb      	ldrb	r3, [r7, #15]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d108      	bne.n	800a7ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a79c:	7bbb      	ldrb	r3, [r7, #14]
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d105      	bne.n	800a7ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a7a2:	7b7b      	ldrb	r3, [r7, #13]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d102      	bne.n	800a7ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a7a8:	7b3b      	ldrb	r3, [r7, #12]
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d001      	beq.n	800a7b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e03e      	b.n	800a830 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2202      	movs	r2, #2
 800a7b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2202      	movs	r2, #2
 800a7be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2202      	movs	r2, #2
 800a7c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2202      	movs	r2, #2
 800a7ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d003      	beq.n	800a7e0 <HAL_TIM_Encoder_Start+0xc4>
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	2b04      	cmp	r3, #4
 800a7dc:	d008      	beq.n	800a7f0 <HAL_TIM_Encoder_Start+0xd4>
 800a7de:	e00f      	b.n	800a800 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f000 ff91 	bl	800b710 <TIM_CCxChannelCmd>
      break;
 800a7ee:	e016      	b.n	800a81e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	2104      	movs	r1, #4
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 ff89 	bl	800b710 <TIM_CCxChannelCmd>
      break;
 800a7fe:	e00e      	b.n	800a81e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2201      	movs	r2, #1
 800a806:	2100      	movs	r1, #0
 800a808:	4618      	mov	r0, r3
 800a80a:	f000 ff81 	bl	800b710 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2201      	movs	r2, #1
 800a814:	2104      	movs	r1, #4
 800a816:	4618      	mov	r0, r3
 800a818:	f000 ff7a 	bl	800b710 <TIM_CCxChannelCmd>
      break;
 800a81c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f042 0201 	orr.w	r2, r2, #1
 800a82c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	f003 0302 	and.w	r3, r3, #2
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d122      	bne.n	800a894 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	f003 0302 	and.w	r3, r3, #2
 800a858:	2b02      	cmp	r3, #2
 800a85a:	d11b      	bne.n	800a894 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f06f 0202 	mvn.w	r2, #2
 800a864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2201      	movs	r2, #1
 800a86a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	f003 0303 	and.w	r3, r3, #3
 800a876:	2b00      	cmp	r3, #0
 800a878:	d003      	beq.n	800a882 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fb1c 	bl	800aeb8 <HAL_TIM_IC_CaptureCallback>
 800a880:	e005      	b.n	800a88e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fb0e 	bl	800aea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fb1f 	bl	800aecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	f003 0304 	and.w	r3, r3, #4
 800a89e:	2b04      	cmp	r3, #4
 800a8a0:	d122      	bne.n	800a8e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	f003 0304 	and.w	r3, r3, #4
 800a8ac:	2b04      	cmp	r3, #4
 800a8ae:	d11b      	bne.n	800a8e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f06f 0204 	mvn.w	r2, #4
 800a8b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2202      	movs	r2, #2
 800a8be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	699b      	ldr	r3, [r3, #24]
 800a8c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d003      	beq.n	800a8d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 faf2 	bl	800aeb8 <HAL_TIM_IC_CaptureCallback>
 800a8d4:	e005      	b.n	800a8e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fae4 	bl	800aea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 faf5 	bl	800aecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	f003 0308 	and.w	r3, r3, #8
 800a8f2:	2b08      	cmp	r3, #8
 800a8f4:	d122      	bne.n	800a93c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	f003 0308 	and.w	r3, r3, #8
 800a900:	2b08      	cmp	r3, #8
 800a902:	d11b      	bne.n	800a93c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f06f 0208 	mvn.w	r2, #8
 800a90c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2204      	movs	r2, #4
 800a912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	69db      	ldr	r3, [r3, #28]
 800a91a:	f003 0303 	and.w	r3, r3, #3
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fac8 	bl	800aeb8 <HAL_TIM_IC_CaptureCallback>
 800a928:	e005      	b.n	800a936 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 faba 	bl	800aea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 facb 	bl	800aecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	691b      	ldr	r3, [r3, #16]
 800a942:	f003 0310 	and.w	r3, r3, #16
 800a946:	2b10      	cmp	r3, #16
 800a948:	d122      	bne.n	800a990 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	f003 0310 	and.w	r3, r3, #16
 800a954:	2b10      	cmp	r3, #16
 800a956:	d11b      	bne.n	800a990 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f06f 0210 	mvn.w	r2, #16
 800a960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2208      	movs	r2, #8
 800a966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	69db      	ldr	r3, [r3, #28]
 800a96e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a972:	2b00      	cmp	r3, #0
 800a974:	d003      	beq.n	800a97e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fa9e 	bl	800aeb8 <HAL_TIM_IC_CaptureCallback>
 800a97c:	e005      	b.n	800a98a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 fa90 	bl	800aea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 faa1 	bl	800aecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	f003 0301 	and.w	r3, r3, #1
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d10e      	bne.n	800a9bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	f003 0301 	and.w	r3, r3, #1
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d107      	bne.n	800a9bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f06f 0201 	mvn.w	r2, #1
 800a9b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 fa6a 	bl	800ae90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9c6:	2b80      	cmp	r3, #128	; 0x80
 800a9c8:	d10e      	bne.n	800a9e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9d4:	2b80      	cmp	r3, #128	; 0x80
 800a9d6:	d107      	bne.n	800a9e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a9e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f001 f896 	bl	800bb14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9f6:	d10e      	bne.n	800aa16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	68db      	ldr	r3, [r3, #12]
 800a9fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa02:	2b80      	cmp	r3, #128	; 0x80
 800aa04:	d107      	bne.n	800aa16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f001 f889 	bl	800bb28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa20:	2b40      	cmp	r3, #64	; 0x40
 800aa22:	d10e      	bne.n	800aa42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa2e:	2b40      	cmp	r3, #64	; 0x40
 800aa30:	d107      	bne.n	800aa42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fa4f 	bl	800aee0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	f003 0320 	and.w	r3, r3, #32
 800aa4c:	2b20      	cmp	r3, #32
 800aa4e:	d10e      	bne.n	800aa6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	f003 0320 	and.w	r3, r3, #32
 800aa5a:	2b20      	cmp	r3, #32
 800aa5c:	d107      	bne.n	800aa6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f06f 0220 	mvn.w	r2, #32
 800aa66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f001 f849 	bl	800bb00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa6e:	bf00      	nop
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
	...

0800aa78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa84:	2300      	movs	r3, #0
 800aa86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d101      	bne.n	800aa96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aa92:	2302      	movs	r3, #2
 800aa94:	e0ff      	b.n	800ac96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2201      	movs	r2, #1
 800aa9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2b14      	cmp	r3, #20
 800aaa2:	f200 80f0 	bhi.w	800ac86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aaa6:	a201      	add	r2, pc, #4	; (adr r2, 800aaac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aaa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaac:	0800ab01 	.word	0x0800ab01
 800aab0:	0800ac87 	.word	0x0800ac87
 800aab4:	0800ac87 	.word	0x0800ac87
 800aab8:	0800ac87 	.word	0x0800ac87
 800aabc:	0800ab41 	.word	0x0800ab41
 800aac0:	0800ac87 	.word	0x0800ac87
 800aac4:	0800ac87 	.word	0x0800ac87
 800aac8:	0800ac87 	.word	0x0800ac87
 800aacc:	0800ab83 	.word	0x0800ab83
 800aad0:	0800ac87 	.word	0x0800ac87
 800aad4:	0800ac87 	.word	0x0800ac87
 800aad8:	0800ac87 	.word	0x0800ac87
 800aadc:	0800abc3 	.word	0x0800abc3
 800aae0:	0800ac87 	.word	0x0800ac87
 800aae4:	0800ac87 	.word	0x0800ac87
 800aae8:	0800ac87 	.word	0x0800ac87
 800aaec:	0800ac05 	.word	0x0800ac05
 800aaf0:	0800ac87 	.word	0x0800ac87
 800aaf4:	0800ac87 	.word	0x0800ac87
 800aaf8:	0800ac87 	.word	0x0800ac87
 800aafc:	0800ac45 	.word	0x0800ac45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68b9      	ldr	r1, [r7, #8]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 fa8e 	bl	800b028 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	699a      	ldr	r2, [r3, #24]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f042 0208 	orr.w	r2, r2, #8
 800ab1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	699a      	ldr	r2, [r3, #24]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f022 0204 	bic.w	r2, r2, #4
 800ab2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6999      	ldr	r1, [r3, #24]
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	691a      	ldr	r2, [r3, #16]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	430a      	orrs	r2, r1
 800ab3c:	619a      	str	r2, [r3, #24]
      break;
 800ab3e:	e0a5      	b.n	800ac8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68b9      	ldr	r1, [r7, #8]
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 fafe 	bl	800b148 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	699a      	ldr	r2, [r3, #24]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	699a      	ldr	r2, [r3, #24]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	6999      	ldr	r1, [r3, #24]
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	021a      	lsls	r2, r3, #8
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	430a      	orrs	r2, r1
 800ab7e:	619a      	str	r2, [r3, #24]
      break;
 800ab80:	e084      	b.n	800ac8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68b9      	ldr	r1, [r7, #8]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f000 fb67 	bl	800b25c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	69da      	ldr	r2, [r3, #28]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f042 0208 	orr.w	r2, r2, #8
 800ab9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	69da      	ldr	r2, [r3, #28]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f022 0204 	bic.w	r2, r2, #4
 800abac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	69d9      	ldr	r1, [r3, #28]
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	691a      	ldr	r2, [r3, #16]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	430a      	orrs	r2, r1
 800abbe:	61da      	str	r2, [r3, #28]
      break;
 800abc0:	e064      	b.n	800ac8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68b9      	ldr	r1, [r7, #8]
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 fbcf 	bl	800b36c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	69da      	ldr	r2, [r3, #28]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	69da      	ldr	r2, [r3, #28]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	69d9      	ldr	r1, [r3, #28]
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	691b      	ldr	r3, [r3, #16]
 800abf8:	021a      	lsls	r2, r3, #8
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	430a      	orrs	r2, r1
 800ac00:	61da      	str	r2, [r3, #28]
      break;
 800ac02:	e043      	b.n	800ac8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68b9      	ldr	r1, [r7, #8]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f000 fc18 	bl	800b440 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f042 0208 	orr.w	r2, r2, #8
 800ac1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f022 0204 	bic.w	r2, r2, #4
 800ac2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	691a      	ldr	r2, [r3, #16]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	430a      	orrs	r2, r1
 800ac40:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ac42:	e023      	b.n	800ac8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	68b9      	ldr	r1, [r7, #8]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 fc5c 	bl	800b508 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	021a      	lsls	r2, r3, #8
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	430a      	orrs	r2, r1
 800ac82:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ac84:	e002      	b.n	800ac8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	75fb      	strb	r3, [r7, #23]
      break;
 800ac8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3718      	adds	r7, #24
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop

0800aca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acaa:	2300      	movs	r3, #0
 800acac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d101      	bne.n	800acbc <HAL_TIM_ConfigClockSource+0x1c>
 800acb8:	2302      	movs	r3, #2
 800acba:	e0dc      	b.n	800ae76 <HAL_TIM_ConfigClockSource+0x1d6>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2201      	movs	r2, #1
 800acc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2202      	movs	r2, #2
 800acc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800acd4:	68ba      	ldr	r2, [r7, #8]
 800acd6:	4b6a      	ldr	r3, [pc, #424]	; (800ae80 <HAL_TIM_ConfigClockSource+0x1e0>)
 800acd8:	4013      	ands	r3, r2
 800acda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ace2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	68ba      	ldr	r2, [r7, #8]
 800acea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a64      	ldr	r2, [pc, #400]	; (800ae84 <HAL_TIM_ConfigClockSource+0x1e4>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	f000 80a9 	beq.w	800ae4a <HAL_TIM_ConfigClockSource+0x1aa>
 800acf8:	4a62      	ldr	r2, [pc, #392]	; (800ae84 <HAL_TIM_ConfigClockSource+0x1e4>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	f200 80ae 	bhi.w	800ae5c <HAL_TIM_ConfigClockSource+0x1bc>
 800ad00:	4a61      	ldr	r2, [pc, #388]	; (800ae88 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	f000 80a1 	beq.w	800ae4a <HAL_TIM_ConfigClockSource+0x1aa>
 800ad08:	4a5f      	ldr	r2, [pc, #380]	; (800ae88 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	f200 80a6 	bhi.w	800ae5c <HAL_TIM_ConfigClockSource+0x1bc>
 800ad10:	4a5e      	ldr	r2, [pc, #376]	; (800ae8c <HAL_TIM_ConfigClockSource+0x1ec>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	f000 8099 	beq.w	800ae4a <HAL_TIM_ConfigClockSource+0x1aa>
 800ad18:	4a5c      	ldr	r2, [pc, #368]	; (800ae8c <HAL_TIM_ConfigClockSource+0x1ec>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	f200 809e 	bhi.w	800ae5c <HAL_TIM_ConfigClockSource+0x1bc>
 800ad20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ad24:	f000 8091 	beq.w	800ae4a <HAL_TIM_ConfigClockSource+0x1aa>
 800ad28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ad2c:	f200 8096 	bhi.w	800ae5c <HAL_TIM_ConfigClockSource+0x1bc>
 800ad30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad34:	f000 8089 	beq.w	800ae4a <HAL_TIM_ConfigClockSource+0x1aa>
 800ad38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad3c:	f200 808e 	bhi.w	800ae5c <HAL_TIM_ConfigClockSource+0x1bc>
 800ad40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad44:	d03e      	beq.n	800adc4 <HAL_TIM_ConfigClockSource+0x124>
 800ad46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad4a:	f200 8087 	bhi.w	800ae5c <HAL_TIM_ConfigClockSource+0x1bc>
 800ad4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad52:	f000 8086 	beq.w	800ae62 <HAL_TIM_ConfigClockSource+0x1c2>
 800ad56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad5a:	d87f      	bhi.n	800ae5c <HAL_TIM_ConfigClockSource+0x1bc>
 800ad5c:	2b70      	cmp	r3, #112	; 0x70
 800ad5e:	d01a      	beq.n	800ad96 <HAL_TIM_ConfigClockSource+0xf6>
 800ad60:	2b70      	cmp	r3, #112	; 0x70
 800ad62:	d87b      	bhi.n	800ae5c <HAL_TIM_ConfigClockSource+0x1bc>
 800ad64:	2b60      	cmp	r3, #96	; 0x60
 800ad66:	d050      	beq.n	800ae0a <HAL_TIM_ConfigClockSource+0x16a>
 800ad68:	2b60      	cmp	r3, #96	; 0x60
 800ad6a:	d877      	bhi.n	800ae5c <HAL_TIM_ConfigClockSource+0x1bc>
 800ad6c:	2b50      	cmp	r3, #80	; 0x50
 800ad6e:	d03c      	beq.n	800adea <HAL_TIM_ConfigClockSource+0x14a>
 800ad70:	2b50      	cmp	r3, #80	; 0x50
 800ad72:	d873      	bhi.n	800ae5c <HAL_TIM_ConfigClockSource+0x1bc>
 800ad74:	2b40      	cmp	r3, #64	; 0x40
 800ad76:	d058      	beq.n	800ae2a <HAL_TIM_ConfigClockSource+0x18a>
 800ad78:	2b40      	cmp	r3, #64	; 0x40
 800ad7a:	d86f      	bhi.n	800ae5c <HAL_TIM_ConfigClockSource+0x1bc>
 800ad7c:	2b30      	cmp	r3, #48	; 0x30
 800ad7e:	d064      	beq.n	800ae4a <HAL_TIM_ConfigClockSource+0x1aa>
 800ad80:	2b30      	cmp	r3, #48	; 0x30
 800ad82:	d86b      	bhi.n	800ae5c <HAL_TIM_ConfigClockSource+0x1bc>
 800ad84:	2b20      	cmp	r3, #32
 800ad86:	d060      	beq.n	800ae4a <HAL_TIM_ConfigClockSource+0x1aa>
 800ad88:	2b20      	cmp	r3, #32
 800ad8a:	d867      	bhi.n	800ae5c <HAL_TIM_ConfigClockSource+0x1bc>
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d05c      	beq.n	800ae4a <HAL_TIM_ConfigClockSource+0x1aa>
 800ad90:	2b10      	cmp	r3, #16
 800ad92:	d05a      	beq.n	800ae4a <HAL_TIM_ConfigClockSource+0x1aa>
 800ad94:	e062      	b.n	800ae5c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6818      	ldr	r0, [r3, #0]
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	6899      	ldr	r1, [r3, #8]
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	685a      	ldr	r2, [r3, #4]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	f000 fc93 	bl	800b6d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800adb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	68ba      	ldr	r2, [r7, #8]
 800adc0:	609a      	str	r2, [r3, #8]
      break;
 800adc2:	e04f      	b.n	800ae64 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6818      	ldr	r0, [r3, #0]
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	6899      	ldr	r1, [r3, #8]
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	685a      	ldr	r2, [r3, #4]
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	f000 fc7c 	bl	800b6d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	689a      	ldr	r2, [r3, #8]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ade6:	609a      	str	r2, [r3, #8]
      break;
 800ade8:	e03c      	b.n	800ae64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6818      	ldr	r0, [r3, #0]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	6859      	ldr	r1, [r3, #4]
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	461a      	mov	r2, r3
 800adf8:	f000 fbec 	bl	800b5d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2150      	movs	r1, #80	; 0x50
 800ae02:	4618      	mov	r0, r3
 800ae04:	f000 fc46 	bl	800b694 <TIM_ITRx_SetConfig>
      break;
 800ae08:	e02c      	b.n	800ae64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6818      	ldr	r0, [r3, #0]
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	6859      	ldr	r1, [r3, #4]
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	68db      	ldr	r3, [r3, #12]
 800ae16:	461a      	mov	r2, r3
 800ae18:	f000 fc0b 	bl	800b632 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2160      	movs	r1, #96	; 0x60
 800ae22:	4618      	mov	r0, r3
 800ae24:	f000 fc36 	bl	800b694 <TIM_ITRx_SetConfig>
      break;
 800ae28:	e01c      	b.n	800ae64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6818      	ldr	r0, [r3, #0]
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	6859      	ldr	r1, [r3, #4]
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	461a      	mov	r2, r3
 800ae38:	f000 fbcc 	bl	800b5d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2140      	movs	r1, #64	; 0x40
 800ae42:	4618      	mov	r0, r3
 800ae44:	f000 fc26 	bl	800b694 <TIM_ITRx_SetConfig>
      break;
 800ae48:	e00c      	b.n	800ae64 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4619      	mov	r1, r3
 800ae54:	4610      	mov	r0, r2
 800ae56:	f000 fc1d 	bl	800b694 <TIM_ITRx_SetConfig>
      break;
 800ae5a:	e003      	b.n	800ae64 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae60:	e000      	b.n	800ae64 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ae62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2201      	movs	r2, #1
 800ae68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	ffceff88 	.word	0xffceff88
 800ae84:	00100040 	.word	0x00100040
 800ae88:	00100030 	.word	0x00100030
 800ae8c:	00100020 	.word	0x00100020

0800ae90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ae98:	bf00      	nop
 800ae9a:	370c      	adds	r7, #12
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aeac:	bf00      	nop
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aec0:	bf00      	nop
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aed4:	bf00      	nop
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aee8:	bf00      	nop
 800aeea:	370c      	adds	r7, #12
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr

0800aef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4a40      	ldr	r2, [pc, #256]	; (800b008 <TIM_Base_SetConfig+0x114>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d013      	beq.n	800af34 <TIM_Base_SetConfig+0x40>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af12:	d00f      	beq.n	800af34 <TIM_Base_SetConfig+0x40>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a3d      	ldr	r2, [pc, #244]	; (800b00c <TIM_Base_SetConfig+0x118>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d00b      	beq.n	800af34 <TIM_Base_SetConfig+0x40>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4a3c      	ldr	r2, [pc, #240]	; (800b010 <TIM_Base_SetConfig+0x11c>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d007      	beq.n	800af34 <TIM_Base_SetConfig+0x40>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4a3b      	ldr	r2, [pc, #236]	; (800b014 <TIM_Base_SetConfig+0x120>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d003      	beq.n	800af34 <TIM_Base_SetConfig+0x40>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	4a3a      	ldr	r2, [pc, #232]	; (800b018 <TIM_Base_SetConfig+0x124>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d108      	bne.n	800af46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	4313      	orrs	r3, r2
 800af44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a2f      	ldr	r2, [pc, #188]	; (800b008 <TIM_Base_SetConfig+0x114>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d01f      	beq.n	800af8e <TIM_Base_SetConfig+0x9a>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af54:	d01b      	beq.n	800af8e <TIM_Base_SetConfig+0x9a>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a2c      	ldr	r2, [pc, #176]	; (800b00c <TIM_Base_SetConfig+0x118>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d017      	beq.n	800af8e <TIM_Base_SetConfig+0x9a>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4a2b      	ldr	r2, [pc, #172]	; (800b010 <TIM_Base_SetConfig+0x11c>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d013      	beq.n	800af8e <TIM_Base_SetConfig+0x9a>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4a2a      	ldr	r2, [pc, #168]	; (800b014 <TIM_Base_SetConfig+0x120>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d00f      	beq.n	800af8e <TIM_Base_SetConfig+0x9a>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4a29      	ldr	r2, [pc, #164]	; (800b018 <TIM_Base_SetConfig+0x124>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d00b      	beq.n	800af8e <TIM_Base_SetConfig+0x9a>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a28      	ldr	r2, [pc, #160]	; (800b01c <TIM_Base_SetConfig+0x128>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d007      	beq.n	800af8e <TIM_Base_SetConfig+0x9a>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4a27      	ldr	r2, [pc, #156]	; (800b020 <TIM_Base_SetConfig+0x12c>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d003      	beq.n	800af8e <TIM_Base_SetConfig+0x9a>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a26      	ldr	r2, [pc, #152]	; (800b024 <TIM_Base_SetConfig+0x130>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d108      	bne.n	800afa0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	4313      	orrs	r3, r2
 800af9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	695b      	ldr	r3, [r3, #20]
 800afaa:	4313      	orrs	r3, r2
 800afac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	689a      	ldr	r2, [r3, #8]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4a10      	ldr	r2, [pc, #64]	; (800b008 <TIM_Base_SetConfig+0x114>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d00f      	beq.n	800afec <TIM_Base_SetConfig+0xf8>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4a12      	ldr	r2, [pc, #72]	; (800b018 <TIM_Base_SetConfig+0x124>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d00b      	beq.n	800afec <TIM_Base_SetConfig+0xf8>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4a11      	ldr	r2, [pc, #68]	; (800b01c <TIM_Base_SetConfig+0x128>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d007      	beq.n	800afec <TIM_Base_SetConfig+0xf8>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4a10      	ldr	r2, [pc, #64]	; (800b020 <TIM_Base_SetConfig+0x12c>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d003      	beq.n	800afec <TIM_Base_SetConfig+0xf8>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a0f      	ldr	r2, [pc, #60]	; (800b024 <TIM_Base_SetConfig+0x130>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d103      	bne.n	800aff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	691a      	ldr	r2, [r3, #16]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	615a      	str	r2, [r3, #20]
}
 800affa:	bf00      	nop
 800affc:	3714      	adds	r7, #20
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	40010000 	.word	0x40010000
 800b00c:	40000400 	.word	0x40000400
 800b010:	40000800 	.word	0x40000800
 800b014:	40000c00 	.word	0x40000c00
 800b018:	40010400 	.word	0x40010400
 800b01c:	40014000 	.word	0x40014000
 800b020:	40014400 	.word	0x40014400
 800b024:	40014800 	.word	0x40014800

0800b028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b028:	b480      	push	{r7}
 800b02a:	b087      	sub	sp, #28
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a1b      	ldr	r3, [r3, #32]
 800b036:	f023 0201 	bic.w	r2, r3, #1
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a1b      	ldr	r3, [r3, #32]
 800b042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	699b      	ldr	r3, [r3, #24]
 800b04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b050:	68fa      	ldr	r2, [r7, #12]
 800b052:	4b37      	ldr	r3, [pc, #220]	; (800b130 <TIM_OC1_SetConfig+0x108>)
 800b054:	4013      	ands	r3, r2
 800b056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f023 0303 	bic.w	r3, r3, #3
 800b05e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68fa      	ldr	r2, [r7, #12]
 800b066:	4313      	orrs	r3, r2
 800b068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	f023 0302 	bic.w	r3, r3, #2
 800b070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	4313      	orrs	r3, r2
 800b07a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4a2d      	ldr	r2, [pc, #180]	; (800b134 <TIM_OC1_SetConfig+0x10c>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d00f      	beq.n	800b0a4 <TIM_OC1_SetConfig+0x7c>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	4a2c      	ldr	r2, [pc, #176]	; (800b138 <TIM_OC1_SetConfig+0x110>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d00b      	beq.n	800b0a4 <TIM_OC1_SetConfig+0x7c>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4a2b      	ldr	r2, [pc, #172]	; (800b13c <TIM_OC1_SetConfig+0x114>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d007      	beq.n	800b0a4 <TIM_OC1_SetConfig+0x7c>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4a2a      	ldr	r2, [pc, #168]	; (800b140 <TIM_OC1_SetConfig+0x118>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d003      	beq.n	800b0a4 <TIM_OC1_SetConfig+0x7c>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4a29      	ldr	r2, [pc, #164]	; (800b144 <TIM_OC1_SetConfig+0x11c>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d10c      	bne.n	800b0be <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	f023 0308 	bic.w	r3, r3, #8
 800b0aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	f023 0304 	bic.w	r3, r3, #4
 800b0bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a1c      	ldr	r2, [pc, #112]	; (800b134 <TIM_OC1_SetConfig+0x10c>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d00f      	beq.n	800b0e6 <TIM_OC1_SetConfig+0xbe>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a1b      	ldr	r2, [pc, #108]	; (800b138 <TIM_OC1_SetConfig+0x110>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d00b      	beq.n	800b0e6 <TIM_OC1_SetConfig+0xbe>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a1a      	ldr	r2, [pc, #104]	; (800b13c <TIM_OC1_SetConfig+0x114>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d007      	beq.n	800b0e6 <TIM_OC1_SetConfig+0xbe>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a19      	ldr	r2, [pc, #100]	; (800b140 <TIM_OC1_SetConfig+0x118>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d003      	beq.n	800b0e6 <TIM_OC1_SetConfig+0xbe>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	4a18      	ldr	r2, [pc, #96]	; (800b144 <TIM_OC1_SetConfig+0x11c>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d111      	bne.n	800b10a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	695b      	ldr	r3, [r3, #20]
 800b0fa:	693a      	ldr	r2, [r7, #16]
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	699b      	ldr	r3, [r3, #24]
 800b104:	693a      	ldr	r2, [r7, #16]
 800b106:	4313      	orrs	r3, r2
 800b108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	693a      	ldr	r2, [r7, #16]
 800b10e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	685a      	ldr	r2, [r3, #4]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	697a      	ldr	r2, [r7, #20]
 800b122:	621a      	str	r2, [r3, #32]
}
 800b124:	bf00      	nop
 800b126:	371c      	adds	r7, #28
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr
 800b130:	fffeff8f 	.word	0xfffeff8f
 800b134:	40010000 	.word	0x40010000
 800b138:	40010400 	.word	0x40010400
 800b13c:	40014000 	.word	0x40014000
 800b140:	40014400 	.word	0x40014400
 800b144:	40014800 	.word	0x40014800

0800b148 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b148:	b480      	push	{r7}
 800b14a:	b087      	sub	sp, #28
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a1b      	ldr	r3, [r3, #32]
 800b156:	f023 0210 	bic.w	r2, r3, #16
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a1b      	ldr	r3, [r3, #32]
 800b162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	699b      	ldr	r3, [r3, #24]
 800b16e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	4b34      	ldr	r3, [pc, #208]	; (800b244 <TIM_OC2_SetConfig+0xfc>)
 800b174:	4013      	ands	r3, r2
 800b176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b17e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	021b      	lsls	r3, r3, #8
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	4313      	orrs	r3, r2
 800b18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	f023 0320 	bic.w	r3, r3, #32
 800b192:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	011b      	lsls	r3, r3, #4
 800b19a:	697a      	ldr	r2, [r7, #20]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4a29      	ldr	r2, [pc, #164]	; (800b248 <TIM_OC2_SetConfig+0x100>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d003      	beq.n	800b1b0 <TIM_OC2_SetConfig+0x68>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4a28      	ldr	r2, [pc, #160]	; (800b24c <TIM_OC2_SetConfig+0x104>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d10d      	bne.n	800b1cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	011b      	lsls	r3, r3, #4
 800b1be:	697a      	ldr	r2, [r7, #20]
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4a1e      	ldr	r2, [pc, #120]	; (800b248 <TIM_OC2_SetConfig+0x100>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d00f      	beq.n	800b1f4 <TIM_OC2_SetConfig+0xac>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a1d      	ldr	r2, [pc, #116]	; (800b24c <TIM_OC2_SetConfig+0x104>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d00b      	beq.n	800b1f4 <TIM_OC2_SetConfig+0xac>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4a1c      	ldr	r2, [pc, #112]	; (800b250 <TIM_OC2_SetConfig+0x108>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d007      	beq.n	800b1f4 <TIM_OC2_SetConfig+0xac>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	4a1b      	ldr	r2, [pc, #108]	; (800b254 <TIM_OC2_SetConfig+0x10c>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d003      	beq.n	800b1f4 <TIM_OC2_SetConfig+0xac>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4a1a      	ldr	r2, [pc, #104]	; (800b258 <TIM_OC2_SetConfig+0x110>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d113      	bne.n	800b21c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b202:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	695b      	ldr	r3, [r3, #20]
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	693a      	ldr	r2, [r7, #16]
 800b20c:	4313      	orrs	r3, r2
 800b20e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	699b      	ldr	r3, [r3, #24]
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	693a      	ldr	r2, [r7, #16]
 800b218:	4313      	orrs	r3, r2
 800b21a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	693a      	ldr	r2, [r7, #16]
 800b220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	685a      	ldr	r2, [r3, #4]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	697a      	ldr	r2, [r7, #20]
 800b234:	621a      	str	r2, [r3, #32]
}
 800b236:	bf00      	nop
 800b238:	371c      	adds	r7, #28
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	feff8fff 	.word	0xfeff8fff
 800b248:	40010000 	.word	0x40010000
 800b24c:	40010400 	.word	0x40010400
 800b250:	40014000 	.word	0x40014000
 800b254:	40014400 	.word	0x40014400
 800b258:	40014800 	.word	0x40014800

0800b25c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b087      	sub	sp, #28
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a1b      	ldr	r3, [r3, #32]
 800b26a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6a1b      	ldr	r3, [r3, #32]
 800b276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	69db      	ldr	r3, [r3, #28]
 800b282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b284:	68fa      	ldr	r2, [r7, #12]
 800b286:	4b33      	ldr	r3, [pc, #204]	; (800b354 <TIM_OC3_SetConfig+0xf8>)
 800b288:	4013      	ands	r3, r2
 800b28a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f023 0303 	bic.w	r3, r3, #3
 800b292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b2a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	021b      	lsls	r3, r3, #8
 800b2ac:	697a      	ldr	r2, [r7, #20]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4a28      	ldr	r2, [pc, #160]	; (800b358 <TIM_OC3_SetConfig+0xfc>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d003      	beq.n	800b2c2 <TIM_OC3_SetConfig+0x66>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a27      	ldr	r2, [pc, #156]	; (800b35c <TIM_OC3_SetConfig+0x100>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d10d      	bne.n	800b2de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b2c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	021b      	lsls	r3, r3, #8
 800b2d0:	697a      	ldr	r2, [r7, #20]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b2dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a1d      	ldr	r2, [pc, #116]	; (800b358 <TIM_OC3_SetConfig+0xfc>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d00f      	beq.n	800b306 <TIM_OC3_SetConfig+0xaa>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a1c      	ldr	r2, [pc, #112]	; (800b35c <TIM_OC3_SetConfig+0x100>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d00b      	beq.n	800b306 <TIM_OC3_SetConfig+0xaa>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4a1b      	ldr	r2, [pc, #108]	; (800b360 <TIM_OC3_SetConfig+0x104>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d007      	beq.n	800b306 <TIM_OC3_SetConfig+0xaa>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a1a      	ldr	r2, [pc, #104]	; (800b364 <TIM_OC3_SetConfig+0x108>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d003      	beq.n	800b306 <TIM_OC3_SetConfig+0xaa>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a19      	ldr	r2, [pc, #100]	; (800b368 <TIM_OC3_SetConfig+0x10c>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d113      	bne.n	800b32e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b30c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	695b      	ldr	r3, [r3, #20]
 800b31a:	011b      	lsls	r3, r3, #4
 800b31c:	693a      	ldr	r2, [r7, #16]
 800b31e:	4313      	orrs	r3, r2
 800b320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	699b      	ldr	r3, [r3, #24]
 800b326:	011b      	lsls	r3, r3, #4
 800b328:	693a      	ldr	r2, [r7, #16]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	693a      	ldr	r2, [r7, #16]
 800b332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	68fa      	ldr	r2, [r7, #12]
 800b338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	685a      	ldr	r2, [r3, #4]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	697a      	ldr	r2, [r7, #20]
 800b346:	621a      	str	r2, [r3, #32]
}
 800b348:	bf00      	nop
 800b34a:	371c      	adds	r7, #28
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr
 800b354:	fffeff8f 	.word	0xfffeff8f
 800b358:	40010000 	.word	0x40010000
 800b35c:	40010400 	.word	0x40010400
 800b360:	40014000 	.word	0x40014000
 800b364:	40014400 	.word	0x40014400
 800b368:	40014800 	.word	0x40014800

0800b36c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b087      	sub	sp, #28
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6a1b      	ldr	r3, [r3, #32]
 800b37a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a1b      	ldr	r3, [r3, #32]
 800b386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	69db      	ldr	r3, [r3, #28]
 800b392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	4b24      	ldr	r3, [pc, #144]	; (800b428 <TIM_OC4_SetConfig+0xbc>)
 800b398:	4013      	ands	r3, r2
 800b39a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	021b      	lsls	r3, r3, #8
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b3b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	031b      	lsls	r3, r3, #12
 800b3be:	693a      	ldr	r2, [r7, #16]
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	4a19      	ldr	r2, [pc, #100]	; (800b42c <TIM_OC4_SetConfig+0xc0>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d00f      	beq.n	800b3ec <TIM_OC4_SetConfig+0x80>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4a18      	ldr	r2, [pc, #96]	; (800b430 <TIM_OC4_SetConfig+0xc4>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d00b      	beq.n	800b3ec <TIM_OC4_SetConfig+0x80>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4a17      	ldr	r2, [pc, #92]	; (800b434 <TIM_OC4_SetConfig+0xc8>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d007      	beq.n	800b3ec <TIM_OC4_SetConfig+0x80>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	4a16      	ldr	r2, [pc, #88]	; (800b438 <TIM_OC4_SetConfig+0xcc>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d003      	beq.n	800b3ec <TIM_OC4_SetConfig+0x80>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	4a15      	ldr	r2, [pc, #84]	; (800b43c <TIM_OC4_SetConfig+0xd0>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d109      	bne.n	800b400 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	695b      	ldr	r3, [r3, #20]
 800b3f8:	019b      	lsls	r3, r3, #6
 800b3fa:	697a      	ldr	r2, [r7, #20]
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	697a      	ldr	r2, [r7, #20]
 800b404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	68fa      	ldr	r2, [r7, #12]
 800b40a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	685a      	ldr	r2, [r3, #4]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	621a      	str	r2, [r3, #32]
}
 800b41a:	bf00      	nop
 800b41c:	371c      	adds	r7, #28
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop
 800b428:	feff8fff 	.word	0xfeff8fff
 800b42c:	40010000 	.word	0x40010000
 800b430:	40010400 	.word	0x40010400
 800b434:	40014000 	.word	0x40014000
 800b438:	40014400 	.word	0x40014400
 800b43c:	40014800 	.word	0x40014800

0800b440 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b440:	b480      	push	{r7}
 800b442:	b087      	sub	sp, #28
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6a1b      	ldr	r3, [r3, #32]
 800b44e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a1b      	ldr	r3, [r3, #32]
 800b45a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b468:	68fa      	ldr	r2, [r7, #12]
 800b46a:	4b21      	ldr	r3, [pc, #132]	; (800b4f0 <TIM_OC5_SetConfig+0xb0>)
 800b46c:	4013      	ands	r3, r2
 800b46e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	4313      	orrs	r3, r2
 800b478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b480:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	041b      	lsls	r3, r3, #16
 800b488:	693a      	ldr	r2, [r7, #16]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4a18      	ldr	r2, [pc, #96]	; (800b4f4 <TIM_OC5_SetConfig+0xb4>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d00f      	beq.n	800b4b6 <TIM_OC5_SetConfig+0x76>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a17      	ldr	r2, [pc, #92]	; (800b4f8 <TIM_OC5_SetConfig+0xb8>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d00b      	beq.n	800b4b6 <TIM_OC5_SetConfig+0x76>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a16      	ldr	r2, [pc, #88]	; (800b4fc <TIM_OC5_SetConfig+0xbc>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d007      	beq.n	800b4b6 <TIM_OC5_SetConfig+0x76>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4a15      	ldr	r2, [pc, #84]	; (800b500 <TIM_OC5_SetConfig+0xc0>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d003      	beq.n	800b4b6 <TIM_OC5_SetConfig+0x76>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4a14      	ldr	r2, [pc, #80]	; (800b504 <TIM_OC5_SetConfig+0xc4>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d109      	bne.n	800b4ca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	695b      	ldr	r3, [r3, #20]
 800b4c2:	021b      	lsls	r3, r3, #8
 800b4c4:	697a      	ldr	r2, [r7, #20]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	697a      	ldr	r2, [r7, #20]
 800b4ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	685a      	ldr	r2, [r3, #4]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	693a      	ldr	r2, [r7, #16]
 800b4e2:	621a      	str	r2, [r3, #32]
}
 800b4e4:	bf00      	nop
 800b4e6:	371c      	adds	r7, #28
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	fffeff8f 	.word	0xfffeff8f
 800b4f4:	40010000 	.word	0x40010000
 800b4f8:	40010400 	.word	0x40010400
 800b4fc:	40014000 	.word	0x40014000
 800b500:	40014400 	.word	0x40014400
 800b504:	40014800 	.word	0x40014800

0800b508 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b508:	b480      	push	{r7}
 800b50a:	b087      	sub	sp, #28
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a1b      	ldr	r3, [r3, #32]
 800b516:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a1b      	ldr	r3, [r3, #32]
 800b522:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b52e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	4b22      	ldr	r3, [pc, #136]	; (800b5bc <TIM_OC6_SetConfig+0xb4>)
 800b534:	4013      	ands	r3, r2
 800b536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	021b      	lsls	r3, r3, #8
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	4313      	orrs	r3, r2
 800b542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b54a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	051b      	lsls	r3, r3, #20
 800b552:	693a      	ldr	r2, [r7, #16]
 800b554:	4313      	orrs	r3, r2
 800b556:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a19      	ldr	r2, [pc, #100]	; (800b5c0 <TIM_OC6_SetConfig+0xb8>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d00f      	beq.n	800b580 <TIM_OC6_SetConfig+0x78>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a18      	ldr	r2, [pc, #96]	; (800b5c4 <TIM_OC6_SetConfig+0xbc>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d00b      	beq.n	800b580 <TIM_OC6_SetConfig+0x78>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4a17      	ldr	r2, [pc, #92]	; (800b5c8 <TIM_OC6_SetConfig+0xc0>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d007      	beq.n	800b580 <TIM_OC6_SetConfig+0x78>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a16      	ldr	r2, [pc, #88]	; (800b5cc <TIM_OC6_SetConfig+0xc4>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d003      	beq.n	800b580 <TIM_OC6_SetConfig+0x78>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a15      	ldr	r2, [pc, #84]	; (800b5d0 <TIM_OC6_SetConfig+0xc8>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d109      	bne.n	800b594 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b586:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	695b      	ldr	r3, [r3, #20]
 800b58c:	029b      	lsls	r3, r3, #10
 800b58e:	697a      	ldr	r2, [r7, #20]
 800b590:	4313      	orrs	r3, r2
 800b592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	697a      	ldr	r2, [r7, #20]
 800b598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	685a      	ldr	r2, [r3, #4]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	693a      	ldr	r2, [r7, #16]
 800b5ac:	621a      	str	r2, [r3, #32]
}
 800b5ae:	bf00      	nop
 800b5b0:	371c      	adds	r7, #28
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr
 800b5ba:	bf00      	nop
 800b5bc:	feff8fff 	.word	0xfeff8fff
 800b5c0:	40010000 	.word	0x40010000
 800b5c4:	40010400 	.word	0x40010400
 800b5c8:	40014000 	.word	0x40014000
 800b5cc:	40014400 	.word	0x40014400
 800b5d0:	40014800 	.word	0x40014800

0800b5d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b087      	sub	sp, #28
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6a1b      	ldr	r3, [r3, #32]
 800b5e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	6a1b      	ldr	r3, [r3, #32]
 800b5ea:	f023 0201 	bic.w	r2, r3, #1
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	699b      	ldr	r3, [r3, #24]
 800b5f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	011b      	lsls	r3, r3, #4
 800b604:	693a      	ldr	r2, [r7, #16]
 800b606:	4313      	orrs	r3, r2
 800b608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	f023 030a 	bic.w	r3, r3, #10
 800b610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b612:	697a      	ldr	r2, [r7, #20]
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	4313      	orrs	r3, r2
 800b618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	693a      	ldr	r2, [r7, #16]
 800b61e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	697a      	ldr	r2, [r7, #20]
 800b624:	621a      	str	r2, [r3, #32]
}
 800b626:	bf00      	nop
 800b628:	371c      	adds	r7, #28
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr

0800b632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b632:	b480      	push	{r7}
 800b634:	b087      	sub	sp, #28
 800b636:	af00      	add	r7, sp, #0
 800b638:	60f8      	str	r0, [r7, #12]
 800b63a:	60b9      	str	r1, [r7, #8]
 800b63c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6a1b      	ldr	r3, [r3, #32]
 800b642:	f023 0210 	bic.w	r2, r3, #16
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	699b      	ldr	r3, [r3, #24]
 800b64e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6a1b      	ldr	r3, [r3, #32]
 800b654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b65c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	031b      	lsls	r3, r3, #12
 800b662:	697a      	ldr	r2, [r7, #20]
 800b664:	4313      	orrs	r3, r2
 800b666:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b66e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	011b      	lsls	r3, r3, #4
 800b674:	693a      	ldr	r2, [r7, #16]
 800b676:	4313      	orrs	r3, r2
 800b678:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	697a      	ldr	r2, [r7, #20]
 800b67e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	693a      	ldr	r2, [r7, #16]
 800b684:	621a      	str	r2, [r3, #32]
}
 800b686:	bf00      	nop
 800b688:	371c      	adds	r7, #28
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
	...

0800b694 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b694:	b480      	push	{r7}
 800b696:	b085      	sub	sp, #20
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	4b09      	ldr	r3, [pc, #36]	; (800b6cc <TIM_ITRx_SetConfig+0x38>)
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b6ac:	683a      	ldr	r2, [r7, #0]
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	f043 0307 	orr.w	r3, r3, #7
 800b6b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	609a      	str	r2, [r3, #8]
}
 800b6be:	bf00      	nop
 800b6c0:	3714      	adds	r7, #20
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	ffcfff8f 	.word	0xffcfff8f

0800b6d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b087      	sub	sp, #28
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
 800b6dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	021a      	lsls	r2, r3, #8
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	431a      	orrs	r2, r3
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	697a      	ldr	r2, [r7, #20]
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	697a      	ldr	r2, [r7, #20]
 800b702:	609a      	str	r2, [r3, #8]
}
 800b704:	bf00      	nop
 800b706:	371c      	adds	r7, #28
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b710:	b480      	push	{r7}
 800b712:	b087      	sub	sp, #28
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	f003 031f 	and.w	r3, r3, #31
 800b722:	2201      	movs	r2, #1
 800b724:	fa02 f303 	lsl.w	r3, r2, r3
 800b728:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6a1a      	ldr	r2, [r3, #32]
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	43db      	mvns	r3, r3
 800b732:	401a      	ands	r2, r3
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6a1a      	ldr	r2, [r3, #32]
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	f003 031f 	and.w	r3, r3, #31
 800b742:	6879      	ldr	r1, [r7, #4]
 800b744:	fa01 f303 	lsl.w	r3, r1, r3
 800b748:	431a      	orrs	r2, r3
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	621a      	str	r2, [r3, #32]
}
 800b74e:	bf00      	nop
 800b750:	371c      	adds	r7, #28
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr
	...

0800b75c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b085      	sub	sp, #20
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d101      	bne.n	800b774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b770:	2302      	movs	r3, #2
 800b772:	e06d      	b.n	800b850 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2201      	movs	r2, #1
 800b778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2202      	movs	r2, #2
 800b780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4a30      	ldr	r2, [pc, #192]	; (800b85c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d004      	beq.n	800b7a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4a2f      	ldr	r2, [pc, #188]	; (800b860 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d108      	bne.n	800b7ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b7ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	68fa      	ldr	r2, [r7, #12]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	68fa      	ldr	r2, [r7, #12]
 800b7d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4a20      	ldr	r2, [pc, #128]	; (800b85c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d022      	beq.n	800b824 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7e6:	d01d      	beq.n	800b824 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a1d      	ldr	r2, [pc, #116]	; (800b864 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d018      	beq.n	800b824 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a1c      	ldr	r2, [pc, #112]	; (800b868 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d013      	beq.n	800b824 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a1a      	ldr	r2, [pc, #104]	; (800b86c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d00e      	beq.n	800b824 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a15      	ldr	r2, [pc, #84]	; (800b860 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d009      	beq.n	800b824 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a16      	ldr	r2, [pc, #88]	; (800b870 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d004      	beq.n	800b824 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a15      	ldr	r2, [pc, #84]	; (800b874 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d10c      	bne.n	800b83e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b82a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	4313      	orrs	r3, r2
 800b834:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	68ba      	ldr	r2, [r7, #8]
 800b83c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2201      	movs	r2, #1
 800b842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2200      	movs	r2, #0
 800b84a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3714      	adds	r7, #20
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	40010000 	.word	0x40010000
 800b860:	40010400 	.word	0x40010400
 800b864:	40000400 	.word	0x40000400
 800b868:	40000800 	.word	0x40000800
 800b86c:	40000c00 	.word	0x40000c00
 800b870:	40001800 	.word	0x40001800
 800b874:	40014000 	.word	0x40014000

0800b878 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b882:	2300      	movs	r3, #0
 800b884:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d101      	bne.n	800b894 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b890:	2302      	movs	r3, #2
 800b892:	e065      	b.n	800b960 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	691b      	ldr	r3, [r3, #16]
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	695b      	ldr	r3, [r3, #20]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	699b      	ldr	r3, [r3, #24]
 800b908:	041b      	lsls	r3, r3, #16
 800b90a:	4313      	orrs	r3, r2
 800b90c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4a16      	ldr	r2, [pc, #88]	; (800b96c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d004      	beq.n	800b922 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a14      	ldr	r2, [pc, #80]	; (800b970 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d115      	bne.n	800b94e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92c:	051b      	lsls	r3, r3, #20
 800b92e:	4313      	orrs	r3, r2
 800b930:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	69db      	ldr	r3, [r3, #28]
 800b93c:	4313      	orrs	r3, r2
 800b93e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	6a1b      	ldr	r3, [r3, #32]
 800b94a:	4313      	orrs	r3, r2
 800b94c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3714      	adds	r7, #20
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr
 800b96c:	40010000 	.word	0x40010000
 800b970:	40010400 	.word	0x40010400

0800b974 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800b974:	b480      	push	{r7}
 800b976:	b08b      	sub	sp, #44	; 0x2c
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b980:	2300      	movs	r3, #0
 800b982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  {
    assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
  }

  /* Check input state */
  __HAL_LOCK(htim);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d101      	bne.n	800b994 <HAL_TIMEx_ConfigBreakInput+0x20>
 800b990:	2302      	movs	r3, #2
 800b992:	e0af      	b.n	800baf4 <HAL_TIMEx_ConfigBreakInput+0x180>
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2201      	movs	r2, #1
 800b998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	3b01      	subs	r3, #1
 800b9a2:	2b07      	cmp	r3, #7
 800b9a4:	d83a      	bhi.n	800ba1c <HAL_TIMEx_ConfigBreakInput+0xa8>
 800b9a6:	a201      	add	r2, pc, #4	; (adr r2, 800b9ac <HAL_TIMEx_ConfigBreakInput+0x38>)
 800b9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ac:	0800b9cd 	.word	0x0800b9cd
 800b9b0:	0800b9e1 	.word	0x0800b9e1
 800b9b4:	0800ba1d 	.word	0x0800ba1d
 800b9b8:	0800b9f5 	.word	0x0800b9f5
 800b9bc:	0800ba1d 	.word	0x0800ba1d
 800b9c0:	0800ba1d 	.word	0x0800ba1d
 800b9c4:	0800ba1d 	.word	0x0800ba1d
 800b9c8:	0800ba09 	.word	0x0800ba09
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800b9d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9d8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800b9da:	2309      	movs	r3, #9
 800b9dc:	613b      	str	r3, [r7, #16]
      break;
 800b9de:	e026      	b.n	800ba2e <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800b9e0:	2302      	movs	r3, #2
 800b9e2:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800b9e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9ec:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800b9ee:	230a      	movs	r3, #10
 800b9f0:	613b      	str	r3, [r7, #16]
      break;
 800b9f2:	e01c      	b.n	800ba2e <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800b9f4:	2304      	movs	r3, #4
 800b9f6:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800b9f8:	2302      	movs	r3, #2
 800b9fa:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800b9fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba00:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800ba02:	230b      	movs	r3, #11
 800ba04:	613b      	str	r3, [r7, #16]
      break;
 800ba06:	e012      	b.n	800ba2e <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_AF1_BKDF1BK0E;
 800ba08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba0c:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKDF1BK0E_Pos;
 800ba0e:	2308      	movs	r3, #8
 800ba10:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800ba12:	2300      	movs	r3, #0
 800ba14:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800ba16:	2300      	movs	r3, #0
 800ba18:	613b      	str	r3, [r7, #16]
      break;
 800ba1a:	e008      	b.n	800ba2e <HAL_TIMEx_ConfigBreakInput+0xba>
    }

    default:
    {
      bkin_enable_mask = 0U;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 800ba20:	2300      	movs	r3, #0
 800ba22:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800ba24:	2300      	movs	r3, #0
 800ba26:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	613b      	str	r3, [r7, #16]
      break;
 800ba2c:	bf00      	nop
    }
  }

  switch (BreakInput)
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d003      	beq.n	800ba3c <HAL_TIMEx_ConfigBreakInput+0xc8>
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	d029      	beq.n	800ba8e <HAL_TIMEx_ConfigBreakInput+0x11a>
 800ba3a:	e051      	b.n	800bae0 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba42:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800ba44:	69fb      	ldr	r3, [r7, #28]
 800ba46:	43db      	mvns	r3, r3
 800ba48:	6a3a      	ldr	r2, [r7, #32]
 800ba4a:	4013      	ands	r3, r2
 800ba4c:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	685a      	ldr	r2, [r3, #4]
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	409a      	lsls	r2, r3
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	4013      	ands	r3, r2
 800ba5a:	6a3a      	ldr	r2, [r7, #32]
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b08      	cmp	r3, #8
 800ba66:	d00d      	beq.n	800ba84 <HAL_TIMEx_ConfigBreakInput+0x110>
      {
        tmporx &= ~bkin_polarity_mask;
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	43db      	mvns	r3, r3
 800ba6c:	6a3a      	ldr	r2, [r7, #32]
 800ba6e:	4013      	ands	r3, r2
 800ba70:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	689a      	ldr	r2, [r3, #8]
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	409a      	lsls	r2, r3
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	4013      	ands	r3, r2
 800ba7e:	6a3a      	ldr	r2, [r7, #32]
 800ba80:	4313      	orrs	r3, r2
 800ba82:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	6a3a      	ldr	r2, [r7, #32]
 800ba8a:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800ba8c:	e02c      	b.n	800bae8 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba94:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800ba96:	69fb      	ldr	r3, [r7, #28]
 800ba98:	43db      	mvns	r3, r3
 800ba9a:	6a3a      	ldr	r2, [r7, #32]
 800ba9c:	4013      	ands	r3, r2
 800ba9e:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	685a      	ldr	r2, [r3, #4]
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	409a      	lsls	r2, r3
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	4013      	ands	r3, r2
 800baac:	6a3a      	ldr	r2, [r7, #32]
 800baae:	4313      	orrs	r3, r2
 800bab0:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	2b08      	cmp	r3, #8
 800bab8:	d00d      	beq.n	800bad6 <HAL_TIMEx_ConfigBreakInput+0x162>
      {
        tmporx &= ~bkin_polarity_mask;
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	43db      	mvns	r3, r3
 800babe:	6a3a      	ldr	r2, [r7, #32]
 800bac0:	4013      	ands	r3, r2
 800bac2:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	689a      	ldr	r2, [r3, #8]
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	409a      	lsls	r2, r3
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	4013      	ands	r3, r2
 800bad0:	6a3a      	ldr	r2, [r7, #32]
 800bad2:	4313      	orrs	r3, r2
 800bad4:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	6a3a      	ldr	r2, [r7, #32]
 800badc:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800bade:	e003      	b.n	800bae8 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800bae0:	2301      	movs	r3, #1
 800bae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800bae6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800baf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	372c      	adds	r7, #44	; 0x2c
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb08:	bf00      	nop
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb1c:	bf00      	nop
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bb30:	bf00      	nop
 800bb32:	370c      	adds	r7, #12
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d101      	bne.n	800bb4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e042      	b.n	800bbd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d106      	bne.n	800bb66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f7f6 fddb 	bl	800271c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2224      	movs	r2, #36	; 0x24
 800bb6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f022 0201 	bic.w	r2, r2, #1
 800bb7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 f942 	bl	800be08 <UART_SetConfig>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d101      	bne.n	800bb8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e022      	b.n	800bbd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d002      	beq.n	800bb9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fe96 	bl	800c8c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	685a      	ldr	r2, [r3, #4]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bbaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	689a      	ldr	r2, [r3, #8]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bbba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f042 0201 	orr.w	r2, r2, #1
 800bbca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 ff1d 	bl	800ca0c <UART_CheckIdleState>
 800bbd2:	4603      	mov	r3, r0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b08a      	sub	sp, #40	; 0x28
 800bbe0:	af02      	add	r7, sp, #8
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	603b      	str	r3, [r7, #0]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbf2:	2b20      	cmp	r3, #32
 800bbf4:	f040 8083 	bne.w	800bcfe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d002      	beq.n	800bc04 <HAL_UART_Transmit+0x28>
 800bbfe:	88fb      	ldrh	r3, [r7, #6]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d101      	bne.n	800bc08 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bc04:	2301      	movs	r3, #1
 800bc06:	e07b      	b.n	800bd00 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d101      	bne.n	800bc16 <HAL_UART_Transmit+0x3a>
 800bc12:	2302      	movs	r3, #2
 800bc14:	e074      	b.n	800bd00 <HAL_UART_Transmit+0x124>
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2221      	movs	r2, #33	; 0x21
 800bc2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bc2e:	f7f6 ffaf 	bl	8002b90 <HAL_GetTick>
 800bc32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	88fa      	ldrh	r2, [r7, #6]
 800bc38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	88fa      	ldrh	r2, [r7, #6]
 800bc40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	689b      	ldr	r3, [r3, #8]
 800bc48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc4c:	d108      	bne.n	800bc60 <HAL_UART_Transmit+0x84>
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	691b      	ldr	r3, [r3, #16]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d104      	bne.n	800bc60 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bc56:	2300      	movs	r3, #0
 800bc58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	61bb      	str	r3, [r7, #24]
 800bc5e:	e003      	b.n	800bc68 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bc64:	2300      	movs	r3, #0
 800bc66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bc70:	e02c      	b.n	800bccc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	2180      	movs	r1, #128	; 0x80
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f000 ff10 	bl	800caa2 <UART_WaitOnFlagUntilTimeout>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d001      	beq.n	800bc8c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bc88:	2303      	movs	r3, #3
 800bc8a:	e039      	b.n	800bd00 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d10b      	bne.n	800bcaa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bc92:	69bb      	ldr	r3, [r7, #24]
 800bc94:	881b      	ldrh	r3, [r3, #0]
 800bc96:	461a      	mov	r2, r3
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bca0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	3302      	adds	r3, #2
 800bca6:	61bb      	str	r3, [r7, #24]
 800bca8:	e007      	b.n	800bcba <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	781a      	ldrb	r2, [r3, #0]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	3b01      	subs	r3, #1
 800bcc4:	b29a      	uxth	r2, r3
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d1cc      	bne.n	800bc72 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	9300      	str	r3, [sp, #0]
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	2200      	movs	r2, #0
 800bce0:	2140      	movs	r1, #64	; 0x40
 800bce2:	68f8      	ldr	r0, [r7, #12]
 800bce4:	f000 fedd 	bl	800caa2 <UART_WaitOnFlagUntilTimeout>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d001      	beq.n	800bcf2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800bcee:	2303      	movs	r3, #3
 800bcf0:	e006      	b.n	800bd00 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2220      	movs	r2, #32
 800bcf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	e000      	b.n	800bd00 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800bcfe:	2302      	movs	r3, #2
  }
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3720      	adds	r7, #32
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b08a      	sub	sp, #40	; 0x28
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	4613      	mov	r3, r2
 800bd14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd1c:	2b20      	cmp	r3, #32
 800bd1e:	d142      	bne.n	800bda6 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d002      	beq.n	800bd2c <HAL_UART_Receive_DMA+0x24>
 800bd26:	88fb      	ldrh	r3, [r7, #6]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d101      	bne.n	800bd30 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e03b      	b.n	800bda8 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d101      	bne.n	800bd3e <HAL_UART_Receive_DMA+0x36>
 800bd3a:	2302      	movs	r3, #2
 800bd3c:	e034      	b.n	800bda8 <HAL_UART_Receive_DMA+0xa0>
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2201      	movs	r2, #1
 800bd42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a17      	ldr	r2, [pc, #92]	; (800bdb0 <HAL_UART_Receive_DMA+0xa8>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d01f      	beq.n	800bd96 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d018      	beq.n	800bd96 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	e853 3f00 	ldrex	r3, [r3]
 800bd70:	613b      	str	r3, [r7, #16]
   return(result);
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bd78:	627b      	str	r3, [r7, #36]	; 0x24
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	461a      	mov	r2, r3
 800bd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd82:	623b      	str	r3, [r7, #32]
 800bd84:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd86:	69f9      	ldr	r1, [r7, #28]
 800bd88:	6a3a      	ldr	r2, [r7, #32]
 800bd8a:	e841 2300 	strex	r3, r2, [r1]
 800bd8e:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1e6      	bne.n	800bd64 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bd96:	88fb      	ldrh	r3, [r7, #6]
 800bd98:	461a      	mov	r2, r3
 800bd9a:	68b9      	ldr	r1, [r7, #8]
 800bd9c:	68f8      	ldr	r0, [r7, #12]
 800bd9e:	f000 ff49 	bl	800cc34 <UART_Start_Receive_DMA>
 800bda2:	4603      	mov	r3, r0
 800bda4:	e000      	b.n	800bda8 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bda6:	2302      	movs	r3, #2
  }
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3728      	adds	r7, #40	; 0x28
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}
 800bdb0:	58000c00 	.word	0x58000c00

0800bdb4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800bdbc:	bf00      	nop
 800bdbe:	370c      	adds	r7, #12
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bdd0:	bf00      	nop
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bde4:	bf00      	nop
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b083      	sub	sp, #12
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bdfc:	bf00      	nop
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be08:	b5b0      	push	{r4, r5, r7, lr}
 800be0a:	b08e      	sub	sp, #56	; 0x38
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be10:	2300      	movs	r3, #0
 800be12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	689a      	ldr	r2, [r3, #8]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	691b      	ldr	r3, [r3, #16]
 800be1e:	431a      	orrs	r2, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	695b      	ldr	r3, [r3, #20]
 800be24:	431a      	orrs	r2, r3
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	69db      	ldr	r3, [r3, #28]
 800be2a:	4313      	orrs	r3, r2
 800be2c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	4bbf      	ldr	r3, [pc, #764]	; (800c134 <UART_SetConfig+0x32c>)
 800be36:	4013      	ands	r3, r2
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	6812      	ldr	r2, [r2, #0]
 800be3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800be3e:	430b      	orrs	r3, r1
 800be40:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	68da      	ldr	r2, [r3, #12]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	430a      	orrs	r2, r1
 800be56:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	699b      	ldr	r3, [r3, #24]
 800be5c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4ab5      	ldr	r2, [pc, #724]	; (800c138 <UART_SetConfig+0x330>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d004      	beq.n	800be72 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a1b      	ldr	r3, [r3, #32]
 800be6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be6e:	4313      	orrs	r3, r2
 800be70:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	689a      	ldr	r2, [r3, #8]
 800be78:	4bb0      	ldr	r3, [pc, #704]	; (800c13c <UART_SetConfig+0x334>)
 800be7a:	4013      	ands	r3, r2
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	6812      	ldr	r2, [r2, #0]
 800be80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800be82:	430b      	orrs	r3, r1
 800be84:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be8c:	f023 010f 	bic.w	r1, r3, #15
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	430a      	orrs	r2, r1
 800be9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4aa7      	ldr	r2, [pc, #668]	; (800c140 <UART_SetConfig+0x338>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d176      	bne.n	800bf94 <UART_SetConfig+0x18c>
 800bea6:	4ba7      	ldr	r3, [pc, #668]	; (800c144 <UART_SetConfig+0x33c>)
 800bea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800beae:	2b28      	cmp	r3, #40	; 0x28
 800beb0:	d86c      	bhi.n	800bf8c <UART_SetConfig+0x184>
 800beb2:	a201      	add	r2, pc, #4	; (adr r2, 800beb8 <UART_SetConfig+0xb0>)
 800beb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb8:	0800bf5d 	.word	0x0800bf5d
 800bebc:	0800bf8d 	.word	0x0800bf8d
 800bec0:	0800bf8d 	.word	0x0800bf8d
 800bec4:	0800bf8d 	.word	0x0800bf8d
 800bec8:	0800bf8d 	.word	0x0800bf8d
 800becc:	0800bf8d 	.word	0x0800bf8d
 800bed0:	0800bf8d 	.word	0x0800bf8d
 800bed4:	0800bf8d 	.word	0x0800bf8d
 800bed8:	0800bf65 	.word	0x0800bf65
 800bedc:	0800bf8d 	.word	0x0800bf8d
 800bee0:	0800bf8d 	.word	0x0800bf8d
 800bee4:	0800bf8d 	.word	0x0800bf8d
 800bee8:	0800bf8d 	.word	0x0800bf8d
 800beec:	0800bf8d 	.word	0x0800bf8d
 800bef0:	0800bf8d 	.word	0x0800bf8d
 800bef4:	0800bf8d 	.word	0x0800bf8d
 800bef8:	0800bf6d 	.word	0x0800bf6d
 800befc:	0800bf8d 	.word	0x0800bf8d
 800bf00:	0800bf8d 	.word	0x0800bf8d
 800bf04:	0800bf8d 	.word	0x0800bf8d
 800bf08:	0800bf8d 	.word	0x0800bf8d
 800bf0c:	0800bf8d 	.word	0x0800bf8d
 800bf10:	0800bf8d 	.word	0x0800bf8d
 800bf14:	0800bf8d 	.word	0x0800bf8d
 800bf18:	0800bf75 	.word	0x0800bf75
 800bf1c:	0800bf8d 	.word	0x0800bf8d
 800bf20:	0800bf8d 	.word	0x0800bf8d
 800bf24:	0800bf8d 	.word	0x0800bf8d
 800bf28:	0800bf8d 	.word	0x0800bf8d
 800bf2c:	0800bf8d 	.word	0x0800bf8d
 800bf30:	0800bf8d 	.word	0x0800bf8d
 800bf34:	0800bf8d 	.word	0x0800bf8d
 800bf38:	0800bf7d 	.word	0x0800bf7d
 800bf3c:	0800bf8d 	.word	0x0800bf8d
 800bf40:	0800bf8d 	.word	0x0800bf8d
 800bf44:	0800bf8d 	.word	0x0800bf8d
 800bf48:	0800bf8d 	.word	0x0800bf8d
 800bf4c:	0800bf8d 	.word	0x0800bf8d
 800bf50:	0800bf8d 	.word	0x0800bf8d
 800bf54:	0800bf8d 	.word	0x0800bf8d
 800bf58:	0800bf85 	.word	0x0800bf85
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf62:	e222      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800bf64:	2304      	movs	r3, #4
 800bf66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf6a:	e21e      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800bf6c:	2308      	movs	r3, #8
 800bf6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf72:	e21a      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800bf74:	2310      	movs	r3, #16
 800bf76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf7a:	e216      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800bf7c:	2320      	movs	r3, #32
 800bf7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf82:	e212      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800bf84:	2340      	movs	r3, #64	; 0x40
 800bf86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf8a:	e20e      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800bf8c:	2380      	movs	r3, #128	; 0x80
 800bf8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf92:	e20a      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a6b      	ldr	r2, [pc, #428]	; (800c148 <UART_SetConfig+0x340>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d130      	bne.n	800c000 <UART_SetConfig+0x1f8>
 800bf9e:	4b69      	ldr	r3, [pc, #420]	; (800c144 <UART_SetConfig+0x33c>)
 800bfa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfa2:	f003 0307 	and.w	r3, r3, #7
 800bfa6:	2b05      	cmp	r3, #5
 800bfa8:	d826      	bhi.n	800bff8 <UART_SetConfig+0x1f0>
 800bfaa:	a201      	add	r2, pc, #4	; (adr r2, 800bfb0 <UART_SetConfig+0x1a8>)
 800bfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb0:	0800bfc9 	.word	0x0800bfc9
 800bfb4:	0800bfd1 	.word	0x0800bfd1
 800bfb8:	0800bfd9 	.word	0x0800bfd9
 800bfbc:	0800bfe1 	.word	0x0800bfe1
 800bfc0:	0800bfe9 	.word	0x0800bfe9
 800bfc4:	0800bff1 	.word	0x0800bff1
 800bfc8:	2300      	movs	r3, #0
 800bfca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfce:	e1ec      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800bfd0:	2304      	movs	r3, #4
 800bfd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfd6:	e1e8      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800bfd8:	2308      	movs	r3, #8
 800bfda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfde:	e1e4      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800bfe0:	2310      	movs	r3, #16
 800bfe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfe6:	e1e0      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800bfe8:	2320      	movs	r3, #32
 800bfea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfee:	e1dc      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800bff0:	2340      	movs	r3, #64	; 0x40
 800bff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bff6:	e1d8      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800bff8:	2380      	movs	r3, #128	; 0x80
 800bffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bffe:	e1d4      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4a51      	ldr	r2, [pc, #324]	; (800c14c <UART_SetConfig+0x344>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d130      	bne.n	800c06c <UART_SetConfig+0x264>
 800c00a:	4b4e      	ldr	r3, [pc, #312]	; (800c144 <UART_SetConfig+0x33c>)
 800c00c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c00e:	f003 0307 	and.w	r3, r3, #7
 800c012:	2b05      	cmp	r3, #5
 800c014:	d826      	bhi.n	800c064 <UART_SetConfig+0x25c>
 800c016:	a201      	add	r2, pc, #4	; (adr r2, 800c01c <UART_SetConfig+0x214>)
 800c018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c01c:	0800c035 	.word	0x0800c035
 800c020:	0800c03d 	.word	0x0800c03d
 800c024:	0800c045 	.word	0x0800c045
 800c028:	0800c04d 	.word	0x0800c04d
 800c02c:	0800c055 	.word	0x0800c055
 800c030:	0800c05d 	.word	0x0800c05d
 800c034:	2300      	movs	r3, #0
 800c036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c03a:	e1b6      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c03c:	2304      	movs	r3, #4
 800c03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c042:	e1b2      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c044:	2308      	movs	r3, #8
 800c046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c04a:	e1ae      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c04c:	2310      	movs	r3, #16
 800c04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c052:	e1aa      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c054:	2320      	movs	r3, #32
 800c056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c05a:	e1a6      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c05c:	2340      	movs	r3, #64	; 0x40
 800c05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c062:	e1a2      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c064:	2380      	movs	r3, #128	; 0x80
 800c066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c06a:	e19e      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a37      	ldr	r2, [pc, #220]	; (800c150 <UART_SetConfig+0x348>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d130      	bne.n	800c0d8 <UART_SetConfig+0x2d0>
 800c076:	4b33      	ldr	r3, [pc, #204]	; (800c144 <UART_SetConfig+0x33c>)
 800c078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c07a:	f003 0307 	and.w	r3, r3, #7
 800c07e:	2b05      	cmp	r3, #5
 800c080:	d826      	bhi.n	800c0d0 <UART_SetConfig+0x2c8>
 800c082:	a201      	add	r2, pc, #4	; (adr r2, 800c088 <UART_SetConfig+0x280>)
 800c084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c088:	0800c0a1 	.word	0x0800c0a1
 800c08c:	0800c0a9 	.word	0x0800c0a9
 800c090:	0800c0b1 	.word	0x0800c0b1
 800c094:	0800c0b9 	.word	0x0800c0b9
 800c098:	0800c0c1 	.word	0x0800c0c1
 800c09c:	0800c0c9 	.word	0x0800c0c9
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0a6:	e180      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c0a8:	2304      	movs	r3, #4
 800c0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0ae:	e17c      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c0b0:	2308      	movs	r3, #8
 800c0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0b6:	e178      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c0b8:	2310      	movs	r3, #16
 800c0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0be:	e174      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c0c0:	2320      	movs	r3, #32
 800c0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0c6:	e170      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c0c8:	2340      	movs	r3, #64	; 0x40
 800c0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0ce:	e16c      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c0d0:	2380      	movs	r3, #128	; 0x80
 800c0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0d6:	e168      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a1d      	ldr	r2, [pc, #116]	; (800c154 <UART_SetConfig+0x34c>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d142      	bne.n	800c168 <UART_SetConfig+0x360>
 800c0e2:	4b18      	ldr	r3, [pc, #96]	; (800c144 <UART_SetConfig+0x33c>)
 800c0e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0e6:	f003 0307 	and.w	r3, r3, #7
 800c0ea:	2b05      	cmp	r3, #5
 800c0ec:	d838      	bhi.n	800c160 <UART_SetConfig+0x358>
 800c0ee:	a201      	add	r2, pc, #4	; (adr r2, 800c0f4 <UART_SetConfig+0x2ec>)
 800c0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f4:	0800c10d 	.word	0x0800c10d
 800c0f8:	0800c115 	.word	0x0800c115
 800c0fc:	0800c11d 	.word	0x0800c11d
 800c100:	0800c125 	.word	0x0800c125
 800c104:	0800c12d 	.word	0x0800c12d
 800c108:	0800c159 	.word	0x0800c159
 800c10c:	2300      	movs	r3, #0
 800c10e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c112:	e14a      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c114:	2304      	movs	r3, #4
 800c116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c11a:	e146      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c11c:	2308      	movs	r3, #8
 800c11e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c122:	e142      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c124:	2310      	movs	r3, #16
 800c126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c12a:	e13e      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c12c:	2320      	movs	r3, #32
 800c12e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c132:	e13a      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c134:	cfff69f3 	.word	0xcfff69f3
 800c138:	58000c00 	.word	0x58000c00
 800c13c:	11fff4ff 	.word	0x11fff4ff
 800c140:	40011000 	.word	0x40011000
 800c144:	58024400 	.word	0x58024400
 800c148:	40004400 	.word	0x40004400
 800c14c:	40004800 	.word	0x40004800
 800c150:	40004c00 	.word	0x40004c00
 800c154:	40005000 	.word	0x40005000
 800c158:	2340      	movs	r3, #64	; 0x40
 800c15a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c15e:	e124      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c160:	2380      	movs	r3, #128	; 0x80
 800c162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c166:	e120      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4acc      	ldr	r2, [pc, #816]	; (800c4a0 <UART_SetConfig+0x698>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d176      	bne.n	800c260 <UART_SetConfig+0x458>
 800c172:	4bcc      	ldr	r3, [pc, #816]	; (800c4a4 <UART_SetConfig+0x69c>)
 800c174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c176:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c17a:	2b28      	cmp	r3, #40	; 0x28
 800c17c:	d86c      	bhi.n	800c258 <UART_SetConfig+0x450>
 800c17e:	a201      	add	r2, pc, #4	; (adr r2, 800c184 <UART_SetConfig+0x37c>)
 800c180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c184:	0800c229 	.word	0x0800c229
 800c188:	0800c259 	.word	0x0800c259
 800c18c:	0800c259 	.word	0x0800c259
 800c190:	0800c259 	.word	0x0800c259
 800c194:	0800c259 	.word	0x0800c259
 800c198:	0800c259 	.word	0x0800c259
 800c19c:	0800c259 	.word	0x0800c259
 800c1a0:	0800c259 	.word	0x0800c259
 800c1a4:	0800c231 	.word	0x0800c231
 800c1a8:	0800c259 	.word	0x0800c259
 800c1ac:	0800c259 	.word	0x0800c259
 800c1b0:	0800c259 	.word	0x0800c259
 800c1b4:	0800c259 	.word	0x0800c259
 800c1b8:	0800c259 	.word	0x0800c259
 800c1bc:	0800c259 	.word	0x0800c259
 800c1c0:	0800c259 	.word	0x0800c259
 800c1c4:	0800c239 	.word	0x0800c239
 800c1c8:	0800c259 	.word	0x0800c259
 800c1cc:	0800c259 	.word	0x0800c259
 800c1d0:	0800c259 	.word	0x0800c259
 800c1d4:	0800c259 	.word	0x0800c259
 800c1d8:	0800c259 	.word	0x0800c259
 800c1dc:	0800c259 	.word	0x0800c259
 800c1e0:	0800c259 	.word	0x0800c259
 800c1e4:	0800c241 	.word	0x0800c241
 800c1e8:	0800c259 	.word	0x0800c259
 800c1ec:	0800c259 	.word	0x0800c259
 800c1f0:	0800c259 	.word	0x0800c259
 800c1f4:	0800c259 	.word	0x0800c259
 800c1f8:	0800c259 	.word	0x0800c259
 800c1fc:	0800c259 	.word	0x0800c259
 800c200:	0800c259 	.word	0x0800c259
 800c204:	0800c249 	.word	0x0800c249
 800c208:	0800c259 	.word	0x0800c259
 800c20c:	0800c259 	.word	0x0800c259
 800c210:	0800c259 	.word	0x0800c259
 800c214:	0800c259 	.word	0x0800c259
 800c218:	0800c259 	.word	0x0800c259
 800c21c:	0800c259 	.word	0x0800c259
 800c220:	0800c259 	.word	0x0800c259
 800c224:	0800c251 	.word	0x0800c251
 800c228:	2301      	movs	r3, #1
 800c22a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c22e:	e0bc      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c230:	2304      	movs	r3, #4
 800c232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c236:	e0b8      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c238:	2308      	movs	r3, #8
 800c23a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c23e:	e0b4      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c240:	2310      	movs	r3, #16
 800c242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c246:	e0b0      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c248:	2320      	movs	r3, #32
 800c24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c24e:	e0ac      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c250:	2340      	movs	r3, #64	; 0x40
 800c252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c256:	e0a8      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c258:	2380      	movs	r3, #128	; 0x80
 800c25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c25e:	e0a4      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a90      	ldr	r2, [pc, #576]	; (800c4a8 <UART_SetConfig+0x6a0>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d130      	bne.n	800c2cc <UART_SetConfig+0x4c4>
 800c26a:	4b8e      	ldr	r3, [pc, #568]	; (800c4a4 <UART_SetConfig+0x69c>)
 800c26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c26e:	f003 0307 	and.w	r3, r3, #7
 800c272:	2b05      	cmp	r3, #5
 800c274:	d826      	bhi.n	800c2c4 <UART_SetConfig+0x4bc>
 800c276:	a201      	add	r2, pc, #4	; (adr r2, 800c27c <UART_SetConfig+0x474>)
 800c278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c27c:	0800c295 	.word	0x0800c295
 800c280:	0800c29d 	.word	0x0800c29d
 800c284:	0800c2a5 	.word	0x0800c2a5
 800c288:	0800c2ad 	.word	0x0800c2ad
 800c28c:	0800c2b5 	.word	0x0800c2b5
 800c290:	0800c2bd 	.word	0x0800c2bd
 800c294:	2300      	movs	r3, #0
 800c296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c29a:	e086      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c29c:	2304      	movs	r3, #4
 800c29e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2a2:	e082      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c2a4:	2308      	movs	r3, #8
 800c2a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2aa:	e07e      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c2ac:	2310      	movs	r3, #16
 800c2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2b2:	e07a      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c2b4:	2320      	movs	r3, #32
 800c2b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ba:	e076      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c2bc:	2340      	movs	r3, #64	; 0x40
 800c2be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2c2:	e072      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c2c4:	2380      	movs	r3, #128	; 0x80
 800c2c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ca:	e06e      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a76      	ldr	r2, [pc, #472]	; (800c4ac <UART_SetConfig+0x6a4>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d130      	bne.n	800c338 <UART_SetConfig+0x530>
 800c2d6:	4b73      	ldr	r3, [pc, #460]	; (800c4a4 <UART_SetConfig+0x69c>)
 800c2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2da:	f003 0307 	and.w	r3, r3, #7
 800c2de:	2b05      	cmp	r3, #5
 800c2e0:	d826      	bhi.n	800c330 <UART_SetConfig+0x528>
 800c2e2:	a201      	add	r2, pc, #4	; (adr r2, 800c2e8 <UART_SetConfig+0x4e0>)
 800c2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e8:	0800c301 	.word	0x0800c301
 800c2ec:	0800c309 	.word	0x0800c309
 800c2f0:	0800c311 	.word	0x0800c311
 800c2f4:	0800c319 	.word	0x0800c319
 800c2f8:	0800c321 	.word	0x0800c321
 800c2fc:	0800c329 	.word	0x0800c329
 800c300:	2300      	movs	r3, #0
 800c302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c306:	e050      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c308:	2304      	movs	r3, #4
 800c30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c30e:	e04c      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c310:	2308      	movs	r3, #8
 800c312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c316:	e048      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c318:	2310      	movs	r3, #16
 800c31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c31e:	e044      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c320:	2320      	movs	r3, #32
 800c322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c326:	e040      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c328:	2340      	movs	r3, #64	; 0x40
 800c32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c32e:	e03c      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c330:	2380      	movs	r3, #128	; 0x80
 800c332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c336:	e038      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a5c      	ldr	r2, [pc, #368]	; (800c4b0 <UART_SetConfig+0x6a8>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d130      	bne.n	800c3a4 <UART_SetConfig+0x59c>
 800c342:	4b58      	ldr	r3, [pc, #352]	; (800c4a4 <UART_SetConfig+0x69c>)
 800c344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c346:	f003 0307 	and.w	r3, r3, #7
 800c34a:	2b05      	cmp	r3, #5
 800c34c:	d826      	bhi.n	800c39c <UART_SetConfig+0x594>
 800c34e:	a201      	add	r2, pc, #4	; (adr r2, 800c354 <UART_SetConfig+0x54c>)
 800c350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c354:	0800c36d 	.word	0x0800c36d
 800c358:	0800c375 	.word	0x0800c375
 800c35c:	0800c37d 	.word	0x0800c37d
 800c360:	0800c385 	.word	0x0800c385
 800c364:	0800c38d 	.word	0x0800c38d
 800c368:	0800c395 	.word	0x0800c395
 800c36c:	2302      	movs	r3, #2
 800c36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c372:	e01a      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c374:	2304      	movs	r3, #4
 800c376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c37a:	e016      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c37c:	2308      	movs	r3, #8
 800c37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c382:	e012      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c384:	2310      	movs	r3, #16
 800c386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c38a:	e00e      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c38c:	2320      	movs	r3, #32
 800c38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c392:	e00a      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c394:	2340      	movs	r3, #64	; 0x40
 800c396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c39a:	e006      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c39c:	2380      	movs	r3, #128	; 0x80
 800c39e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3a2:	e002      	b.n	800c3aa <UART_SetConfig+0x5a2>
 800c3a4:	2380      	movs	r3, #128	; 0x80
 800c3a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a40      	ldr	r2, [pc, #256]	; (800c4b0 <UART_SetConfig+0x6a8>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	f040 80ef 	bne.w	800c594 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c3b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c3ba:	2b20      	cmp	r3, #32
 800c3bc:	dc46      	bgt.n	800c44c <UART_SetConfig+0x644>
 800c3be:	2b02      	cmp	r3, #2
 800c3c0:	f2c0 8081 	blt.w	800c4c6 <UART_SetConfig+0x6be>
 800c3c4:	3b02      	subs	r3, #2
 800c3c6:	2b1e      	cmp	r3, #30
 800c3c8:	d87d      	bhi.n	800c4c6 <UART_SetConfig+0x6be>
 800c3ca:	a201      	add	r2, pc, #4	; (adr r2, 800c3d0 <UART_SetConfig+0x5c8>)
 800c3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d0:	0800c453 	.word	0x0800c453
 800c3d4:	0800c4c7 	.word	0x0800c4c7
 800c3d8:	0800c45b 	.word	0x0800c45b
 800c3dc:	0800c4c7 	.word	0x0800c4c7
 800c3e0:	0800c4c7 	.word	0x0800c4c7
 800c3e4:	0800c4c7 	.word	0x0800c4c7
 800c3e8:	0800c46b 	.word	0x0800c46b
 800c3ec:	0800c4c7 	.word	0x0800c4c7
 800c3f0:	0800c4c7 	.word	0x0800c4c7
 800c3f4:	0800c4c7 	.word	0x0800c4c7
 800c3f8:	0800c4c7 	.word	0x0800c4c7
 800c3fc:	0800c4c7 	.word	0x0800c4c7
 800c400:	0800c4c7 	.word	0x0800c4c7
 800c404:	0800c4c7 	.word	0x0800c4c7
 800c408:	0800c47b 	.word	0x0800c47b
 800c40c:	0800c4c7 	.word	0x0800c4c7
 800c410:	0800c4c7 	.word	0x0800c4c7
 800c414:	0800c4c7 	.word	0x0800c4c7
 800c418:	0800c4c7 	.word	0x0800c4c7
 800c41c:	0800c4c7 	.word	0x0800c4c7
 800c420:	0800c4c7 	.word	0x0800c4c7
 800c424:	0800c4c7 	.word	0x0800c4c7
 800c428:	0800c4c7 	.word	0x0800c4c7
 800c42c:	0800c4c7 	.word	0x0800c4c7
 800c430:	0800c4c7 	.word	0x0800c4c7
 800c434:	0800c4c7 	.word	0x0800c4c7
 800c438:	0800c4c7 	.word	0x0800c4c7
 800c43c:	0800c4c7 	.word	0x0800c4c7
 800c440:	0800c4c7 	.word	0x0800c4c7
 800c444:	0800c4c7 	.word	0x0800c4c7
 800c448:	0800c4b9 	.word	0x0800c4b9
 800c44c:	2b40      	cmp	r3, #64	; 0x40
 800c44e:	d036      	beq.n	800c4be <UART_SetConfig+0x6b6>
 800c450:	e039      	b.n	800c4c6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c452:	f7fd f829 	bl	80094a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c456:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c458:	e03b      	b.n	800c4d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c45a:	f107 0314 	add.w	r3, r7, #20
 800c45e:	4618      	mov	r0, r3
 800c460:	f7fd f838 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c464:	69bb      	ldr	r3, [r7, #24]
 800c466:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c468:	e033      	b.n	800c4d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c46a:	f107 0308 	add.w	r3, r7, #8
 800c46e:	4618      	mov	r0, r3
 800c470:	f7fd f984 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c478:	e02b      	b.n	800c4d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c47a:	4b0a      	ldr	r3, [pc, #40]	; (800c4a4 <UART_SetConfig+0x69c>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f003 0320 	and.w	r3, r3, #32
 800c482:	2b00      	cmp	r3, #0
 800c484:	d009      	beq.n	800c49a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c486:	4b07      	ldr	r3, [pc, #28]	; (800c4a4 <UART_SetConfig+0x69c>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	08db      	lsrs	r3, r3, #3
 800c48c:	f003 0303 	and.w	r3, r3, #3
 800c490:	4a08      	ldr	r2, [pc, #32]	; (800c4b4 <UART_SetConfig+0x6ac>)
 800c492:	fa22 f303 	lsr.w	r3, r2, r3
 800c496:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c498:	e01b      	b.n	800c4d2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800c49a:	4b06      	ldr	r3, [pc, #24]	; (800c4b4 <UART_SetConfig+0x6ac>)
 800c49c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c49e:	e018      	b.n	800c4d2 <UART_SetConfig+0x6ca>
 800c4a0:	40011400 	.word	0x40011400
 800c4a4:	58024400 	.word	0x58024400
 800c4a8:	40007800 	.word	0x40007800
 800c4ac:	40007c00 	.word	0x40007c00
 800c4b0:	58000c00 	.word	0x58000c00
 800c4b4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c4b8:	4bc4      	ldr	r3, [pc, #784]	; (800c7cc <UART_SetConfig+0x9c4>)
 800c4ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c4bc:	e009      	b.n	800c4d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c4c4:	e005      	b.n	800c4d2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c4d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f000 81da 	beq.w	800c88e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4de:	4abc      	ldr	r2, [pc, #752]	; (800c7d0 <UART_SetConfig+0x9c8>)
 800c4e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4ec:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	685a      	ldr	r2, [r3, #4]
 800c4f2:	4613      	mov	r3, r2
 800c4f4:	005b      	lsls	r3, r3, #1
 800c4f6:	4413      	add	r3, r2
 800c4f8:	6a3a      	ldr	r2, [r7, #32]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d305      	bcc.n	800c50a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c504:	6a3a      	ldr	r2, [r7, #32]
 800c506:	429a      	cmp	r2, r3
 800c508:	d903      	bls.n	800c512 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800c50a:	2301      	movs	r3, #1
 800c50c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c510:	e1bd      	b.n	800c88e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c514:	4618      	mov	r0, r3
 800c516:	f04f 0100 	mov.w	r1, #0
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c51e:	4aac      	ldr	r2, [pc, #688]	; (800c7d0 <UART_SetConfig+0x9c8>)
 800c520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c524:	b29a      	uxth	r2, r3
 800c526:	f04f 0300 	mov.w	r3, #0
 800c52a:	f7f3 fed5 	bl	80002d8 <__aeabi_uldivmod>
 800c52e:	4602      	mov	r2, r0
 800c530:	460b      	mov	r3, r1
 800c532:	4610      	mov	r0, r2
 800c534:	4619      	mov	r1, r3
 800c536:	f04f 0200 	mov.w	r2, #0
 800c53a:	f04f 0300 	mov.w	r3, #0
 800c53e:	020b      	lsls	r3, r1, #8
 800c540:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c544:	0202      	lsls	r2, r0, #8
 800c546:	6879      	ldr	r1, [r7, #4]
 800c548:	6849      	ldr	r1, [r1, #4]
 800c54a:	0849      	lsrs	r1, r1, #1
 800c54c:	4608      	mov	r0, r1
 800c54e:	f04f 0100 	mov.w	r1, #0
 800c552:	1814      	adds	r4, r2, r0
 800c554:	eb43 0501 	adc.w	r5, r3, r1
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	461a      	mov	r2, r3
 800c55e:	f04f 0300 	mov.w	r3, #0
 800c562:	4620      	mov	r0, r4
 800c564:	4629      	mov	r1, r5
 800c566:	f7f3 feb7 	bl	80002d8 <__aeabi_uldivmod>
 800c56a:	4602      	mov	r2, r0
 800c56c:	460b      	mov	r3, r1
 800c56e:	4613      	mov	r3, r2
 800c570:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c574:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c578:	d308      	bcc.n	800c58c <UART_SetConfig+0x784>
 800c57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c580:	d204      	bcs.n	800c58c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c588:	60da      	str	r2, [r3, #12]
 800c58a:	e180      	b.n	800c88e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800c58c:	2301      	movs	r3, #1
 800c58e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c592:	e17c      	b.n	800c88e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	69db      	ldr	r3, [r3, #28]
 800c598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c59c:	f040 80be 	bne.w	800c71c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800c5a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c5a4:	2b20      	cmp	r3, #32
 800c5a6:	dc49      	bgt.n	800c63c <UART_SetConfig+0x834>
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	db7c      	blt.n	800c6a6 <UART_SetConfig+0x89e>
 800c5ac:	2b20      	cmp	r3, #32
 800c5ae:	d87a      	bhi.n	800c6a6 <UART_SetConfig+0x89e>
 800c5b0:	a201      	add	r2, pc, #4	; (adr r2, 800c5b8 <UART_SetConfig+0x7b0>)
 800c5b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b6:	bf00      	nop
 800c5b8:	0800c643 	.word	0x0800c643
 800c5bc:	0800c64b 	.word	0x0800c64b
 800c5c0:	0800c6a7 	.word	0x0800c6a7
 800c5c4:	0800c6a7 	.word	0x0800c6a7
 800c5c8:	0800c653 	.word	0x0800c653
 800c5cc:	0800c6a7 	.word	0x0800c6a7
 800c5d0:	0800c6a7 	.word	0x0800c6a7
 800c5d4:	0800c6a7 	.word	0x0800c6a7
 800c5d8:	0800c663 	.word	0x0800c663
 800c5dc:	0800c6a7 	.word	0x0800c6a7
 800c5e0:	0800c6a7 	.word	0x0800c6a7
 800c5e4:	0800c6a7 	.word	0x0800c6a7
 800c5e8:	0800c6a7 	.word	0x0800c6a7
 800c5ec:	0800c6a7 	.word	0x0800c6a7
 800c5f0:	0800c6a7 	.word	0x0800c6a7
 800c5f4:	0800c6a7 	.word	0x0800c6a7
 800c5f8:	0800c673 	.word	0x0800c673
 800c5fc:	0800c6a7 	.word	0x0800c6a7
 800c600:	0800c6a7 	.word	0x0800c6a7
 800c604:	0800c6a7 	.word	0x0800c6a7
 800c608:	0800c6a7 	.word	0x0800c6a7
 800c60c:	0800c6a7 	.word	0x0800c6a7
 800c610:	0800c6a7 	.word	0x0800c6a7
 800c614:	0800c6a7 	.word	0x0800c6a7
 800c618:	0800c6a7 	.word	0x0800c6a7
 800c61c:	0800c6a7 	.word	0x0800c6a7
 800c620:	0800c6a7 	.word	0x0800c6a7
 800c624:	0800c6a7 	.word	0x0800c6a7
 800c628:	0800c6a7 	.word	0x0800c6a7
 800c62c:	0800c6a7 	.word	0x0800c6a7
 800c630:	0800c6a7 	.word	0x0800c6a7
 800c634:	0800c6a7 	.word	0x0800c6a7
 800c638:	0800c699 	.word	0x0800c699
 800c63c:	2b40      	cmp	r3, #64	; 0x40
 800c63e:	d02e      	beq.n	800c69e <UART_SetConfig+0x896>
 800c640:	e031      	b.n	800c6a6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c642:	f7fb faf3 	bl	8007c2c <HAL_RCC_GetPCLK1Freq>
 800c646:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c648:	e033      	b.n	800c6b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c64a:	f7fb fb05 	bl	8007c58 <HAL_RCC_GetPCLK2Freq>
 800c64e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c650:	e02f      	b.n	800c6b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c652:	f107 0314 	add.w	r3, r7, #20
 800c656:	4618      	mov	r0, r3
 800c658:	f7fc ff3c 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c660:	e027      	b.n	800c6b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c662:	f107 0308 	add.w	r3, r7, #8
 800c666:	4618      	mov	r0, r3
 800c668:	f7fd f888 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c670:	e01f      	b.n	800c6b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c672:	4b58      	ldr	r3, [pc, #352]	; (800c7d4 <UART_SetConfig+0x9cc>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f003 0320 	and.w	r3, r3, #32
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d009      	beq.n	800c692 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c67e:	4b55      	ldr	r3, [pc, #340]	; (800c7d4 <UART_SetConfig+0x9cc>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	08db      	lsrs	r3, r3, #3
 800c684:	f003 0303 	and.w	r3, r3, #3
 800c688:	4a53      	ldr	r2, [pc, #332]	; (800c7d8 <UART_SetConfig+0x9d0>)
 800c68a:	fa22 f303 	lsr.w	r3, r2, r3
 800c68e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c690:	e00f      	b.n	800c6b2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c692:	4b51      	ldr	r3, [pc, #324]	; (800c7d8 <UART_SetConfig+0x9d0>)
 800c694:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c696:	e00c      	b.n	800c6b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c698:	4b4c      	ldr	r3, [pc, #304]	; (800c7cc <UART_SetConfig+0x9c4>)
 800c69a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c69c:	e009      	b.n	800c6b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c69e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c6a4:	e005      	b.n	800c6b2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c6b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f000 80ea 	beq.w	800c88e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6be:	4a44      	ldr	r2, [pc, #272]	; (800c7d0 <UART_SetConfig+0x9c8>)
 800c6c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6cc:	005a      	lsls	r2, r3, #1
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	085b      	lsrs	r3, r3, #1
 800c6d4:	441a      	add	r2, r3
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6de:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e2:	2b0f      	cmp	r3, #15
 800c6e4:	d916      	bls.n	800c714 <UART_SetConfig+0x90c>
 800c6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6ec:	d212      	bcs.n	800c714 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	f023 030f 	bic.w	r3, r3, #15
 800c6f6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fa:	085b      	lsrs	r3, r3, #1
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	f003 0307 	and.w	r3, r3, #7
 800c702:	b29a      	uxth	r2, r3
 800c704:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c706:	4313      	orrs	r3, r2
 800c708:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c710:	60da      	str	r2, [r3, #12]
 800c712:	e0bc      	b.n	800c88e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c714:	2301      	movs	r3, #1
 800c716:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c71a:	e0b8      	b.n	800c88e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c71c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c720:	2b20      	cmp	r3, #32
 800c722:	dc4b      	bgt.n	800c7bc <UART_SetConfig+0x9b4>
 800c724:	2b00      	cmp	r3, #0
 800c726:	f2c0 8087 	blt.w	800c838 <UART_SetConfig+0xa30>
 800c72a:	2b20      	cmp	r3, #32
 800c72c:	f200 8084 	bhi.w	800c838 <UART_SetConfig+0xa30>
 800c730:	a201      	add	r2, pc, #4	; (adr r2, 800c738 <UART_SetConfig+0x930>)
 800c732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c736:	bf00      	nop
 800c738:	0800c7c3 	.word	0x0800c7c3
 800c73c:	0800c7dd 	.word	0x0800c7dd
 800c740:	0800c839 	.word	0x0800c839
 800c744:	0800c839 	.word	0x0800c839
 800c748:	0800c7e5 	.word	0x0800c7e5
 800c74c:	0800c839 	.word	0x0800c839
 800c750:	0800c839 	.word	0x0800c839
 800c754:	0800c839 	.word	0x0800c839
 800c758:	0800c7f5 	.word	0x0800c7f5
 800c75c:	0800c839 	.word	0x0800c839
 800c760:	0800c839 	.word	0x0800c839
 800c764:	0800c839 	.word	0x0800c839
 800c768:	0800c839 	.word	0x0800c839
 800c76c:	0800c839 	.word	0x0800c839
 800c770:	0800c839 	.word	0x0800c839
 800c774:	0800c839 	.word	0x0800c839
 800c778:	0800c805 	.word	0x0800c805
 800c77c:	0800c839 	.word	0x0800c839
 800c780:	0800c839 	.word	0x0800c839
 800c784:	0800c839 	.word	0x0800c839
 800c788:	0800c839 	.word	0x0800c839
 800c78c:	0800c839 	.word	0x0800c839
 800c790:	0800c839 	.word	0x0800c839
 800c794:	0800c839 	.word	0x0800c839
 800c798:	0800c839 	.word	0x0800c839
 800c79c:	0800c839 	.word	0x0800c839
 800c7a0:	0800c839 	.word	0x0800c839
 800c7a4:	0800c839 	.word	0x0800c839
 800c7a8:	0800c839 	.word	0x0800c839
 800c7ac:	0800c839 	.word	0x0800c839
 800c7b0:	0800c839 	.word	0x0800c839
 800c7b4:	0800c839 	.word	0x0800c839
 800c7b8:	0800c82b 	.word	0x0800c82b
 800c7bc:	2b40      	cmp	r3, #64	; 0x40
 800c7be:	d037      	beq.n	800c830 <UART_SetConfig+0xa28>
 800c7c0:	e03a      	b.n	800c838 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7c2:	f7fb fa33 	bl	8007c2c <HAL_RCC_GetPCLK1Freq>
 800c7c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c7c8:	e03c      	b.n	800c844 <UART_SetConfig+0xa3c>
 800c7ca:	bf00      	nop
 800c7cc:	003d0900 	.word	0x003d0900
 800c7d0:	0800d4ac 	.word	0x0800d4ac
 800c7d4:	58024400 	.word	0x58024400
 800c7d8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c7dc:	f7fb fa3c 	bl	8007c58 <HAL_RCC_GetPCLK2Freq>
 800c7e0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c7e2:	e02f      	b.n	800c844 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7e4:	f107 0314 	add.w	r3, r7, #20
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7fc fe73 	bl	80094d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c7ee:	69bb      	ldr	r3, [r7, #24]
 800c7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c7f2:	e027      	b.n	800c844 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7f4:	f107 0308 	add.w	r3, r7, #8
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7fc ffbf 	bl	800977c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c802:	e01f      	b.n	800c844 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c804:	4b2c      	ldr	r3, [pc, #176]	; (800c8b8 <UART_SetConfig+0xab0>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f003 0320 	and.w	r3, r3, #32
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d009      	beq.n	800c824 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c810:	4b29      	ldr	r3, [pc, #164]	; (800c8b8 <UART_SetConfig+0xab0>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	08db      	lsrs	r3, r3, #3
 800c816:	f003 0303 	and.w	r3, r3, #3
 800c81a:	4a28      	ldr	r2, [pc, #160]	; (800c8bc <UART_SetConfig+0xab4>)
 800c81c:	fa22 f303 	lsr.w	r3, r2, r3
 800c820:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c822:	e00f      	b.n	800c844 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c824:	4b25      	ldr	r3, [pc, #148]	; (800c8bc <UART_SetConfig+0xab4>)
 800c826:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c828:	e00c      	b.n	800c844 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c82a:	4b25      	ldr	r3, [pc, #148]	; (800c8c0 <UART_SetConfig+0xab8>)
 800c82c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c82e:	e009      	b.n	800c844 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c830:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c834:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c836:	e005      	b.n	800c844 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c838:	2300      	movs	r3, #0
 800c83a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c83c:	2301      	movs	r3, #1
 800c83e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c842:	bf00      	nop
    }

    if (pclk != 0U)
 800c844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c846:	2b00      	cmp	r3, #0
 800c848:	d021      	beq.n	800c88e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84e:	4a1d      	ldr	r2, [pc, #116]	; (800c8c4 <UART_SetConfig+0xabc>)
 800c850:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c854:	461a      	mov	r2, r3
 800c856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c858:	fbb3 f2f2 	udiv	r2, r3, r2
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	085b      	lsrs	r3, r3, #1
 800c862:	441a      	add	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	fbb2 f3f3 	udiv	r3, r2, r3
 800c86c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c870:	2b0f      	cmp	r3, #15
 800c872:	d909      	bls.n	800c888 <UART_SetConfig+0xa80>
 800c874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c87a:	d205      	bcs.n	800c888 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87e:	b29a      	uxth	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	60da      	str	r2, [r3, #12]
 800c886:	e002      	b.n	800c88e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c888:	2301      	movs	r3, #1
 800c88a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2201      	movs	r2, #1
 800c892:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2201      	movs	r2, #1
 800c89a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c8aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3738      	adds	r7, #56	; 0x38
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bdb0      	pop	{r4, r5, r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	58024400 	.word	0x58024400
 800c8bc:	03d09000 	.word	0x03d09000
 800c8c0:	003d0900 	.word	0x003d0900
 800c8c4:	0800d4ac 	.word	0x0800d4ac

0800c8c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d4:	f003 0301 	and.w	r3, r3, #1
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d00a      	beq.n	800c8f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	430a      	orrs	r2, r1
 800c8f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f6:	f003 0302 	and.w	r3, r3, #2
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00a      	beq.n	800c914 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	430a      	orrs	r2, r1
 800c912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c918:	f003 0304 	and.w	r3, r3, #4
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d00a      	beq.n	800c936 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	430a      	orrs	r2, r1
 800c934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c93a:	f003 0308 	and.w	r3, r3, #8
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00a      	beq.n	800c958 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	430a      	orrs	r2, r1
 800c956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c95c:	f003 0310 	and.w	r3, r3, #16
 800c960:	2b00      	cmp	r3, #0
 800c962:	d00a      	beq.n	800c97a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	430a      	orrs	r2, r1
 800c978:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c97e:	f003 0320 	and.w	r3, r3, #32
 800c982:	2b00      	cmp	r3, #0
 800c984:	d00a      	beq.n	800c99c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	430a      	orrs	r2, r1
 800c99a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d01a      	beq.n	800c9de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	430a      	orrs	r2, r1
 800c9bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9c6:	d10a      	bne.n	800c9de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	430a      	orrs	r2, r1
 800c9dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d00a      	beq.n	800ca00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	430a      	orrs	r2, r1
 800c9fe:	605a      	str	r2, [r3, #4]
  }
}
 800ca00:	bf00      	nop
 800ca02:	370c      	adds	r7, #12
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b086      	sub	sp, #24
 800ca10:	af02      	add	r7, sp, #8
 800ca12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ca1c:	f7f6 f8b8 	bl	8002b90 <HAL_GetTick>
 800ca20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f003 0308 	and.w	r3, r3, #8
 800ca2c:	2b08      	cmp	r3, #8
 800ca2e:	d10e      	bne.n	800ca4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca34:	9300      	str	r3, [sp, #0]
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 f82f 	bl	800caa2 <UART_WaitOnFlagUntilTimeout>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d001      	beq.n	800ca4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca4a:	2303      	movs	r3, #3
 800ca4c:	e025      	b.n	800ca9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f003 0304 	and.w	r3, r3, #4
 800ca58:	2b04      	cmp	r3, #4
 800ca5a:	d10e      	bne.n	800ca7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca60:	9300      	str	r3, [sp, #0]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 f819 	bl	800caa2 <UART_WaitOnFlagUntilTimeout>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d001      	beq.n	800ca7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca76:	2303      	movs	r3, #3
 800ca78:	e00f      	b.n	800ca9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2220      	movs	r2, #32
 800ca7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2220      	movs	r2, #32
 800ca86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b09c      	sub	sp, #112	; 0x70
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	60f8      	str	r0, [r7, #12]
 800caaa:	60b9      	str	r1, [r7, #8]
 800caac:	603b      	str	r3, [r7, #0]
 800caae:	4613      	mov	r3, r2
 800cab0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cab2:	e0a9      	b.n	800cc08 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caba:	f000 80a5 	beq.w	800cc08 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cabe:	f7f6 f867 	bl	8002b90 <HAL_GetTick>
 800cac2:	4602      	mov	r2, r0
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	1ad3      	subs	r3, r2, r3
 800cac8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800caca:	429a      	cmp	r2, r3
 800cacc:	d302      	bcc.n	800cad4 <UART_WaitOnFlagUntilTimeout+0x32>
 800cace:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d140      	bne.n	800cb56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cadc:	e853 3f00 	ldrex	r3, [r3]
 800cae0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cae4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cae8:	667b      	str	r3, [r7, #100]	; 0x64
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	461a      	mov	r2, r3
 800caf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800caf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800caf4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800caf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cafa:	e841 2300 	strex	r3, r2, [r1]
 800cafe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cb00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d1e6      	bne.n	800cad4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	3308      	adds	r3, #8
 800cb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb10:	e853 3f00 	ldrex	r3, [r3]
 800cb14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb18:	f023 0301 	bic.w	r3, r3, #1
 800cb1c:	663b      	str	r3, [r7, #96]	; 0x60
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	3308      	adds	r3, #8
 800cb24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb26:	64ba      	str	r2, [r7, #72]	; 0x48
 800cb28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb2e:	e841 2300 	strex	r3, r2, [r1]
 800cb32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cb34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d1e5      	bne.n	800cb06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2220      	movs	r2, #32
 800cb3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2220      	movs	r2, #32
 800cb46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cb52:	2303      	movs	r3, #3
 800cb54:	e069      	b.n	800cc2a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f003 0304 	and.w	r3, r3, #4
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d051      	beq.n	800cc08 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	69db      	ldr	r3, [r3, #28]
 800cb6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb72:	d149      	bne.n	800cc08 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb86:	e853 3f00 	ldrex	r3, [r3]
 800cb8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cb92:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	461a      	mov	r2, r3
 800cb9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb9c:	637b      	str	r3, [r7, #52]	; 0x34
 800cb9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cba4:	e841 2300 	strex	r3, r2, [r1]
 800cba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d1e6      	bne.n	800cb7e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	3308      	adds	r3, #8
 800cbb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	e853 3f00 	ldrex	r3, [r3]
 800cbbe:	613b      	str	r3, [r7, #16]
   return(result);
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	f023 0301 	bic.w	r3, r3, #1
 800cbc6:	66bb      	str	r3, [r7, #104]	; 0x68
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	3308      	adds	r3, #8
 800cbce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cbd0:	623a      	str	r2, [r7, #32]
 800cbd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbd4:	69f9      	ldr	r1, [r7, #28]
 800cbd6:	6a3a      	ldr	r2, [r7, #32]
 800cbd8:	e841 2300 	strex	r3, r2, [r1]
 800cbdc:	61bb      	str	r3, [r7, #24]
   return(result);
 800cbde:	69bb      	ldr	r3, [r7, #24]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d1e5      	bne.n	800cbb0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2220      	movs	r2, #32
 800cbe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	2220      	movs	r2, #32
 800cbf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2220      	movs	r2, #32
 800cbf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cc04:	2303      	movs	r3, #3
 800cc06:	e010      	b.n	800cc2a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	69da      	ldr	r2, [r3, #28]
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	4013      	ands	r3, r2
 800cc12:	68ba      	ldr	r2, [r7, #8]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	bf0c      	ite	eq
 800cc18:	2301      	moveq	r3, #1
 800cc1a:	2300      	movne	r3, #0
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	461a      	mov	r2, r3
 800cc20:	79fb      	ldrb	r3, [r7, #7]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	f43f af46 	beq.w	800cab4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc28:	2300      	movs	r3, #0
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3770      	adds	r7, #112	; 0x70
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
	...

0800cc34 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b096      	sub	sp, #88	; 0x58
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	4613      	mov	r3, r2
 800cc40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	68ba      	ldr	r2, [r7, #8]
 800cc46:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	88fa      	ldrh	r2, [r7, #6]
 800cc4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2200      	movs	r2, #0
 800cc54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2222      	movs	r2, #34	; 0x22
 800cc5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d02c      	beq.n	800ccc2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc6c:	4a42      	ldr	r2, [pc, #264]	; (800cd78 <UART_Start_Receive_DMA+0x144>)
 800cc6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc74:	4a41      	ldr	r2, [pc, #260]	; (800cd7c <UART_Start_Receive_DMA+0x148>)
 800cc76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc7c:	4a40      	ldr	r2, [pc, #256]	; (800cd80 <UART_Start_Receive_DMA+0x14c>)
 800cc7e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc84:	2200      	movs	r2, #0
 800cc86:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	3324      	adds	r3, #36	; 0x24
 800cc92:	4619      	mov	r1, r3
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc98:	461a      	mov	r2, r3
 800cc9a:	88fb      	ldrh	r3, [r7, #6]
 800cc9c:	f7f8 f896 	bl	8004dcc <HAL_DMA_Start_IT>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d00d      	beq.n	800ccc2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2210      	movs	r2, #16
 800ccaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2220      	movs	r2, #32
 800ccba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	e055      	b.n	800cd6e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	691b      	ldr	r3, [r3, #16]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d018      	beq.n	800cd04 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccda:	e853 3f00 	ldrex	r3, [r3]
 800ccde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cce6:	657b      	str	r3, [r7, #84]	; 0x54
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	461a      	mov	r2, r3
 800ccee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccf0:	64bb      	str	r3, [r7, #72]	; 0x48
 800ccf2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ccf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccf8:	e841 2300 	strex	r3, r2, [r1]
 800ccfc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ccfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d1e6      	bne.n	800ccd2 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	3308      	adds	r3, #8
 800cd0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0e:	e853 3f00 	ldrex	r3, [r3]
 800cd12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd16:	f043 0301 	orr.w	r3, r3, #1
 800cd1a:	653b      	str	r3, [r7, #80]	; 0x50
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	3308      	adds	r3, #8
 800cd22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd24:	637a      	str	r2, [r7, #52]	; 0x34
 800cd26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd2c:	e841 2300 	strex	r3, r2, [r1]
 800cd30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d1e5      	bne.n	800cd04 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	3308      	adds	r3, #8
 800cd3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	e853 3f00 	ldrex	r3, [r3]
 800cd46:	613b      	str	r3, [r7, #16]
   return(result);
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	3308      	adds	r3, #8
 800cd56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd58:	623a      	str	r2, [r7, #32]
 800cd5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd5c:	69f9      	ldr	r1, [r7, #28]
 800cd5e:	6a3a      	ldr	r2, [r7, #32]
 800cd60:	e841 2300 	strex	r3, r2, [r1]
 800cd64:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd66:	69bb      	ldr	r3, [r7, #24]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d1e5      	bne.n	800cd38 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800cd6c:	2300      	movs	r3, #0
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3758      	adds	r7, #88	; 0x58
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	0800ced5 	.word	0x0800ced5
 800cd7c:	0800cff7 	.word	0x0800cff7
 800cd80:	0800d02f 	.word	0x0800d02f

0800cd84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b08f      	sub	sp, #60	; 0x3c
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd92:	6a3b      	ldr	r3, [r7, #32]
 800cd94:	e853 3f00 	ldrex	r3, [r3]
 800cd98:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd9a:	69fb      	ldr	r3, [r7, #28]
 800cd9c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cda0:	637b      	str	r3, [r7, #52]	; 0x34
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	461a      	mov	r2, r3
 800cda8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cdb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdb2:	e841 2300 	strex	r3, r2, [r1]
 800cdb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d1e6      	bne.n	800cd8c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	3308      	adds	r3, #8
 800cdc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	e853 3f00 	ldrex	r3, [r3]
 800cdcc:	60bb      	str	r3, [r7, #8]
   return(result);
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cdd4:	633b      	str	r3, [r7, #48]	; 0x30
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	3308      	adds	r3, #8
 800cddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdde:	61ba      	str	r2, [r7, #24]
 800cde0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cde2:	6979      	ldr	r1, [r7, #20]
 800cde4:	69ba      	ldr	r2, [r7, #24]
 800cde6:	e841 2300 	strex	r3, r2, [r1]
 800cdea:	613b      	str	r3, [r7, #16]
   return(result);
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d1e5      	bne.n	800cdbe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2220      	movs	r2, #32
 800cdf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800cdfa:	bf00      	nop
 800cdfc:	373c      	adds	r7, #60	; 0x3c
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr
	...

0800ce08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b095      	sub	sp, #84	; 0x54
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce18:	e853 3f00 	ldrex	r3, [r3]
 800ce1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce24:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce2e:	643b      	str	r3, [r7, #64]	; 0x40
 800ce30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ce34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce36:	e841 2300 	strex	r3, r2, [r1]
 800ce3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ce3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d1e6      	bne.n	800ce10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	3308      	adds	r3, #8
 800ce48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce4a:	6a3b      	ldr	r3, [r7, #32]
 800ce4c:	e853 3f00 	ldrex	r3, [r3]
 800ce50:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce52:	69fa      	ldr	r2, [r7, #28]
 800ce54:	4b1e      	ldr	r3, [pc, #120]	; (800ced0 <UART_EndRxTransfer+0xc8>)
 800ce56:	4013      	ands	r3, r2
 800ce58:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	3308      	adds	r3, #8
 800ce60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce62:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ce64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce6a:	e841 2300 	strex	r3, r2, [r1]
 800ce6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ce70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d1e5      	bne.n	800ce42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d118      	bne.n	800ceb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	e853 3f00 	ldrex	r3, [r3]
 800ce8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	f023 0310 	bic.w	r3, r3, #16
 800ce92:	647b      	str	r3, [r7, #68]	; 0x44
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	461a      	mov	r2, r3
 800ce9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce9c:	61bb      	str	r3, [r7, #24]
 800ce9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea0:	6979      	ldr	r1, [r7, #20]
 800cea2:	69ba      	ldr	r2, [r7, #24]
 800cea4:	e841 2300 	strex	r3, r2, [r1]
 800cea8:	613b      	str	r3, [r7, #16]
   return(result);
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d1e6      	bne.n	800ce7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2220      	movs	r2, #32
 800ceb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2200      	movs	r2, #0
 800cebc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cec4:	bf00      	nop
 800cec6:	3754      	adds	r7, #84	; 0x54
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr
 800ced0:	effffffe 	.word	0xeffffffe

0800ced4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b09c      	sub	sp, #112	; 0x70
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	69db      	ldr	r3, [r3, #28]
 800cee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ceea:	d071      	beq.n	800cfd0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ceec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ceee:	2200      	movs	r2, #0
 800cef0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cefa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cefc:	e853 3f00 	ldrex	r3, [r3]
 800cf00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cf02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf08:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	461a      	mov	r2, r3
 800cf10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf12:	65bb      	str	r3, [r7, #88]	; 0x58
 800cf14:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cf18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf1a:	e841 2300 	strex	r3, r2, [r1]
 800cf1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cf20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1e6      	bne.n	800cef4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	3308      	adds	r3, #8
 800cf2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf30:	e853 3f00 	ldrex	r3, [r3]
 800cf34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cf36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf38:	f023 0301 	bic.w	r3, r3, #1
 800cf3c:	667b      	str	r3, [r7, #100]	; 0x64
 800cf3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	3308      	adds	r3, #8
 800cf44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cf46:	647a      	str	r2, [r7, #68]	; 0x44
 800cf48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cf4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf4e:	e841 2300 	strex	r3, r2, [r1]
 800cf52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cf54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d1e5      	bne.n	800cf26 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	3308      	adds	r3, #8
 800cf60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf64:	e853 3f00 	ldrex	r3, [r3]
 800cf68:	623b      	str	r3, [r7, #32]
   return(result);
 800cf6a:	6a3b      	ldr	r3, [r7, #32]
 800cf6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf70:	663b      	str	r3, [r7, #96]	; 0x60
 800cf72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	3308      	adds	r3, #8
 800cf78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf7a:	633a      	str	r2, [r7, #48]	; 0x30
 800cf7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf82:	e841 2300 	strex	r3, r2, [r1]
 800cf86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1e5      	bne.n	800cf5a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cf8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf90:	2220      	movs	r2, #32
 800cf92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d118      	bne.n	800cfd0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	e853 3f00 	ldrex	r3, [r3]
 800cfaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f023 0310 	bic.w	r3, r3, #16
 800cfb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	461a      	mov	r2, r3
 800cfba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfbc:	61fb      	str	r3, [r7, #28]
 800cfbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfc0:	69b9      	ldr	r1, [r7, #24]
 800cfc2:	69fa      	ldr	r2, [r7, #28]
 800cfc4:	e841 2300 	strex	r3, r2, [r1]
 800cfc8:	617b      	str	r3, [r7, #20]
   return(result);
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1e6      	bne.n	800cf9e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d107      	bne.n	800cfe8 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cfd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cfde:	4619      	mov	r1, r3
 800cfe0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cfe2:	f7fe ff05 	bl	800bdf0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cfe6:	e002      	b.n	800cfee <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800cfe8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cfea:	f7fe fee3 	bl	800bdb4 <HAL_UART_RxCpltCallback>
}
 800cfee:	bf00      	nop
 800cff0:	3770      	adds	r7, #112	; 0x70
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}

0800cff6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cff6:	b580      	push	{r7, lr}
 800cff8:	b084      	sub	sp, #16
 800cffa:	af00      	add	r7, sp, #0
 800cffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d002:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d109      	bne.n	800d020 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d012:	085b      	lsrs	r3, r3, #1
 800d014:	b29b      	uxth	r3, r3
 800d016:	4619      	mov	r1, r3
 800d018:	68f8      	ldr	r0, [r7, #12]
 800d01a:	f7fe fee9 	bl	800bdf0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d01e:	e002      	b.n	800d026 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d020:	68f8      	ldr	r0, [r7, #12]
 800d022:	f7fe fed1 	bl	800bdc8 <HAL_UART_RxHalfCpltCallback>
}
 800d026:	bf00      	nop
 800d028:	3710      	adds	r7, #16
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d02e:	b580      	push	{r7, lr}
 800d030:	b086      	sub	sp, #24
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d03a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d042:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d04a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	689b      	ldr	r3, [r3, #8]
 800d052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d056:	2b80      	cmp	r3, #128	; 0x80
 800d058:	d109      	bne.n	800d06e <UART_DMAError+0x40>
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	2b21      	cmp	r3, #33	; 0x21
 800d05e:	d106      	bne.n	800d06e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	2200      	movs	r2, #0
 800d064:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d068:	6978      	ldr	r0, [r7, #20]
 800d06a:	f7ff fe8b 	bl	800cd84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	689b      	ldr	r3, [r3, #8]
 800d074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d078:	2b40      	cmp	r3, #64	; 0x40
 800d07a:	d109      	bne.n	800d090 <UART_DMAError+0x62>
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2b22      	cmp	r3, #34	; 0x22
 800d080:	d106      	bne.n	800d090 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	2200      	movs	r2, #0
 800d086:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d08a:	6978      	ldr	r0, [r7, #20]
 800d08c:	f7ff febc 	bl	800ce08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d096:	f043 0210 	orr.w	r2, r3, #16
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d0a0:	6978      	ldr	r0, [r7, #20]
 800d0a2:	f7fe fe9b 	bl	800bddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0a6:	bf00      	nop
 800d0a8:	3718      	adds	r7, #24
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}

0800d0ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d0ae:	b480      	push	{r7}
 800d0b0:	b085      	sub	sp, #20
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d101      	bne.n	800d0c4 <HAL_UARTEx_DisableFifoMode+0x16>
 800d0c0:	2302      	movs	r3, #2
 800d0c2:	e027      	b.n	800d114 <HAL_UARTEx_DisableFifoMode+0x66>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2224      	movs	r2, #36	; 0x24
 800d0d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f022 0201 	bic.w	r2, r2, #1
 800d0ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d0f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	68fa      	ldr	r2, [r7, #12]
 800d100:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2220      	movs	r2, #32
 800d106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2200      	movs	r2, #0
 800d10e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d112:	2300      	movs	r3, #0
}
 800d114:	4618      	mov	r0, r3
 800d116:	3714      	adds	r7, #20
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d130:	2b01      	cmp	r3, #1
 800d132:	d101      	bne.n	800d138 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d134:	2302      	movs	r3, #2
 800d136:	e02d      	b.n	800d194 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2201      	movs	r2, #1
 800d13c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2224      	movs	r2, #36	; 0x24
 800d144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f022 0201 	bic.w	r2, r2, #1
 800d15e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	683a      	ldr	r2, [r7, #0]
 800d170:	430a      	orrs	r2, r1
 800d172:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f000 f84f 	bl	800d218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	68fa      	ldr	r2, [r7, #12]
 800d180:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2220      	movs	r2, #32
 800d186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2200      	movs	r2, #0
 800d18e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d192:	2300      	movs	r3, #0
}
 800d194:	4618      	mov	r0, r3
 800d196:	3710      	adds	r7, #16
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d101      	bne.n	800d1b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d1b0:	2302      	movs	r3, #2
 800d1b2:	e02d      	b.n	800d210 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2224      	movs	r2, #36	; 0x24
 800d1c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f022 0201 	bic.w	r2, r2, #1
 800d1da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	683a      	ldr	r2, [r7, #0]
 800d1ec:	430a      	orrs	r2, r1
 800d1ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 f811 	bl	800d218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	68fa      	ldr	r2, [r7, #12]
 800d1fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2220      	movs	r2, #32
 800d202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2200      	movs	r2, #0
 800d20a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d20e:	2300      	movs	r3, #0
}
 800d210:	4618      	mov	r0, r3
 800d212:	3710      	adds	r7, #16
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d218:	b480      	push	{r7}
 800d21a:	b085      	sub	sp, #20
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d224:	2b00      	cmp	r3, #0
 800d226:	d108      	bne.n	800d23a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2201      	movs	r2, #1
 800d22c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2201      	movs	r2, #1
 800d234:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d238:	e031      	b.n	800d29e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d23a:	2310      	movs	r3, #16
 800d23c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d23e:	2310      	movs	r3, #16
 800d240:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	689b      	ldr	r3, [r3, #8]
 800d248:	0e5b      	lsrs	r3, r3, #25
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	f003 0307 	and.w	r3, r3, #7
 800d250:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	0f5b      	lsrs	r3, r3, #29
 800d25a:	b2db      	uxtb	r3, r3
 800d25c:	f003 0307 	and.w	r3, r3, #7
 800d260:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d262:	7bbb      	ldrb	r3, [r7, #14]
 800d264:	7b3a      	ldrb	r2, [r7, #12]
 800d266:	4911      	ldr	r1, [pc, #68]	; (800d2ac <UARTEx_SetNbDataToProcess+0x94>)
 800d268:	5c8a      	ldrb	r2, [r1, r2]
 800d26a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d26e:	7b3a      	ldrb	r2, [r7, #12]
 800d270:	490f      	ldr	r1, [pc, #60]	; (800d2b0 <UARTEx_SetNbDataToProcess+0x98>)
 800d272:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d274:	fb93 f3f2 	sdiv	r3, r3, r2
 800d278:	b29a      	uxth	r2, r3
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d280:	7bfb      	ldrb	r3, [r7, #15]
 800d282:	7b7a      	ldrb	r2, [r7, #13]
 800d284:	4909      	ldr	r1, [pc, #36]	; (800d2ac <UARTEx_SetNbDataToProcess+0x94>)
 800d286:	5c8a      	ldrb	r2, [r1, r2]
 800d288:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d28c:	7b7a      	ldrb	r2, [r7, #13]
 800d28e:	4908      	ldr	r1, [pc, #32]	; (800d2b0 <UARTEx_SetNbDataToProcess+0x98>)
 800d290:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d292:	fb93 f3f2 	sdiv	r3, r3, r2
 800d296:	b29a      	uxth	r2, r3
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d29e:	bf00      	nop
 800d2a0:	3714      	adds	r7, #20
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	0800d4c4 	.word	0x0800d4c4
 800d2b0:	0800d4cc 	.word	0x0800d4cc

0800d2b4 <__libc_init_array>:
 800d2b4:	b570      	push	{r4, r5, r6, lr}
 800d2b6:	4d0d      	ldr	r5, [pc, #52]	; (800d2ec <__libc_init_array+0x38>)
 800d2b8:	4c0d      	ldr	r4, [pc, #52]	; (800d2f0 <__libc_init_array+0x3c>)
 800d2ba:	1b64      	subs	r4, r4, r5
 800d2bc:	10a4      	asrs	r4, r4, #2
 800d2be:	2600      	movs	r6, #0
 800d2c0:	42a6      	cmp	r6, r4
 800d2c2:	d109      	bne.n	800d2d8 <__libc_init_array+0x24>
 800d2c4:	4d0b      	ldr	r5, [pc, #44]	; (800d2f4 <__libc_init_array+0x40>)
 800d2c6:	4c0c      	ldr	r4, [pc, #48]	; (800d2f8 <__libc_init_array+0x44>)
 800d2c8:	f000 f820 	bl	800d30c <_init>
 800d2cc:	1b64      	subs	r4, r4, r5
 800d2ce:	10a4      	asrs	r4, r4, #2
 800d2d0:	2600      	movs	r6, #0
 800d2d2:	42a6      	cmp	r6, r4
 800d2d4:	d105      	bne.n	800d2e2 <__libc_init_array+0x2e>
 800d2d6:	bd70      	pop	{r4, r5, r6, pc}
 800d2d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2dc:	4798      	blx	r3
 800d2de:	3601      	adds	r6, #1
 800d2e0:	e7ee      	b.n	800d2c0 <__libc_init_array+0xc>
 800d2e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2e6:	4798      	blx	r3
 800d2e8:	3601      	adds	r6, #1
 800d2ea:	e7f2      	b.n	800d2d2 <__libc_init_array+0x1e>
 800d2ec:	0800d4dc 	.word	0x0800d4dc
 800d2f0:	0800d4dc 	.word	0x0800d4dc
 800d2f4:	0800d4dc 	.word	0x0800d4dc
 800d2f8:	0800d4e0 	.word	0x0800d4e0

0800d2fc <memset>:
 800d2fc:	4402      	add	r2, r0
 800d2fe:	4603      	mov	r3, r0
 800d300:	4293      	cmp	r3, r2
 800d302:	d100      	bne.n	800d306 <memset+0xa>
 800d304:	4770      	bx	lr
 800d306:	f803 1b01 	strb.w	r1, [r3], #1
 800d30a:	e7f9      	b.n	800d300 <memset+0x4>

0800d30c <_init>:
 800d30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d30e:	bf00      	nop
 800d310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d312:	bc08      	pop	{r3}
 800d314:	469e      	mov	lr, r3
 800d316:	4770      	bx	lr

0800d318 <_fini>:
 800d318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d31a:	bf00      	nop
 800d31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d31e:	bc08      	pop	{r3}
 800d320:	469e      	mov	lr, r3
 800d322:	4770      	bx	lr
