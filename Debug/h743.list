
h743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f138  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000089c  0800f3e0  0800f3e0  0001f3e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fc7c  0800fc7c  0001fc7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fc84  0800fc84  0001fc84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fc88  0800fc88  0001fc88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000005b8  20000000  0800fc8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005548  200005b8  08010244  000205b8  2**2
                  ALLOC
  8 ._user_heap_stack 0000c000  20005b00  08010244  00025b00  2**0
                  ALLOC
  9 .rxBuf        00001014  24000000  24000000  00030000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000205b8  2**0
                  CONTENTS, READONLY
 11 .debug_info   000388c5  00000000  00000000  000205e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004e52  00000000  00000000  00058eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001738  00000000  00000000  0005dd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000015a0  00000000  00000000  0005f438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003c0f9  00000000  00000000  000609d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00021d56  00000000  00000000  0009cad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001824f1  00000000  00000000  000be827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000ce  00000000  00000000  00240d18  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000613c  00000000  00000000  00240de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stabstr      0000014d  00000000  00000000  00246f24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200005b8 	.word	0x200005b8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f3b8 	.word	0x0800f3b8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200005bc 	.word	0x200005bc
 80002d4:	0800f3b8 	.word	0x0800f3b8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <initModelPredictiveControl>:
 * This function implements model predictive control (MPC)
 *
 */

int states[7] = {1,3,2,6,4,5,0};
void initModelPredictiveControl(){
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
	C1 = 10000*(1 - (0.75/(16130*0.0004)));
 80005d4:	4b59      	ldr	r3, [pc, #356]	; (800073c <initModelPredictiveControl+0x16c>)
 80005d6:	f242 2285 	movw	r2, #8837	; 0x2285
 80005da:	601a      	str	r2, [r3, #0]
	C2 = 10000*(1/(16130*0.0004));
 80005dc:	4b58      	ldr	r3, [pc, #352]	; (8000740 <initModelPredictiveControl+0x170>)
 80005de:	f240 620d 	movw	r2, #1549	; 0x60d
 80005e2:	601a      	str	r2, [r3, #0]

	for(i=0;i<6;i++){
 80005e4:	4b57      	ldr	r3, [pc, #348]	; (8000744 <initModelPredictiveControl+0x174>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	e09b      	b.n	8000724 <initModelPredictiveControl+0x154>
		Sa = states[i] & 0x01;
 80005ec:	4b55      	ldr	r3, [pc, #340]	; (8000744 <initModelPredictiveControl+0x174>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a55      	ldr	r2, [pc, #340]	; (8000748 <initModelPredictiveControl+0x178>)
 80005f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b53      	ldr	r3, [pc, #332]	; (800074c <initModelPredictiveControl+0x17c>)
 8000600:	701a      	strb	r2, [r3, #0]
		Sb = (states[i]>>1) & 0x01;
 8000602:	4b50      	ldr	r3, [pc, #320]	; (8000744 <initModelPredictiveControl+0x174>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a50      	ldr	r2, [pc, #320]	; (8000748 <initModelPredictiveControl+0x178>)
 8000608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800060c:	105b      	asrs	r3, r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b4e      	ldr	r3, [pc, #312]	; (8000750 <initModelPredictiveControl+0x180>)
 8000618:	701a      	strb	r2, [r3, #0]
		Sc = (states[i]>>2) & 0x01;
 800061a:	4b4a      	ldr	r3, [pc, #296]	; (8000744 <initModelPredictiveControl+0x174>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a4a      	ldr	r2, [pc, #296]	; (8000748 <initModelPredictiveControl+0x178>)
 8000620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000624:	109b      	asrs	r3, r3, #2
 8000626:	b2db      	uxtb	r3, r3
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b49      	ldr	r3, [pc, #292]	; (8000754 <initModelPredictiveControl+0x184>)
 8000630:	701a      	strb	r2, [r3, #0]

		Varray[i][0] = (V/100)*((2*Sa-Sb-Sc))/3;
 8000632:	4b49      	ldr	r3, [pc, #292]	; (8000758 <initModelPredictiveControl+0x188>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	4a49      	ldr	r2, [pc, #292]	; (800075c <initModelPredictiveControl+0x18c>)
 8000638:	fba2 2303 	umull	r2, r3, r2, r3
 800063c:	095b      	lsrs	r3, r3, #5
 800063e:	b29b      	uxth	r3, r3
 8000640:	4619      	mov	r1, r3
 8000642:	4b42      	ldr	r3, [pc, #264]	; (800074c <initModelPredictiveControl+0x17c>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	4a41      	ldr	r2, [pc, #260]	; (8000750 <initModelPredictiveControl+0x180>)
 800064a:	7812      	ldrb	r2, [r2, #0]
 800064c:	1a9b      	subs	r3, r3, r2
 800064e:	4a41      	ldr	r2, [pc, #260]	; (8000754 <initModelPredictiveControl+0x184>)
 8000650:	7812      	ldrb	r2, [r2, #0]
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	fb03 f301 	mul.w	r3, r3, r1
 8000658:	4a41      	ldr	r2, [pc, #260]	; (8000760 <initModelPredictiveControl+0x190>)
 800065a:	fb82 1203 	smull	r1, r2, r2, r3
 800065e:	17db      	asrs	r3, r3, #31
 8000660:	1ad1      	subs	r1, r2, r3
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <initModelPredictiveControl+0x174>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	ee07 1a90 	vmov	s15, r1
 800066a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800066e:	493d      	ldr	r1, [pc, #244]	; (8000764 <initModelPredictiveControl+0x194>)
 8000670:	4613      	mov	r3, r2
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	4413      	add	r3, r2
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	440b      	add	r3, r1
 800067a:	edc3 7a00 	vstr	s15, [r3]
		Varray[i][1] = (V/100)*((2*Sb-Sa-Sc))/3;
 800067e:	4b36      	ldr	r3, [pc, #216]	; (8000758 <initModelPredictiveControl+0x188>)
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	4a36      	ldr	r2, [pc, #216]	; (800075c <initModelPredictiveControl+0x18c>)
 8000684:	fba2 2303 	umull	r2, r3, r2, r3
 8000688:	095b      	lsrs	r3, r3, #5
 800068a:	b29b      	uxth	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	4b30      	ldr	r3, [pc, #192]	; (8000750 <initModelPredictiveControl+0x180>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	4a2d      	ldr	r2, [pc, #180]	; (800074c <initModelPredictiveControl+0x17c>)
 8000696:	7812      	ldrb	r2, [r2, #0]
 8000698:	1a9b      	subs	r3, r3, r2
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <initModelPredictiveControl+0x184>)
 800069c:	7812      	ldrb	r2, [r2, #0]
 800069e:	1a9b      	subs	r3, r3, r2
 80006a0:	fb03 f301 	mul.w	r3, r3, r1
 80006a4:	4a2e      	ldr	r2, [pc, #184]	; (8000760 <initModelPredictiveControl+0x190>)
 80006a6:	fb82 1203 	smull	r1, r2, r2, r3
 80006aa:	17db      	asrs	r3, r3, #31
 80006ac:	1ad1      	subs	r1, r2, r3
 80006ae:	4b25      	ldr	r3, [pc, #148]	; (8000744 <initModelPredictiveControl+0x174>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	ee07 1a90 	vmov	s15, r1
 80006b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ba:	492a      	ldr	r1, [pc, #168]	; (8000764 <initModelPredictiveControl+0x194>)
 80006bc:	4613      	mov	r3, r2
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	4413      	add	r3, r2
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	440b      	add	r3, r1
 80006c6:	3304      	adds	r3, #4
 80006c8:	edc3 7a00 	vstr	s15, [r3]
		Varray[i][2] = (V/100)*((2*Sc-Sb-Sa))/3;
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <initModelPredictiveControl+0x188>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	4a22      	ldr	r2, [pc, #136]	; (800075c <initModelPredictiveControl+0x18c>)
 80006d2:	fba2 2303 	umull	r2, r3, r2, r3
 80006d6:	095b      	lsrs	r3, r3, #5
 80006d8:	b29b      	uxth	r3, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <initModelPredictiveControl+0x184>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <initModelPredictiveControl+0x180>)
 80006e4:	7812      	ldrb	r2, [r2, #0]
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	4a18      	ldr	r2, [pc, #96]	; (800074c <initModelPredictiveControl+0x17c>)
 80006ea:	7812      	ldrb	r2, [r2, #0]
 80006ec:	1a9b      	subs	r3, r3, r2
 80006ee:	fb03 f301 	mul.w	r3, r3, r1
 80006f2:	4a1b      	ldr	r2, [pc, #108]	; (8000760 <initModelPredictiveControl+0x190>)
 80006f4:	fb82 1203 	smull	r1, r2, r2, r3
 80006f8:	17db      	asrs	r3, r3, #31
 80006fa:	1ad1      	subs	r1, r2, r3
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <initModelPredictiveControl+0x174>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	ee07 1a90 	vmov	s15, r1
 8000704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000708:	4916      	ldr	r1, [pc, #88]	; (8000764 <initModelPredictiveControl+0x194>)
 800070a:	4613      	mov	r3, r2
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4413      	add	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	440b      	add	r3, r1
 8000714:	3308      	adds	r3, #8
 8000716:	edc3 7a00 	vstr	s15, [r3]
	for(i=0;i<6;i++){
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <initModelPredictiveControl+0x174>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	3301      	adds	r3, #1
 8000720:	4a08      	ldr	r2, [pc, #32]	; (8000744 <initModelPredictiveControl+0x174>)
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <initModelPredictiveControl+0x174>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b05      	cmp	r3, #5
 800072a:	f77f af5f 	ble.w	80005ec <initModelPredictiveControl+0x1c>
	}
}
 800072e:	bf00      	nop
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	20000678 	.word	0x20000678
 8000740:	20000784 	.word	0x20000784
 8000744:	2000078c 	.word	0x2000078c
 8000748:	20000000 	.word	0x20000000
 800074c:	20000790 	.word	0x20000790
 8000750:	200006be 	.word	0x200006be
 8000754:	2000078a 	.word	0x2000078a
 8000758:	2000001e 	.word	0x2000001e
 800075c:	51eb851f 	.word	0x51eb851f
 8000760:	55555556 	.word	0x55555556
 8000764:	20000794 	.word	0x20000794

08000768 <modelPredictiveControl>:

int16_t lambda1 = 0;
float Vab[3];
void modelPredictiveControl(){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	computeSinCos();
 800076c:	f001 fa32 	bl	8001bd4 <computeSinCos>
	parkTransform(Ia,Ib,Ic,&Idq);
 8000770:	4baf      	ldr	r3, [pc, #700]	; (8000a30 <modelPredictiveControl+0x2c8>)
 8000772:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000776:	4baf      	ldr	r3, [pc, #700]	; (8000a34 <modelPredictiveControl+0x2cc>)
 8000778:	f9b3 1000 	ldrsh.w	r1, [r3]
 800077c:	4bae      	ldr	r3, [pc, #696]	; (8000a38 <modelPredictiveControl+0x2d0>)
 800077e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000782:	4bae      	ldr	r3, [pc, #696]	; (8000a3c <modelPredictiveControl+0x2d4>)
 8000784:	f001 f9be 	bl	8001b04 <parkTransform>
	clarkeTransform(Ia, Ib, Ic, &Ialbt);
 8000788:	4ba9      	ldr	r3, [pc, #676]	; (8000a30 <modelPredictiveControl+0x2c8>)
 800078a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800078e:	ee07 3a90 	vmov	s15, r3
 8000792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000796:	4ba7      	ldr	r3, [pc, #668]	; (8000a34 <modelPredictiveControl+0x2cc>)
 8000798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800079c:	ee07 3a10 	vmov	s14, r3
 80007a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80007a4:	4ba4      	ldr	r3, [pc, #656]	; (8000a38 <modelPredictiveControl+0x2d0>)
 80007a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007aa:	ee06 3a90 	vmov	s13, r3
 80007ae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80007b2:	48a3      	ldr	r0, [pc, #652]	; (8000a40 <modelPredictiveControl+0x2d8>)
 80007b4:	eeb0 1a66 	vmov.f32	s2, s13
 80007b8:	eef0 0a47 	vmov.f32	s1, s14
 80007bc:	eeb0 0a67 	vmov.f32	s0, s15
 80007c0:	f001 fa66 	bl	8001c90 <clarkeTransform>
	clarkeTransform(Vab[0], Vab[1], Vab[2], &Valbt);
 80007c4:	4b9f      	ldr	r3, [pc, #636]	; (8000a44 <modelPredictiveControl+0x2dc>)
 80007c6:	edd3 7a00 	vldr	s15, [r3]
 80007ca:	4b9e      	ldr	r3, [pc, #632]	; (8000a44 <modelPredictiveControl+0x2dc>)
 80007cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80007d0:	4b9c      	ldr	r3, [pc, #624]	; (8000a44 <modelPredictiveControl+0x2dc>)
 80007d2:	edd3 6a02 	vldr	s13, [r3, #8]
 80007d6:	489c      	ldr	r0, [pc, #624]	; (8000a48 <modelPredictiveControl+0x2e0>)
 80007d8:	eeb0 1a66 	vmov.f32	s2, s13
 80007dc:	eef0 0a47 	vmov.f32	s1, s14
 80007e0:	eeb0 0a67 	vmov.f32	s0, s15
 80007e4:	f001 fa54 	bl	8001c90 <clarkeTransform>

	IdTemp = Idq.d/1230;
 80007e8:	4b94      	ldr	r3, [pc, #592]	; (8000a3c <modelPredictiveControl+0x2d4>)
 80007ea:	ed93 7a00 	vldr	s14, [r3]
 80007ee:	eddf 6a97 	vldr	s13, [pc, #604]	; 8000a4c <modelPredictiveControl+0x2e4>
 80007f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007f6:	4b96      	ldr	r3, [pc, #600]	; (8000a50 <modelPredictiveControl+0x2e8>)
 80007f8:	edc3 7a00 	vstr	s15, [r3]
	IqTemp = Idq.q/1230;
 80007fc:	4b8f      	ldr	r3, [pc, #572]	; (8000a3c <modelPredictiveControl+0x2d4>)
 80007fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8000802:	eddf 6a92 	vldr	s13, [pc, #584]	; 8000a4c <modelPredictiveControl+0x2e4>
 8000806:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800080a:	4b92      	ldr	r3, [pc, #584]	; (8000a54 <modelPredictiveControl+0x2ec>)
 800080c:	edc3 7a00 	vstr	s15, [r3]

	cost = 100000;
 8000810:	4b91      	ldr	r3, [pc, #580]	; (8000a58 <modelPredictiveControl+0x2f0>)
 8000812:	4a92      	ldr	r2, [pc, #584]	; (8000a5c <modelPredictiveControl+0x2f4>)
 8000814:	601a      	str	r2, [r3, #0]


//	V = (Vbus/65);

	for(i=0;i<6;i++){
 8000816:	4b92      	ldr	r3, [pc, #584]	; (8000a60 <modelPredictiveControl+0x2f8>)
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	e1a2      	b.n	8000b64 <modelPredictiveControl+0x3fc>
		Va = Varray[i][0];
 800081e:	4b90      	ldr	r3, [pc, #576]	; (8000a60 <modelPredictiveControl+0x2f8>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	4990      	ldr	r1, [pc, #576]	; (8000a64 <modelPredictiveControl+0x2fc>)
 8000824:	4613      	mov	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	4413      	add	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	440b      	add	r3, r1
 800082e:	edd3 7a00 	vldr	s15, [r3]
 8000832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000836:	ee17 3a90 	vmov	r3, s15
 800083a:	b21a      	sxth	r2, r3
 800083c:	4b8a      	ldr	r3, [pc, #552]	; (8000a68 <modelPredictiveControl+0x300>)
 800083e:	801a      	strh	r2, [r3, #0]
		Vb = Varray[i][1];
 8000840:	4b87      	ldr	r3, [pc, #540]	; (8000a60 <modelPredictiveControl+0x2f8>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4987      	ldr	r1, [pc, #540]	; (8000a64 <modelPredictiveControl+0x2fc>)
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	440b      	add	r3, r1
 8000850:	3304      	adds	r3, #4
 8000852:	edd3 7a00 	vldr	s15, [r3]
 8000856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800085a:	ee17 3a90 	vmov	r3, s15
 800085e:	b21a      	sxth	r2, r3
 8000860:	4b82      	ldr	r3, [pc, #520]	; (8000a6c <modelPredictiveControl+0x304>)
 8000862:	801a      	strh	r2, [r3, #0]
		Vc = Varray[i][2];
 8000864:	4b7e      	ldr	r3, [pc, #504]	; (8000a60 <modelPredictiveControl+0x2f8>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	497e      	ldr	r1, [pc, #504]	; (8000a64 <modelPredictiveControl+0x2fc>)
 800086a:	4613      	mov	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	4413      	add	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	440b      	add	r3, r1
 8000874:	3308      	adds	r3, #8
 8000876:	edd3 7a00 	vldr	s15, [r3]
 800087a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800087e:	ee17 3a90 	vmov	r3, s15
 8000882:	b21a      	sxth	r2, r3
 8000884:	4b7a      	ldr	r3, [pc, #488]	; (8000a70 <modelPredictiveControl+0x308>)
 8000886:	801a      	strh	r2, [r3, #0]

		parkTransform(Va,Vb,Vc,&Vdq);
 8000888:	4b77      	ldr	r3, [pc, #476]	; (8000a68 <modelPredictiveControl+0x300>)
 800088a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800088e:	4b77      	ldr	r3, [pc, #476]	; (8000a6c <modelPredictiveControl+0x304>)
 8000890:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000894:	4b76      	ldr	r3, [pc, #472]	; (8000a70 <modelPredictiveControl+0x308>)
 8000896:	f9b3 2000 	ldrsh.w	r2, [r3]
 800089a:	4b76      	ldr	r3, [pc, #472]	; (8000a74 <modelPredictiveControl+0x30c>)
 800089c:	f001 f932 	bl	8001b04 <parkTransform>

		costTemp = 0;
 80008a0:	4b75      	ldr	r3, [pc, #468]	; (8000a78 <modelPredictiveControl+0x310>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]

		for(j=0;j<1;j++){
 80008a6:	4b75      	ldr	r3, [pc, #468]	; (8000a7c <modelPredictiveControl+0x314>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	e115      	b.n	8000ada <modelPredictiveControl+0x372>
			IdPred = (int)((C1*IdTemp) + (wr*IqTemp/2) + (C2*Vdq.d));
 80008ae:	4b74      	ldr	r3, [pc, #464]	; (8000a80 <modelPredictiveControl+0x318>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	ee07 3a90 	vmov	s15, r3
 80008b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008ba:	4b65      	ldr	r3, [pc, #404]	; (8000a50 <modelPredictiveControl+0x2e8>)
 80008bc:	edd3 7a00 	vldr	s15, [r3]
 80008c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008c4:	4b6f      	ldr	r3, [pc, #444]	; (8000a84 <modelPredictiveControl+0x31c>)
 80008c6:	edd3 6a00 	vldr	s13, [r3]
 80008ca:	4b62      	ldr	r3, [pc, #392]	; (8000a54 <modelPredictiveControl+0x2ec>)
 80008cc:	edd3 7a00 	vldr	s15, [r3]
 80008d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80008d4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80008d8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80008dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008e0:	4b69      	ldr	r3, [pc, #420]	; (8000a88 <modelPredictiveControl+0x320>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	ee07 3a90 	vmov	s15, r3
 80008e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80008ec:	4b61      	ldr	r3, [pc, #388]	; (8000a74 <modelPredictiveControl+0x30c>)
 80008ee:	edd3 7a00 	vldr	s15, [r3]
 80008f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000902:	4b62      	ldr	r3, [pc, #392]	; (8000a8c <modelPredictiveControl+0x324>)
 8000904:	edc3 7a00 	vstr	s15, [r3]
			IqPred = (int)((C1*IqTemp) - (wr*IdTemp/2) + (C2*Vdq.q));
 8000908:	4b5d      	ldr	r3, [pc, #372]	; (8000a80 <modelPredictiveControl+0x318>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	ee07 3a90 	vmov	s15, r3
 8000910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000914:	4b4f      	ldr	r3, [pc, #316]	; (8000a54 <modelPredictiveControl+0x2ec>)
 8000916:	edd3 7a00 	vldr	s15, [r3]
 800091a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800091e:	4b59      	ldr	r3, [pc, #356]	; (8000a84 <modelPredictiveControl+0x31c>)
 8000920:	edd3 6a00 	vldr	s13, [r3]
 8000924:	4b4a      	ldr	r3, [pc, #296]	; (8000a50 <modelPredictiveControl+0x2e8>)
 8000926:	edd3 7a00 	vldr	s15, [r3]
 800092a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800092e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000932:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000936:	ee37 7a67 	vsub.f32	s14, s14, s15
 800093a:	4b53      	ldr	r3, [pc, #332]	; (8000a88 <modelPredictiveControl+0x320>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	ee07 3a90 	vmov	s15, r3
 8000942:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000946:	4b4b      	ldr	r3, [pc, #300]	; (8000a74 <modelPredictiveControl+0x30c>)
 8000948:	edd3 7a01 	vldr	s15, [r3, #4]
 800094c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000954:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800095c:	4b4c      	ldr	r3, [pc, #304]	; (8000a90 <modelPredictiveControl+0x328>)
 800095e:	edc3 7a00 	vstr	s15, [r3]

			costTemp = lambda1*sqr(mod(IdPred))/100000 + sqr(mod((IqRef - IqPred)))/10000;
 8000962:	4b4c      	ldr	r3, [pc, #304]	; (8000a94 <modelPredictiveControl+0x32c>)
 8000964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000968:	ee07 3a90 	vmov	s15, r3
 800096c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000970:	4b46      	ldr	r3, [pc, #280]	; (8000a8c <modelPredictiveControl+0x324>)
 8000972:	edd3 7a00 	vldr	s15, [r3]
 8000976:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800097a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800097e:	dd03      	ble.n	8000988 <modelPredictiveControl+0x220>
 8000980:	4b42      	ldr	r3, [pc, #264]	; (8000a8c <modelPredictiveControl+0x324>)
 8000982:	ed93 7a00 	vldr	s14, [r3]
 8000986:	e004      	b.n	8000992 <modelPredictiveControl+0x22a>
 8000988:	4b40      	ldr	r3, [pc, #256]	; (8000a8c <modelPredictiveControl+0x324>)
 800098a:	edd3 7a00 	vldr	s15, [r3]
 800098e:	eeb1 7a67 	vneg.f32	s14, s15
 8000992:	4b3e      	ldr	r3, [pc, #248]	; (8000a8c <modelPredictiveControl+0x324>)
 8000994:	edd3 7a00 	vldr	s15, [r3]
 8000998:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800099c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009a0:	dd03      	ble.n	80009aa <modelPredictiveControl+0x242>
 80009a2:	4b3a      	ldr	r3, [pc, #232]	; (8000a8c <modelPredictiveControl+0x324>)
 80009a4:	edd3 7a00 	vldr	s15, [r3]
 80009a8:	e004      	b.n	80009b4 <modelPredictiveControl+0x24c>
 80009aa:	4b38      	ldr	r3, [pc, #224]	; (8000a8c <modelPredictiveControl+0x324>)
 80009ac:	edd3 7a00 	vldr	s15, [r3]
 80009b0:	eef1 7a67 	vneg.f32	s15, s15
 80009b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009bc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000a98 <modelPredictiveControl+0x330>
 80009c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80009c4:	4b35      	ldr	r3, [pc, #212]	; (8000a9c <modelPredictiveControl+0x334>)
 80009c6:	ed93 7a00 	vldr	s14, [r3]
 80009ca:	4b31      	ldr	r3, [pc, #196]	; (8000a90 <modelPredictiveControl+0x328>)
 80009cc:	edd3 7a00 	vldr	s15, [r3]
 80009d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009dc:	dd08      	ble.n	80009f0 <modelPredictiveControl+0x288>
 80009de:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <modelPredictiveControl+0x334>)
 80009e0:	ed93 7a00 	vldr	s14, [r3]
 80009e4:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <modelPredictiveControl+0x328>)
 80009e6:	edd3 7a00 	vldr	s15, [r3]
 80009ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009ee:	e009      	b.n	8000a04 <modelPredictiveControl+0x29c>
 80009f0:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <modelPredictiveControl+0x334>)
 80009f2:	ed93 7a00 	vldr	s14, [r3]
 80009f6:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <modelPredictiveControl+0x328>)
 80009f8:	edd3 7a00 	vldr	s15, [r3]
 80009fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a00:	eeb1 7a67 	vneg.f32	s14, s15
 8000a04:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <modelPredictiveControl+0x334>)
 8000a06:	ed93 6a00 	vldr	s12, [r3]
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <modelPredictiveControl+0x328>)
 8000a0c:	edd3 7a00 	vldr	s15, [r3]
 8000a10:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000a14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a1c:	dd40      	ble.n	8000aa0 <modelPredictiveControl+0x338>
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <modelPredictiveControl+0x334>)
 8000a20:	ed93 6a00 	vldr	s12, [r3]
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <modelPredictiveControl+0x328>)
 8000a26:	edd3 7a00 	vldr	s15, [r3]
 8000a2a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000a2e:	e041      	b.n	8000ab4 <modelPredictiveControl+0x34c>
 8000a30:	200006b4 	.word	0x200006b4
 8000a34:	200007e8 	.word	0x200007e8
 8000a38:	20000816 	.word	0x20000816
 8000a3c:	2000085c 	.word	0x2000085c
 8000a40:	2000087c 	.word	0x2000087c
 8000a44:	20000848 	.word	0x20000848
 8000a48:	200007f8 	.word	0x200007f8
 8000a4c:	4499c000 	.word	0x4499c000
 8000a50:	20000834 	.word	0x20000834
 8000a54:	20000810 	.word	0x20000810
 8000a58:	2000075c 	.word	0x2000075c
 8000a5c:	000186a0 	.word	0x000186a0
 8000a60:	2000078c 	.word	0x2000078c
 8000a64:	20000794 	.word	0x20000794
 8000a68:	2000076a 	.word	0x2000076a
 8000a6c:	2000081a 	.word	0x2000081a
 8000a70:	200007ee 	.word	0x200007ee
 8000a74:	20000770 	.word	0x20000770
 8000a78:	200006b8 	.word	0x200006b8
 8000a7c:	20000684 	.word	0x20000684
 8000a80:	20000678 	.word	0x20000678
 8000a84:	20000830 	.word	0x20000830
 8000a88:	20000784 	.word	0x20000784
 8000a8c:	20000764 	.word	0x20000764
 8000a90:	20000844 	.word	0x20000844
 8000a94:	200005d4 	.word	0x200005d4
 8000a98:	47c35000 	.word	0x47c35000
 8000a9c:	2000077c 	.word	0x2000077c
 8000aa0:	4b3f      	ldr	r3, [pc, #252]	; (8000ba0 <modelPredictiveControl+0x438>)
 8000aa2:	ed93 6a00 	vldr	s12, [r3]
 8000aa6:	4b3f      	ldr	r3, [pc, #252]	; (8000ba4 <modelPredictiveControl+0x43c>)
 8000aa8:	edd3 7a00 	vldr	s15, [r3]
 8000aac:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000ab0:	eef1 7a67 	vneg.f32	s15, s15
 8000ab4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ab8:	ed9f 6a3b 	vldr	s12, [pc, #236]	; 8000ba8 <modelPredictiveControl+0x440>
 8000abc:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8000ac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ac8:	ee17 2a90 	vmov	r2, s15
 8000acc:	4b37      	ldr	r3, [pc, #220]	; (8000bac <modelPredictiveControl+0x444>)
 8000ace:	601a      	str	r2, [r3, #0]
		for(j=0;j<1;j++){
 8000ad0:	4b37      	ldr	r3, [pc, #220]	; (8000bb0 <modelPredictiveControl+0x448>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	4a36      	ldr	r2, [pc, #216]	; (8000bb0 <modelPredictiveControl+0x448>)
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <modelPredictiveControl+0x448>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f77f aee5 	ble.w	80008ae <modelPredictiveControl+0x146>
		}

		if(costTemp < cost){
 8000ae4:	4b31      	ldr	r3, [pc, #196]	; (8000bac <modelPredictiveControl+0x444>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b32      	ldr	r3, [pc, #200]	; (8000bb4 <modelPredictiveControl+0x44c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	da34      	bge.n	8000b5a <modelPredictiveControl+0x3f2>
			optimalVector = i;
 8000af0:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <modelPredictiveControl+0x450>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <modelPredictiveControl+0x454>)
 8000af8:	701a      	strb	r2, [r3, #0]
			cost = costTemp;
 8000afa:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <modelPredictiveControl+0x444>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a2d      	ldr	r2, [pc, #180]	; (8000bb4 <modelPredictiveControl+0x44c>)
 8000b00:	6013      	str	r3, [r2, #0]
			IqTx = IqPred*123/1000;
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <modelPredictiveControl+0x43c>)
 8000b04:	edd3 7a00 	vldr	s15, [r3]
 8000b08:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000bc0 <modelPredictiveControl+0x458>
 8000b0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b10:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8000bc4 <modelPredictiveControl+0x45c>
 8000b14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b18:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <modelPredictiveControl+0x460>)
 8000b1a:	edc3 7a00 	vstr	s15, [r3]
			Vab[0] = Va;
 8000b1e:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <modelPredictiveControl+0x464>)
 8000b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b24:	ee07 3a90 	vmov	s15, r3
 8000b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b2c:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <modelPredictiveControl+0x468>)
 8000b2e:	edc3 7a00 	vstr	s15, [r3]
			Vab[1] = Vb;
 8000b32:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <modelPredictiveControl+0x46c>)
 8000b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b38:	ee07 3a90 	vmov	s15, r3
 8000b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b40:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <modelPredictiveControl+0x468>)
 8000b42:	edc3 7a01 	vstr	s15, [r3, #4]
			Vab[2] = Vc;
 8000b46:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <modelPredictiveControl+0x470>)
 8000b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4c:	ee07 3a90 	vmov	s15, r3
 8000b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <modelPredictiveControl+0x468>)
 8000b56:	edc3 7a02 	vstr	s15, [r3, #8]
	for(i=0;i<6;i++){
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <modelPredictiveControl+0x450>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	4a15      	ldr	r2, [pc, #84]	; (8000bb8 <modelPredictiveControl+0x450>)
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <modelPredictiveControl+0x450>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b05      	cmp	r3, #5
 8000b6a:	f77f ae58 	ble.w	800081e <modelPredictiveControl+0xb6>
		}
	}


	wt = (optimalVector)*60;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <modelPredictiveControl+0x454>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	461a      	mov	r2, r3
 8000b76:	0112      	lsls	r2, r2, #4
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <modelPredictiveControl+0x474>)
 8000b80:	801a      	strh	r2, [r3, #0]
	if(wt >= 360){
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <modelPredictiveControl+0x474>)
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000b8a:	d306      	bcc.n	8000b9a <modelPredictiveControl+0x432>
		wt -= 360;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <modelPredictiveControl+0x474>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <modelPredictiveControl+0x474>)
 8000b98:	801a      	strh	r2, [r3, #0]
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000077c 	.word	0x2000077c
 8000ba4:	20000844 	.word	0x20000844
 8000ba8:	461c4000 	.word	0x461c4000
 8000bac:	200006b8 	.word	0x200006b8
 8000bb0:	20000684 	.word	0x20000684
 8000bb4:	2000075c 	.word	0x2000075c
 8000bb8:	2000078c 	.word	0x2000078c
 8000bbc:	2000085a 	.word	0x2000085a
 8000bc0:	42f60000 	.word	0x42f60000
 8000bc4:	447a0000 	.word	0x447a0000
 8000bc8:	200007f0 	.word	0x200007f0
 8000bcc:	2000076a 	.word	0x2000076a
 8000bd0:	20000848 	.word	0x20000848
 8000bd4:	2000081a 	.word	0x2000081a
 8000bd8:	200007ee 	.word	0x200007ee
 8000bdc:	200005ec 	.word	0x200005ec

08000be0 <SVPWM>:
uint16_t xxx = 0;
/**
 * This function computes SVPWM timings for TIM1
 *
 */
void SVPWM(){
 8000be0:	b598      	push	{r3, r4, r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	if(run == 1){
 8000be4:	4b8f      	ldr	r3, [pc, #572]	; (8000e24 <SVPWM+0x244>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	f040 81a1 	bne.w	8000f30 <SVPWM+0x350>
		n = ((uint8_t)(wt/60))+1;
 8000bee:	4b8e      	ldr	r3, [pc, #568]	; (8000e28 <SVPWM+0x248>)
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	4a8e      	ldr	r2, [pc, #568]	; (8000e2c <SVPWM+0x24c>)
 8000bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf8:	095b      	lsrs	r3, r3, #5
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	3301      	adds	r3, #1
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4b8b      	ldr	r3, [pc, #556]	; (8000e30 <SVPWM+0x250>)
 8000c04:	701a      	strb	r2, [r3, #0]

		T1 = (uint16_t)(V*(sinLowRes(n*60 - wt))/(1667));
 8000c06:	4b8b      	ldr	r3, [pc, #556]	; (8000e34 <SVPWM+0x254>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	461c      	mov	r4, r3
 8000c0c:	4b88      	ldr	r3, [pc, #544]	; (8000e30 <SVPWM+0x250>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	461a      	mov	r2, r3
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	4b82      	ldr	r3, [pc, #520]	; (8000e28 <SVPWM+0x248>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	b21b      	sxth	r3, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 ff20 	bl	8001a6c <sinLowRes>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	fb03 f304 	mul.w	r3, r3, r4
 8000c32:	4a81      	ldr	r2, [pc, #516]	; (8000e38 <SVPWM+0x258>)
 8000c34:	fb82 1203 	smull	r1, r2, r2, r3
 8000c38:	441a      	add	r2, r3
 8000c3a:	1292      	asrs	r2, r2, #10
 8000c3c:	17db      	asrs	r3, r3, #31
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b7d      	ldr	r3, [pc, #500]	; (8000e3c <SVPWM+0x25c>)
 8000c46:	601a      	str	r2, [r3, #0]
		T2 = (uint16_t)(V*(sinLowRes(wt - ((n-1)*60)))/(1667));
 8000c48:	4b7a      	ldr	r3, [pc, #488]	; (8000e34 <SVPWM+0x254>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	461c      	mov	r4, r3
 8000c4e:	4b78      	ldr	r3, [pc, #480]	; (8000e30 <SVPWM+0x250>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	011b      	lsls	r3, r3, #4
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	4b71      	ldr	r3, [pc, #452]	; (8000e28 <SVPWM+0x248>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	4413      	add	r3, r2
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fefe 	bl	8001a6c <sinLowRes>
 8000c70:	4603      	mov	r3, r0
 8000c72:	fb03 f304 	mul.w	r3, r3, r4
 8000c76:	4a70      	ldr	r2, [pc, #448]	; (8000e38 <SVPWM+0x258>)
 8000c78:	fb82 1203 	smull	r1, r2, r2, r3
 8000c7c:	441a      	add	r2, r3
 8000c7e:	1292      	asrs	r2, r2, #10
 8000c80:	17db      	asrs	r3, r3, #31
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b6d      	ldr	r3, [pc, #436]	; (8000e40 <SVPWM+0x260>)
 8000c8a:	601a      	str	r2, [r3, #0]
		T0 = Ts - (T1+T2);
 8000c8c:	4b6d      	ldr	r3, [pc, #436]	; (8000e44 <SVPWM+0x264>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	4b6a      	ldr	r3, [pc, #424]	; (8000e3c <SVPWM+0x25c>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b6a      	ldr	r3, [pc, #424]	; (8000e40 <SVPWM+0x260>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	1acb      	subs	r3, r1, r3
 8000c9e:	4a6a      	ldr	r2, [pc, #424]	; (8000e48 <SVPWM+0x268>)
 8000ca0:	6013      	str	r3, [r2, #0]

		switch(n){
 8000ca2:	4b63      	ldr	r3, [pc, #396]	; (8000e30 <SVPWM+0x250>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	2b05      	cmp	r3, #5
 8000caa:	f200 812b 	bhi.w	8000f04 <SVPWM+0x324>
 8000cae:	a201      	add	r2, pc, #4	; (adr r2, 8000cb4 <SVPWM+0xd4>)
 8000cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb4:	08000ccd 	.word	0x08000ccd
 8000cb8:	08000d23 	.word	0x08000d23
 8000cbc:	08000d79 	.word	0x08000d79
 8000cc0:	08000dcf 	.word	0x08000dcf
 8000cc4:	08000e59 	.word	0x08000e59
 8000cc8:	08000eaf 	.word	0x08000eaf
			case 1:
				Ta = T1 + T2 + (T0/2);
 8000ccc:	4b5b      	ldr	r3, [pc, #364]	; (8000e3c <SVPWM+0x25c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b5b      	ldr	r3, [pc, #364]	; (8000e40 <SVPWM+0x260>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	4413      	add	r3, r2
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	4b5a      	ldr	r3, [pc, #360]	; (8000e48 <SVPWM+0x268>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	da00      	bge.n	8000ce6 <SVPWM+0x106>
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	105b      	asrs	r3, r3, #1
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	4413      	add	r3, r2
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	4b57      	ldr	r3, [pc, #348]	; (8000e4c <SVPWM+0x26c>)
 8000cf0:	801a      	strh	r2, [r3, #0]
				Tb = T2 + (T0/2);
 8000cf2:	4b55      	ldr	r3, [pc, #340]	; (8000e48 <SVPWM+0x268>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	da00      	bge.n	8000cfc <SVPWM+0x11c>
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	105b      	asrs	r3, r3, #1
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	4b4f      	ldr	r3, [pc, #316]	; (8000e40 <SVPWM+0x260>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	4413      	add	r3, r2
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	4b51      	ldr	r3, [pc, #324]	; (8000e50 <SVPWM+0x270>)
 8000d0c:	801a      	strh	r2, [r3, #0]
				Tc = (T0/2);
 8000d0e:	4b4e      	ldr	r3, [pc, #312]	; (8000e48 <SVPWM+0x268>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	da00      	bge.n	8000d18 <SVPWM+0x138>
 8000d16:	3301      	adds	r3, #1
 8000d18:	105b      	asrs	r3, r3, #1
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	4b4d      	ldr	r3, [pc, #308]	; (8000e54 <SVPWM+0x274>)
 8000d1e:	801a      	strh	r2, [r3, #0]
				break;
 8000d20:	e0f9      	b.n	8000f16 <SVPWM+0x336>
			case 2:
				Ta = T1 + (T0/2);
 8000d22:	4b49      	ldr	r3, [pc, #292]	; (8000e48 <SVPWM+0x268>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	da00      	bge.n	8000d2c <SVPWM+0x14c>
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	105b      	asrs	r3, r3, #1
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <SVPWM+0x25c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	4413      	add	r3, r2
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	4b44      	ldr	r3, [pc, #272]	; (8000e4c <SVPWM+0x26c>)
 8000d3c:	801a      	strh	r2, [r3, #0]
				Tb = T1 + T2 + (T0/2);
 8000d3e:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <SVPWM+0x25c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	4b3e      	ldr	r3, [pc, #248]	; (8000e40 <SVPWM+0x260>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	4b3e      	ldr	r3, [pc, #248]	; (8000e48 <SVPWM+0x268>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	da00      	bge.n	8000d58 <SVPWM+0x178>
 8000d56:	3301      	adds	r3, #1
 8000d58:	105b      	asrs	r3, r3, #1
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	4413      	add	r3, r2
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	4b3b      	ldr	r3, [pc, #236]	; (8000e50 <SVPWM+0x270>)
 8000d62:	801a      	strh	r2, [r3, #0]
				Tc = (T0/2);
 8000d64:	4b38      	ldr	r3, [pc, #224]	; (8000e48 <SVPWM+0x268>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	da00      	bge.n	8000d6e <SVPWM+0x18e>
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	105b      	asrs	r3, r3, #1
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	4b38      	ldr	r3, [pc, #224]	; (8000e54 <SVPWM+0x274>)
 8000d74:	801a      	strh	r2, [r3, #0]
				break;
 8000d76:	e0ce      	b.n	8000f16 <SVPWM+0x336>
			case 3:
				Ta = (T0/2);
 8000d78:	4b33      	ldr	r3, [pc, #204]	; (8000e48 <SVPWM+0x268>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	da00      	bge.n	8000d82 <SVPWM+0x1a2>
 8000d80:	3301      	adds	r3, #1
 8000d82:	105b      	asrs	r3, r3, #1
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	4b31      	ldr	r3, [pc, #196]	; (8000e4c <SVPWM+0x26c>)
 8000d88:	801a      	strh	r2, [r3, #0]
				Tb = T1 + T2 + (T0/2);
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <SVPWM+0x25c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <SVPWM+0x260>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	4413      	add	r3, r2
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <SVPWM+0x268>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	da00      	bge.n	8000da4 <SVPWM+0x1c4>
 8000da2:	3301      	adds	r3, #1
 8000da4:	105b      	asrs	r3, r3, #1
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	4413      	add	r3, r2
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <SVPWM+0x270>)
 8000dae:	801a      	strh	r2, [r3, #0]
				Tc = T2 + (T0/2);
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <SVPWM+0x268>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	da00      	bge.n	8000dba <SVPWM+0x1da>
 8000db8:	3301      	adds	r3, #1
 8000dba:	105b      	asrs	r3, r3, #1
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <SVPWM+0x260>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <SVPWM+0x274>)
 8000dca:	801a      	strh	r2, [r3, #0]
				break;
 8000dcc:	e0a3      	b.n	8000f16 <SVPWM+0x336>
			case 4:
				Ta = (T0/2);
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <SVPWM+0x268>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	da00      	bge.n	8000dd8 <SVPWM+0x1f8>
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	105b      	asrs	r3, r3, #1
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <SVPWM+0x26c>)
 8000dde:	801a      	strh	r2, [r3, #0]
				Tb = T1 + (T0/2);
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <SVPWM+0x268>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	da00      	bge.n	8000dea <SVPWM+0x20a>
 8000de8:	3301      	adds	r3, #1
 8000dea:	105b      	asrs	r3, r3, #1
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <SVPWM+0x25c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	4413      	add	r3, r2
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <SVPWM+0x270>)
 8000dfa:	801a      	strh	r2, [r3, #0]
				Tc = T1 + T2 + (T0/2);
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <SVPWM+0x25c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <SVPWM+0x260>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4413      	add	r3, r2
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <SVPWM+0x268>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	da00      	bge.n	8000e16 <SVPWM+0x236>
 8000e14:	3301      	adds	r3, #1
 8000e16:	105b      	asrs	r3, r3, #1
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	4413      	add	r3, r2
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <SVPWM+0x274>)
 8000e20:	801a      	strh	r2, [r3, #0]
				break;
 8000e22:	e078      	b.n	8000f16 <SVPWM+0x336>
 8000e24:	200005eb 	.word	0x200005eb
 8000e28:	200005ec 	.word	0x200005ec
 8000e2c:	88888889 	.word	0x88888889
 8000e30:	200005ea 	.word	0x200005ea
 8000e34:	2000001e 	.word	0x2000001e
 8000e38:	9d414457 	.word	0x9d414457
 8000e3c:	200005d8 	.word	0x200005d8
 8000e40:	200005dc 	.word	0x200005dc
 8000e44:	2000001c 	.word	0x2000001c
 8000e48:	200005e0 	.word	0x200005e0
 8000e4c:	200005e4 	.word	0x200005e4
 8000e50:	200005e6 	.word	0x200005e6
 8000e54:	200005e8 	.word	0x200005e8
			case 5:
				Ta = T2 + (T0/2);
 8000e58:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <SVPWM+0x368>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	da00      	bge.n	8000e62 <SVPWM+0x282>
 8000e60:	3301      	adds	r3, #1
 8000e62:	105b      	asrs	r3, r3, #1
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <SVPWM+0x36c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	4b37      	ldr	r3, [pc, #220]	; (8000f50 <SVPWM+0x370>)
 8000e72:	801a      	strh	r2, [r3, #0]
				Tb = (T0/2);
 8000e74:	4b34      	ldr	r3, [pc, #208]	; (8000f48 <SVPWM+0x368>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	da00      	bge.n	8000e7e <SVPWM+0x29e>
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	105b      	asrs	r3, r3, #1
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b34      	ldr	r3, [pc, #208]	; (8000f54 <SVPWM+0x374>)
 8000e84:	801a      	strh	r2, [r3, #0]
				Tc = T1 + T2 + (T0/2);
 8000e86:	4b34      	ldr	r3, [pc, #208]	; (8000f58 <SVPWM+0x378>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <SVPWM+0x36c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	4413      	add	r3, r2
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <SVPWM+0x368>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	da00      	bge.n	8000ea0 <SVPWM+0x2c0>
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	105b      	asrs	r3, r3, #1
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <SVPWM+0x37c>)
 8000eaa:	801a      	strh	r2, [r3, #0]
				break;
 8000eac:	e033      	b.n	8000f16 <SVPWM+0x336>
			case 6:
				Ta = T1 + T2 + (T0/2);
 8000eae:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <SVPWM+0x378>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <SVPWM+0x36c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	4413      	add	r3, r2
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <SVPWM+0x368>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	da00      	bge.n	8000ec8 <SVPWM+0x2e8>
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	105b      	asrs	r3, r3, #1
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	4413      	add	r3, r2
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <SVPWM+0x370>)
 8000ed2:	801a      	strh	r2, [r3, #0]
				Tb = (T0/2);
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <SVPWM+0x368>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da00      	bge.n	8000ede <SVPWM+0x2fe>
 8000edc:	3301      	adds	r3, #1
 8000ede:	105b      	asrs	r3, r3, #1
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <SVPWM+0x374>)
 8000ee4:	801a      	strh	r2, [r3, #0]
				Tc = T1 + (T0/2);
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <SVPWM+0x368>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	da00      	bge.n	8000ef0 <SVPWM+0x310>
 8000eee:	3301      	adds	r3, #1
 8000ef0:	105b      	asrs	r3, r3, #1
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <SVPWM+0x378>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4413      	add	r3, r2
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <SVPWM+0x37c>)
 8000f00:	801a      	strh	r2, [r3, #0]
				break;
 8000f02:	e008      	b.n	8000f16 <SVPWM+0x336>
			default:
				Ta = 0;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <SVPWM+0x370>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	801a      	strh	r2, [r3, #0]
				Tb = 0;
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <SVPWM+0x374>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	801a      	strh	r2, [r3, #0]
				Tc = 0;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <SVPWM+0x37c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	801a      	strh	r2, [r3, #0]
		}

		TIM1->CCR1 = Ta;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <SVPWM+0x370>)
 8000f18:	881a      	ldrh	r2, [r3, #0]
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <SVPWM+0x380>)
 8000f1c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = Tb;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <SVPWM+0x374>)
 8000f20:	881a      	ldrh	r2, [r3, #0]
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <SVPWM+0x380>)
 8000f24:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = Tc;
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <SVPWM+0x37c>)
 8000f28:	881a      	ldrh	r2, [r3, #0]
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <SVPWM+0x380>)
 8000f2c:	63da      	str	r2, [r3, #60]	; 0x3c
	} else {
		TIM1->CCR1 = 0;
		TIM1->CCR2 = 0;
		TIM1->CCR3 = 0;
	}
}
 8000f2e:	e008      	b.n	8000f42 <SVPWM+0x362>
		TIM1->CCR1 = 0;
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <SVPWM+0x380>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <SVPWM+0x380>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <SVPWM+0x380>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000f42:	bf00      	nop
 8000f44:	bd98      	pop	{r3, r4, r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200005e0 	.word	0x200005e0
 8000f4c:	200005dc 	.word	0x200005dc
 8000f50:	200005e4 	.word	0x200005e4
 8000f54:	200005e6 	.word	0x200005e6
 8000f58:	200005d8 	.word	0x200005d8
 8000f5c:	200005e8 	.word	0x200005e8
 8000f60:	40010000 	.word	0x40010000

08000f64 <transferUART>:
 * This function transfers data over UART
 *
 */
int16_t arr[10000], idx;
uint32_t err,asdsda,nasd;
void transferUART(){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	if(startTx){
 8000f68:	4b5f      	ldr	r3, [pc, #380]	; (80010e8 <transferUART+0x184>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 80b9 	beq.w	80010e4 <transferUART+0x180>
			txData[0] = ((thetaElec - 180 + 30000)) & 0xff;
 8000f72:	4b5e      	ldr	r3, [pc, #376]	; (80010ec <transferUART+0x188>)
 8000f74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	337c      	adds	r3, #124	; 0x7c
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b5c      	ldr	r3, [pc, #368]	; (80010f0 <transferUART+0x18c>)
 8000f80:	701a      	strb	r2, [r3, #0]
			txData[1] = ((thetaElec - 180 + 30000) >> 8) & 0xff;
 8000f82:	4b5a      	ldr	r3, [pc, #360]	; (80010ec <transferUART+0x188>)
 8000f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	f247 437c 	movw	r3, #29820	; 0x747c
 8000f8e:	4413      	add	r3, r2
 8000f90:	121b      	asrs	r3, r3, #8
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b56      	ldr	r3, [pc, #344]	; (80010f0 <transferUART+0x18c>)
 8000f96:	705a      	strb	r2, [r3, #1]

			txData[2] = ((uint16_t)(annOut*100 + 30000)) & 0xff;
 8000f98:	4b56      	ldr	r3, [pc, #344]	; (80010f4 <transferUART+0x190>)
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80010f8 <transferUART+0x194>
 8000fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80010fc <transferUART+0x198>
 8000faa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb2:	ee17 3a90 	vmov	r3, s15
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b4d      	ldr	r3, [pc, #308]	; (80010f0 <transferUART+0x18c>)
 8000fbc:	709a      	strb	r2, [r3, #2]
			txData[3] = ((uint16_t)(annOut*100 + 30000) >> 8) & 0xff;
 8000fbe:	4b4d      	ldr	r3, [pc, #308]	; (80010f4 <transferUART+0x190>)
 8000fc0:	edd3 7a00 	vldr	s15, [r3]
 8000fc4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80010f8 <transferUART+0x194>
 8000fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fcc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80010fc <transferUART+0x198>
 8000fd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fd8:	ee17 3a90 	vmov	r3, s15
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	0a1b      	lsrs	r3, r3, #8
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b42      	ldr	r3, [pc, #264]	; (80010f0 <transferUART+0x18c>)
 8000fe6:	70da      	strb	r2, [r3, #3]

//			txData[2] = ((uint16_t)(Valbt.alpha*100 + 30000)) & 0xff;
//			txData[3] = ((uint16_t)(Valbt.alpha*100 + 30000) >> 8) & 0xff;

			txData[4] = ((uint16_t)(Valbt.beta*100 + 30000)) & 0xff;
 8000fe8:	4b45      	ldr	r3, [pc, #276]	; (8001100 <transferUART+0x19c>)
 8000fea:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fee:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80010f8 <transferUART+0x194>
 8000ff2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff6:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80010fc <transferUART+0x198>
 8000ffa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001002:	ee17 3a90 	vmov	r3, s15
 8001006:	b29b      	uxth	r3, r3
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b39      	ldr	r3, [pc, #228]	; (80010f0 <transferUART+0x18c>)
 800100c:	711a      	strb	r2, [r3, #4]
			txData[5] = (((uint16_t)(Valbt.beta*100 + 30000)) >> 8) & 0xff;
 800100e:	4b3c      	ldr	r3, [pc, #240]	; (8001100 <transferUART+0x19c>)
 8001010:	edd3 7a01 	vldr	s15, [r3, #4]
 8001014:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80010f8 <transferUART+0x194>
 8001018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800101c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80010fc <transferUART+0x198>
 8001020:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001028:	ee17 3a90 	vmov	r3, s15
 800102c:	b29b      	uxth	r3, r3
 800102e:	0a1b      	lsrs	r3, r3, #8
 8001030:	b29b      	uxth	r3, r3
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <transferUART+0x18c>)
 8001036:	715a      	strb	r2, [r3, #5]

			txData[6] = ((uint16_t)(Ialbt.alpha*100 + 30000)) & 0xff;
 8001038:	4b32      	ldr	r3, [pc, #200]	; (8001104 <transferUART+0x1a0>)
 800103a:	edd3 7a00 	vldr	s15, [r3]
 800103e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80010f8 <transferUART+0x194>
 8001042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001046:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80010fc <transferUART+0x198>
 800104a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800104e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001052:	ee17 3a90 	vmov	r3, s15
 8001056:	b29b      	uxth	r3, r3
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <transferUART+0x18c>)
 800105c:	719a      	strb	r2, [r3, #6]
			txData[7] = (((uint16_t)(Ialbt.alpha*100 + 30000)) >> 8) & 0xff;
 800105e:	4b29      	ldr	r3, [pc, #164]	; (8001104 <transferUART+0x1a0>)
 8001060:	edd3 7a00 	vldr	s15, [r3]
 8001064:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80010f8 <transferUART+0x194>
 8001068:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80010fc <transferUART+0x198>
 8001070:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001078:	ee17 3a90 	vmov	r3, s15
 800107c:	b29b      	uxth	r3, r3
 800107e:	0a1b      	lsrs	r3, r3, #8
 8001080:	b29b      	uxth	r3, r3
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <transferUART+0x18c>)
 8001086:	71da      	strb	r2, [r3, #7]

			txData[8] = ((uint16_t)(Ialbt.beta*100 + 30000)) & 0xff;
 8001088:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <transferUART+0x1a0>)
 800108a:	edd3 7a01 	vldr	s15, [r3, #4]
 800108e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80010f8 <transferUART+0x194>
 8001092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001096:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80010fc <transferUART+0x198>
 800109a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800109e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a2:	ee17 3a90 	vmov	r3, s15
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <transferUART+0x18c>)
 80010ac:	721a      	strb	r2, [r3, #8]
			txData[9] = (((uint16_t)(Ialbt.beta*100 + 30000)) >> 8) & 0xff;
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <transferUART+0x1a0>)
 80010b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80010b4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80010f8 <transferUART+0x194>
 80010b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010bc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80010fc <transferUART+0x198>
 80010c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c8:	ee17 3a90 	vmov	r3, s15
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	0a1b      	lsrs	r3, r3, #8
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <transferUART+0x18c>)
 80010d6:	725a      	strb	r2, [r3, #9]

			HAL_UART_Transmit(&huart3, txData,10,10);
 80010d8:	230a      	movs	r3, #10
 80010da:	220a      	movs	r2, #10
 80010dc:	4904      	ldr	r1, [pc, #16]	; (80010f0 <transferUART+0x18c>)
 80010de:	480a      	ldr	r0, [pc, #40]	; (8001108 <transferUART+0x1a4>)
 80010e0:	f00b f888 	bl	800c1f4 <HAL_UART_Transmit>
//			startTx = 0;
//			testEnd = 0;
//			err = 0;
//		}
	}
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200056ae 	.word	0x200056ae
 80010ec:	20000688 	.word	0x20000688
 80010f0:	200056a4 	.word	0x200056a4
 80010f4:	20000800 	.word	0x20000800
 80010f8:	42c80000 	.word	0x42c80000
 80010fc:	46ea6000 	.word	0x46ea6000
 8001100:	200007f8 	.word	0x200007f8
 8001104:	2000087c 	.word	0x2000087c
 8001108:	200006c4 	.word	0x200006c4

0800110c <receiveUART>:

/**
 * This function initializes UART DMA receive
 *
 */
void receiveUART(){
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart3, comCode, 3);
 8001110:	2203      	movs	r2, #3
 8001112:	4903      	ldr	r1, [pc, #12]	; (8001120 <receiveUART+0x14>)
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <receiveUART+0x18>)
 8001116:	f00b f903 	bl	800c320 <HAL_UART_Receive_DMA>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	24001000 	.word	0x24001000
 8001124:	200006c4 	.word	0x200006c4

08001128 <handleRxCommands>:
/**
 * This function is a handler for received data
 *
 */

void handleRxCommands(){
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0

	if(comCode[0] == 101){
 800112c:	4b40      	ldr	r3, [pc, #256]	; (8001230 <handleRxCommands+0x108>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b65      	cmp	r3, #101	; 0x65
 8001132:	d105      	bne.n	8001140 <handleRxCommands+0x18>
		startTx = 1;
 8001134:	4b3f      	ldr	r3, [pc, #252]	; (8001234 <handleRxCommands+0x10c>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
		switchToANN();
 800113a:	f000 fbe7 	bl	800190c <switchToANN>
	} else if(comCode[0] == 109){
		speedReq = comCode[1] + 256*comCode[2];
	} else if(comCode[0] == 110){
		HAL_NVIC_SystemReset();
	}
}
 800113e:	e075      	b.n	800122c <handleRxCommands+0x104>
	} else if(comCode[0] == 102){
 8001140:	4b3b      	ldr	r3, [pc, #236]	; (8001230 <handleRxCommands+0x108>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b66      	cmp	r3, #102	; 0x66
 8001146:	d103      	bne.n	8001150 <handleRxCommands+0x28>
		startTx = 0;
 8001148:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <handleRxCommands+0x10c>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
}
 800114e:	e06d      	b.n	800122c <handleRxCommands+0x104>
	} else if(comCode[0] == 103){
 8001150:	4b37      	ldr	r3, [pc, #220]	; (8001230 <handleRxCommands+0x108>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b67      	cmp	r3, #103	; 0x67
 8001156:	d102      	bne.n	800115e <handleRxCommands+0x36>
		stopMotor();
 8001158:	f000 f8c6 	bl	80012e8 <stopMotor>
}
 800115c:	e066      	b.n	800122c <handleRxCommands+0x104>
	} else if(comCode[0] == 104){
 800115e:	4b34      	ldr	r3, [pc, #208]	; (8001230 <handleRxCommands+0x108>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b68      	cmp	r3, #104	; 0x68
 8001164:	d102      	bne.n	800116c <handleRxCommands+0x44>
		startMotor();
 8001166:	f000 f8a7 	bl	80012b8 <startMotor>
}
 800116a:	e05f      	b.n	800122c <handleRxCommands+0x104>
	} else if(comCode[0] == 105){
 800116c:	4b30      	ldr	r3, [pc, #192]	; (8001230 <handleRxCommands+0x108>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b69      	cmp	r3, #105	; 0x69
 8001172:	d10d      	bne.n	8001190 <handleRxCommands+0x68>
		sigma = comCode[1] + 256*comCode[2];
 8001174:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <handleRxCommands+0x108>)
 8001176:	785b      	ldrb	r3, [r3, #1]
 8001178:	b29a      	uxth	r2, r3
 800117a:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <handleRxCommands+0x108>)
 800117c:	789b      	ldrb	r3, [r3, #2]
 800117e:	b29b      	uxth	r3, r3
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b29b      	uxth	r3, r3
 8001184:	4413      	add	r3, r2
 8001186:	b29b      	uxth	r3, r3
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <handleRxCommands+0x110>)
 800118c:	801a      	strh	r2, [r3, #0]
}
 800118e:	e04d      	b.n	800122c <handleRxCommands+0x104>
	} else if(comCode[0] == 106){
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <handleRxCommands+0x108>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b6a      	cmp	r3, #106	; 0x6a
 8001196:	d10d      	bne.n	80011b4 <handleRxCommands+0x8c>
		delta = comCode[1] + 256*comCode[2];
 8001198:	4b25      	ldr	r3, [pc, #148]	; (8001230 <handleRxCommands+0x108>)
 800119a:	785b      	ldrb	r3, [r3, #1]
 800119c:	b29a      	uxth	r2, r3
 800119e:	4b24      	ldr	r3, [pc, #144]	; (8001230 <handleRxCommands+0x108>)
 80011a0:	789b      	ldrb	r3, [r3, #2]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	4413      	add	r3, r2
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <handleRxCommands+0x114>)
 80011b0:	801a      	strh	r2, [r3, #0]
}
 80011b2:	e03b      	b.n	800122c <handleRxCommands+0x104>
	} else if(comCode[0] == 107){
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <handleRxCommands+0x108>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b6b      	cmp	r3, #107	; 0x6b
 80011ba:	d10d      	bne.n	80011d8 <handleRxCommands+0xb0>
		Kp = comCode[1] + 256*comCode[2];
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <handleRxCommands+0x108>)
 80011be:	785b      	ldrb	r3, [r3, #1]
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <handleRxCommands+0x108>)
 80011c4:	789b      	ldrb	r3, [r3, #2]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4413      	add	r3, r2
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <handleRxCommands+0x118>)
 80011d4:	801a      	strh	r2, [r3, #0]
}
 80011d6:	e029      	b.n	800122c <handleRxCommands+0x104>
	} else if(comCode[0] == 108){
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <handleRxCommands+0x108>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b6c      	cmp	r3, #108	; 0x6c
 80011de:	d10d      	bne.n	80011fc <handleRxCommands+0xd4>
		Ki = comCode[1] + 256*comCode[2];
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <handleRxCommands+0x108>)
 80011e2:	785b      	ldrb	r3, [r3, #1]
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	4b12      	ldr	r3, [pc, #72]	; (8001230 <handleRxCommands+0x108>)
 80011e8:	789b      	ldrb	r3, [r3, #2]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4413      	add	r3, r2
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <handleRxCommands+0x11c>)
 80011f8:	801a      	strh	r2, [r3, #0]
}
 80011fa:	e017      	b.n	800122c <handleRxCommands+0x104>
	} else if(comCode[0] == 109){
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <handleRxCommands+0x108>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b6d      	cmp	r3, #109	; 0x6d
 8001202:	d10d      	bne.n	8001220 <handleRxCommands+0xf8>
		speedReq = comCode[1] + 256*comCode[2];
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <handleRxCommands+0x108>)
 8001206:	785b      	ldrb	r3, [r3, #1]
 8001208:	b29a      	uxth	r2, r3
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <handleRxCommands+0x108>)
 800120c:	789b      	ldrb	r3, [r3, #2]
 800120e:	b29b      	uxth	r3, r3
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	b29b      	uxth	r3, r3
 8001214:	4413      	add	r3, r2
 8001216:	b29b      	uxth	r3, r3
 8001218:	b21a      	sxth	r2, r3
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <handleRxCommands+0x120>)
 800121c:	801a      	strh	r2, [r3, #0]
}
 800121e:	e005      	b.n	800122c <handleRxCommands+0x104>
	} else if(comCode[0] == 110){
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <handleRxCommands+0x108>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b6e      	cmp	r3, #110	; 0x6e
 8001226:	d101      	bne.n	800122c <handleRxCommands+0x104>
		HAL_NVIC_SystemReset();
 8001228:	f003 fcb5 	bl	8004b96 <HAL_NVIC_SystemReset>
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	24001000 	.word	0x24001000
 8001234:	200056ae 	.word	0x200056ae
 8001238:	200007ea 	.word	0x200007ea
 800123c:	20000818 	.word	0x20000818
 8001240:	2000082c 	.word	0x2000082c
 8001244:	20000754 	.word	0x20000754
 8001248:	20000054 	.word	0x20000054

0800124c <initalPositionSet>:
 * This function controls initial position of motor
 *
 */
uint16_t cnts = 0;
uint16_t executionCount = 101;
void initalPositionSet(){
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
	if(cnts < 1000){
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <initalPositionSet+0x4c>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001258:	d203      	bcs.n	8001262 <initalPositionSet+0x16>
		wt = 30;
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <initalPositionSet+0x50>)
 800125c:	221e      	movs	r2, #30
 800125e:	801a      	strh	r2, [r3, #0]
		thetaElec = 0;
		TIM3->CNT = 0;
		speed = 0;
		wr = 0;
	}
}
 8001260:	e015      	b.n	800128e <initalPositionSet+0x42>
		wt = 0;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <initalPositionSet+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	801a      	strh	r2, [r3, #0]
		thetaElecTemp = 0;
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <initalPositionSet+0x54>)
 800126a:	2200      	movs	r2, #0
 800126c:	801a      	strh	r2, [r3, #0]
		thetaMech = 0;
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <initalPositionSet+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	801a      	strh	r2, [r3, #0]
		thetaElec = 0;
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <initalPositionSet+0x5c>)
 8001276:	2200      	movs	r2, #0
 8001278:	801a      	strh	r2, [r3, #0]
		TIM3->CNT = 0;
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <initalPositionSet+0x60>)
 800127c:	2200      	movs	r2, #0
 800127e:	625a      	str	r2, [r3, #36]	; 0x24
		speed = 0;
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <initalPositionSet+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	801a      	strh	r2, [r3, #0]
		wr = 0;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <initalPositionSet+0x68>)
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	200005ee 	.word	0x200005ee
 800129c:	200005ec 	.word	0x200005ec
 80012a0:	2000075a 	.word	0x2000075a
 80012a4:	20000788 	.word	0x20000788
 80012a8:	20000688 	.word	0x20000688
 80012ac:	40000400 	.word	0x40000400
 80012b0:	20000820 	.word	0x20000820
 80012b4:	20000830 	.word	0x20000830

080012b8 <startMotor>:

/**
 * This function controls starting of motor with Blue button
 *
 */
void startMotor(){
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
	run = 1;
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <startMotor+0x24>)
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
	Iterm = 0;
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <startMotor+0x28>)
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
	sum = 0;
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <startMotor+0x2c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	801a      	strh	r2, [r3, #0]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	200005eb 	.word	0x200005eb
 80012e0:	200005f8 	.word	0x200005f8
 80012e4:	20000760 	.word	0x20000760

080012e8 <stopMotor>:

/**
 * This function controls stopping of motor with Blue button
 *
 */
void stopMotor(){
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
	run = 0;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <stopMotor+0x14>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	200005eb 	.word	0x200005eb

08001300 <executeAll>:
/**
 * This function controls the execution and ADC measurement
 *
 */
uint16_t ex;
void executeAll(){
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001304:	2101      	movs	r1, #1
 8001306:	4823      	ldr	r0, [pc, #140]	; (8001394 <executeAll+0x94>)
 8001308:	f006 f85d 	bl	80073c6 <HAL_GPIO_TogglePin>
	measureADC();
 800130c:	f000 f9e8 	bl	80016e0 <measureADC>

	if(run){
 8001310:	4b21      	ldr	r3, [pc, #132]	; (8001398 <executeAll+0x98>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d02f      	beq.n	8001378 <executeAll+0x78>
		if(cnts < 2000){
 8001318:	4b20      	ldr	r3, [pc, #128]	; (800139c <executeAll+0x9c>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001320:	d20c      	bcs.n	800133c <executeAll+0x3c>
			V = 300;
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <executeAll+0xa0>)
 8001324:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001328:	801a      	strh	r2, [r3, #0]
			initalPositionSet();
 800132a:	f7ff ff8f 	bl	800124c <initalPositionSet>
			cnts++;
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <executeAll+0x9c>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	b29a      	uxth	r2, r3
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <executeAll+0x9c>)
 8001338:	801a      	strh	r2, [r3, #0]
 800133a:	e01a      	b.n	8001372 <executeAll+0x72>
		} else if(cnts >= 2000 && cnts < 3000){
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <executeAll+0x9c>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001344:	d30f      	bcc.n	8001366 <executeAll+0x66>
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <executeAll+0x9c>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800134e:	4293      	cmp	r3, r2
 8001350:	d809      	bhi.n	8001366 <executeAll+0x66>
			cnts++;
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <executeAll+0x9c>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	b29a      	uxth	r2, r3
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <executeAll+0x9c>)
 800135c:	801a      	strh	r2, [r3, #0]
			V = 0;
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <executeAll+0xa0>)
 8001360:	2200      	movs	r2, #0
 8001362:	801a      	strh	r2, [r3, #0]
 8001364:	e005      	b.n	8001372 <executeAll+0x72>
		} else {
			V = 700;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <executeAll+0xa0>)
 8001368:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800136c:	801a      	strh	r2, [r3, #0]
//			testSVPWM();
			modelPredictiveControl();
 800136e:	f7ff f9fb 	bl	8000768 <modelPredictiveControl>
//			} else {
//				ex++;
//			}
		}

		transferUART();
 8001372:	f7ff fdf7 	bl	8000f64 <transferUART>
 8001376:	e005      	b.n	8001384 <executeAll+0x84>
	} else {
		V = 0;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <executeAll+0xa0>)
 800137a:	2200      	movs	r2, #0
 800137c:	801a      	strh	r2, [r3, #0]
		cnts = 0;
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <executeAll+0x9c>)
 8001380:	2200      	movs	r2, #0
 8001382:	801a      	strh	r2, [r3, #0]
	}

	SVPWM();
 8001384:	f7ff fc2c 	bl	8000be0 <SVPWM>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001388:	2101      	movs	r1, #1
 800138a:	4802      	ldr	r0, [pc, #8]	; (8001394 <executeAll+0x94>)
 800138c:	f006 f81b 	bl	80073c6 <HAL_GPIO_TogglePin>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	58020400 	.word	0x58020400
 8001398:	200005eb 	.word	0x200005eb
 800139c:	200005ee 	.word	0x200005ee
 80013a0:	2000001e 	.word	0x2000001e

080013a4 <computePositionWithEncoder>:
 *
 */
uint16_t x = 1;
uint8_t switchANN = 0;

void computePositionWithEncoder(){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
//
//	untitled0_step();

//	arr = arr_old;

	for(uint16_t i=0;i<19;i++){
 80013aa:	2300      	movs	r3, #0
 80013ac:	80fb      	strh	r3, [r7, #6]
 80013ae:	e031      	b.n	8001414 <computePositionWithEncoder+0x70>
		((ai_float *)in_data)[i] = ((ai_float *)in_data)[i+1];
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	3301      	adds	r3, #1
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4aab      	ldr	r2, [pc, #684]	; (8001664 <computePositionWithEncoder+0x2c0>)
 80013b8:	441a      	add	r2, r3
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	49a9      	ldr	r1, [pc, #676]	; (8001664 <computePositionWithEncoder+0x2c0>)
 80013c0:	440b      	add	r3, r1
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	601a      	str	r2, [r3, #0]
		((ai_float *)in_data)[i+20] = ((ai_float *)in_data)[i+21];
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	3315      	adds	r3, #21
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4aa5      	ldr	r2, [pc, #660]	; (8001664 <computePositionWithEncoder+0x2c0>)
 80013ce:	441a      	add	r2, r3
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	3314      	adds	r3, #20
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	49a3      	ldr	r1, [pc, #652]	; (8001664 <computePositionWithEncoder+0x2c0>)
 80013d8:	440b      	add	r3, r1
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	601a      	str	r2, [r3, #0]
		((ai_float *)in_data)[i+40] = ((ai_float *)in_data)[i+41];
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	3329      	adds	r3, #41	; 0x29
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4a9f      	ldr	r2, [pc, #636]	; (8001664 <computePositionWithEncoder+0x2c0>)
 80013e6:	441a      	add	r2, r3
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	3328      	adds	r3, #40	; 0x28
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	499d      	ldr	r1, [pc, #628]	; (8001664 <computePositionWithEncoder+0x2c0>)
 80013f0:	440b      	add	r3, r1
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	601a      	str	r2, [r3, #0]
		((ai_float *)in_data)[i+60] = ((ai_float *)in_data)[i+61];
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	333d      	adds	r3, #61	; 0x3d
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4a99      	ldr	r2, [pc, #612]	; (8001664 <computePositionWithEncoder+0x2c0>)
 80013fe:	441a      	add	r2, r3
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	333c      	adds	r3, #60	; 0x3c
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4997      	ldr	r1, [pc, #604]	; (8001664 <computePositionWithEncoder+0x2c0>)
 8001408:	440b      	add	r3, r1
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	601a      	str	r2, [r3, #0]
	for(uint16_t i=0;i<19;i++){
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	3301      	adds	r3, #1
 8001412:	80fb      	strh	r3, [r7, #6]
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	2b12      	cmp	r3, #18
 8001418:	d9ca      	bls.n	80013b0 <computePositionWithEncoder+0xc>
	}

	((ai_float *)in_data)[19] = Valbt.alpha/7;
 800141a:	4b93      	ldr	r3, [pc, #588]	; (8001668 <computePositionWithEncoder+0x2c4>)
 800141c:	ed93 7a00 	vldr	s14, [r3]
 8001420:	4b92      	ldr	r3, [pc, #584]	; (800166c <computePositionWithEncoder+0x2c8>)
 8001422:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 8001426:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142a:	edc3 7a00 	vstr	s15, [r3]
	((ai_float *)in_data)[39] = Valbt.beta/7;
 800142e:	4b8e      	ldr	r3, [pc, #568]	; (8001668 <computePositionWithEncoder+0x2c4>)
 8001430:	ed93 7a01 	vldr	s14, [r3, #4]
 8001434:	4b8e      	ldr	r3, [pc, #568]	; (8001670 <computePositionWithEncoder+0x2cc>)
 8001436:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 800143a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800143e:	edc3 7a00 	vstr	s15, [r3]
	((ai_float *)in_data)[59] = Ialbt.alpha/1230;
 8001442:	4b8c      	ldr	r3, [pc, #560]	; (8001674 <computePositionWithEncoder+0x2d0>)
 8001444:	ed93 7a00 	vldr	s14, [r3]
 8001448:	4b8b      	ldr	r3, [pc, #556]	; (8001678 <computePositionWithEncoder+0x2d4>)
 800144a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800167c <computePositionWithEncoder+0x2d8>
 800144e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001452:	edc3 7a00 	vstr	s15, [r3]
	((ai_float *)in_data)[79] = Ialbt.beta/1230;
 8001456:	4b87      	ldr	r3, [pc, #540]	; (8001674 <computePositionWithEncoder+0x2d0>)
 8001458:	ed93 7a01 	vldr	s14, [r3, #4]
 800145c:	4b88      	ldr	r3, [pc, #544]	; (8001680 <computePositionWithEncoder+0x2dc>)
 800145e:	eddf 6a87 	vldr	s13, [pc, #540]	; 800167c <computePositionWithEncoder+0x2d8>
 8001462:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001466:	edc3 7a00 	vstr	s15, [r3]
	runANN();
 800146a:	f000 fa01 	bl	8001870 <runANN>


//	if(switchANN){
//		thetaElec = annOut + 180;
//	} else {
		thetaElec = 90 + 360*TIM3->CNT/300;
 800146e:	4b85      	ldr	r3, [pc, #532]	; (8001684 <computePositionWithEncoder+0x2e0>)
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	4a83      	ldr	r2, [pc, #524]	; (8001688 <computePositionWithEncoder+0x2e4>)
 800147c:	fba2 2303 	umull	r2, r3, r2, r3
 8001480:	095b      	lsrs	r3, r3, #5
 8001482:	b29b      	uxth	r3, r3
 8001484:	335a      	adds	r3, #90	; 0x5a
 8001486:	b29b      	uxth	r3, r3
 8001488:	b21a      	sxth	r2, r3
 800148a:	4b80      	ldr	r3, [pc, #512]	; (800168c <computePositionWithEncoder+0x2e8>)
 800148c:	801a      	strh	r2, [r3, #0]
//	}

	if(thetaElec >= 360){
 800148e:	4b7f      	ldr	r3, [pc, #508]	; (800168c <computePositionWithEncoder+0x2e8>)
 8001490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001494:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001498:	db09      	blt.n	80014ae <computePositionWithEncoder+0x10a>
		thetaElec -= 360;
 800149a:	4b7c      	ldr	r3, [pc, #496]	; (800168c <computePositionWithEncoder+0x2e8>)
 800149c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	4b78      	ldr	r3, [pc, #480]	; (800168c <computePositionWithEncoder+0x2e8>)
 80014ac:	801a      	strh	r2, [r3, #0]
	}

	if(thetaElec != thetaElecOld){
 80014ae:	4b77      	ldr	r3, [pc, #476]	; (800168c <computePositionWithEncoder+0x2e8>)
 80014b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014b4:	4b76      	ldr	r3, [pc, #472]	; (8001690 <computePositionWithEncoder+0x2ec>)
 80014b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	f000 8104 	beq.w	80016c8 <computePositionWithEncoder+0x324>
		dTheta = thetaElec - thetaElecOld;
 80014c0:	4b72      	ldr	r3, [pc, #456]	; (800168c <computePositionWithEncoder+0x2e8>)
 80014c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b71      	ldr	r3, [pc, #452]	; (8001690 <computePositionWithEncoder+0x2ec>)
 80014ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	4b6f      	ldr	r3, [pc, #444]	; (8001694 <computePositionWithEncoder+0x2f0>)
 80014d8:	801a      	strh	r2, [r3, #0]
		if(dTheta > 300){
 80014da:	4b6e      	ldr	r3, [pc, #440]	; (8001694 <computePositionWithEncoder+0x2f0>)
 80014dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80014e4:	dd0a      	ble.n	80014fc <computePositionWithEncoder+0x158>
			dTheta -= 360;
 80014e6:	4b6b      	ldr	r3, [pc, #428]	; (8001694 <computePositionWithEncoder+0x2f0>)
 80014e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	4b67      	ldr	r3, [pc, #412]	; (8001694 <computePositionWithEncoder+0x2f0>)
 80014f8:	801a      	strh	r2, [r3, #0]
 80014fa:	e00f      	b.n	800151c <computePositionWithEncoder+0x178>
		} else if (dTheta < -300){
 80014fc:	4b65      	ldr	r3, [pc, #404]	; (8001694 <computePositionWithEncoder+0x2f0>)
 80014fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001502:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8001506:	da09      	bge.n	800151c <computePositionWithEncoder+0x178>
			dTheta += 360;
 8001508:	4b62      	ldr	r3, [pc, #392]	; (8001694 <computePositionWithEncoder+0x2f0>)
 800150a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150e:	b29b      	uxth	r3, r3
 8001510:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001514:	b29b      	uxth	r3, r3
 8001516:	b21a      	sxth	r2, r3
 8001518:	4b5e      	ldr	r3, [pc, #376]	; (8001694 <computePositionWithEncoder+0x2f0>)
 800151a:	801a      	strh	r2, [r3, #0]
		}

		thetaElecOld = thetaElec;
 800151c:	4b5b      	ldr	r3, [pc, #364]	; (800168c <computePositionWithEncoder+0x2e8>)
 800151e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001522:	4b5b      	ldr	r3, [pc, #364]	; (8001690 <computePositionWithEncoder+0x2ec>)
 8001524:	801a      	strh	r2, [r3, #0]

		speedTemp = dTheta*672/x;
 8001526:	4b5b      	ldr	r3, [pc, #364]	; (8001694 <computePositionWithEncoder+0x2f0>)
 8001528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152c:	461a      	mov	r2, r3
 800152e:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8001532:	fb03 f302 	mul.w	r3, r3, r2
 8001536:	4a58      	ldr	r2, [pc, #352]	; (8001698 <computePositionWithEncoder+0x2f4>)
 8001538:	8812      	ldrh	r2, [r2, #0]
 800153a:	fb93 f3f2 	sdiv	r3, r3, r2
 800153e:	b21a      	sxth	r2, r3
 8001540:	4b56      	ldr	r3, [pc, #344]	; (800169c <computePositionWithEncoder+0x2f8>)
 8001542:	801a      	strh	r2, [r3, #0]

		x = 1;
 8001544:	4b54      	ldr	r3, [pc, #336]	; (8001698 <computePositionWithEncoder+0x2f4>)
 8001546:	2201      	movs	r2, #1
 8001548:	801a      	strh	r2, [r3, #0]

		if(k>9){
 800154a:	4b55      	ldr	r3, [pc, #340]	; (80016a0 <computePositionWithEncoder+0x2fc>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	2b09      	cmp	r3, #9
 8001550:	d92c      	bls.n	80015ac <computePositionWithEncoder+0x208>
			sum += (speedTemp - speedArr[e]);
 8001552:	4b52      	ldr	r3, [pc, #328]	; (800169c <computePositionWithEncoder+0x2f8>)
 8001554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001558:	b29a      	uxth	r2, r3
 800155a:	4b52      	ldr	r3, [pc, #328]	; (80016a4 <computePositionWithEncoder+0x300>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	4619      	mov	r1, r3
 8001560:	4b51      	ldr	r3, [pc, #324]	; (80016a8 <computePositionWithEncoder+0x304>)
 8001562:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8001566:	b29b      	uxth	r3, r3
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	b29a      	uxth	r2, r3
 800156c:	4b4f      	ldr	r3, [pc, #316]	; (80016ac <computePositionWithEncoder+0x308>)
 800156e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001572:	b29b      	uxth	r3, r3
 8001574:	4413      	add	r3, r2
 8001576:	b29b      	uxth	r3, r3
 8001578:	b21a      	sxth	r2, r3
 800157a:	4b4c      	ldr	r3, [pc, #304]	; (80016ac <computePositionWithEncoder+0x308>)
 800157c:	801a      	strh	r2, [r3, #0]
			speedArr[e] = speedTemp;
 800157e:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <computePositionWithEncoder+0x300>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	4b45      	ldr	r3, [pc, #276]	; (800169c <computePositionWithEncoder+0x2f8>)
 8001586:	f9b3 1000 	ldrsh.w	r1, [r3]
 800158a:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <computePositionWithEncoder+0x304>)
 800158c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			e++;
 8001590:	4b44      	ldr	r3, [pc, #272]	; (80016a4 <computePositionWithEncoder+0x300>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	b29a      	uxth	r2, r3
 8001598:	4b42      	ldr	r3, [pc, #264]	; (80016a4 <computePositionWithEncoder+0x300>)
 800159a:	801a      	strh	r2, [r3, #0]

			if(e>9){
 800159c:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <computePositionWithEncoder+0x300>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	2b09      	cmp	r3, #9
 80015a2:	d91f      	bls.n	80015e4 <computePositionWithEncoder+0x240>
				e = 0;
 80015a4:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <computePositionWithEncoder+0x300>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	801a      	strh	r2, [r3, #0]
 80015aa:	e01b      	b.n	80015e4 <computePositionWithEncoder+0x240>
			}
		} else {
			sum += speedTemp;
 80015ac:	4b3f      	ldr	r3, [pc, #252]	; (80016ac <computePositionWithEncoder+0x308>)
 80015ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4b39      	ldr	r3, [pc, #228]	; (800169c <computePositionWithEncoder+0x2f8>)
 80015b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	4413      	add	r3, r2
 80015be:	b29b      	uxth	r3, r3
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4b3a      	ldr	r3, [pc, #232]	; (80016ac <computePositionWithEncoder+0x308>)
 80015c4:	801a      	strh	r2, [r3, #0]
			speedArr[k] = speedTemp;
 80015c6:	4b36      	ldr	r3, [pc, #216]	; (80016a0 <computePositionWithEncoder+0x2fc>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b33      	ldr	r3, [pc, #204]	; (800169c <computePositionWithEncoder+0x2f8>)
 80015ce:	f9b3 1000 	ldrsh.w	r1, [r3]
 80015d2:	4b35      	ldr	r3, [pc, #212]	; (80016a8 <computePositionWithEncoder+0x304>)
 80015d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			k++;
 80015d8:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <computePositionWithEncoder+0x2fc>)
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	b29a      	uxth	r2, r3
 80015e0:	4b2f      	ldr	r3, [pc, #188]	; (80016a0 <computePositionWithEncoder+0x2fc>)
 80015e2:	801a      	strh	r2, [r3, #0]
		}

		speed = (19*speed + sum/10)/20;
 80015e4:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <computePositionWithEncoder+0x30c>)
 80015e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ea:	461a      	mov	r2, r3
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4413      	add	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	441a      	add	r2, r3
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <computePositionWithEncoder+0x308>)
 80015f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fc:	492d      	ldr	r1, [pc, #180]	; (80016b4 <computePositionWithEncoder+0x310>)
 80015fe:	fb81 0103 	smull	r0, r1, r1, r3
 8001602:	1089      	asrs	r1, r1, #2
 8001604:	17db      	asrs	r3, r3, #31
 8001606:	1acb      	subs	r3, r1, r3
 8001608:	b21b      	sxth	r3, r3
 800160a:	4413      	add	r3, r2
 800160c:	4a29      	ldr	r2, [pc, #164]	; (80016b4 <computePositionWithEncoder+0x310>)
 800160e:	fb82 1203 	smull	r1, r2, r2, r3
 8001612:	10d2      	asrs	r2, r2, #3
 8001614:	17db      	asrs	r3, r3, #31
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	b21a      	sxth	r2, r3
 800161a:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <computePositionWithEncoder+0x30c>)
 800161c:	801a      	strh	r2, [r3, #0]
//		speed = (95*speed + 5*speedTemp)/100;

		wr = (float)speed*1047/10000;
 800161e:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <computePositionWithEncoder+0x30c>)
 8001620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80016b8 <computePositionWithEncoder+0x314>
 8001630:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001634:	eddf 6a21 	vldr	s13, [pc, #132]	; 80016bc <computePositionWithEncoder+0x318>
 8001638:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163c:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <computePositionWithEncoder+0x31c>)
 800163e:	edc3 7a00 	vstr	s15, [r3]

		if(speedPIrate>9){
 8001642:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <computePositionWithEncoder+0x320>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	2b09      	cmp	r3, #9
 8001648:	d905      	bls.n	8001656 <computePositionWithEncoder+0x2b2>
			SpeedPIController();
 800164a:	f000 fb5d 	bl	8001d08 <SpeedPIController>
			speedPIrate = 0;
 800164e:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <computePositionWithEncoder+0x320>)
 8001650:	2200      	movs	r2, #0
 8001652:	801a      	strh	r2, [r3, #0]
		}

	} else {
		x++;
	}
}
 8001654:	e03e      	b.n	80016d4 <computePositionWithEncoder+0x330>
			speedPIrate++;
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <computePositionWithEncoder+0x320>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	3301      	adds	r3, #1
 800165c:	b29a      	uxth	r2, r3
 800165e:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <computePositionWithEncoder+0x320>)
 8001660:	801a      	strh	r2, [r3, #0]
}
 8001662:	e037      	b.n	80016d4 <computePositionWithEncoder+0x330>
 8001664:	200056c4 	.word	0x200056c4
 8001668:	200007f8 	.word	0x200007f8
 800166c:	20005710 	.word	0x20005710
 8001670:	20005760 	.word	0x20005760
 8001674:	2000087c 	.word	0x2000087c
 8001678:	200057b0 	.word	0x200057b0
 800167c:	4499c000 	.word	0x4499c000
 8001680:	20005800 	.word	0x20005800
 8001684:	40000400 	.word	0x40000400
 8001688:	1b4e81b5 	.word	0x1b4e81b5
 800168c:	20000688 	.word	0x20000688
 8001690:	2000067c 	.word	0x2000067c
 8001694:	200006c0 	.word	0x200006c0
 8001698:	20000020 	.word	0x20000020
 800169c:	200006bc 	.word	0x200006bc
 80016a0:	2000076c 	.word	0x2000076c
 80016a4:	20000854 	.word	0x20000854
 80016a8:	2000068c 	.word	0x2000068c
 80016ac:	20000760 	.word	0x20000760
 80016b0:	20000820 	.word	0x20000820
 80016b4:	66666667 	.word	0x66666667
 80016b8:	4482e000 	.word	0x4482e000
 80016bc:	461c4000 	.word	0x461c4000
 80016c0:	20000830 	.word	0x20000830
 80016c4:	2000068a 	.word	0x2000068a
		x++;
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <computePositionWithEncoder+0x338>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	4b02      	ldr	r3, [pc, #8]	; (80016dc <computePositionWithEncoder+0x338>)
 80016d2:	801a      	strh	r2, [r3, #0]
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000020 	.word	0x20000020

080016e0 <measureADC>:

/**
 * This function computes 2 phase currents and 2 BEMFs
 *
 */
void measureADC(){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc3, Icd, 1);
 80016e4:	2201      	movs	r2, #1
 80016e6:	492a      	ldr	r1, [pc, #168]	; (8001790 <measureADC+0xb0>)
 80016e8:	482a      	ldr	r0, [pc, #168]	; (8001794 <measureADC+0xb4>)
 80016ea:	f002 f8e5 	bl	80038b8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc1, Iab, 2);
 80016ee:	2202      	movs	r2, #2
 80016f0:	4929      	ldr	r1, [pc, #164]	; (8001798 <measureADC+0xb8>)
 80016f2:	482a      	ldr	r0, [pc, #168]	; (800179c <measureADC+0xbc>)
 80016f4:	f002 f8e0 	bl	80038b8 <HAL_ADC_Start_DMA>

	// Compute abc currents
	Ia = -(((int16_t)Iab[0])-1935);
 80016f8:	4b27      	ldr	r3, [pc, #156]	; (8001798 <measureADC+0xb8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	f240 738f 	movw	r3, #1935	; 0x78f
 8001702:	1a9b      	subs	r3, r3, r2
 8001704:	b29b      	uxth	r3, r3
 8001706:	b21a      	sxth	r2, r3
 8001708:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <measureADC+0xc0>)
 800170a:	801a      	strh	r2, [r3, #0]
	Ib = -((int16_t)Iab[1]-1935);
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <measureADC+0xb8>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	b29a      	uxth	r2, r3
 8001712:	f240 738f 	movw	r3, #1935	; 0x78f
 8001716:	1a9b      	subs	r3, r3, r2
 8001718:	b29b      	uxth	r3, r3
 800171a:	b21a      	sxth	r2, r3
 800171c:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <measureADC+0xc4>)
 800171e:	801a      	strh	r2, [r3, #0]
	Ic = -((int16_t)Icd[0]-1930);
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <measureADC+0xb0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	b29a      	uxth	r2, r3
 8001726:	f240 738a 	movw	r3, #1930	; 0x78a
 800172a:	1a9b      	subs	r3, r3, r2
 800172c:	b29b      	uxth	r3, r3
 800172e:	b21a      	sxth	r2, r3
 8001730:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <measureADC+0xc8>)
 8001732:	801a      	strh	r2, [r3, #0]

//	Vbus = ((int16_t)Icd[1]) + 1;

	if(startOCwatch && (Ia > 1000 || Ia < -1000
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <measureADC+0xcc>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d025      	beq.n	8001788 <measureADC+0xa8>
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <measureADC+0xc0>)
 800173e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001746:	dc1d      	bgt.n	8001784 <measureADC+0xa4>
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <measureADC+0xc0>)
 800174a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001752:	db17      	blt.n	8001784 <measureADC+0xa4>
	  || Ib > 1000 || Ib < -1000
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <measureADC+0xc4>)
 8001756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800175e:	dc11      	bgt.n	8001784 <measureADC+0xa4>
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <measureADC+0xc4>)
 8001762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001766:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800176a:	db0b      	blt.n	8001784 <measureADC+0xa4>
	  || Ic > 1000 || Ic < -1000)){
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <measureADC+0xc8>)
 800176e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001772:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001776:	dc05      	bgt.n	8001784 <measureADC+0xa4>
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <measureADC+0xc8>)
 800177a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001782:	da01      	bge.n	8001788 <measureADC+0xa8>
		stopMotor();
 8001784:	f7ff fdb0 	bl	80012e8 <stopMotor>
	}

	// Compute rotor position
	computePositionWithEncoder();
 8001788:	f7ff fe0c 	bl	80013a4 <computePositionWithEncoder>
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	24001010 	.word	0x24001010
 8001794:	200059d4 	.word	0x200059d4
 8001798:	24001004 	.word	0x24001004
 800179c:	20005970 	.word	0x20005970
 80017a0:	200006b4 	.word	0x200006b4
 80017a4:	200007e8 	.word	0x200007e8
 80017a8:	20000816 	.word	0x20000816
 80017ac:	2000077a 	.word	0x2000077a

080017b0 <initANN>:


void initANN(){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b096      	sub	sp, #88	; 0x58
 80017b4:	af00      	add	r7, sp, #0
	// Chunk of memory used to hold intermediate values for neural network
	AI_ALIGNED(4) ai_u8 activations[AI_NETWORK_DATA_ACTIVATIONS_SIZE];


	// Set working memory and get weights/biases from model
	ai_network_params ai_params = {
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <initANN+0xa0>)
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	2301      	movs	r3, #1
 80017bc:	80bb      	strh	r3, [r7, #4]
 80017be:	2301      	movs	r3, #1
 80017c0:	80fb      	strh	r3, [r7, #6]
 80017c2:	2301      	movs	r3, #1
 80017c4:	813b      	strh	r3, [r7, #8]
 80017c6:	f240 63bc 	movw	r3, #1724	; 0x6bc
 80017ca:	60fb      	str	r3, [r7, #12]
	  AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 80017cc:	f00c f97c 	bl	800dac8 <ai_network_data_weights_get>
 80017d0:	4603      	mov	r3, r0
	ai_network_params ai_params = {
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <initANN+0xa4>)
 80017da:	61bb      	str	r3, [r7, #24]
 80017dc:	2301      	movs	r3, #1
 80017de:	83bb      	strh	r3, [r7, #28]
 80017e0:	2301      	movs	r3, #1
 80017e2:	83fb      	strh	r3, [r7, #30]
 80017e4:	2301      	movs	r3, #1
 80017e6:	843b      	strh	r3, [r7, #32]
 80017e8:	2328      	movs	r3, #40	; 0x28
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
 80017ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f2:	2300      	movs	r3, #0
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  AI_NETWORK_DATA_ACTIVATIONS(activations)
	};

	// Set pointers wrapper structs to our data buffers
	ai_input[0].n_batches = 1;
 80017f6:	4b18      	ldr	r3, [pc, #96]	; (8001858 <initANN+0xa8>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	809a      	strh	r2, [r3, #4]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <initANN+0xa8>)
 80017fe:	4a17      	ldr	r2, [pc, #92]	; (800185c <initANN+0xac>)
 8001800:	611a      	str	r2, [r3, #16]

	ai_output[0].n_batches = 1;
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <initANN+0xb0>)
 8001804:	2201      	movs	r2, #1
 8001806:	809a      	strh	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <initANN+0xb0>)
 800180a:	4a16      	ldr	r2, [pc, #88]	; (8001864 <initANN+0xb4>)
 800180c:	611a      	str	r2, [r3, #16]


	// Create instance of neural network
	ai_err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 800180e:	2100      	movs	r1, #0
 8001810:	4815      	ldr	r0, [pc, #84]	; (8001868 <initANN+0xb8>)
 8001812:	f00c f8f3 	bl	800d9fc <ai_network_create>
 8001816:	4603      	mov	r3, r0
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <initANN+0xbc>)
 800181a:	6013      	str	r3, [r2, #0]
	if (ai_err.type != AI_ERROR_NONE)
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <initANN+0xbc>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <initANN+0x78>
	{
		Error_Handler();
 8001824:	f001 f848 	bl	80028b8 <Error_Handler>
	}

	// Initialize neural network
	if (!ai_network_init(network, &ai_params))
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <initANN+0xb8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	463a      	mov	r2, r7
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f00c f8f9 	bl	800da28 <ai_network_init>
 8001836:	4603      	mov	r3, r0
 8001838:	f083 0301 	eor.w	r3, r3, #1
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <initANN+0x96>
	{
		Error_Handler();
 8001842:	f001 f839 	bl	80028b8 <Error_Handler>
	}
}
 8001846:	bf00      	nop
 8001848:	3758      	adds	r7, #88	; 0x58
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40040440 	.word	0x40040440
 8001854:	00040440 	.word	0x00040440
 8001858:	20000024 	.word	0x20000024
 800185c:	200056c4 	.word	0x200056c4
 8001860:	2000003c 	.word	0x2000003c
 8001864:	20005808 	.word	0x20005808
 8001868:	200005f0 	.word	0x200005f0
 800186c:	2000580c 	.word	0x2000580c

08001870 <runANN>:


float annOut;
void runANN(){
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
//	for (uint32_t i=0;i<AI_NETWORK_IN_1_SIZE;i++){
//		((ai_float *)in_data)[i] = (ai_float)2.0f;
//	}

	// Perform inference
	nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <runANN+0x74>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1b      	ldr	r2, [pc, #108]	; (80018e8 <runANN+0x78>)
 800187a:	491c      	ldr	r1, [pc, #112]	; (80018ec <runANN+0x7c>)
 800187c:	4618      	mov	r0, r3
 800187e:	f00c f912 	bl	800daa6 <ai_network_run>
 8001882:	4603      	mov	r3, r0
 8001884:	4a1a      	ldr	r2, [pc, #104]	; (80018f0 <runANN+0x80>)
 8001886:	6013      	str	r3, [r2, #0]
	if (nbatch != 1) {
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <runANN+0x80>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d001      	beq.n	8001894 <runANN+0x24>
	  Error_Handler();
 8001890:	f001 f812 	bl	80028b8 <Error_Handler>
	}

	// Read output (predicted y) of neural network
	annOut = 180*((float *)out_data)[0];
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <runANN+0x84>)
 8001896:	edd3 7a00 	vldr	s15, [r3]
 800189a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80018f8 <runANN+0x88>
 800189e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <runANN+0x8c>)
 80018a4:	edc3 7a00 	vstr	s15, [r3]


	if(annOut < -180){
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <runANN+0x8c>)
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001900 <runANN+0x90>
 80018b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ba:	d502      	bpl.n	80018c2 <runANN+0x52>
		annOut = -180;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <runANN+0x8c>)
 80018be:	4a11      	ldr	r2, [pc, #68]	; (8001904 <runANN+0x94>)
 80018c0:	601a      	str	r2, [r3, #0]
	}
	if(annOut > 180){
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <runANN+0x8c>)
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80018f8 <runANN+0x88>
 80018cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d4:	dc00      	bgt.n	80018d8 <runANN+0x68>
		annOut = 180;
	}
}
 80018d6:	e002      	b.n	80018de <runANN+0x6e>
		annOut = 180;
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <runANN+0x8c>)
 80018da:	4a0b      	ldr	r2, [pc, #44]	; (8001908 <runANN+0x98>)
 80018dc:	601a      	str	r2, [r3, #0]
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200005f0 	.word	0x200005f0
 80018e8:	2000003c 	.word	0x2000003c
 80018ec:	20000024 	.word	0x20000024
 80018f0:	20005804 	.word	0x20005804
 80018f4:	20005808 	.word	0x20005808
 80018f8:	43340000 	.word	0x43340000
 80018fc:	20000800 	.word	0x20000800
 8001900:	c3340000 	.word	0xc3340000
 8001904:	c3340000 	.word	0xc3340000
 8001908:	43340000 	.word	0x43340000

0800190c <switchToANN>:

void switchToANN(){
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
	switchANN = 1;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <switchToANN+0x14>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
};
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	200005f4 	.word	0x200005f4

08001924 <limitTheta>:
 * This function limits the range of theta between 0 and 360 degrees
 *
 * @param short theta
 * @return short angle between 0 to 360 degrees
 */
short limitTheta(short theta){
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	80fb      	strh	r3, [r7, #6]
	if(theta < 0){
 800192e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001932:	2b00      	cmp	r3, #0
 8001934:	da1c      	bge.n	8001970 <limitTheta+0x4c>
		return ((360+theta) - 360*(1+(theta/360)));
 8001936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193a:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <limitTheta+0x88>)
 800193c:	fb82 1203 	smull	r1, r2, r2, r3
 8001940:	441a      	add	r2, r3
 8001942:	1212      	asrs	r2, r2, #8
 8001944:	17db      	asrs	r3, r3, #31
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	b21b      	sxth	r3, r3
 800194a:	3301      	adds	r3, #1
 800194c:	b29b      	uxth	r3, r3
 800194e:	461a      	mov	r2, r3
 8001950:	0052      	lsls	r2, r2, #1
 8001952:	4413      	add	r3, r2
 8001954:	461a      	mov	r2, r3
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	425b      	negs	r3, r3
 800195e:	b29a      	uxth	r2, r3
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	4413      	add	r3, r2
 8001964:	b29b      	uxth	r3, r3
 8001966:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800196a:	b29b      	uxth	r3, r3
 800196c:	b21b      	sxth	r3, r3
 800196e:	e017      	b.n	80019a0 <limitTheta+0x7c>
	} else {
		return (theta - 360*(theta/360));
 8001970:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <limitTheta+0x88>)
 8001976:	fb82 1203 	smull	r1, r2, r2, r3
 800197a:	441a      	add	r2, r3
 800197c:	1212      	asrs	r2, r2, #8
 800197e:	17db      	asrs	r3, r3, #31
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	b21b      	sxth	r3, r3
 8001984:	b29b      	uxth	r3, r3
 8001986:	461a      	mov	r2, r3
 8001988:	0052      	lsls	r2, r2, #1
 800198a:	4413      	add	r3, r2
 800198c:	461a      	mov	r2, r3
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	425b      	negs	r3, r3
 8001996:	b29a      	uxth	r2, r3
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	4413      	add	r3, r2
 800199c:	b29b      	uxth	r3, r3
 800199e:	b21b      	sxth	r3, r3
	}
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	b60b60b7 	.word	0xb60b60b7

080019b0 <sin2>:
 * This function computes sin(thetaElec) using LUT
 *
 * @param short thetaElec in degrees
 * @return short sin(x) range -512 to +512
 */
short sin2(short thetaElec){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
  thetaElec = limitTheta(thetaElec);
 80019ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ffb0 	bl	8001924 <limitTheta>
 80019c4:	4603      	mov	r3, r0
 80019c6:	80fb      	strh	r3, [r7, #6]

  if(thetaElec <= 90){
 80019c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019cc:	2b5a      	cmp	r3, #90	; 0x5a
 80019ce:	dc06      	bgt.n	80019de <sin2+0x2e>
    return sinTable[thetaElec];
 80019d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d4:	4a1b      	ldr	r2, [pc, #108]	; (8001a44 <sin2+0x94>)
 80019d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019da:	b21b      	sxth	r3, r3
 80019dc:	e02d      	b.n	8001a3a <sin2+0x8a>
  } else if(thetaElec > 90 && thetaElec <=180){
 80019de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e2:	2b5a      	cmp	r3, #90	; 0x5a
 80019e4:	dd0c      	ble.n	8001a00 <sin2+0x50>
 80019e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ea:	2bb4      	cmp	r3, #180	; 0xb4
 80019ec:	dc08      	bgt.n	8001a00 <sin2+0x50>
    return sinTable[180 - thetaElec];
 80019ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f2:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80019f6:	4a13      	ldr	r2, [pc, #76]	; (8001a44 <sin2+0x94>)
 80019f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	e01c      	b.n	8001a3a <sin2+0x8a>
  } else if(thetaElec > 180 && thetaElec <= 270){
 8001a00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a04:	2bb4      	cmp	r3, #180	; 0xb4
 8001a06:	dd0e      	ble.n	8001a26 <sin2+0x76>
 8001a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a0c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001a10:	dc09      	bgt.n	8001a26 <sin2+0x76>
    return -sinTable[thetaElec - 180];
 8001a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a16:	3bb4      	subs	r3, #180	; 0xb4
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <sin2+0x94>)
 8001a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a1e:	425b      	negs	r3, r3
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	b21b      	sxth	r3, r3
 8001a24:	e009      	b.n	8001a3a <sin2+0x8a>
  } else {
    return -sinTable[360 - thetaElec];
 8001a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a2a:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8001a2e:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <sin2+0x94>)
 8001a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a34:	425b      	negs	r3, r3
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	b21b      	sxth	r3, r3
  }
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	0800f3e4 	.word	0x0800f3e4

08001a48 <cos2>:
 * This function computes cos(theta) using LUT
 *
 * @param short theta in degrees
 * @return short cos(x) range -512 to +512
 */
short cos2(short theta){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
  return sin2(theta+90);
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	335a      	adds	r3, #90	; 0x5a
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ffa8 	bl	80019b0 <sin2>
 8001a60:	4603      	mov	r3, r0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <sinLowRes>:
 * This function computes sin(thetaElec) using LUT
 *
 * @param short thetaElec in degrees
 * @return short sin(x) range -512 to +512
 */
short sinLowRes(short thetaElec){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
  thetaElec = limitTheta(thetaElec);
 8001a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff52 	bl	8001924 <limitTheta>
 8001a80:	4603      	mov	r3, r0
 8001a82:	80fb      	strh	r3, [r7, #6]

  if(thetaElec <= 90){
 8001a84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a88:	2b5a      	cmp	r3, #90	; 0x5a
 8001a8a:	dc06      	bgt.n	8001a9a <sinLowRes+0x2e>
    return sinTableLowRes[thetaElec];
 8001a8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a90:	4a1b      	ldr	r2, [pc, #108]	; (8001b00 <sinLowRes+0x94>)
 8001a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	e02d      	b.n	8001af6 <sinLowRes+0x8a>
  } else if(thetaElec > 90 && thetaElec <=180){
 8001a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a9e:	2b5a      	cmp	r3, #90	; 0x5a
 8001aa0:	dd0c      	ble.n	8001abc <sinLowRes+0x50>
 8001aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa6:	2bb4      	cmp	r3, #180	; 0xb4
 8001aa8:	dc08      	bgt.n	8001abc <sinLowRes+0x50>
    return sinTableLowRes[180 - thetaElec];
 8001aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aae:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8001ab2:	4a13      	ldr	r2, [pc, #76]	; (8001b00 <sinLowRes+0x94>)
 8001ab4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	e01c      	b.n	8001af6 <sinLowRes+0x8a>
  } else if(thetaElec > 180 && thetaElec <= 270){
 8001abc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ac0:	2bb4      	cmp	r3, #180	; 0xb4
 8001ac2:	dd0e      	ble.n	8001ae2 <sinLowRes+0x76>
 8001ac4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ac8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001acc:	dc09      	bgt.n	8001ae2 <sinLowRes+0x76>
    return -sinTableLowRes[thetaElec - 180];
 8001ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ad2:	3bb4      	subs	r3, #180	; 0xb4
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <sinLowRes+0x94>)
 8001ad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ada:	425b      	negs	r3, r3
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	b21b      	sxth	r3, r3
 8001ae0:	e009      	b.n	8001af6 <sinLowRes+0x8a>
  } else {
    return -sinTableLowRes[360 - thetaElec];
 8001ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae6:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <sinLowRes+0x94>)
 8001aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001af0:	425b      	negs	r3, r3
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	b21b      	sxth	r3, r3
  }
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	0800f49c 	.word	0x0800f49c

08001b04 <parkTransform>:

/**
 * This function computes Park transform
 *
 */
void parkTransform(short a, short b, short c, struct directQuad *Xdq){
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	81fb      	strh	r3, [r7, #14]
 8001b10:	460b      	mov	r3, r1
 8001b12:	81bb      	strh	r3, [r7, #12]
 8001b14:	4613      	mov	r3, r2
 8001b16:	817b      	strh	r3, [r7, #10]
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <parkTransform+0xb4>)
 8001b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b24:	fb03 f202 	mul.w	r2, r3, r2
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <parkTransform+0xb8>)
 8001b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b34:	fb03 f301 	mul.w	r3, r3, r1
 8001b38:	441a      	add	r2, r3
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <parkTransform+0xbc>)
 8001b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b40:	4619      	mov	r1, r3
 8001b42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b46:	fb03 f301 	mul.w	r3, r3, r1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	ee07 3a90 	vmov	s15, r3
 8001b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b54:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001bc4 <parkTransform+0xc0>
 8001b58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	edc3 7a00 	vstr	s15, [r3]
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8001b62:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <parkTransform+0xc4>)
 8001b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b6e:	fb03 f202 	mul.w	r2, r3, r2
 8001b72:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <parkTransform+0xc8>)
 8001b74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b7e:	fb03 f301 	mul.w	r3, r3, r1
 8001b82:	441a      	add	r2, r3
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <parkTransform+0xcc>)
 8001b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b90:	fb03 f301 	mul.w	r3, r3, r1
 8001b94:	4413      	add	r3, r2
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b9e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001bc4 <parkTransform+0xc0>
 8001ba2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	200007ec 	.word	0x200007ec
 8001bbc:	20000780 	.word	0x20000780
 8001bc0:	20000840 	.word	0x20000840
 8001bc4:	44400000 	.word	0x44400000
 8001bc8:	2000081c 	.word	0x2000081c
 8001bcc:	2000067e 	.word	0x2000067e
 8001bd0:	20000758 	.word	0x20000758

08001bd4 <computeSinCos>:

/**
 * This function computes sine & cosine values for given thetaElec to be used in park transform
 *
 */
void computeSinCos(){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	sin000 = sin2(thetaElec);
 8001bd8:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <computeSinCos+0xa0>)
 8001bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fee6 	bl	80019b0 <sin2>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <computeSinCos+0xa4>)
 8001bea:	801a      	strh	r2, [r3, #0]
	cos000 = cos2(thetaElec);
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <computeSinCos+0xa0>)
 8001bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ff28 	bl	8001a48 <cos2>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <computeSinCos+0xa8>)
 8001bfe:	801a      	strh	r2, [r3, #0]
	sin120 = sin2(thetaElec+120);
 8001c00:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <computeSinCos+0xa0>)
 8001c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	3378      	adds	r3, #120	; 0x78
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fece 	bl	80019b0 <sin2>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <computeSinCos+0xac>)
 8001c1a:	801a      	strh	r2, [r3, #0]
	sin240 = sin2(thetaElec+240);
 8001c1c:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <computeSinCos+0xa0>)
 8001c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	33f0      	adds	r3, #240	; 0xf0
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fec0 	bl	80019b0 <sin2>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <computeSinCos+0xb0>)
 8001c36:	801a      	strh	r2, [r3, #0]
	cos120 = cos2(thetaElec+120);
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <computeSinCos+0xa0>)
 8001c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	3378      	adds	r3, #120	; 0x78
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fefe 	bl	8001a48 <cos2>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <computeSinCos+0xb4>)
 8001c52:	801a      	strh	r2, [r3, #0]
	cos240 = cos2(thetaElec+240);
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <computeSinCos+0xa0>)
 8001c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	33f0      	adds	r3, #240	; 0xf0
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fef0 	bl	8001a48 <cos2>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <computeSinCos+0xb8>)
 8001c6e:	801a      	strh	r2, [r3, #0]
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000688 	.word	0x20000688
 8001c78:	200007ec 	.word	0x200007ec
 8001c7c:	2000081c 	.word	0x2000081c
 8001c80:	20000840 	.word	0x20000840
 8001c84:	20000780 	.word	0x20000780
 8001c88:	20000758 	.word	0x20000758
 8001c8c:	2000067e 	.word	0x2000067e

08001c90 <clarkeTransform>:

/**
 * This function computes Clarke transform
 *
 */
void clarkeTransform(float a, float b, float c, struct alphaBeta *Xalbt){
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c9a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c9e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001ca2:	6038      	str	r0, [r7, #0]
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001ca4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ca8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cac:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001cb0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cb4:	edd7 6a02 	vldr	s13, [r7, #8]
 8001cb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cbc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001cc0:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8001cc4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	edc3 7a00 	vstr	s15, [r3]
	Xalbt->beta = (b-c)*250/433;
 8001cd2:	ed97 7a02 	vldr	s14, [r7, #8]
 8001cd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cde:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001d00 <clarkeTransform+0x70>
 8001ce2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ce6:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001d04 <clarkeTransform+0x74>
 8001cea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	437a0000 	.word	0x437a0000
 8001d04:	43d88000 	.word	0x43d88000

08001d08 <SpeedPIController>:
 *
 */

float Iterm = 0;
int16_t speedReq = 1500;
void SpeedPIController(){
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
	float Kp = 2;
 8001d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d12:	607b      	str	r3, [r7, #4]
	float Ki = 0.1;
 8001d14:	4b40      	ldr	r3, [pc, #256]	; (8001e18 <SpeedPIController+0x110>)
 8001d16:	603b      	str	r3, [r7, #0]
	error = speedReq - speed;
 8001d18:	4b40      	ldr	r3, [pc, #256]	; (8001e1c <SpeedPIController+0x114>)
 8001d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	4b3f      	ldr	r3, [pc, #252]	; (8001e20 <SpeedPIController+0x118>)
 8001d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	b21a      	sxth	r2, r3
 8001d2e:	4b3d      	ldr	r3, [pc, #244]	; (8001e24 <SpeedPIController+0x11c>)
 8001d30:	801a      	strh	r2, [r3, #0]
	Kterm = (float)(error)*Kp;
 8001d32:	4b3c      	ldr	r3, [pc, #240]	; (8001e24 <SpeedPIController+0x11c>)
 8001d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d40:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d48:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <SpeedPIController+0x120>)
 8001d4a:	edc3 7a00 	vstr	s15, [r3]
	Iterm += (float)(error)*Ki;
 8001d4e:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <SpeedPIController+0x11c>)
 8001d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d54:	ee07 3a90 	vmov	s15, r3
 8001d58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d5c:	edd7 7a00 	vldr	s15, [r7]
 8001d60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d64:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <SpeedPIController+0x124>)
 8001d66:	edd3 7a00 	vldr	s15, [r3]
 8001d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6e:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <SpeedPIController+0x124>)
 8001d70:	edc3 7a00 	vstr	s15, [r3]

	if(Iterm > 3250){
 8001d74:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <SpeedPIController+0x124>)
 8001d76:	edd3 7a00 	vldr	s15, [r3]
 8001d7a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001e30 <SpeedPIController+0x128>
 8001d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d86:	dd03      	ble.n	8001d90 <SpeedPIController+0x88>
		Iterm = 3250;
 8001d88:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <SpeedPIController+0x124>)
 8001d8a:	4a2a      	ldr	r2, [pc, #168]	; (8001e34 <SpeedPIController+0x12c>)
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e00c      	b.n	8001daa <SpeedPIController+0xa2>
	} else if(Iterm < -3250){
 8001d90:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <SpeedPIController+0x124>)
 8001d92:	edd3 7a00 	vldr	s15, [r3]
 8001d96:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001e38 <SpeedPIController+0x130>
 8001d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da2:	d502      	bpl.n	8001daa <SpeedPIController+0xa2>
		Iterm = -3250;
 8001da4:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <SpeedPIController+0x124>)
 8001da6:	4a25      	ldr	r2, [pc, #148]	; (8001e3c <SpeedPIController+0x134>)
 8001da8:	601a      	str	r2, [r3, #0]
	}

	IqRef = (int16_t)(Kterm+Iterm);
 8001daa:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <SpeedPIController+0x120>)
 8001dac:	ed93 7a00 	vldr	s14, [r3]
 8001db0:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <SpeedPIController+0x124>)
 8001db2:	edd3 7a00 	vldr	s15, [r3]
 8001db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dbe:	ee17 3a90 	vmov	r3, s15
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	ee07 3a90 	vmov	s15, r3
 8001dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <SpeedPIController+0x138>)
 8001dce:	edc3 7a00 	vstr	s15, [r3]

	if(IqRef > 4500){
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <SpeedPIController+0x138>)
 8001dd4:	edd3 7a00 	vldr	s15, [r3]
 8001dd8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001e44 <SpeedPIController+0x13c>
 8001ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	dd03      	ble.n	8001dee <SpeedPIController+0xe6>
		IqRef = 4500;
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <SpeedPIController+0x138>)
 8001de8:	4a17      	ldr	r2, [pc, #92]	; (8001e48 <SpeedPIController+0x140>)
 8001dea:	601a      	str	r2, [r3, #0]
	} else if(IqRef < -4500){
		IqRef = -4500;
	}
}
 8001dec:	e00d      	b.n	8001e0a <SpeedPIController+0x102>
	} else if(IqRef < -4500){
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <SpeedPIController+0x138>)
 8001df0:	edd3 7a00 	vldr	s15, [r3]
 8001df4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001e4c <SpeedPIController+0x144>
 8001df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e00:	d400      	bmi.n	8001e04 <SpeedPIController+0xfc>
}
 8001e02:	e002      	b.n	8001e0a <SpeedPIController+0x102>
		IqRef = -4500;
 8001e04:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <SpeedPIController+0x138>)
 8001e06:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <SpeedPIController+0x148>)
 8001e08:	601a      	str	r2, [r3, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	3dcccccd 	.word	0x3dcccccd
 8001e1c:	20000054 	.word	0x20000054
 8001e20:	20000820 	.word	0x20000820
 8001e24:	2000081e 	.word	0x2000081e
 8001e28:	200007f4 	.word	0x200007f4
 8001e2c:	200005f8 	.word	0x200005f8
 8001e30:	454b2000 	.word	0x454b2000
 8001e34:	454b2000 	.word	0x454b2000
 8001e38:	c54b2000 	.word	0xc54b2000
 8001e3c:	c54b2000 	.word	0xc54b2000
 8001e40:	2000077c 	.word	0x2000077c
 8001e44:	458ca000 	.word	0x458ca000
 8001e48:	458ca000 	.word	0x458ca000
 8001e4c:	c58ca000 	.word	0xc58ca000
 8001e50:	c58ca000 	.word	0xc58ca000

08001e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001e5a:	f000 fcff 	bl	800285c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e5e:	4b5a      	ldr	r3, [pc, #360]	; (8001fc8 <main+0x174>)
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d11b      	bne.n	8001ea2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e6a:	f3bf 8f4f 	dsb	sy
}
 8001e6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e70:	f3bf 8f6f 	isb	sy
}
 8001e74:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e76:	4b54      	ldr	r3, [pc, #336]	; (8001fc8 <main+0x174>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e7e:	f3bf 8f4f 	dsb	sy
}
 8001e82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e84:	f3bf 8f6f 	isb	sy
}
 8001e88:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e8a:	4b4f      	ldr	r3, [pc, #316]	; (8001fc8 <main+0x174>)
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	4a4e      	ldr	r2, [pc, #312]	; (8001fc8 <main+0x174>)
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e94:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e96:	f3bf 8f4f 	dsb	sy
}
 8001e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e9c:	f3bf 8f6f 	isb	sy
}
 8001ea0:	e000      	b.n	8001ea4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ea2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001ea4:	4b48      	ldr	r3, [pc, #288]	; (8001fc8 <main+0x174>)
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d138      	bne.n	8001f22 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001eb0:	4b45      	ldr	r3, [pc, #276]	; (8001fc8 <main+0x174>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001eb8:	f3bf 8f4f 	dsb	sy
}
 8001ebc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001ebe:	4b42      	ldr	r3, [pc, #264]	; (8001fc8 <main+0x174>)
 8001ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ec4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	0b5b      	lsrs	r3, r3, #13
 8001eca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ece:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	08db      	lsrs	r3, r3, #3
 8001ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ed8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001ee2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ee8:	4937      	ldr	r1, [pc, #220]	; (8001fc8 <main+0x174>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	1e5a      	subs	r2, r3, #1
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1ef      	bne.n	8001eda <main+0x86>
    } while(sets-- != 0U);
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	1e5a      	subs	r2, r3, #1
 8001efe:	60ba      	str	r2, [r7, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1e5      	bne.n	8001ed0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001f04:	f3bf 8f4f 	dsb	sy
}
 8001f08:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001f0a:	4b2f      	ldr	r3, [pc, #188]	; (8001fc8 <main+0x174>)
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	4a2e      	ldr	r2, [pc, #184]	; (8001fc8 <main+0x174>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f16:	f3bf 8f4f 	dsb	sy
}
 8001f1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f1c:	f3bf 8f6f 	isb	sy
}
 8001f20:	e000      	b.n	8001f24 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001f22:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f24:	f001 f87c 	bl	8003020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f28:	f000 f85a 	bl	8001fe0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001f2c:	f000 f8e0 	bl	80020f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f30:	f000 fbe0 	bl	80026f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f34:	f000 fbb6 	bl	80026a4 <MX_DMA_Init>
  MX_TIM1_Init();
 8001f38:	f000 fa3c 	bl	80023b4 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001f3c:	f000 f928 	bl	8002190 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001f40:	f000 f9b0 	bl	80022a4 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8001f44:	f000 fb60 	bl	8002608 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001f48:	f000 fb08 	bl	800255c <MX_TIM3_Init>
  MX_CRC_Init();
 8001f4c:	f000 fa10 	bl	8002370 <MX_CRC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001f50:	f000 f8fa 	bl	8002148 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
//  untitled0_initialize();
//  Subsystem_initialize();

    initANN();
 8001f54:	f7ff fc2c 	bl	80017b0 <initANN>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001f58:	213c      	movs	r1, #60	; 0x3c
 8001f5a:	481c      	ldr	r0, [pc, #112]	; (8001fcc <main+0x178>)
 8001f5c:	f008 ffb0 	bl	800aec0 <HAL_TIM_Encoder_Start>

	initModelPredictiveControl();
 8001f60:	f7fe fb36 	bl	80005d0 <initModelPredictiveControl>


	// Calibrate ADCs
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001f64:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4819      	ldr	r0, [pc, #100]	; (8001fd0 <main+0x17c>)
 8001f6c:	f002 fbb8 	bl	80046e0 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001f70:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001f74:	2100      	movs	r1, #0
 8001f76:	4817      	ldr	r0, [pc, #92]	; (8001fd4 <main+0x180>)
 8001f78:	f002 fbb2 	bl	80046e0 <HAL_ADCEx_Calibration_Start>

	// Enable MOSFET drivers
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f82:	4815      	ldr	r0, [pc, #84]	; (8001fd8 <main+0x184>)
 8001f84:	f005 fa06 	bl	8007394 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f8e:	4812      	ldr	r0, [pc, #72]	; (8001fd8 <main+0x184>)
 8001f90:	f005 fa00 	bl	8007394 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8001f94:	2201      	movs	r2, #1
 8001f96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9a:	480f      	ldr	r0, [pc, #60]	; (8001fd8 <main+0x184>)
 8001f9c:	f005 f9fa 	bl	8007394 <HAL_GPIO_WritePin>

	//	 Start timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8001fa0:	210c      	movs	r1, #12
 8001fa2:	480e      	ldr	r0, [pc, #56]	; (8001fdc <main+0x188>)
 8001fa4:	f008 fd8c 	bl	800aac0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001fa8:	2100      	movs	r1, #0
 8001faa:	480c      	ldr	r0, [pc, #48]	; (8001fdc <main+0x188>)
 8001fac:	f008 fc7a 	bl	800a8a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001fb0:	2104      	movs	r1, #4
 8001fb2:	480a      	ldr	r0, [pc, #40]	; (8001fdc <main+0x188>)
 8001fb4:	f008 fc76 	bl	800a8a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001fb8:	2108      	movs	r1, #8
 8001fba:	4808      	ldr	r0, [pc, #32]	; (8001fdc <main+0x188>)
 8001fbc:	f008 fc72 	bl	800a8a4 <HAL_TIM_PWM_Start>

	receiveUART();
 8001fc0:	f7ff f8a4 	bl	800110c <receiveUART>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <main+0x170>
 8001fc6:	bf00      	nop
 8001fc8:	e000ed00 	.word	0xe000ed00
 8001fcc:	20005924 	.word	0x20005924
 8001fd0:	20005970 	.word	0x20005970
 8001fd4:	200059d4 	.word	0x200059d4
 8001fd8:	58020800 	.word	0x58020800
 8001fdc:	20005ab0 	.word	0x20005ab0

08001fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b09c      	sub	sp, #112	; 0x70
 8001fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fea:	224c      	movs	r2, #76	; 0x4c
 8001fec:	2100      	movs	r1, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f00d f9da 	bl	800f3a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f00d f9d4 	bl	800f3a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002000:	2002      	movs	r0, #2
 8002002:	f005 fa1f 	bl	8007444 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002006:	2300      	movs	r3, #0
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <SystemClock_Config+0x104>)
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	4a35      	ldr	r2, [pc, #212]	; (80020e4 <SystemClock_Config+0x104>)
 8002010:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002014:	6193      	str	r3, [r2, #24]
 8002016:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <SystemClock_Config+0x104>)
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <SystemClock_Config+0x108>)
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	4a30      	ldr	r2, [pc, #192]	; (80020e8 <SystemClock_Config+0x108>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800202c:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <SystemClock_Config+0x108>)
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	603b      	str	r3, [r7, #0]
 8002036:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002038:	bf00      	nop
 800203a:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <SystemClock_Config+0x104>)
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002046:	d1f8      	bne.n	800203a <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002048:	4b28      	ldr	r3, [pc, #160]	; (80020ec <SystemClock_Config+0x10c>)
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	f023 0303 	bic.w	r3, r3, #3
 8002050:	4a26      	ldr	r2, [pc, #152]	; (80020ec <SystemClock_Config+0x10c>)
 8002052:	f043 0302 	orr.w	r3, r3, #2
 8002056:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002058:	2303      	movs	r3, #3
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800205c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002062:	2301      	movs	r3, #1
 8002064:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002066:	2340      	movs	r3, #64	; 0x40
 8002068:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800206a:	2302      	movs	r3, #2
 800206c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800206e:	2302      	movs	r3, #2
 8002070:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002072:	2301      	movs	r3, #1
 8002074:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8002076:	2378      	movs	r3, #120	; 0x78
 8002078:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800207a:	2302      	movs	r3, #2
 800207c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800207e:	2304      	movs	r3, #4
 8002080:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002082:	2302      	movs	r3, #2
 8002084:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002086:	230c      	movs	r3, #12
 8002088:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800208a:	2300      	movs	r3, #0
 800208c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002096:	4618      	mov	r0, r3
 8002098:	f005 fa0e 	bl	80074b8 <HAL_RCC_OscConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80020a2:	f000 fc09 	bl	80028b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a6:	233f      	movs	r3, #63	; 0x3f
 80020a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020aa:	2303      	movs	r3, #3
 80020ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80020b2:	2308      	movs	r3, #8
 80020b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80020b6:	2340      	movs	r3, #64	; 0x40
 80020b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80020ba:	2340      	movs	r3, #64	; 0x40
 80020bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80020be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80020c4:	2340      	movs	r3, #64	; 0x40
 80020c6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	2104      	movs	r1, #4
 80020cc:	4618      	mov	r0, r3
 80020ce:	f005 fe1f 	bl	8007d10 <HAL_RCC_ClockConfig>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80020d8:	f000 fbee 	bl	80028b8 <Error_Handler>
  }
}
 80020dc:	bf00      	nop
 80020de:	3770      	adds	r7, #112	; 0x70
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	58024800 	.word	0x58024800
 80020e8:	58000400 	.word	0x58000400
 80020ec:	58024400 	.word	0x58024400

080020f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b0b0      	sub	sp, #192	; 0xc0
 80020f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	22bc      	movs	r2, #188	; 0xbc
 80020fa:	2100      	movs	r1, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f00d f953 	bl	800f3a8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002102:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002106:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002108:	2301      	movs	r3, #1
 800210a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 800210c:	2313      	movs	r3, #19
 800210e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002110:	2302      	movs	r3, #2
 8002112:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002114:	2302      	movs	r3, #2
 8002116:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002118:	2302      	movs	r3, #2
 800211a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800211c:	23c0      	movs	r3, #192	; 0xc0
 800211e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002120:	2320      	movs	r3, #32
 8002122:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	4618      	mov	r0, r3
 8002132:	f006 f979 	bl	8008428 <HAL_RCCEx_PeriphCLKConfig>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 800213c:	f000 fbbc 	bl	80028b8 <Error_Handler>
  }
}
 8002140:	bf00      	nop
 8002142:	37c0      	adds	r7, #192	; 0xc0
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* TIM1_BRK_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800214c:	2200      	movs	r2, #0
 800214e:	2100      	movs	r1, #0
 8002150:	2018      	movs	r0, #24
 8002152:	f002 fcf8 	bl	8004b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002156:	2018      	movs	r0, #24
 8002158:	f002 fd0f 	bl	8004b7a <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800215c:	2200      	movs	r2, #0
 800215e:	2100      	movs	r1, #0
 8002160:	2028      	movs	r0, #40	; 0x28
 8002162:	f002 fcf0 	bl	8004b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002166:	2028      	movs	r0, #40	; 0x28
 8002168:	f002 fd07 	bl	8004b7a <HAL_NVIC_EnableIRQ>
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	2100      	movs	r1, #0
 8002170:	201b      	movs	r0, #27
 8002172:	f002 fce8 	bl	8004b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002176:	201b      	movs	r0, #27
 8002178:	f002 fcff 	bl	8004b7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800217c:	2200      	movs	r2, #0
 800217e:	2100      	movs	r1, #0
 8002180:	200c      	movs	r0, #12
 8002182:	f002 fce0 	bl	8004b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002186:	200c      	movs	r0, #12
 8002188:	f002 fcf7 	bl	8004b7a <HAL_NVIC_EnableIRQ>
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}

08002190 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80021a2:	463b      	mov	r3, r7
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
 80021b0:	615a      	str	r2, [r3, #20]
 80021b2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80021b4:	4b37      	ldr	r3, [pc, #220]	; (8002294 <MX_ADC1_Init+0x104>)
 80021b6:	4a38      	ldr	r2, [pc, #224]	; (8002298 <MX_ADC1_Init+0x108>)
 80021b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80021ba:	4b36      	ldr	r3, [pc, #216]	; (8002294 <MX_ADC1_Init+0x104>)
 80021bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80021c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80021c2:	4b34      	ldr	r3, [pc, #208]	; (8002294 <MX_ADC1_Init+0x104>)
 80021c4:	2208      	movs	r2, #8
 80021c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80021c8:	4b32      	ldr	r3, [pc, #200]	; (8002294 <MX_ADC1_Init+0x104>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021ce:	4b31      	ldr	r3, [pc, #196]	; (8002294 <MX_ADC1_Init+0x104>)
 80021d0:	2204      	movs	r2, #4
 80021d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80021d4:	4b2f      	ldr	r3, [pc, #188]	; (8002294 <MX_ADC1_Init+0x104>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80021da:	4b2e      	ldr	r3, [pc, #184]	; (8002294 <MX_ADC1_Init+0x104>)
 80021dc:	2200      	movs	r2, #0
 80021de:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 80021e0:	4b2c      	ldr	r3, [pc, #176]	; (8002294 <MX_ADC1_Init+0x104>)
 80021e2:	2202      	movs	r2, #2
 80021e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021e6:	4b2b      	ldr	r3, [pc, #172]	; (8002294 <MX_ADC1_Init+0x104>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021ec:	4b29      	ldr	r3, [pc, #164]	; (8002294 <MX_ADC1_Init+0x104>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021f2:	4b28      	ldr	r3, [pc, #160]	; (8002294 <MX_ADC1_Init+0x104>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80021f8:	4b26      	ldr	r3, [pc, #152]	; (8002294 <MX_ADC1_Init+0x104>)
 80021fa:	2203      	movs	r2, #3
 80021fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80021fe:	4b25      	ldr	r3, [pc, #148]	; (8002294 <MX_ADC1_Init+0x104>)
 8002200:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002204:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002206:	4b23      	ldr	r3, [pc, #140]	; (8002294 <MX_ADC1_Init+0x104>)
 8002208:	2200      	movs	r2, #0
 800220a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800220c:	4b21      	ldr	r3, [pc, #132]	; (8002294 <MX_ADC1_Init+0x104>)
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002214:	481f      	ldr	r0, [pc, #124]	; (8002294 <MX_ADC1_Init+0x104>)
 8002216:	f001 f9af 	bl	8003578 <HAL_ADC_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002220:	f000 fb4a 	bl	80028b8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002228:	f107 031c 	add.w	r3, r7, #28
 800222c:	4619      	mov	r1, r3
 800222e:	4819      	ldr	r0, [pc, #100]	; (8002294 <MX_ADC1_Init+0x104>)
 8002230:	f002 faba 	bl	80047a8 <HAL_ADCEx_MultiModeConfigChannel>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800223a:	f000 fb3d 	bl	80028b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <MX_ADC1_Init+0x10c>)
 8002240:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002242:	2306      	movs	r3, #6
 8002244:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800224a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800224e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002250:	2304      	movs	r3, #4
 8002252:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800225c:	463b      	mov	r3, r7
 800225e:	4619      	mov	r1, r3
 8002260:	480c      	ldr	r0, [pc, #48]	; (8002294 <MX_ADC1_Init+0x104>)
 8002262:	f001 fc0b 	bl	8003a7c <HAL_ADC_ConfigChannel>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800226c:	f000 fb24 	bl	80028b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <MX_ADC1_Init+0x110>)
 8002272:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002274:	230c      	movs	r3, #12
 8002276:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002278:	463b      	mov	r3, r7
 800227a:	4619      	mov	r1, r3
 800227c:	4805      	ldr	r0, [pc, #20]	; (8002294 <MX_ADC1_Init+0x104>)
 800227e:	f001 fbfd 	bl	8003a7c <HAL_ADC_ConfigChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8002288:	f000 fb16 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800228c:	bf00      	nop
 800228e:	3728      	adds	r7, #40	; 0x28
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20005970 	.word	0x20005970
 8002298:	40022000 	.word	0x40022000
 800229c:	2e300800 	.word	0x2e300800
 80022a0:	2a000400 	.word	0x2a000400

080022a4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
 80022b8:	615a      	str	r2, [r3, #20]
 80022ba:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80022bc:	4b29      	ldr	r3, [pc, #164]	; (8002364 <MX_ADC3_Init+0xc0>)
 80022be:	4a2a      	ldr	r2, [pc, #168]	; (8002368 <MX_ADC3_Init+0xc4>)
 80022c0:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80022c2:	4b28      	ldr	r3, [pc, #160]	; (8002364 <MX_ADC3_Init+0xc0>)
 80022c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80022c8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80022ca:	4b26      	ldr	r3, [pc, #152]	; (8002364 <MX_ADC3_Init+0xc0>)
 80022cc:	2208      	movs	r2, #8
 80022ce:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022d0:	4b24      	ldr	r3, [pc, #144]	; (8002364 <MX_ADC3_Init+0xc0>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022d6:	4b23      	ldr	r3, [pc, #140]	; (8002364 <MX_ADC3_Init+0xc0>)
 80022d8:	2204      	movs	r2, #4
 80022da:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80022dc:	4b21      	ldr	r3, [pc, #132]	; (8002364 <MX_ADC3_Init+0xc0>)
 80022de:	2200      	movs	r2, #0
 80022e0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80022e2:	4b20      	ldr	r3, [pc, #128]	; (8002364 <MX_ADC3_Init+0xc0>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80022e8:	4b1e      	ldr	r3, [pc, #120]	; (8002364 <MX_ADC3_Init+0xc0>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80022ee:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <MX_ADC3_Init+0xc0>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022f4:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <MX_ADC3_Init+0xc0>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022fa:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <MX_ADC3_Init+0xc0>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8002300:	4b18      	ldr	r3, [pc, #96]	; (8002364 <MX_ADC3_Init+0xc0>)
 8002302:	2203      	movs	r2, #3
 8002304:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002306:	4b17      	ldr	r3, [pc, #92]	; (8002364 <MX_ADC3_Init+0xc0>)
 8002308:	2200      	movs	r2, #0
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800230c:	4b15      	ldr	r3, [pc, #84]	; (8002364 <MX_ADC3_Init+0xc0>)
 800230e:	2200      	movs	r2, #0
 8002310:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8002312:	4b14      	ldr	r3, [pc, #80]	; (8002364 <MX_ADC3_Init+0xc0>)
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800231a:	4812      	ldr	r0, [pc, #72]	; (8002364 <MX_ADC3_Init+0xc0>)
 800231c:	f001 f92c 	bl	8003578 <HAL_ADC_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8002326:	f000 fac7 	bl	80028b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <MX_ADC3_Init+0xc8>)
 800232c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800232e:	2306      	movs	r3, #6
 8002330:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002336:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800233a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800233c:	2304      	movs	r3, #4
 800233e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002344:	2300      	movs	r3, #0
 8002346:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002348:	1d3b      	adds	r3, r7, #4
 800234a:	4619      	mov	r1, r3
 800234c:	4805      	ldr	r0, [pc, #20]	; (8002364 <MX_ADC3_Init+0xc0>)
 800234e:	f001 fb95 	bl	8003a7c <HAL_ADC_ConfigChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8002358:	f000 faae 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800235c:	bf00      	nop
 800235e:	3720      	adds	r7, #32
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	200059d4 	.word	0x200059d4
 8002368:	58026000 	.word	0x58026000
 800236c:	08600004 	.word	0x08600004

08002370 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002374:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <MX_CRC_Init+0x3c>)
 8002376:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <MX_CRC_Init+0x40>)
 8002378:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800237a:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <MX_CRC_Init+0x3c>)
 800237c:	2200      	movs	r2, #0
 800237e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002380:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <MX_CRC_Init+0x3c>)
 8002382:	2200      	movs	r2, #0
 8002384:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002386:	4b09      	ldr	r3, [pc, #36]	; (80023ac <MX_CRC_Init+0x3c>)
 8002388:	2200      	movs	r2, #0
 800238a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800238c:	4b07      	ldr	r3, [pc, #28]	; (80023ac <MX_CRC_Init+0x3c>)
 800238e:	2200      	movs	r2, #0
 8002390:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <MX_CRC_Init+0x3c>)
 8002394:	2201      	movs	r2, #1
 8002396:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002398:	4804      	ldr	r0, [pc, #16]	; (80023ac <MX_CRC_Init+0x3c>)
 800239a:	f002 fc89 	bl	8004cb0 <HAL_CRC_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80023a4:	f000 fa88 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20005888 	.word	0x20005888
 80023b0:	58024c00 	.word	0x58024c00

080023b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b09a      	sub	sp, #104	; 0x68
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
 80023e4:	615a      	str	r2, [r3, #20]
 80023e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	222c      	movs	r2, #44	; 0x2c
 80023ec:	2100      	movs	r1, #0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f00c ffda 	bl	800f3a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023f4:	4b57      	ldr	r3, [pc, #348]	; (8002554 <MX_TIM1_Init+0x1a0>)
 80023f6:	4a58      	ldr	r2, [pc, #352]	; (8002558 <MX_TIM1_Init+0x1a4>)
 80023f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 103;
 80023fa:	4b56      	ldr	r3, [pc, #344]	; (8002554 <MX_TIM1_Init+0x1a0>)
 80023fc:	2267      	movs	r2, #103	; 0x67
 80023fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002400:	4b54      	ldr	r3, [pc, #336]	; (8002554 <MX_TIM1_Init+0x1a0>)
 8002402:	2220      	movs	r2, #32
 8002404:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 72;
 8002406:	4b53      	ldr	r3, [pc, #332]	; (8002554 <MX_TIM1_Init+0x1a0>)
 8002408:	2248      	movs	r2, #72	; 0x48
 800240a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240c:	4b51      	ldr	r3, [pc, #324]	; (8002554 <MX_TIM1_Init+0x1a0>)
 800240e:	2200      	movs	r2, #0
 8002410:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002412:	4b50      	ldr	r3, [pc, #320]	; (8002554 <MX_TIM1_Init+0x1a0>)
 8002414:	2200      	movs	r2, #0
 8002416:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002418:	4b4e      	ldr	r3, [pc, #312]	; (8002554 <MX_TIM1_Init+0x1a0>)
 800241a:	2280      	movs	r2, #128	; 0x80
 800241c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800241e:	484d      	ldr	r0, [pc, #308]	; (8002554 <MX_TIM1_Init+0x1a0>)
 8002420:	f008 f988 	bl	800a734 <HAL_TIM_Base_Init>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800242a:	f000 fa45 	bl	80028b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800242e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002432:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002434:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002438:	4619      	mov	r1, r3
 800243a:	4846      	ldr	r0, [pc, #280]	; (8002554 <MX_TIM1_Init+0x1a0>)
 800243c:	f009 f802 	bl	800b444 <HAL_TIM_ConfigClockSource>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002446:	f000 fa37 	bl	80028b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800244a:	4842      	ldr	r0, [pc, #264]	; (8002554 <MX_TIM1_Init+0x1a0>)
 800244c:	f008 f9c9 	bl	800a7e2 <HAL_TIM_PWM_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002456:	f000 fa2f 	bl	80028b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002462:	2300      	movs	r3, #0
 8002464:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002466:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800246a:	4619      	mov	r1, r3
 800246c:	4839      	ldr	r0, [pc, #228]	; (8002554 <MX_TIM1_Init+0x1a0>)
 800246e:	f009 fd47 	bl	800bf00 <HAL_TIMEx_MasterConfigSynchronization>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002478:	f000 fa1e 	bl	80028b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800247c:	2360      	movs	r3, #96	; 0x60
 800247e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002484:	2300      	movs	r3, #0
 8002486:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002488:	2300      	movs	r3, #0
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800248c:	2300      	movs	r3, #0
 800248e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002490:	2300      	movs	r3, #0
 8002492:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002494:	2300      	movs	r3, #0
 8002496:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002498:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800249c:	2200      	movs	r2, #0
 800249e:	4619      	mov	r1, r3
 80024a0:	482c      	ldr	r0, [pc, #176]	; (8002554 <MX_TIM1_Init+0x1a0>)
 80024a2:	f008 febb 	bl	800b21c <HAL_TIM_PWM_ConfigChannel>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80024ac:	f000 fa04 	bl	80028b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024b4:	2204      	movs	r2, #4
 80024b6:	4619      	mov	r1, r3
 80024b8:	4826      	ldr	r0, [pc, #152]	; (8002554 <MX_TIM1_Init+0x1a0>)
 80024ba:	f008 feaf 	bl	800b21c <HAL_TIM_PWM_ConfigChannel>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80024c4:	f000 f9f8 	bl	80028b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024cc:	2208      	movs	r2, #8
 80024ce:	4619      	mov	r1, r3
 80024d0:	4820      	ldr	r0, [pc, #128]	; (8002554 <MX_TIM1_Init+0x1a0>)
 80024d2:	f008 fea3 	bl	800b21c <HAL_TIM_PWM_ConfigChannel>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80024dc:	f000 f9ec 	bl	80028b8 <Error_Handler>
  }
  sConfigOC.Pulse = 72;
 80024e0:	2348      	movs	r3, #72	; 0x48
 80024e2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024e8:	220c      	movs	r2, #12
 80024ea:	4619      	mov	r1, r3
 80024ec:	4819      	ldr	r0, [pc, #100]	; (8002554 <MX_TIM1_Init+0x1a0>)
 80024ee:	f008 fe95 	bl	800b21c <HAL_TIM_PWM_ConfigChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80024f8:	f000 f9de 	bl	80028b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80024fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002500:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8002502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002506:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8002508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800250c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800251a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8002520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002524:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_LOW;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	4619      	mov	r1, r3
 8002536:	4807      	ldr	r0, [pc, #28]	; (8002554 <MX_TIM1_Init+0x1a0>)
 8002538:	f009 fd70 	bl	800c01c <HAL_TIMEx_ConfigBreakDeadTime>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8002542:	f000 f9b9 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002546:	4803      	ldr	r0, [pc, #12]	; (8002554 <MX_TIM1_Init+0x1a0>)
 8002548:	f000 fb6e 	bl	8002c28 <HAL_TIM_MspPostInit>

}
 800254c:	bf00      	nop
 800254e:	3768      	adds	r7, #104	; 0x68
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20005ab0 	.word	0x20005ab0
 8002558:	40010000 	.word	0x40010000

0800255c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08c      	sub	sp, #48	; 0x30
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002562:	f107 030c 	add.w	r3, r7, #12
 8002566:	2224      	movs	r2, #36	; 0x24
 8002568:	2100      	movs	r1, #0
 800256a:	4618      	mov	r0, r3
 800256c:	f00c ff1c 	bl	800f3a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002570:	463b      	mov	r3, r7
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800257a:	4b21      	ldr	r3, [pc, #132]	; (8002600 <MX_TIM3_Init+0xa4>)
 800257c:	4a21      	ldr	r2, [pc, #132]	; (8002604 <MX_TIM3_Init+0xa8>)
 800257e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002580:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <MX_TIM3_Init+0xa4>)
 8002582:	2200      	movs	r2, #0
 8002584:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002586:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <MX_TIM3_Init+0xa4>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 299;
 800258c:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <MX_TIM3_Init+0xa4>)
 800258e:	f240 122b 	movw	r2, #299	; 0x12b
 8002592:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002594:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <MX_TIM3_Init+0xa4>)
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800259a:	4b19      	ldr	r3, [pc, #100]	; (8002600 <MX_TIM3_Init+0xa4>)
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80025a0:	2301      	movs	r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80025a4:	2302      	movs	r3, #2
 80025a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025a8:	2301      	movs	r3, #1
 80025aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80025b4:	2302      	movs	r3, #2
 80025b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025b8:	2301      	movs	r3, #1
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025bc:	2300      	movs	r3, #0
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80025c4:	f107 030c 	add.w	r3, r7, #12
 80025c8:	4619      	mov	r1, r3
 80025ca:	480d      	ldr	r0, [pc, #52]	; (8002600 <MX_TIM3_Init+0xa4>)
 80025cc:	f008 fbd2 	bl	800ad74 <HAL_TIM_Encoder_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80025d6:	f000 f96f 	bl	80028b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025e2:	463b      	mov	r3, r7
 80025e4:	4619      	mov	r1, r3
 80025e6:	4806      	ldr	r0, [pc, #24]	; (8002600 <MX_TIM3_Init+0xa4>)
 80025e8:	f009 fc8a 	bl	800bf00 <HAL_TIMEx_MasterConfigSynchronization>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80025f2:	f000 f961 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025f6:	bf00      	nop
 80025f8:	3730      	adds	r7, #48	; 0x30
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20005924 	.word	0x20005924
 8002604:	40000400 	.word	0x40000400

08002608 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800260c:	4b22      	ldr	r3, [pc, #136]	; (8002698 <MX_USART3_UART_Init+0x90>)
 800260e:	4a23      	ldr	r2, [pc, #140]	; (800269c <MX_USART3_UART_Init+0x94>)
 8002610:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 4000000;
 8002612:	4b21      	ldr	r3, [pc, #132]	; (8002698 <MX_USART3_UART_Init+0x90>)
 8002614:	4a22      	ldr	r2, [pc, #136]	; (80026a0 <MX_USART3_UART_Init+0x98>)
 8002616:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002618:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <MX_USART3_UART_Init+0x90>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800261e:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <MX_USART3_UART_Init+0x90>)
 8002620:	2200      	movs	r2, #0
 8002622:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002624:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <MX_USART3_UART_Init+0x90>)
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800262a:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <MX_USART3_UART_Init+0x90>)
 800262c:	220c      	movs	r2, #12
 800262e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <MX_USART3_UART_Init+0x90>)
 8002632:	2200      	movs	r2, #0
 8002634:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002636:	4b18      	ldr	r3, [pc, #96]	; (8002698 <MX_USART3_UART_Init+0x90>)
 8002638:	2200      	movs	r2, #0
 800263a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800263c:	4b16      	ldr	r3, [pc, #88]	; (8002698 <MX_USART3_UART_Init+0x90>)
 800263e:	2200      	movs	r2, #0
 8002640:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002642:	4b15      	ldr	r3, [pc, #84]	; (8002698 <MX_USART3_UART_Init+0x90>)
 8002644:	2200      	movs	r2, #0
 8002646:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <MX_USART3_UART_Init+0x90>)
 800264a:	2200      	movs	r2, #0
 800264c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800264e:	4812      	ldr	r0, [pc, #72]	; (8002698 <MX_USART3_UART_Init+0x90>)
 8002650:	f009 fd80 	bl	800c154 <HAL_UART_Init>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800265a:	f000 f92d 	bl	80028b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800265e:	2100      	movs	r1, #0
 8002660:	480d      	ldr	r0, [pc, #52]	; (8002698 <MX_USART3_UART_Init+0x90>)
 8002662:	f00b f869 	bl	800d738 <HAL_UARTEx_SetTxFifoThreshold>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 800266c:	f000 f924 	bl	80028b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002670:	2100      	movs	r1, #0
 8002672:	4809      	ldr	r0, [pc, #36]	; (8002698 <MX_USART3_UART_Init+0x90>)
 8002674:	f00b f89e 	bl	800d7b4 <HAL_UARTEx_SetRxFifoThreshold>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800267e:	f000 f91b 	bl	80028b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002682:	4805      	ldr	r0, [pc, #20]	; (8002698 <MX_USART3_UART_Init+0x90>)
 8002684:	f00b f81f 	bl	800d6c6 <HAL_UARTEx_DisableFifoMode>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800268e:	f000 f913 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200006c4 	.word	0x200006c4
 800269c:	40004800 	.word	0x40004800
 80026a0:	003d0900 	.word	0x003d0900

080026a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026aa:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <MX_DMA_Init+0x4c>)
 80026ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026b0:	4a0f      	ldr	r2, [pc, #60]	; (80026f0 <MX_DMA_Init+0x4c>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80026ba:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <MX_DMA_Init+0x4c>)
 80026bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80026c8:	2200      	movs	r2, #0
 80026ca:	2100      	movs	r1, #0
 80026cc:	200b      	movs	r0, #11
 80026ce:	f002 fa3a 	bl	8004b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80026d2:	200b      	movs	r0, #11
 80026d4:	f002 fa51 	bl	8004b7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80026d8:	2200      	movs	r2, #0
 80026da:	2100      	movs	r1, #0
 80026dc:	200d      	movs	r0, #13
 80026de:	f002 fa32 	bl	8004b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80026e2:	200d      	movs	r0, #13
 80026e4:	f002 fa49 	bl	8004b7a <HAL_NVIC_EnableIRQ>

}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	58024400 	.word	0x58024400

080026f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08c      	sub	sp, #48	; 0x30
 80026f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fa:	f107 031c 	add.w	r3, r7, #28
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	609a      	str	r2, [r3, #8]
 8002706:	60da      	str	r2, [r3, #12]
 8002708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800270a:	4b51      	ldr	r3, [pc, #324]	; (8002850 <MX_GPIO_Init+0x15c>)
 800270c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002710:	4a4f      	ldr	r2, [pc, #316]	; (8002850 <MX_GPIO_Init+0x15c>)
 8002712:	f043 0310 	orr.w	r3, r3, #16
 8002716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800271a:	4b4d      	ldr	r3, [pc, #308]	; (8002850 <MX_GPIO_Init+0x15c>)
 800271c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002728:	4b49      	ldr	r3, [pc, #292]	; (8002850 <MX_GPIO_Init+0x15c>)
 800272a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800272e:	4a48      	ldr	r2, [pc, #288]	; (8002850 <MX_GPIO_Init+0x15c>)
 8002730:	f043 0304 	orr.w	r3, r3, #4
 8002734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002738:	4b45      	ldr	r3, [pc, #276]	; (8002850 <MX_GPIO_Init+0x15c>)
 800273a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002746:	4b42      	ldr	r3, [pc, #264]	; (8002850 <MX_GPIO_Init+0x15c>)
 8002748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800274c:	4a40      	ldr	r2, [pc, #256]	; (8002850 <MX_GPIO_Init+0x15c>)
 800274e:	f043 0320 	orr.w	r3, r3, #32
 8002752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002756:	4b3e      	ldr	r3, [pc, #248]	; (8002850 <MX_GPIO_Init+0x15c>)
 8002758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002764:	4b3a      	ldr	r3, [pc, #232]	; (8002850 <MX_GPIO_Init+0x15c>)
 8002766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800276a:	4a39      	ldr	r2, [pc, #228]	; (8002850 <MX_GPIO_Init+0x15c>)
 800276c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002774:	4b36      	ldr	r3, [pc, #216]	; (8002850 <MX_GPIO_Init+0x15c>)
 8002776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800277a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002782:	4b33      	ldr	r3, [pc, #204]	; (8002850 <MX_GPIO_Init+0x15c>)
 8002784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002788:	4a31      	ldr	r2, [pc, #196]	; (8002850 <MX_GPIO_Init+0x15c>)
 800278a:	f043 0302 	orr.w	r3, r3, #2
 800278e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002792:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <MX_GPIO_Init+0x15c>)
 8002794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027a0:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <MX_GPIO_Init+0x15c>)
 80027a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a6:	4a2a      	ldr	r2, [pc, #168]	; (8002850 <MX_GPIO_Init+0x15c>)
 80027a8:	f043 0308 	orr.w	r3, r3, #8
 80027ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027b0:	4b27      	ldr	r3, [pc, #156]	; (8002850 <MX_GPIO_Init+0x15c>)
 80027b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	607b      	str	r3, [r7, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027be:	4b24      	ldr	r3, [pc, #144]	; (8002850 <MX_GPIO_Init+0x15c>)
 80027c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027c4:	4a22      	ldr	r2, [pc, #136]	; (8002850 <MX_GPIO_Init+0x15c>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027ce:	4b20      	ldr	r3, [pc, #128]	; (8002850 <MX_GPIO_Init+0x15c>)
 80027d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80027dc:	2200      	movs	r2, #0
 80027de:	2101      	movs	r1, #1
 80027e0:	481c      	ldr	r0, [pc, #112]	; (8002854 <MX_GPIO_Init+0x160>)
 80027e2:	f004 fdd7 	bl	8007394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80027e6:	2200      	movs	r2, #0
 80027e8:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80027ec:	481a      	ldr	r0, [pc, #104]	; (8002858 <MX_GPIO_Init+0x164>)
 80027ee:	f004 fdd1 	bl	8007394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80027f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002802:	f107 031c 	add.w	r3, r7, #28
 8002806:	4619      	mov	r1, r3
 8002808:	4813      	ldr	r0, [pc, #76]	; (8002858 <MX_GPIO_Init+0x164>)
 800280a:	f004 fc13 	bl	8007034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800280e:	2301      	movs	r3, #1
 8002810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002812:	2301      	movs	r3, #1
 8002814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281a:	2300      	movs	r3, #0
 800281c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281e:	f107 031c 	add.w	r3, r7, #28
 8002822:	4619      	mov	r1, r3
 8002824:	480b      	ldr	r0, [pc, #44]	; (8002854 <MX_GPIO_Init+0x160>)
 8002826:	f004 fc05 	bl	8007034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800282a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800282e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002830:	2301      	movs	r3, #1
 8002832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002838:	2300      	movs	r3, #0
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283c:	f107 031c 	add.w	r3, r7, #28
 8002840:	4619      	mov	r1, r3
 8002842:	4805      	ldr	r0, [pc, #20]	; (8002858 <MX_GPIO_Init+0x164>)
 8002844:	f004 fbf6 	bl	8007034 <HAL_GPIO_Init>

}
 8002848:	bf00      	nop
 800284a:	3730      	adds	r7, #48	; 0x30
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	58024400 	.word	0x58024400
 8002854:	58020400 	.word	0x58020400
 8002858:	58020800 	.word	0x58020800

0800285c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002862:	463b      	mov	r3, r7
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800286e:	f002 f9a3 	bl	8004bb8 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002872:	2301      	movs	r3, #1
 8002874:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002876:	2300      	movs	r3, #0
 8002878:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24001000;
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <MPU_Config+0x58>)
 800287c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64B;
 800287e:	2305      	movs	r3, #5
 8002880:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002882:	2300      	movs	r3, #0
 8002884:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002886:	2300      	movs	r3, #0
 8002888:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800288a:	2303      	movs	r3, #3
 800288c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800288e:	2301      	movs	r3, #1
 8002890:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002892:	2301      	movs	r3, #1
 8002894:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002896:	2300      	movs	r3, #0
 8002898:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800289a:	2301      	movs	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800289e:	463b      	mov	r3, r7
 80028a0:	4618      	mov	r0, r3
 80028a2:	f002 f9c1 	bl	8004c28 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80028a6:	2004      	movs	r0, #4
 80028a8:	f002 f99e 	bl	8004be8 <HAL_MPU_Enable>

}
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	24001000 	.word	0x24001000

080028b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028bc:	b672      	cpsid	i
}
 80028be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <Error_Handler+0x8>
	...

080028c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <HAL_MspInit+0x30>)
 80028cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028d0:	4a08      	ldr	r2, [pc, #32]	; (80028f4 <HAL_MspInit+0x30>)
 80028d2:	f043 0302 	orr.w	r3, r3, #2
 80028d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_MspInit+0x30>)
 80028dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	58024400 	.word	0x58024400

080028f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08c      	sub	sp, #48	; 0x30
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 031c 	add.w	r3, r7, #28
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a60      	ldr	r2, [pc, #384]	; (8002a98 <HAL_ADC_MspInit+0x1a0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d15a      	bne.n	80029d0 <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800291a:	4b60      	ldr	r3, [pc, #384]	; (8002a9c <HAL_ADC_MspInit+0x1a4>)
 800291c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002920:	4a5e      	ldr	r2, [pc, #376]	; (8002a9c <HAL_ADC_MspInit+0x1a4>)
 8002922:	f043 0320 	orr.w	r3, r3, #32
 8002926:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800292a:	4b5c      	ldr	r3, [pc, #368]	; (8002a9c <HAL_ADC_MspInit+0x1a4>)
 800292c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002930:	f003 0320 	and.w	r3, r3, #32
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002938:	4b58      	ldr	r3, [pc, #352]	; (8002a9c <HAL_ADC_MspInit+0x1a4>)
 800293a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800293e:	4a57      	ldr	r2, [pc, #348]	; (8002a9c <HAL_ADC_MspInit+0x1a4>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002948:	4b54      	ldr	r3, [pc, #336]	; (8002a9c <HAL_ADC_MspInit+0x1a4>)
 800294a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PC1     ------> ADC1_INP11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002956:	2303      	movs	r3, #3
 8002958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800295a:	2303      	movs	r3, #3
 800295c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002962:	f107 031c 	add.w	r3, r7, #28
 8002966:	4619      	mov	r1, r3
 8002968:	484d      	ldr	r0, [pc, #308]	; (8002aa0 <HAL_ADC_MspInit+0x1a8>)
 800296a:	f004 fb63 	bl	8007034 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800296e:	4b4d      	ldr	r3, [pc, #308]	; (8002aa4 <HAL_ADC_MspInit+0x1ac>)
 8002970:	4a4d      	ldr	r2, [pc, #308]	; (8002aa8 <HAL_ADC_MspInit+0x1b0>)
 8002972:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002974:	4b4b      	ldr	r3, [pc, #300]	; (8002aa4 <HAL_ADC_MspInit+0x1ac>)
 8002976:	2209      	movs	r2, #9
 8002978:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800297a:	4b4a      	ldr	r3, [pc, #296]	; (8002aa4 <HAL_ADC_MspInit+0x1ac>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002980:	4b48      	ldr	r3, [pc, #288]	; (8002aa4 <HAL_ADC_MspInit+0x1ac>)
 8002982:	2200      	movs	r2, #0
 8002984:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002986:	4b47      	ldr	r3, [pc, #284]	; (8002aa4 <HAL_ADC_MspInit+0x1ac>)
 8002988:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800298c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800298e:	4b45      	ldr	r3, [pc, #276]	; (8002aa4 <HAL_ADC_MspInit+0x1ac>)
 8002990:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002994:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002996:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <HAL_ADC_MspInit+0x1ac>)
 8002998:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800299c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800299e:	4b41      	ldr	r3, [pc, #260]	; (8002aa4 <HAL_ADC_MspInit+0x1ac>)
 80029a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80029a6:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <HAL_ADC_MspInit+0x1ac>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029ac:	4b3d      	ldr	r3, [pc, #244]	; (8002aa4 <HAL_ADC_MspInit+0x1ac>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029b2:	483c      	ldr	r0, [pc, #240]	; (8002aa4 <HAL_ADC_MspInit+0x1ac>)
 80029b4:	f002 fa66 	bl	8004e84 <HAL_DMA_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 80029be:	f7ff ff7b 	bl	80028b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a37      	ldr	r2, [pc, #220]	; (8002aa4 <HAL_ADC_MspInit+0x1ac>)
 80029c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80029c8:	4a36      	ldr	r2, [pc, #216]	; (8002aa4 <HAL_ADC_MspInit+0x1ac>)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80029ce:	e05f      	b.n	8002a90 <HAL_ADC_MspInit+0x198>
  else if(hadc->Instance==ADC3)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a35      	ldr	r2, [pc, #212]	; (8002aac <HAL_ADC_MspInit+0x1b4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d15a      	bne.n	8002a90 <HAL_ADC_MspInit+0x198>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80029da:	4b30      	ldr	r3, [pc, #192]	; (8002a9c <HAL_ADC_MspInit+0x1a4>)
 80029dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e0:	4a2e      	ldr	r2, [pc, #184]	; (8002a9c <HAL_ADC_MspInit+0x1a4>)
 80029e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029ea:	4b2c      	ldr	r3, [pc, #176]	; (8002a9c <HAL_ADC_MspInit+0x1a4>)
 80029ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029f8:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <HAL_ADC_MspInit+0x1a4>)
 80029fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029fe:	4a27      	ldr	r2, [pc, #156]	; (8002a9c <HAL_ADC_MspInit+0x1a4>)
 8002a00:	f043 0320 	orr.w	r3, r3, #32
 8002a04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a08:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <HAL_ADC_MspInit+0x1a4>)
 8002a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0e:	f003 0320 	and.w	r3, r3, #32
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a24:	f107 031c 	add.w	r3, r7, #28
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4821      	ldr	r0, [pc, #132]	; (8002ab0 <HAL_ADC_MspInit+0x1b8>)
 8002a2c:	f004 fb02 	bl	8007034 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Stream2;
 8002a30:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <HAL_ADC_MspInit+0x1bc>)
 8002a32:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <HAL_ADC_MspInit+0x1c0>)
 8002a34:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002a36:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <HAL_ADC_MspInit+0x1bc>)
 8002a38:	2273      	movs	r2, #115	; 0x73
 8002a3a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a3c:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <HAL_ADC_MspInit+0x1bc>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a42:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <HAL_ADC_MspInit+0x1bc>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <HAL_ADC_MspInit+0x1bc>)
 8002a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a4e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a50:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <HAL_ADC_MspInit+0x1bc>)
 8002a52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a56:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a58:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <HAL_ADC_MspInit+0x1bc>)
 8002a5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a5e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002a60:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <HAL_ADC_MspInit+0x1bc>)
 8002a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a66:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002a68:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_ADC_MspInit+0x1bc>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a6e:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <HAL_ADC_MspInit+0x1bc>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002a74:	480f      	ldr	r0, [pc, #60]	; (8002ab4 <HAL_ADC_MspInit+0x1bc>)
 8002a76:	f002 fa05 	bl	8004e84 <HAL_DMA_Init>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_ADC_MspInit+0x18c>
      Error_Handler();
 8002a80:	f7ff ff1a 	bl	80028b8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a0b      	ldr	r2, [pc, #44]	; (8002ab4 <HAL_ADC_MspInit+0x1bc>)
 8002a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <HAL_ADC_MspInit+0x1bc>)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002a90:	bf00      	nop
 8002a92:	3730      	adds	r7, #48	; 0x30
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40022000 	.word	0x40022000
 8002a9c:	58024400 	.word	0x58024400
 8002aa0:	58020800 	.word	0x58020800
 8002aa4:	20005a38 	.word	0x20005a38
 8002aa8:	40020010 	.word	0x40020010
 8002aac:	58026000 	.word	0x58026000
 8002ab0:	58021400 	.word	0x58021400
 8002ab4:	200058ac 	.word	0x200058ac
 8002ab8:	40020040 	.word	0x40020040

08002abc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <HAL_CRC_MspInit+0x3c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d10e      	bne.n	8002aec <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_CRC_MspInit+0x40>)
 8002ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad4:	4a09      	ldr	r2, [pc, #36]	; (8002afc <HAL_CRC_MspInit+0x40>)
 8002ad6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ade:	4b07      	ldr	r3, [pc, #28]	; (8002afc <HAL_CRC_MspInit+0x40>)
 8002ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	58024c00 	.word	0x58024c00
 8002afc:	58024400 	.word	0x58024400

08002b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a1a      	ldr	r2, [pc, #104]	; (8002b88 <HAL_TIM_Base_MspInit+0x88>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d12d      	bne.n	8002b7e <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b22:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <HAL_TIM_Base_MspInit+0x8c>)
 8002b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b28:	4a18      	ldr	r2, [pc, #96]	; (8002b8c <HAL_TIM_Base_MspInit+0x8c>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b32:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <HAL_TIM_Base_MspInit+0x8c>)
 8002b34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_TIM_Base_MspInit+0x8c>)
 8002b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b46:	4a11      	ldr	r2, [pc, #68]	; (8002b8c <HAL_TIM_Base_MspInit+0x8c>)
 8002b48:	f043 0310 	orr.w	r3, r3, #16
 8002b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b50:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <HAL_TIM_Base_MspInit+0x8c>)
 8002b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE6     ------> TIM1_BKIN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b5e:	2340      	movs	r3, #64	; 0x40
 8002b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b62:	2312      	movs	r3, #18
 8002b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b72:	f107 0314 	add.w	r3, r7, #20
 8002b76:	4619      	mov	r1, r3
 8002b78:	4805      	ldr	r0, [pc, #20]	; (8002b90 <HAL_TIM_Base_MspInit+0x90>)
 8002b7a:	f004 fa5b 	bl	8007034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b7e:	bf00      	nop
 8002b80:	3728      	adds	r7, #40	; 0x28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40010000 	.word	0x40010000
 8002b8c:	58024400 	.word	0x58024400
 8002b90:	58021000 	.word	0x58021000

08002b94 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08a      	sub	sp, #40	; 0x28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	60da      	str	r2, [r3, #12]
 8002baa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1a      	ldr	r2, [pc, #104]	; (8002c1c <HAL_TIM_Encoder_MspInit+0x88>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d12d      	bne.n	8002c12 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bb6:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002bb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bbc:	4a18      	ldr	r2, [pc, #96]	; (8002c20 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bc6:	4b16      	ldr	r3, [pc, #88]	; (8002c20 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002bc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd4:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bda:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002bdc:	f043 0304 	orr.w	r3, r3, #4
 8002be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002be4:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bf2:	23c0      	movs	r3, #192	; 0xc0
 8002bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c02:	2302      	movs	r3, #2
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c06:	f107 0314 	add.w	r3, r7, #20
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4805      	ldr	r0, [pc, #20]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x90>)
 8002c0e:	f004 fa11 	bl	8007034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c12:	bf00      	nop
 8002c14:	3728      	adds	r7, #40	; 0x28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40000400 	.word	0x40000400
 8002c20:	58024400 	.word	0x58024400
 8002c24:	58020800 	.word	0x58020800

08002c28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c30:	f107 030c 	add.w	r3, r7, #12
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a13      	ldr	r2, [pc, #76]	; (8002c94 <HAL_TIM_MspPostInit+0x6c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d11f      	bne.n	8002c8a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4a:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_TIM_MspPostInit+0x70>)
 8002c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c50:	4a11      	ldr	r2, [pc, #68]	; (8002c98 <HAL_TIM_MspPostInit+0x70>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c5a:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <HAL_TIM_MspPostInit+0x70>)
 8002c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002c68:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002c6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7e:	f107 030c 	add.w	r3, r7, #12
 8002c82:	4619      	mov	r1, r3
 8002c84:	4805      	ldr	r0, [pc, #20]	; (8002c9c <HAL_TIM_MspPostInit+0x74>)
 8002c86:	f004 f9d5 	bl	8007034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c8a:	bf00      	nop
 8002c8c:	3720      	adds	r7, #32
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40010000 	.word	0x40010000
 8002c98:	58024400 	.word	0x58024400
 8002c9c:	58020000 	.word	0x58020000

08002ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b0b8      	sub	sp, #224	; 0xe0
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cb8:	f107 0310 	add.w	r3, r7, #16
 8002cbc:	22bc      	movs	r2, #188	; 0xbc
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f00c fb71 	bl	800f3a8 <memset>
  if(huart->Instance==USART3)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a3c      	ldr	r2, [pc, #240]	; (8002dbc <HAL_UART_MspInit+0x11c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d170      	bne.n	8002db2 <HAL_UART_MspInit+0x112>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cda:	f107 0310 	add.w	r3, r7, #16
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f005 fba2 	bl	8008428 <HAL_RCCEx_PeriphCLKConfig>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002cea:	f7ff fde5 	bl	80028b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cee:	4b34      	ldr	r3, [pc, #208]	; (8002dc0 <HAL_UART_MspInit+0x120>)
 8002cf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cf4:	4a32      	ldr	r2, [pc, #200]	; (8002dc0 <HAL_UART_MspInit+0x120>)
 8002cf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cfa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cfe:	4b30      	ldr	r3, [pc, #192]	; (8002dc0 <HAL_UART_MspInit+0x120>)
 8002d00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d0c:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <HAL_UART_MspInit+0x120>)
 8002d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d12:	4a2b      	ldr	r2, [pc, #172]	; (8002dc0 <HAL_UART_MspInit+0x120>)
 8002d14:	f043 0308 	orr.w	r3, r3, #8
 8002d18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d1c:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <HAL_UART_MspInit+0x120>)
 8002d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d32:	2302      	movs	r3, #2
 8002d34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d44:	2307      	movs	r3, #7
 8002d46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d4a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d4e:	4619      	mov	r1, r3
 8002d50:	481c      	ldr	r0, [pc, #112]	; (8002dc4 <HAL_UART_MspInit+0x124>)
 8002d52:	f004 f96f 	bl	8007034 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002d56:	4b1c      	ldr	r3, [pc, #112]	; (8002dc8 <HAL_UART_MspInit+0x128>)
 8002d58:	4a1c      	ldr	r2, [pc, #112]	; (8002dcc <HAL_UART_MspInit+0x12c>)
 8002d5a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002d5c:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <HAL_UART_MspInit+0x128>)
 8002d5e:	222d      	movs	r2, #45	; 0x2d
 8002d60:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d62:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_UART_MspInit+0x128>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d68:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <HAL_UART_MspInit+0x128>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d6e:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <HAL_UART_MspInit+0x128>)
 8002d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d74:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d76:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <HAL_UART_MspInit+0x128>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d7c:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <HAL_UART_MspInit+0x128>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HAL_UART_MspInit+0x128>)
 8002d84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d88:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <HAL_UART_MspInit+0x128>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d90:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <HAL_UART_MspInit+0x128>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002d96:	480c      	ldr	r0, [pc, #48]	; (8002dc8 <HAL_UART_MspInit+0x128>)
 8002d98:	f002 f874 	bl	8004e84 <HAL_DMA_Init>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8002da2:	f7ff fd89 	bl	80028b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a07      	ldr	r2, [pc, #28]	; (8002dc8 <HAL_UART_MspInit+0x128>)
 8002daa:	67da      	str	r2, [r3, #124]	; 0x7c
 8002dac:	4a06      	ldr	r2, [pc, #24]	; (8002dc8 <HAL_UART_MspInit+0x128>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002db2:	bf00      	nop
 8002db4:	37e0      	adds	r7, #224	; 0xe0
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40004800 	.word	0x40004800
 8002dc0:	58024400 	.word	0x58024400
 8002dc4:	58020c00 	.word	0x58020c00
 8002dc8:	20005810 	.word	0x20005810
 8002dcc:	40020028 	.word	0x40020028

08002dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dd4:	e7fe      	b.n	8002dd4 <NMI_Handler+0x4>

08002dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dda:	e7fe      	b.n	8002dda <HardFault_Handler+0x4>

08002ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <MemManage_Handler+0x4>

08002de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002de6:	e7fe      	b.n	8002de6 <BusFault_Handler+0x4>

08002de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dec:	e7fe      	b.n	8002dec <UsageFault_Handler+0x4>

08002dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e1c:	f000 f972 	bl	8003104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e28:	4802      	ldr	r0, [pc, #8]	; (8002e34 <DMA1_Stream0_IRQHandler+0x10>)
 8002e2a:	f002 fdf1 	bl	8005a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20005a38 	.word	0x20005a38

08002e38 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
	handleRxCommands();
 8002e3c:	f7fe f974 	bl	8001128 <handleRxCommands>
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002e40:	4802      	ldr	r0, [pc, #8]	; (8002e4c <DMA1_Stream1_IRQHandler+0x14>)
 8002e42:	f002 fde5 	bl	8005a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20005810 	.word	0x20005810

08002e50 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002e54:	4802      	ldr	r0, [pc, #8]	; (8002e60 <DMA1_Stream2_IRQHandler+0x10>)
 8002e56:	f002 fddb 	bl	8005a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	200058ac 	.word	0x200058ac

08002e64 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */
  stopMotor();
 8002e68:	f7fe fa3e 	bl	80012e8 <stopMotor>
  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e6c:	4802      	ldr	r0, [pc, #8]	; (8002e78 <TIM1_BRK_IRQHandler+0x14>)
 8002e6e:	f008 f8b5 	bl	800afdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20005ab0 	.word	0x20005ab0

08002e7c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	executeAll();
 8002e80:	f7fe fa3e 	bl	8001300 <executeAll>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e84:	4802      	ldr	r0, [pc, #8]	; (8002e90 <TIM1_CC_IRQHandler+0x14>)
 8002e86:	f008 f8a9 	bl	800afdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20005ab0 	.word	0x20005ab0

08002e94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  run = !run;
 8002e98:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <EXTI15_10_IRQHandler+0x24>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <EXTI15_10_IRQHandler+0x24>)
 8002eaa:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002eac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002eb0:	f004 faa3 	bl	80073fa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002eb4:	bf00      	nop
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	200005eb 	.word	0x200005eb

08002ebc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ec0:	4b37      	ldr	r3, [pc, #220]	; (8002fa0 <SystemInit+0xe4>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	4a36      	ldr	r2, [pc, #216]	; (8002fa0 <SystemInit+0xe4>)
 8002ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ed0:	4b34      	ldr	r3, [pc, #208]	; (8002fa4 <SystemInit+0xe8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	2b06      	cmp	r3, #6
 8002eda:	d807      	bhi.n	8002eec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002edc:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <SystemInit+0xe8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f023 030f 	bic.w	r3, r3, #15
 8002ee4:	4a2f      	ldr	r2, [pc, #188]	; (8002fa4 <SystemInit+0xe8>)
 8002ee6:	f043 0307 	orr.w	r3, r3, #7
 8002eea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002eec:	4b2e      	ldr	r3, [pc, #184]	; (8002fa8 <SystemInit+0xec>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a2d      	ldr	r2, [pc, #180]	; (8002fa8 <SystemInit+0xec>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ef8:	4b2b      	ldr	r3, [pc, #172]	; (8002fa8 <SystemInit+0xec>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002efe:	4b2a      	ldr	r3, [pc, #168]	; (8002fa8 <SystemInit+0xec>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4929      	ldr	r1, [pc, #164]	; (8002fa8 <SystemInit+0xec>)
 8002f04:	4b29      	ldr	r3, [pc, #164]	; (8002fac <SystemInit+0xf0>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f0a:	4b26      	ldr	r3, [pc, #152]	; (8002fa4 <SystemInit+0xe8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d007      	beq.n	8002f26 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f16:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <SystemInit+0xe8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 030f 	bic.w	r3, r3, #15
 8002f1e:	4a21      	ldr	r2, [pc, #132]	; (8002fa4 <SystemInit+0xe8>)
 8002f20:	f043 0307 	orr.w	r3, r3, #7
 8002f24:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002f26:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <SystemInit+0xec>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002f2c:	4b1e      	ldr	r3, [pc, #120]	; (8002fa8 <SystemInit+0xec>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002f32:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <SystemInit+0xec>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <SystemInit+0xec>)
 8002f3a:	4a1d      	ldr	r2, [pc, #116]	; (8002fb0 <SystemInit+0xf4>)
 8002f3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002f3e:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <SystemInit+0xec>)
 8002f40:	4a1c      	ldr	r2, [pc, #112]	; (8002fb4 <SystemInit+0xf8>)
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002f44:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <SystemInit+0xec>)
 8002f46:	4a1c      	ldr	r2, [pc, #112]	; (8002fb8 <SystemInit+0xfc>)
 8002f48:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002f4a:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <SystemInit+0xec>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002f50:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <SystemInit+0xec>)
 8002f52:	4a19      	ldr	r2, [pc, #100]	; (8002fb8 <SystemInit+0xfc>)
 8002f54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <SystemInit+0xec>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <SystemInit+0xec>)
 8002f5e:	4a16      	ldr	r2, [pc, #88]	; (8002fb8 <SystemInit+0xfc>)
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002f62:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <SystemInit+0xec>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <SystemInit+0xec>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a0e      	ldr	r2, [pc, #56]	; (8002fa8 <SystemInit+0xec>)
 8002f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <SystemInit+0xec>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002f7a:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <SystemInit+0x100>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <SystemInit+0x104>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f86:	d202      	bcs.n	8002f8e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002f88:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <SystemInit+0x108>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <SystemInit+0x10c>)
 8002f90:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002f94:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002f96:	bf00      	nop
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000ed00 	.word	0xe000ed00
 8002fa4:	52002000 	.word	0x52002000
 8002fa8:	58024400 	.word	0x58024400
 8002fac:	eaf6ed7f 	.word	0xeaf6ed7f
 8002fb0:	02020200 	.word	0x02020200
 8002fb4:	01ff0000 	.word	0x01ff0000
 8002fb8:	01010280 	.word	0x01010280
 8002fbc:	5c001000 	.word	0x5c001000
 8002fc0:	ffff0000 	.word	0xffff0000
 8002fc4:	51008108 	.word	0x51008108
 8002fc8:	52004000 	.word	0x52004000

08002fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003004 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fd0:	f7ff ff74 	bl	8002ebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fd4:	480c      	ldr	r0, [pc, #48]	; (8003008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fd6:	490d      	ldr	r1, [pc, #52]	; (800300c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fd8:	4a0d      	ldr	r2, [pc, #52]	; (8003010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fdc:	e002      	b.n	8002fe4 <LoopCopyDataInit>

08002fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fe2:	3304      	adds	r3, #4

08002fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe8:	d3f9      	bcc.n	8002fde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fea:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fec:	4c0a      	ldr	r4, [pc, #40]	; (8003018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ff0:	e001      	b.n	8002ff6 <LoopFillZerobss>

08002ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ff4:	3204      	adds	r2, #4

08002ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff8:	d3fb      	bcc.n	8002ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ffa:	f00c f9a3 	bl	800f344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ffe:	f7fe ff29 	bl	8001e54 <main>
  bx  lr
 8003002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003004:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800300c:	200005b8 	.word	0x200005b8
  ldr r2, =_sidata
 8003010:	0800fc8c 	.word	0x0800fc8c
  ldr r2, =_sbss
 8003014:	200005b8 	.word	0x200005b8
  ldr r4, =_ebss
 8003018:	20005b00 	.word	0x20005b00

0800301c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800301c:	e7fe      	b.n	800301c <ADC3_IRQHandler>
	...

08003020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003026:	2003      	movs	r0, #3
 8003028:	f001 fd82 	bl	8004b30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800302c:	f005 f826 	bl	800807c <HAL_RCC_GetSysClockFreq>
 8003030:	4602      	mov	r2, r0
 8003032:	4b15      	ldr	r3, [pc, #84]	; (8003088 <HAL_Init+0x68>)
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	0a1b      	lsrs	r3, r3, #8
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	4913      	ldr	r1, [pc, #76]	; (800308c <HAL_Init+0x6c>)
 800303e:	5ccb      	ldrb	r3, [r1, r3]
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	fa22 f303 	lsr.w	r3, r2, r3
 8003048:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800304a:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <HAL_Init+0x68>)
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	4a0e      	ldr	r2, [pc, #56]	; (800308c <HAL_Init+0x6c>)
 8003054:	5cd3      	ldrb	r3, [r2, r3]
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
 8003060:	4a0b      	ldr	r2, [pc, #44]	; (8003090 <HAL_Init+0x70>)
 8003062:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003064:	4a0b      	ldr	r2, [pc, #44]	; (8003094 <HAL_Init+0x74>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800306a:	2000      	movs	r0, #0
 800306c:	f000 f814 	bl	8003098 <HAL_InitTick>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e002      	b.n	8003080 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800307a:	f7ff fc23 	bl	80028c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	58024400 	.word	0x58024400
 800308c:	0800f554 	.word	0x0800f554
 8003090:	2000005c 	.word	0x2000005c
 8003094:	20000058 	.word	0x20000058

08003098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80030a0:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_InitTick+0x60>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e021      	b.n	80030f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80030ac:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_InitTick+0x64>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <HAL_InitTick+0x60>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	4619      	mov	r1, r3
 80030b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80030be:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c2:	4618      	mov	r0, r3
 80030c4:	f001 fd6b 	bl	8004b9e <HAL_SYSTICK_Config>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e00e      	b.n	80030f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b0f      	cmp	r3, #15
 80030d6:	d80a      	bhi.n	80030ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030d8:	2200      	movs	r2, #0
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	f04f 30ff 	mov.w	r0, #4294967295
 80030e0:	f001 fd31 	bl	8004b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030e4:	4a06      	ldr	r2, [pc, #24]	; (8003100 <HAL_InitTick+0x68>)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	e000      	b.n	80030f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20000064 	.word	0x20000064
 80030fc:	20000058 	.word	0x20000058
 8003100:	20000060 	.word	0x20000060

08003104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_IncTick+0x20>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_IncTick+0x24>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4413      	add	r3, r2
 8003114:	4a04      	ldr	r2, [pc, #16]	; (8003128 <HAL_IncTick+0x24>)
 8003116:	6013      	str	r3, [r2, #0]
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000064 	.word	0x20000064
 8003128:	20005afc 	.word	0x20005afc

0800312c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return uwTick;
 8003130:	4b03      	ldr	r3, [pc, #12]	; (8003140 <HAL_GetTick+0x14>)
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20005afc 	.word	0x20005afc

08003144 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003148:	4b03      	ldr	r3, [pc, #12]	; (8003158 <HAL_GetREVID+0x14>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	0c1b      	lsrs	r3, r3, #16
}
 800314e:	4618      	mov	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	5c001000 	.word	0x5c001000

0800315c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	609a      	str	r2, [r3, #8]
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	609a      	str	r2, [r3, #8]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3360      	adds	r3, #96	; 0x60
 80031d6:	461a      	mov	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	431a      	orrs	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80031f8:	bf00      	nop
 80031fa:	371c      	adds	r7, #28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	431a      	orrs	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	611a      	str	r2, [r3, #16]
}
 800322a:	bf00      	nop
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003236:	b480      	push	{r7}
 8003238:	b087      	sub	sp, #28
 800323a:	af00      	add	r7, sp, #0
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	60b9      	str	r1, [r7, #8]
 8003240:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3360      	adds	r3, #96	; 0x60
 8003246:	461a      	mov	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	431a      	orrs	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	601a      	str	r2, [r3, #0]
  }
}
 8003260:	bf00      	nop
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003292:	b480      	push	{r7}
 8003294:	b087      	sub	sp, #28
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3330      	adds	r3, #48	; 0x30
 80032a2:	461a      	mov	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	0a1b      	lsrs	r3, r3, #8
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	4413      	add	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	211f      	movs	r1, #31
 80032be:	fa01 f303 	lsl.w	r3, r1, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	401a      	ands	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	0e9b      	lsrs	r3, r3, #26
 80032ca:	f003 011f 	and.w	r1, r3, #31
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	fa01 f303 	lsl.w	r3, r1, r3
 80032d8:	431a      	orrs	r2, r3
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032de:	bf00      	nop
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f023 0203 	bic.w	r2, r3, #3
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	60da      	str	r2, [r3, #12]
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3314      	adds	r3, #20
 8003320:	461a      	mov	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	0e5b      	lsrs	r3, r3, #25
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	4413      	add	r3, r2
 800332e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	0d1b      	lsrs	r3, r3, #20
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2107      	movs	r1, #7
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	401a      	ands	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	0d1b      	lsrs	r3, r3, #20
 800334a:	f003 031f 	and.w	r3, r3, #31
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	fa01 f303 	lsl.w	r3, r1, r3
 8003354:	431a      	orrs	r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800335a:	bf00      	nop
 800335c:	371c      	adds	r7, #28
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003380:	43db      	mvns	r3, r3
 8003382:	401a      	ands	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f003 0318 	and.w	r3, r3, #24
 800338a:	4908      	ldr	r1, [pc, #32]	; (80033ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800338c:	40d9      	lsrs	r1, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	400b      	ands	r3, r1
 8003392:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003396:	431a      	orrs	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800339e:	bf00      	nop
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	000fffff 	.word	0x000fffff

080033b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 031f 	and.w	r3, r3, #31
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <LL_ADC_DisableDeepPowerDown+0x20>)
 80033da:	4013      	ands	r3, r2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6093      	str	r3, [r2, #8]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	5fffffc0 	.word	0x5fffffc0

080033f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003404:	d101      	bne.n	800340a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <LL_ADC_EnableInternalRegulator+0x24>)
 8003426:	4013      	ands	r3, r2
 8003428:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	6fffffc0 	.word	0x6fffffc0

08003440 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003454:	d101      	bne.n	800345a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <LL_ADC_Enable+0x24>)
 8003476:	4013      	ands	r3, r2
 8003478:	f043 0201 	orr.w	r2, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	7fffffc0 	.word	0x7fffffc0

08003490 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <LL_ADC_Disable+0x24>)
 800349e:	4013      	ands	r3, r2
 80034a0:	f043 0202 	orr.w	r2, r3, #2
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	7fffffc0 	.word	0x7fffffc0

080034b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <LL_ADC_IsEnabled+0x18>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <LL_ADC_IsEnabled+0x1a>
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d101      	bne.n	80034f6 <LL_ADC_IsDisableOngoing+0x18>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <LL_ADC_IsDisableOngoing+0x1a>
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <LL_ADC_REG_StartConversion+0x24>)
 8003512:	4013      	ands	r3, r2
 8003514:	f043 0204 	orr.w	r2, r3, #4
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	7fffffc0 	.word	0x7fffffc0

0800352c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b04      	cmp	r3, #4
 800353e:	d101      	bne.n	8003544 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003540:	2301      	movs	r3, #1
 8003542:	e000      	b.n	8003546 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b08      	cmp	r3, #8
 8003564:	d101      	bne.n	800356a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b089      	sub	sp, #36	; 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003584:	2300      	movs	r3, #0
 8003586:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e18e      	b.n	80038b0 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff f9a9 	bl	80028f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ff19 	bl	80033f0 <LL_ADC_IsDeepPowerDownEnabled>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff feff 	bl	80033cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff ff34 	bl	8003440 <LL_ADC_IsInternalRegulatorEnabled>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d114      	bne.n	8003608 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff ff18 	bl	8003418 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035e8:	4b9a      	ldr	r3, [pc, #616]	; (8003854 <HAL_ADC_Init+0x2dc>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	099b      	lsrs	r3, r3, #6
 80035ee:	4a9a      	ldr	r2, [pc, #616]	; (8003858 <HAL_ADC_Init+0x2e0>)
 80035f0:	fba2 2303 	umull	r2, r3, r2, r3
 80035f4:	099b      	lsrs	r3, r3, #6
 80035f6:	3301      	adds	r3, #1
 80035f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035fa:	e002      	b.n	8003602 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	3b01      	subs	r3, #1
 8003600:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f9      	bne.n	80035fc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff17 	bl	8003440 <LL_ADC_IsInternalRegulatorEnabled>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10d      	bne.n	8003634 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361c:	f043 0210 	orr.w	r2, r3, #16
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	f043 0201 	orr.w	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff77 	bl	800352c <LL_ADC_REG_IsConversionOngoing>
 800363e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	f040 8128 	bne.w	800389e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b00      	cmp	r3, #0
 8003652:	f040 8124 	bne.w	800389e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800365e:	f043 0202 	orr.w	r2, r3, #2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff ff24 	bl	80034b8 <LL_ADC_IsEnabled>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d136      	bne.n	80036e4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a78      	ldr	r2, [pc, #480]	; (800385c <HAL_ADC_Init+0x2e4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d004      	beq.n	800368a <HAL_ADC_Init+0x112>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a76      	ldr	r2, [pc, #472]	; (8003860 <HAL_ADC_Init+0x2e8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d10e      	bne.n	80036a8 <HAL_ADC_Init+0x130>
 800368a:	4874      	ldr	r0, [pc, #464]	; (800385c <HAL_ADC_Init+0x2e4>)
 800368c:	f7ff ff14 	bl	80034b8 <LL_ADC_IsEnabled>
 8003690:	4604      	mov	r4, r0
 8003692:	4873      	ldr	r0, [pc, #460]	; (8003860 <HAL_ADC_Init+0x2e8>)
 8003694:	f7ff ff10 	bl	80034b8 <LL_ADC_IsEnabled>
 8003698:	4603      	mov	r3, r0
 800369a:	4323      	orrs	r3, r4
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e008      	b.n	80036ba <HAL_ADC_Init+0x142>
 80036a8:	486e      	ldr	r0, [pc, #440]	; (8003864 <HAL_ADC_Init+0x2ec>)
 80036aa:	f7ff ff05 	bl	80034b8 <LL_ADC_IsEnabled>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	bf0c      	ite	eq
 80036b4:	2301      	moveq	r3, #1
 80036b6:	2300      	movne	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d012      	beq.n	80036e4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a66      	ldr	r2, [pc, #408]	; (800385c <HAL_ADC_Init+0x2e4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_ADC_Init+0x15a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a64      	ldr	r2, [pc, #400]	; (8003860 <HAL_ADC_Init+0x2e8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_ADC_Init+0x15e>
 80036d2:	4a65      	ldr	r2, [pc, #404]	; (8003868 <HAL_ADC_Init+0x2f0>)
 80036d4:	e000      	b.n	80036d8 <HAL_ADC_Init+0x160>
 80036d6:	4a65      	ldr	r2, [pc, #404]	; (800386c <HAL_ADC_Init+0x2f4>)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4619      	mov	r1, r3
 80036de:	4610      	mov	r0, r2
 80036e0:	f7ff fd3c 	bl	800315c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80036e4:	f7ff fd2e 	bl	8003144 <HAL_GetREVID>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d914      	bls.n	800371c <HAL_ADC_Init+0x1a4>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b10      	cmp	r3, #16
 80036f8:	d110      	bne.n	800371c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	7d5b      	ldrb	r3, [r3, #21]
 80036fe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003704:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800370a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	7f1b      	ldrb	r3, [r3, #28]
 8003710:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003712:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003714:	f043 030c 	orr.w	r3, r3, #12
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	e00d      	b.n	8003738 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	7d5b      	ldrb	r3, [r3, #21]
 8003720:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003726:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800372c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	7f1b      	ldrb	r3, [r3, #28]
 8003732:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	7f1b      	ldrb	r3, [r3, #28]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d106      	bne.n	800374e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	3b01      	subs	r3, #1
 8003746:	045b      	lsls	r3, r3, #17
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	2b00      	cmp	r3, #0
 8003754:	d009      	beq.n	800376a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	4b3f      	ldr	r3, [pc, #252]	; (8003870 <HAL_ADC_Init+0x2f8>)
 8003772:	4013      	ands	r3, r2
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	69b9      	ldr	r1, [r7, #24]
 800377a:	430b      	orrs	r3, r1
 800377c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fed2 	bl	800352c <LL_ADC_REG_IsConversionOngoing>
 8003788:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fedf 	bl	8003552 <LL_ADC_INJ_IsConversionOngoing>
 8003794:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d14a      	bne.n	8003832 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d147      	bne.n	8003832 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	7d1b      	ldrb	r3, [r3, #20]
 80037a6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	4b2f      	ldr	r3, [pc, #188]	; (8003874 <HAL_ADC_Init+0x2fc>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	69b9      	ldr	r1, [r7, #24]
 80037c0:	430b      	orrs	r3, r1
 80037c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d11b      	bne.n	8003806 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	4b27      	ldr	r3, [pc, #156]	; (8003878 <HAL_ADC_Init+0x300>)
 80037dc:	4013      	ands	r3, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037e2:	3a01      	subs	r2, #1
 80037e4:	0411      	lsls	r1, r2, #16
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037ea:	4311      	orrs	r1, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037f0:	4311      	orrs	r1, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037f6:	430a      	orrs	r2, r1
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	611a      	str	r2, [r3, #16]
 8003804:	e007      	b.n	8003816 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0201 	bic.w	r2, r2, #1
 8003814:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fdf3 	bl	8004418 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d120      	bne.n	800387c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	f023 010f 	bic.w	r1, r3, #15
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	1e5a      	subs	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
 8003852:	e01b      	b.n	800388c <HAL_ADC_Init+0x314>
 8003854:	20000058 	.word	0x20000058
 8003858:	053e2d63 	.word	0x053e2d63
 800385c:	40022000 	.word	0x40022000
 8003860:	40022100 	.word	0x40022100
 8003864:	58026000 	.word	0x58026000
 8003868:	40022300 	.word	0x40022300
 800386c:	58026300 	.word	0x58026300
 8003870:	fff0c003 	.word	0xfff0c003
 8003874:	ffffbffc 	.word	0xffffbffc
 8003878:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 020f 	bic.w	r2, r2, #15
 800388a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003890:	f023 0303 	bic.w	r3, r3, #3
 8003894:	f043 0201 	orr.w	r2, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	655a      	str	r2, [r3, #84]	; 0x54
 800389c:	e007      	b.n	80038ae <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	f043 0210 	orr.w	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80038ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3724      	adds	r7, #36	; 0x24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd90      	pop	{r4, r7, pc}

080038b8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a55      	ldr	r2, [pc, #340]	; (8003a20 <HAL_ADC_Start_DMA+0x168>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d004      	beq.n	80038d8 <HAL_ADC_Start_DMA+0x20>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a54      	ldr	r2, [pc, #336]	; (8003a24 <HAL_ADC_Start_DMA+0x16c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d101      	bne.n	80038dc <HAL_ADC_Start_DMA+0x24>
 80038d8:	4b53      	ldr	r3, [pc, #332]	; (8003a28 <HAL_ADC_Start_DMA+0x170>)
 80038da:	e000      	b.n	80038de <HAL_ADC_Start_DMA+0x26>
 80038dc:	4b53      	ldr	r3, [pc, #332]	; (8003a2c <HAL_ADC_Start_DMA+0x174>)
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff fd66 	bl	80033b0 <LL_ADC_GetMultimode>
 80038e4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff fe1e 	bl	800352c <LL_ADC_REG_IsConversionOngoing>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f040 808c 	bne.w	8003a10 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_ADC_Start_DMA+0x4e>
 8003902:	2302      	movs	r3, #2
 8003904:	e087      	b.n	8003a16 <HAL_ADC_Start_DMA+0x15e>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	2b05      	cmp	r3, #5
 8003918:	d002      	beq.n	8003920 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b09      	cmp	r3, #9
 800391e:	d170      	bne.n	8003a02 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fbfb 	bl	800411c <ADC_Enable>
 8003926:	4603      	mov	r3, r0
 8003928:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800392a:	7dfb      	ldrb	r3, [r7, #23]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d163      	bne.n	80039f8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003934:	4b3e      	ldr	r3, [pc, #248]	; (8003a30 <HAL_ADC_Start_DMA+0x178>)
 8003936:	4013      	ands	r3, r2
 8003938:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a37      	ldr	r2, [pc, #220]	; (8003a24 <HAL_ADC_Start_DMA+0x16c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d002      	beq.n	8003950 <HAL_ADC_Start_DMA+0x98>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	e000      	b.n	8003952 <HAL_ADC_Start_DMA+0x9a>
 8003950:	4b33      	ldr	r3, [pc, #204]	; (8003a20 <HAL_ADC_Start_DMA+0x168>)
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	4293      	cmp	r3, r2
 8003958:	d002      	beq.n	8003960 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003964:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d006      	beq.n	8003986 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397c:	f023 0206 	bic.w	r2, r3, #6
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	659a      	str	r2, [r3, #88]	; 0x58
 8003984:	e002      	b.n	800398c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003990:	4a28      	ldr	r2, [pc, #160]	; (8003a34 <HAL_ADC_Start_DMA+0x17c>)
 8003992:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003998:	4a27      	ldr	r2, [pc, #156]	; (8003a38 <HAL_ADC_Start_DMA+0x180>)
 800399a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a0:	4a26      	ldr	r2, [pc, #152]	; (8003a3c <HAL_ADC_Start_DMA+0x184>)
 80039a2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	221c      	movs	r2, #28
 80039aa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0210 	orr.w	r2, r2, #16
 80039c2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	4619      	mov	r1, r3
 80039ce:	4610      	mov	r0, r2
 80039d0:	f7ff fc8b 	bl	80032ea <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3340      	adds	r3, #64	; 0x40
 80039de:	4619      	mov	r1, r3
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f001 fdaa 	bl	800553c <HAL_DMA_Start_IT>
 80039e8:	4603      	mov	r3, r0
 80039ea:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fd87 	bl	8003504 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80039f6:	e00d      	b.n	8003a14 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003a00:	e008      	b.n	8003a14 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003a0e:	e001      	b.n	8003a14 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a10:	2302      	movs	r3, #2
 8003a12:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40022000 	.word	0x40022000
 8003a24:	40022100 	.word	0x40022100
 8003a28:	40022300 	.word	0x40022300
 8003a2c:	58026300 	.word	0x58026300
 8003a30:	fffff0fe 	.word	0xfffff0fe
 8003a34:	080042ef 	.word	0x080042ef
 8003a38:	080043c7 	.word	0x080043c7
 8003a3c:	080043e3 	.word	0x080043e3

08003a40 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a7c:	b590      	push	{r4, r7, lr}
 8003a7e:	b0a1      	sub	sp, #132	; 0x84
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4a9d      	ldr	r2, [pc, #628]	; (8003d0c <HAL_ADC_ConfigChannel+0x290>)
 8003a96:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d101      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x2a>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e321      	b.n	80040ea <HAL_ADC_ConfigChannel+0x66e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fd3a 	bl	800352c <LL_ADC_REG_IsConversionOngoing>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f040 8306 	bne.w	80040cc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d108      	bne.n	8003ade <HAL_ADC_ConfigChannel+0x62>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	0e9b      	lsrs	r3, r3, #26
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	e016      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x90>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ae6:	fa93 f3a3 	rbit	r3, r3
 8003aea:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003aec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aee:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003af0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003af6:	2320      	movs	r3, #32
 8003af8:	e003      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003afa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003afc:	fab3 f383 	clz	r3, r3
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f003 031f 	and.w	r3, r3, #31
 8003b06:	2201      	movs	r2, #1
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	69d1      	ldr	r1, [r2, #28]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	430b      	orrs	r3, r1
 8003b18:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6818      	ldr	r0, [r3, #0]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6859      	ldr	r1, [r3, #4]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	f7ff fbb3 	bl	8003292 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fcfb 	bl	800352c <LL_ADC_REG_IsConversionOngoing>
 8003b36:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff fd08 	bl	8003552 <LL_ADC_INJ_IsConversionOngoing>
 8003b42:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f040 80b3 	bne.w	8003cb2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f040 80af 	bne.w	8003cb2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	6819      	ldr	r1, [r3, #0]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	461a      	mov	r2, r3
 8003b62:	f7ff fbd5 	bl	8003310 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b66:	4b6a      	ldr	r3, [pc, #424]	; (8003d10 <HAL_ADC_ConfigChannel+0x294>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003b6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b72:	d10b      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x110>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	089b      	lsrs	r3, r3, #2
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	e01d      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x14c>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10b      	bne.n	8003bb2 <HAL_ADC_ConfigChannel+0x136>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	089b      	lsrs	r3, r3, #2
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	e00a      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x14c>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	089b      	lsrs	r3, r3, #2
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d027      	beq.n	8003c22 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	6919      	ldr	r1, [r3, #16]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003be0:	f7ff faf0 	bl	80031c4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	6919      	ldr	r1, [r3, #16]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	7e5b      	ldrb	r3, [r3, #25]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d102      	bne.n	8003bfa <HAL_ADC_ConfigChannel+0x17e>
 8003bf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003bf8:	e000      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x180>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	f7ff fb1a 	bl	8003236 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6919      	ldr	r1, [r3, #16]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	7e1b      	ldrb	r3, [r3, #24]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d102      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x19c>
 8003c12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c16:	e000      	b.n	8003c1a <HAL_ADC_ConfigChannel+0x19e>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f7ff faf2 	bl	8003204 <LL_ADC_SetDataRightShift>
 8003c20:	e047      	b.n	8003cb2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	069b      	lsls	r3, r3, #26
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d107      	bne.n	8003c46 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c44:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	069b      	lsls	r3, r3, #26
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d107      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c68:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	069b      	lsls	r3, r3, #26
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d107      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c8c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	069b      	lsls	r3, r3, #26
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d107      	bne.n	8003cb2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cb0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff fbfe 	bl	80034b8 <LL_ADC_IsEnabled>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f040 820d 	bne.w	80040de <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	6819      	ldr	r1, [r3, #0]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	f7ff fb49 	bl	8003368 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	4a0c      	ldr	r2, [pc, #48]	; (8003d0c <HAL_ADC_ConfigChannel+0x290>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	f040 8133 	bne.w	8003f48 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d110      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x298>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	0e9b      	lsrs	r3, r3, #26
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	f003 031f 	and.w	r3, r3, #31
 8003cfe:	2b09      	cmp	r3, #9
 8003d00:	bf94      	ite	ls
 8003d02:	2301      	movls	r3, #1
 8003d04:	2300      	movhi	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	e01e      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x2cc>
 8003d0a:	bf00      	nop
 8003d0c:	47ff0000 	.word	0x47ff0000
 8003d10:	5c001000 	.word	0x5c001000
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d24:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003d2c:	2320      	movs	r3, #32
 8003d2e:	e003      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d32:	fab3 f383 	clz	r3, r3
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	3301      	adds	r3, #1
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	2b09      	cmp	r3, #9
 8003d40:	bf94      	ite	ls
 8003d42:	2301      	movls	r3, #1
 8003d44:	2300      	movhi	r3, #0
 8003d46:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d079      	beq.n	8003e40 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d107      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x2ec>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	0e9b      	lsrs	r3, r3, #26
 8003d5e:	3301      	adds	r3, #1
 8003d60:	069b      	lsls	r3, r3, #26
 8003d62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d66:	e015      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x318>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d78:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003d80:	2320      	movs	r3, #32
 8003d82:	e003      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d86:	fab3 f383 	clz	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	069b      	lsls	r3, r3, #26
 8003d90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d109      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x338>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	0e9b      	lsrs	r3, r3, #26
 8003da6:	3301      	adds	r3, #1
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	2101      	movs	r1, #1
 8003dae:	fa01 f303 	lsl.w	r3, r1, r3
 8003db2:	e017      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x368>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dbc:	fa93 f3a3 	rbit	r3, r3
 8003dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003dcc:	2320      	movs	r3, #32
 8003dce:	e003      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd2:	fab3 f383 	clz	r3, r3
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	3301      	adds	r3, #1
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	2101      	movs	r1, #1
 8003de0:	fa01 f303 	lsl.w	r3, r1, r3
 8003de4:	ea42 0103 	orr.w	r1, r2, r3
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10a      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x38e>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	0e9b      	lsrs	r3, r3, #26
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	f003 021f 	and.w	r2, r3, #31
 8003e00:	4613      	mov	r3, r2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	4413      	add	r3, r2
 8003e06:	051b      	lsls	r3, r3, #20
 8003e08:	e018      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x3c0>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e12:	fa93 f3a3 	rbit	r3, r3
 8003e16:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003e22:	2320      	movs	r3, #32
 8003e24:	e003      	b.n	8003e2e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e28:	fab3 f383 	clz	r3, r3
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	3301      	adds	r3, #1
 8003e30:	f003 021f 	and.w	r2, r3, #31
 8003e34:	4613      	mov	r3, r2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	4413      	add	r3, r2
 8003e3a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	e07e      	b.n	8003f3e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d107      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x3e0>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	0e9b      	lsrs	r3, r3, #26
 8003e52:	3301      	adds	r3, #1
 8003e54:	069b      	lsls	r3, r3, #26
 8003e56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e5a:	e015      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x40c>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	fa93 f3a3 	rbit	r3, r3
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003e74:	2320      	movs	r3, #32
 8003e76:	e003      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7a:	fab3 f383 	clz	r3, r3
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	3301      	adds	r3, #1
 8003e82:	069b      	lsls	r3, r3, #26
 8003e84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d109      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x42c>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	0e9b      	lsrs	r3, r3, #26
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea6:	e017      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x45c>
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	fa93 f3a3 	rbit	r3, r3
 8003eb4:	61bb      	str	r3, [r7, #24]
  return result;
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003ec0:	2320      	movs	r3, #32
 8003ec2:	e003      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	fab3 f383 	clz	r3, r3
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	3301      	adds	r3, #1
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed8:	ea42 0103 	orr.w	r1, r2, r3
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10d      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x488>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	0e9b      	lsrs	r3, r3, #26
 8003eee:	3301      	adds	r3, #1
 8003ef0:	f003 021f 	and.w	r2, r3, #31
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	4413      	add	r3, r2
 8003efa:	3b1e      	subs	r3, #30
 8003efc:	051b      	lsls	r3, r3, #20
 8003efe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f02:	e01b      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x4c0>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	fa93 f3a3 	rbit	r3, r3
 8003f10:	60fb      	str	r3, [r7, #12]
  return result;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003f1c:	2320      	movs	r3, #32
 8003f1e:	e003      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	fab3 f383 	clz	r3, r3
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	3301      	adds	r3, #1
 8003f2a:	f003 021f 	and.w	r2, r3, #31
 8003f2e:	4613      	mov	r3, r2
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	4413      	add	r3, r2
 8003f34:	3b1e      	subs	r3, #30
 8003f36:	051b      	lsls	r3, r3, #20
 8003f38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	6892      	ldr	r2, [r2, #8]
 8003f42:	4619      	mov	r1, r3
 8003f44:	f7ff f9e4 	bl	8003310 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f280 80c6 	bge.w	80040de <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a67      	ldr	r2, [pc, #412]	; (80040f4 <HAL_ADC_ConfigChannel+0x678>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d004      	beq.n	8003f66 <HAL_ADC_ConfigChannel+0x4ea>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a65      	ldr	r2, [pc, #404]	; (80040f8 <HAL_ADC_ConfigChannel+0x67c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d101      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x4ee>
 8003f66:	4b65      	ldr	r3, [pc, #404]	; (80040fc <HAL_ADC_ConfigChannel+0x680>)
 8003f68:	e000      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x4f0>
 8003f6a:	4b65      	ldr	r3, [pc, #404]	; (8004100 <HAL_ADC_ConfigChannel+0x684>)
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff f91b 	bl	80031a8 <LL_ADC_GetCommonPathInternalCh>
 8003f72:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a5e      	ldr	r2, [pc, #376]	; (80040f4 <HAL_ADC_ConfigChannel+0x678>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <HAL_ADC_ConfigChannel+0x50c>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a5d      	ldr	r2, [pc, #372]	; (80040f8 <HAL_ADC_ConfigChannel+0x67c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d10e      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x52a>
 8003f88:	485a      	ldr	r0, [pc, #360]	; (80040f4 <HAL_ADC_ConfigChannel+0x678>)
 8003f8a:	f7ff fa95 	bl	80034b8 <LL_ADC_IsEnabled>
 8003f8e:	4604      	mov	r4, r0
 8003f90:	4859      	ldr	r0, [pc, #356]	; (80040f8 <HAL_ADC_ConfigChannel+0x67c>)
 8003f92:	f7ff fa91 	bl	80034b8 <LL_ADC_IsEnabled>
 8003f96:	4603      	mov	r3, r0
 8003f98:	4323      	orrs	r3, r4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bf0c      	ite	eq
 8003f9e:	2301      	moveq	r3, #1
 8003fa0:	2300      	movne	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	e008      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x53c>
 8003fa6:	4857      	ldr	r0, [pc, #348]	; (8004104 <HAL_ADC_ConfigChannel+0x688>)
 8003fa8:	f7ff fa86 	bl	80034b8 <LL_ADC_IsEnabled>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	bf0c      	ite	eq
 8003fb2:	2301      	moveq	r3, #1
 8003fb4:	2300      	movne	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d07d      	beq.n	80040b8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a51      	ldr	r2, [pc, #324]	; (8004108 <HAL_ADC_ConfigChannel+0x68c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d130      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x5ac>
 8003fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d12b      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a4b      	ldr	r2, [pc, #300]	; (8004104 <HAL_ADC_ConfigChannel+0x688>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	f040 8081 	bne.w	80040de <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a44      	ldr	r2, [pc, #272]	; (80040f4 <HAL_ADC_ConfigChannel+0x678>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d004      	beq.n	8003ff0 <HAL_ADC_ConfigChannel+0x574>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a43      	ldr	r2, [pc, #268]	; (80040f8 <HAL_ADC_ConfigChannel+0x67c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d101      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x578>
 8003ff0:	4a42      	ldr	r2, [pc, #264]	; (80040fc <HAL_ADC_ConfigChannel+0x680>)
 8003ff2:	e000      	b.n	8003ff6 <HAL_ADC_ConfigChannel+0x57a>
 8003ff4:	4a42      	ldr	r2, [pc, #264]	; (8004100 <HAL_ADC_ConfigChannel+0x684>)
 8003ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4610      	mov	r0, r2
 8004000:	f7ff f8bf 	bl	8003182 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004004:	4b41      	ldr	r3, [pc, #260]	; (800410c <HAL_ADC_ConfigChannel+0x690>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	099b      	lsrs	r3, r3, #6
 800400a:	4a41      	ldr	r2, [pc, #260]	; (8004110 <HAL_ADC_ConfigChannel+0x694>)
 800400c:	fba2 2303 	umull	r2, r3, r2, r3
 8004010:	099b      	lsrs	r3, r3, #6
 8004012:	3301      	adds	r3, #1
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004018:	e002      	b.n	8004020 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	3b01      	subs	r3, #1
 800401e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f9      	bne.n	800401a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004026:	e05a      	b.n	80040de <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a39      	ldr	r2, [pc, #228]	; (8004114 <HAL_ADC_ConfigChannel+0x698>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d11e      	bne.n	8004070 <HAL_ADC_ConfigChannel+0x5f4>
 8004032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004034:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d119      	bne.n	8004070 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a30      	ldr	r2, [pc, #192]	; (8004104 <HAL_ADC_ConfigChannel+0x688>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d14b      	bne.n	80040de <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a2a      	ldr	r2, [pc, #168]	; (80040f4 <HAL_ADC_ConfigChannel+0x678>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d004      	beq.n	800405a <HAL_ADC_ConfigChannel+0x5de>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a28      	ldr	r2, [pc, #160]	; (80040f8 <HAL_ADC_ConfigChannel+0x67c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d101      	bne.n	800405e <HAL_ADC_ConfigChannel+0x5e2>
 800405a:	4a28      	ldr	r2, [pc, #160]	; (80040fc <HAL_ADC_ConfigChannel+0x680>)
 800405c:	e000      	b.n	8004060 <HAL_ADC_ConfigChannel+0x5e4>
 800405e:	4a28      	ldr	r2, [pc, #160]	; (8004100 <HAL_ADC_ConfigChannel+0x684>)
 8004060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f7ff f88a 	bl	8003182 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800406e:	e036      	b.n	80040de <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a28      	ldr	r2, [pc, #160]	; (8004118 <HAL_ADC_ConfigChannel+0x69c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d131      	bne.n	80040de <HAL_ADC_ConfigChannel+0x662>
 800407a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800407c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d12c      	bne.n	80040de <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1e      	ldr	r2, [pc, #120]	; (8004104 <HAL_ADC_ConfigChannel+0x688>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d127      	bne.n	80040de <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a18      	ldr	r2, [pc, #96]	; (80040f4 <HAL_ADC_ConfigChannel+0x678>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d004      	beq.n	80040a2 <HAL_ADC_ConfigChannel+0x626>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a16      	ldr	r2, [pc, #88]	; (80040f8 <HAL_ADC_ConfigChannel+0x67c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d101      	bne.n	80040a6 <HAL_ADC_ConfigChannel+0x62a>
 80040a2:	4a16      	ldr	r2, [pc, #88]	; (80040fc <HAL_ADC_ConfigChannel+0x680>)
 80040a4:	e000      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x62c>
 80040a6:	4a16      	ldr	r2, [pc, #88]	; (8004100 <HAL_ADC_ConfigChannel+0x684>)
 80040a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040ae:	4619      	mov	r1, r3
 80040b0:	4610      	mov	r0, r2
 80040b2:	f7ff f866 	bl	8003182 <LL_ADC_SetCommonPathInternalCh>
 80040b6:	e012      	b.n	80040de <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	f043 0220 	orr.w	r2, r3, #32
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80040ca:	e008      	b.n	80040de <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d0:	f043 0220 	orr.w	r2, r3, #32
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80040e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3784      	adds	r7, #132	; 0x84
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd90      	pop	{r4, r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40022000 	.word	0x40022000
 80040f8:	40022100 	.word	0x40022100
 80040fc:	40022300 	.word	0x40022300
 8004100:	58026300 	.word	0x58026300
 8004104:	58026000 	.word	0x58026000
 8004108:	cb840000 	.word	0xcb840000
 800410c:	20000058 	.word	0x20000058
 8004110:	053e2d63 	.word	0x053e2d63
 8004114:	c7520000 	.word	0xc7520000
 8004118:	cfb80000 	.word	0xcfb80000

0800411c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff f9c5 	bl	80034b8 <LL_ADC_IsEnabled>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d16e      	bne.n	8004212 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	4b38      	ldr	r3, [pc, #224]	; (800421c <ADC_Enable+0x100>)
 800413c:	4013      	ands	r3, r2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00d      	beq.n	800415e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	f043 0210 	orr.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004152:	f043 0201 	orr.w	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e05a      	b.n	8004214 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff f980 	bl	8003468 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004168:	f7fe ffe0 	bl	800312c <HAL_GetTick>
 800416c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a2b      	ldr	r2, [pc, #172]	; (8004220 <ADC_Enable+0x104>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d004      	beq.n	8004182 <ADC_Enable+0x66>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a29      	ldr	r2, [pc, #164]	; (8004224 <ADC_Enable+0x108>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d101      	bne.n	8004186 <ADC_Enable+0x6a>
 8004182:	4b29      	ldr	r3, [pc, #164]	; (8004228 <ADC_Enable+0x10c>)
 8004184:	e000      	b.n	8004188 <ADC_Enable+0x6c>
 8004186:	4b29      	ldr	r3, [pc, #164]	; (800422c <ADC_Enable+0x110>)
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff f911 	bl	80033b0 <LL_ADC_GetMultimode>
 800418e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a23      	ldr	r2, [pc, #140]	; (8004224 <ADC_Enable+0x108>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d002      	beq.n	80041a0 <ADC_Enable+0x84>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	e000      	b.n	80041a2 <ADC_Enable+0x86>
 80041a0:	4b1f      	ldr	r3, [pc, #124]	; (8004220 <ADC_Enable+0x104>)
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d02c      	beq.n	8004204 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d130      	bne.n	8004212 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041b0:	e028      	b.n	8004204 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff f97e 	bl	80034b8 <LL_ADC_IsEnabled>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d104      	bne.n	80041cc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff f94e 	bl	8003468 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80041cc:	f7fe ffae 	bl	800312c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d914      	bls.n	8004204 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d00d      	beq.n	8004204 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ec:	f043 0210 	orr.w	r2, r3, #16
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f8:	f043 0201 	orr.w	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e007      	b.n	8004214 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b01      	cmp	r3, #1
 8004210:	d1cf      	bne.n	80041b2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	8000003f 	.word	0x8000003f
 8004220:	40022000 	.word	0x40022000
 8004224:	40022100 	.word	0x40022100
 8004228:	40022300 	.word	0x40022300
 800422c:	58026300 	.word	0x58026300

08004230 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff f94e 	bl	80034de <LL_ADC_IsDisableOngoing>
 8004242:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff f935 	bl	80034b8 <LL_ADC_IsEnabled>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d047      	beq.n	80042e4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d144      	bne.n	80042e4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 030d 	and.w	r3, r3, #13
 8004264:	2b01      	cmp	r3, #1
 8004266:	d10c      	bne.n	8004282 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff f90f 	bl	8003490 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2203      	movs	r2, #3
 8004278:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800427a:	f7fe ff57 	bl	800312c <HAL_GetTick>
 800427e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004280:	e029      	b.n	80042d6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004286:	f043 0210 	orr.w	r2, r3, #16
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	f043 0201 	orr.w	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e023      	b.n	80042e6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800429e:	f7fe ff45 	bl	800312c <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d914      	bls.n	80042d6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00d      	beq.n	80042d6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	f043 0210 	orr.w	r2, r3, #16
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	f043 0201 	orr.w	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e007      	b.n	80042e6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1dc      	bne.n	800429e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b084      	sub	sp, #16
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004300:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004304:	2b00      	cmp	r3, #0
 8004306:	d14b      	bne.n	80043a0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d021      	beq.n	8004366 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fe ffa0 	bl	800326c <LL_ADC_REG_IsTriggerSourceSWStart>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d032      	beq.n	8004398 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d12b      	bne.n	8004398 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004344:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d11f      	bne.n	8004398 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435c:	f043 0201 	orr.w	r2, r3, #1
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	655a      	str	r2, [r3, #84]	; 0x54
 8004364:	e018      	b.n	8004398 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d111      	bne.n	8004398 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004378:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d105      	bne.n	8004398 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004390:	f043 0201 	orr.w	r2, r3, #1
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f7ff fb51 	bl	8003a40 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800439e:	e00e      	b.n	80043be <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f7ff fb5b 	bl	8003a68 <HAL_ADC_ErrorCallback>
}
 80043b2:	e004      	b.n	80043be <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
}
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7ff fb3d 	bl	8003a54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043da:	bf00      	nop
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004400:	f043 0204 	orr.w	r2, r3, #4
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f7ff fb2d 	bl	8003a68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800440e:	bf00      	nop
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a79      	ldr	r2, [pc, #484]	; (800460c <ADC_ConfigureBoostMode+0x1f4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d004      	beq.n	8004434 <ADC_ConfigureBoostMode+0x1c>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a78      	ldr	r2, [pc, #480]	; (8004610 <ADC_ConfigureBoostMode+0x1f8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d109      	bne.n	8004448 <ADC_ConfigureBoostMode+0x30>
 8004434:	4b77      	ldr	r3, [pc, #476]	; (8004614 <ADC_ConfigureBoostMode+0x1fc>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf14      	ite	ne
 8004440:	2301      	movne	r3, #1
 8004442:	2300      	moveq	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	e008      	b.n	800445a <ADC_ConfigureBoostMode+0x42>
 8004448:	4b73      	ldr	r3, [pc, #460]	; (8004618 <ADC_ConfigureBoostMode+0x200>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004450:	2b00      	cmp	r3, #0
 8004452:	bf14      	ite	ne
 8004454:	2301      	movne	r3, #1
 8004456:	2300      	moveq	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d01c      	beq.n	8004498 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800445e:	f003 ff87 	bl	8008370 <HAL_RCC_GetHCLKFreq>
 8004462:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800446c:	d010      	beq.n	8004490 <ADC_ConfigureBoostMode+0x78>
 800446e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004472:	d871      	bhi.n	8004558 <ADC_ConfigureBoostMode+0x140>
 8004474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004478:	d002      	beq.n	8004480 <ADC_ConfigureBoostMode+0x68>
 800447a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800447e:	d16b      	bne.n	8004558 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	0c1b      	lsrs	r3, r3, #16
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	fbb2 f3f3 	udiv	r3, r2, r3
 800448c:	60fb      	str	r3, [r7, #12]
        break;
 800448e:	e066      	b.n	800455e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	60fb      	str	r3, [r7, #12]
        break;
 8004496:	e062      	b.n	800455e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004498:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800449c:	f004 ff04 	bl	80092a8 <HAL_RCCEx_GetPeriphCLKFreq>
 80044a0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044aa:	d051      	beq.n	8004550 <ADC_ConfigureBoostMode+0x138>
 80044ac:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044b0:	d854      	bhi.n	800455c <ADC_ConfigureBoostMode+0x144>
 80044b2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044b6:	d047      	beq.n	8004548 <ADC_ConfigureBoostMode+0x130>
 80044b8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044bc:	d84e      	bhi.n	800455c <ADC_ConfigureBoostMode+0x144>
 80044be:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044c2:	d03d      	beq.n	8004540 <ADC_ConfigureBoostMode+0x128>
 80044c4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044c8:	d848      	bhi.n	800455c <ADC_ConfigureBoostMode+0x144>
 80044ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044ce:	d033      	beq.n	8004538 <ADC_ConfigureBoostMode+0x120>
 80044d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044d4:	d842      	bhi.n	800455c <ADC_ConfigureBoostMode+0x144>
 80044d6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044da:	d029      	beq.n	8004530 <ADC_ConfigureBoostMode+0x118>
 80044dc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044e0:	d83c      	bhi.n	800455c <ADC_ConfigureBoostMode+0x144>
 80044e2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044e6:	d01a      	beq.n	800451e <ADC_ConfigureBoostMode+0x106>
 80044e8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044ec:	d836      	bhi.n	800455c <ADC_ConfigureBoostMode+0x144>
 80044ee:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044f2:	d014      	beq.n	800451e <ADC_ConfigureBoostMode+0x106>
 80044f4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044f8:	d830      	bhi.n	800455c <ADC_ConfigureBoostMode+0x144>
 80044fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044fe:	d00e      	beq.n	800451e <ADC_ConfigureBoostMode+0x106>
 8004500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004504:	d82a      	bhi.n	800455c <ADC_ConfigureBoostMode+0x144>
 8004506:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800450a:	d008      	beq.n	800451e <ADC_ConfigureBoostMode+0x106>
 800450c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004510:	d824      	bhi.n	800455c <ADC_ConfigureBoostMode+0x144>
 8004512:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004516:	d002      	beq.n	800451e <ADC_ConfigureBoostMode+0x106>
 8004518:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800451c:	d11e      	bne.n	800455c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	0c9b      	lsrs	r3, r3, #18
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	fbb2 f3f3 	udiv	r3, r2, r3
 800452c:	60fb      	str	r3, [r7, #12]
        break;
 800452e:	e016      	b.n	800455e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	091b      	lsrs	r3, r3, #4
 8004534:	60fb      	str	r3, [r7, #12]
        break;
 8004536:	e012      	b.n	800455e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	60fb      	str	r3, [r7, #12]
        break;
 800453e:	e00e      	b.n	800455e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	099b      	lsrs	r3, r3, #6
 8004544:	60fb      	str	r3, [r7, #12]
        break;
 8004546:	e00a      	b.n	800455e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	09db      	lsrs	r3, r3, #7
 800454c:	60fb      	str	r3, [r7, #12]
        break;
 800454e:	e006      	b.n	800455e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	0a1b      	lsrs	r3, r3, #8
 8004554:	60fb      	str	r3, [r7, #12]
        break;
 8004556:	e002      	b.n	800455e <ADC_ConfigureBoostMode+0x146>
        break;
 8004558:	bf00      	nop
 800455a:	e000      	b.n	800455e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800455c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800455e:	f7fe fdf1 	bl	8003144 <HAL_GetREVID>
 8004562:	4603      	mov	r3, r0
 8004564:	f241 0203 	movw	r2, #4099	; 0x1003
 8004568:	4293      	cmp	r3, r2
 800456a:	d815      	bhi.n	8004598 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a2b      	ldr	r2, [pc, #172]	; (800461c <ADC_ConfigureBoostMode+0x204>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d908      	bls.n	8004586 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004582:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004584:	e03e      	b.n	8004604 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004594:	609a      	str	r2, [r3, #8]
}
 8004596:	e035      	b.n	8004604 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a1f      	ldr	r2, [pc, #124]	; (8004620 <ADC_ConfigureBoostMode+0x208>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d808      	bhi.n	80045b8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045b4:	609a      	str	r2, [r3, #8]
}
 80045b6:	e025      	b.n	8004604 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4a1a      	ldr	r2, [pc, #104]	; (8004624 <ADC_ConfigureBoostMode+0x20c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d80a      	bhi.n	80045d6 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d2:	609a      	str	r2, [r3, #8]
}
 80045d4:	e016      	b.n	8004604 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4a13      	ldr	r2, [pc, #76]	; (8004628 <ADC_ConfigureBoostMode+0x210>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d80a      	bhi.n	80045f4 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f0:	609a      	str	r2, [r3, #8]
}
 80045f2:	e007      	b.n	8004604 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004602:	609a      	str	r2, [r3, #8]
}
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40022000 	.word	0x40022000
 8004610:	40022100 	.word	0x40022100
 8004614:	40022300 	.word	0x40022300
 8004618:	58026300 	.word	0x58026300
 800461c:	01312d00 	.word	0x01312d00
 8004620:	005f5e10 	.word	0x005f5e10
 8004624:	00bebc20 	.word	0x00bebc20
 8004628:	017d7840 	.word	0x017d7840

0800462c <LL_ADC_IsEnabled>:
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <LL_ADC_IsEnabled+0x18>
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <LL_ADC_IsEnabled+0x1a>
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <LL_ADC_StartCalibration>:
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	4b09      	ldr	r3, [pc, #36]	; (800468c <LL_ADC_StartCalibration+0x38>)
 8004666:	4013      	ands	r3, r2
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004674:	430a      	orrs	r2, r1
 8004676:	4313      	orrs	r3, r2
 8004678:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	609a      	str	r2, [r3, #8]
}
 8004680:	bf00      	nop
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	3ffeffc0 	.word	0x3ffeffc0

08004690 <LL_ADC_IsCalibrationOnGoing>:
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046a4:	d101      	bne.n	80046aa <LL_ADC_IsCalibrationOnGoing+0x1a>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <LL_ADC_IsCalibrationOnGoing+0x1c>
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <LL_ADC_REG_IsConversionOngoing>:
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d101      	bne.n	80046d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_ADCEx_Calibration_Start+0x1e>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e04c      	b.n	8004798 <HAL_ADCEx_Calibration_Start+0xb8>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7ff fd92 	bl	8004230 <ADC_Disable>
 800470c:	4603      	mov	r3, r0
 800470e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004710:	7dfb      	ldrb	r3, [r7, #23]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d135      	bne.n	8004782 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800471a:	4b21      	ldr	r3, [pc, #132]	; (80047a0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800471c:	4013      	ands	r3, r2
 800471e:	f043 0202 	orr.w	r2, r3, #2
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff ff90 	bl	8004654 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004734:	e014      	b.n	8004760 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	3301      	adds	r3, #1
 800473a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	4a19      	ldr	r2, [pc, #100]	; (80047a4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d30d      	bcc.n	8004760 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004748:	f023 0312 	bic.w	r3, r3, #18
 800474c:	f043 0210 	orr.w	r2, r3, #16
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e01b      	b.n	8004798 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff ff93 	bl	8004690 <LL_ADC_IsCalibrationOnGoing>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e2      	bne.n	8004736 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004774:	f023 0303 	bic.w	r3, r3, #3
 8004778:	f043 0201 	orr.w	r2, r3, #1
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	655a      	str	r2, [r3, #84]	; 0x54
 8004780:	e005      	b.n	800478e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004786:	f043 0210 	orr.w	r2, r3, #16
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004796:	7dfb      	ldrb	r3, [r7, #23]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	ffffeefd 	.word	0xffffeefd
 80047a4:	25c3f800 	.word	0x25c3f800

080047a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b09f      	sub	sp, #124	; 0x7c
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e0be      	b.n	8004944 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80047ce:	2300      	movs	r3, #0
 80047d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a5c      	ldr	r2, [pc, #368]	; (800494c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d102      	bne.n	80047e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80047e0:	4b5b      	ldr	r3, [pc, #364]	; (8004950 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80047e2:	60bb      	str	r3, [r7, #8]
 80047e4:	e001      	b.n	80047ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80047e6:	2300      	movs	r3, #0
 80047e8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10b      	bne.n	8004808 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f4:	f043 0220 	orr.w	r2, r3, #32
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e09d      	b.n	8004944 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff ff54 	bl	80046b8 <LL_ADC_REG_IsConversionOngoing>
 8004810:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff ff4e 	bl	80046b8 <LL_ADC_REG_IsConversionOngoing>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d17f      	bne.n	8004922 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004824:	2b00      	cmp	r3, #0
 8004826:	d17c      	bne.n	8004922 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a47      	ldr	r2, [pc, #284]	; (800494c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d004      	beq.n	800483c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a46      	ldr	r2, [pc, #280]	; (8004950 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d101      	bne.n	8004840 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800483c:	4b45      	ldr	r3, [pc, #276]	; (8004954 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800483e:	e000      	b.n	8004842 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004840:	4b45      	ldr	r3, [pc, #276]	; (8004958 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004842:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d039      	beq.n	80048c0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800484c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	431a      	orrs	r2, r3
 800485a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a3a      	ldr	r2, [pc, #232]	; (800494c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d004      	beq.n	8004872 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a38      	ldr	r2, [pc, #224]	; (8004950 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d10e      	bne.n	8004890 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004872:	4836      	ldr	r0, [pc, #216]	; (800494c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004874:	f7ff feda 	bl	800462c <LL_ADC_IsEnabled>
 8004878:	4604      	mov	r4, r0
 800487a:	4835      	ldr	r0, [pc, #212]	; (8004950 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800487c:	f7ff fed6 	bl	800462c <LL_ADC_IsEnabled>
 8004880:	4603      	mov	r3, r0
 8004882:	4323      	orrs	r3, r4
 8004884:	2b00      	cmp	r3, #0
 8004886:	bf0c      	ite	eq
 8004888:	2301      	moveq	r3, #1
 800488a:	2300      	movne	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	e008      	b.n	80048a2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004890:	4832      	ldr	r0, [pc, #200]	; (800495c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004892:	f7ff fecb 	bl	800462c <LL_ADC_IsEnabled>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf0c      	ite	eq
 800489c:	2301      	moveq	r3, #1
 800489e:	2300      	movne	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d047      	beq.n	8004936 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80048a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	4b2d      	ldr	r3, [pc, #180]	; (8004960 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	6811      	ldr	r1, [r2, #0]
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	6892      	ldr	r2, [r2, #8]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	431a      	orrs	r2, r3
 80048ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048bc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048be:	e03a      	b.n	8004936 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80048c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a1e      	ldr	r2, [pc, #120]	; (800494c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d004      	beq.n	80048e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a1d      	ldr	r2, [pc, #116]	; (8004950 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d10e      	bne.n	80048fe <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80048e0:	481a      	ldr	r0, [pc, #104]	; (800494c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048e2:	f7ff fea3 	bl	800462c <LL_ADC_IsEnabled>
 80048e6:	4604      	mov	r4, r0
 80048e8:	4819      	ldr	r0, [pc, #100]	; (8004950 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048ea:	f7ff fe9f 	bl	800462c <LL_ADC_IsEnabled>
 80048ee:	4603      	mov	r3, r0
 80048f0:	4323      	orrs	r3, r4
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	bf0c      	ite	eq
 80048f6:	2301      	moveq	r3, #1
 80048f8:	2300      	movne	r3, #0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	e008      	b.n	8004910 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80048fe:	4817      	ldr	r0, [pc, #92]	; (800495c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004900:	f7ff fe94 	bl	800462c <LL_ADC_IsEnabled>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	bf0c      	ite	eq
 800490a:	2301      	moveq	r3, #1
 800490c:	2300      	movne	r3, #0
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d010      	beq.n	8004936 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	4b11      	ldr	r3, [pc, #68]	; (8004960 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800491a:	4013      	ands	r3, r2
 800491c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800491e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004920:	e009      	b.n	8004936 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004926:	f043 0220 	orr.w	r2, r3, #32
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004934:	e000      	b.n	8004938 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004936:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004940:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004944:	4618      	mov	r0, r3
 8004946:	377c      	adds	r7, #124	; 0x7c
 8004948:	46bd      	mov	sp, r7
 800494a:	bd90      	pop	{r4, r7, pc}
 800494c:	40022000 	.word	0x40022000
 8004950:	40022100 	.word	0x40022100
 8004954:	40022300 	.word	0x40022300
 8004958:	58026300 	.word	0x58026300
 800495c:	58026000 	.word	0x58026000
 8004960:	fffff0e0 	.word	0xfffff0e0

08004964 <__NVIC_SetPriorityGrouping>:
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004974:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <__NVIC_SetPriorityGrouping+0x40>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004980:	4013      	ands	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800498c:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <__NVIC_SetPriorityGrouping+0x44>)
 800498e:	4313      	orrs	r3, r2
 8004990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004992:	4a04      	ldr	r2, [pc, #16]	; (80049a4 <__NVIC_SetPriorityGrouping+0x40>)
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	60d3      	str	r3, [r2, #12]
}
 8004998:	bf00      	nop
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	e000ed00 	.word	0xe000ed00
 80049a8:	05fa0000 	.word	0x05fa0000

080049ac <__NVIC_GetPriorityGrouping>:
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049b0:	4b04      	ldr	r3, [pc, #16]	; (80049c4 <__NVIC_GetPriorityGrouping+0x18>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	0a1b      	lsrs	r3, r3, #8
 80049b6:	f003 0307 	and.w	r3, r3, #7
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	e000ed00 	.word	0xe000ed00

080049c8 <__NVIC_EnableIRQ>:
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	db0b      	blt.n	80049f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049da:	88fb      	ldrh	r3, [r7, #6]
 80049dc:	f003 021f 	and.w	r2, r3, #31
 80049e0:	4907      	ldr	r1, [pc, #28]	; (8004a00 <__NVIC_EnableIRQ+0x38>)
 80049e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	2001      	movs	r0, #1
 80049ea:	fa00 f202 	lsl.w	r2, r0, r2
 80049ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	e000e100 	.word	0xe000e100

08004a04 <__NVIC_SetPriority>:
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	6039      	str	r1, [r7, #0]
 8004a0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	db0a      	blt.n	8004a2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	490c      	ldr	r1, [pc, #48]	; (8004a50 <__NVIC_SetPriority+0x4c>)
 8004a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a22:	0112      	lsls	r2, r2, #4
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	440b      	add	r3, r1
 8004a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a2c:	e00a      	b.n	8004a44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	4908      	ldr	r1, [pc, #32]	; (8004a54 <__NVIC_SetPriority+0x50>)
 8004a34:	88fb      	ldrh	r3, [r7, #6]
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	3b04      	subs	r3, #4
 8004a3c:	0112      	lsls	r2, r2, #4
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	440b      	add	r3, r1
 8004a42:	761a      	strb	r2, [r3, #24]
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	e000e100 	.word	0xe000e100
 8004a54:	e000ed00 	.word	0xe000ed00

08004a58 <NVIC_EncodePriority>:
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b089      	sub	sp, #36	; 0x24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f1c3 0307 	rsb	r3, r3, #7
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	bf28      	it	cs
 8004a76:	2304      	movcs	r3, #4
 8004a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	2b06      	cmp	r3, #6
 8004a80:	d902      	bls.n	8004a88 <NVIC_EncodePriority+0x30>
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3b03      	subs	r3, #3
 8004a86:	e000      	b.n	8004a8a <NVIC_EncodePriority+0x32>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	43da      	mvns	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	401a      	ands	r2, r3
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aaa:	43d9      	mvns	r1, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab0:	4313      	orrs	r3, r2
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3724      	adds	r7, #36	; 0x24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
	...

08004ac0 <__NVIC_SystemReset>:
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004ac4:	f3bf 8f4f 	dsb	sy
}
 8004ac8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004aca:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <__NVIC_SystemReset+0x24>)
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004ad2:	4904      	ldr	r1, [pc, #16]	; (8004ae4 <__NVIC_SystemReset+0x24>)
 8004ad4:	4b04      	ldr	r3, [pc, #16]	; (8004ae8 <__NVIC_SystemReset+0x28>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ada:	f3bf 8f4f 	dsb	sy
}
 8004ade:	bf00      	nop
    __NOP();
 8004ae0:	bf00      	nop
 8004ae2:	e7fd      	b.n	8004ae0 <__NVIC_SystemReset+0x20>
 8004ae4:	e000ed00 	.word	0xe000ed00
 8004ae8:	05fa0004 	.word	0x05fa0004

08004aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004afc:	d301      	bcc.n	8004b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004afe:	2301      	movs	r3, #1
 8004b00:	e00f      	b.n	8004b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b02:	4a0a      	ldr	r2, [pc, #40]	; (8004b2c <SysTick_Config+0x40>)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b0a:	210f      	movs	r1, #15
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b10:	f7ff ff78 	bl	8004a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b14:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <SysTick_Config+0x40>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b1a:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <SysTick_Config+0x40>)
 8004b1c:	2207      	movs	r2, #7
 8004b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	e000e010 	.word	0xe000e010

08004b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff ff13 	bl	8004964 <__NVIC_SetPriorityGrouping>
}
 8004b3e:	bf00      	nop
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b086      	sub	sp, #24
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b54:	f7ff ff2a 	bl	80049ac <__NVIC_GetPriorityGrouping>
 8004b58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	6978      	ldr	r0, [r7, #20]
 8004b60:	f7ff ff7a 	bl	8004a58 <NVIC_EncodePriority>
 8004b64:	4602      	mov	r2, r0
 8004b66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff ff49 	bl	8004a04 <__NVIC_SetPriority>
}
 8004b72:	bf00      	nop
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	4603      	mov	r3, r0
 8004b82:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff ff1d 	bl	80049c8 <__NVIC_EnableIRQ>
}
 8004b8e:	bf00      	nop
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004b9a:	f7ff ff91 	bl	8004ac0 <__NVIC_SystemReset>

08004b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b082      	sub	sp, #8
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff ffa0 	bl	8004aec <SysTick_Config>
 8004bac:	4603      	mov	r3, r0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004bbc:	f3bf 8f5f 	dmb	sy
}
 8004bc0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004bc2:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <HAL_MPU_Disable+0x28>)
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	4a06      	ldr	r2, [pc, #24]	; (8004be0 <HAL_MPU_Disable+0x28>)
 8004bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bcc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004bce:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <HAL_MPU_Disable+0x2c>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	605a      	str	r2, [r3, #4]
}
 8004bd4:	bf00      	nop
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	e000ed00 	.word	0xe000ed00
 8004be4:	e000ed90 	.word	0xe000ed90

08004be8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004bf0:	4a0b      	ldr	r2, [pc, #44]	; (8004c20 <HAL_MPU_Enable+0x38>)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f043 0301 	orr.w	r3, r3, #1
 8004bf8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <HAL_MPU_Enable+0x3c>)
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	4a09      	ldr	r2, [pc, #36]	; (8004c24 <HAL_MPU_Enable+0x3c>)
 8004c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c04:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004c06:	f3bf 8f4f 	dsb	sy
}
 8004c0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004c0c:	f3bf 8f6f 	isb	sy
}
 8004c10:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	e000ed90 	.word	0xe000ed90
 8004c24:	e000ed00 	.word	0xe000ed00

08004c28 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	785a      	ldrb	r2, [r3, #1]
 8004c34:	4b1d      	ldr	r3, [pc, #116]	; (8004cac <HAL_MPU_ConfigRegion+0x84>)
 8004c36:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d029      	beq.n	8004c94 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004c40:	4a1a      	ldr	r2, [pc, #104]	; (8004cac <HAL_MPU_ConfigRegion+0x84>)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	7b1b      	ldrb	r3, [r3, #12]
 8004c4c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	7adb      	ldrb	r3, [r3, #11]
 8004c52:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	7a9b      	ldrb	r3, [r3, #10]
 8004c5a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004c5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	7b5b      	ldrb	r3, [r3, #13]
 8004c62:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004c64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	7b9b      	ldrb	r3, [r3, #14]
 8004c6a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004c6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	7bdb      	ldrb	r3, [r3, #15]
 8004c72:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004c74:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	7a5b      	ldrb	r3, [r3, #9]
 8004c7a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004c7c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	7a1b      	ldrb	r3, [r3, #8]
 8004c82:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004c84:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	7812      	ldrb	r2, [r2, #0]
 8004c8a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c8c:	4a07      	ldr	r2, [pc, #28]	; (8004cac <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004c8e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c90:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004c92:	e005      	b.n	8004ca0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8004c94:	4b05      	ldr	r3, [pc, #20]	; (8004cac <HAL_MPU_ConfigRegion+0x84>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8004c9a:	4b04      	ldr	r3, [pc, #16]	; (8004cac <HAL_MPU_ConfigRegion+0x84>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	611a      	str	r2, [r3, #16]
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	e000ed90 	.word	0xe000ed90

08004cb0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e054      	b.n	8004d6c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	7f5b      	ldrb	r3, [r3, #29]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d105      	bne.n	8004cd8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fd fef2 	bl	8002abc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	791b      	ldrb	r3, [r3, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10c      	bne.n	8004d00 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a22      	ldr	r2, [pc, #136]	; (8004d74 <HAL_CRC_Init+0xc4>)
 8004cec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0218 	bic.w	r2, r2, #24
 8004cfc:	609a      	str	r2, [r3, #8]
 8004cfe:	e00c      	b.n	8004d1a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6899      	ldr	r1, [r3, #8]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f834 	bl	8004d78 <HAL_CRCEx_Polynomial_Set>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e028      	b.n	8004d6c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	795b      	ldrb	r3, [r3, #5]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d105      	bne.n	8004d2e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2a:	611a      	str	r2, [r3, #16]
 8004d2c:	e004      	b.n	8004d38 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6912      	ldr	r2, [r2, #16]
 8004d36:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695a      	ldr	r2, [r3, #20]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699a      	ldr	r2, [r3, #24]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	04c11db7 	.word	0x04c11db7

08004d78 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004d88:	231f      	movs	r3, #31
 8004d8a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004d8c:	bf00      	nop
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1e5a      	subs	r2, r3, #1
 8004d92:	613a      	str	r2, [r7, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d009      	beq.n	8004dac <HAL_CRCEx_Polynomial_Set+0x34>
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f003 031f 	and.w	r3, r3, #31
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	fa22 f303 	lsr.w	r3, r2, r3
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d0f0      	beq.n	8004d8e <HAL_CRCEx_Polynomial_Set+0x16>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b18      	cmp	r3, #24
 8004db0:	d846      	bhi.n	8004e40 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004db2:	a201      	add	r2, pc, #4	; (adr r2, 8004db8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db8:	08004e47 	.word	0x08004e47
 8004dbc:	08004e41 	.word	0x08004e41
 8004dc0:	08004e41 	.word	0x08004e41
 8004dc4:	08004e41 	.word	0x08004e41
 8004dc8:	08004e41 	.word	0x08004e41
 8004dcc:	08004e41 	.word	0x08004e41
 8004dd0:	08004e41 	.word	0x08004e41
 8004dd4:	08004e41 	.word	0x08004e41
 8004dd8:	08004e35 	.word	0x08004e35
 8004ddc:	08004e41 	.word	0x08004e41
 8004de0:	08004e41 	.word	0x08004e41
 8004de4:	08004e41 	.word	0x08004e41
 8004de8:	08004e41 	.word	0x08004e41
 8004dec:	08004e41 	.word	0x08004e41
 8004df0:	08004e41 	.word	0x08004e41
 8004df4:	08004e41 	.word	0x08004e41
 8004df8:	08004e29 	.word	0x08004e29
 8004dfc:	08004e41 	.word	0x08004e41
 8004e00:	08004e41 	.word	0x08004e41
 8004e04:	08004e41 	.word	0x08004e41
 8004e08:	08004e41 	.word	0x08004e41
 8004e0c:	08004e41 	.word	0x08004e41
 8004e10:	08004e41 	.word	0x08004e41
 8004e14:	08004e41 	.word	0x08004e41
 8004e18:	08004e1d 	.word	0x08004e1d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	2b06      	cmp	r3, #6
 8004e20:	d913      	bls.n	8004e4a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004e26:	e010      	b.n	8004e4a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	2b07      	cmp	r3, #7
 8004e2c:	d90f      	bls.n	8004e4e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004e32:	e00c      	b.n	8004e4e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b0f      	cmp	r3, #15
 8004e38:	d90b      	bls.n	8004e52 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004e3e:	e008      	b.n	8004e52 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	75fb      	strb	r3, [r7, #23]
      break;
 8004e44:	e006      	b.n	8004e54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004e46:	bf00      	nop
 8004e48:	e004      	b.n	8004e54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004e4a:	bf00      	nop
 8004e4c:	e002      	b.n	8004e54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004e4e:	bf00      	nop
 8004e50:	e000      	b.n	8004e54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004e52:	bf00      	nop
  }
  if (status == HAL_OK)
 8004e54:	7dfb      	ldrb	r3, [r7, #23]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10d      	bne.n	8004e76 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f023 0118 	bic.w	r1, r3, #24
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004e8c:	f7fe f94e 	bl	800312c <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e316      	b.n	80054ca <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a66      	ldr	r2, [pc, #408]	; (800503c <HAL_DMA_Init+0x1b8>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d04a      	beq.n	8004f3c <HAL_DMA_Init+0xb8>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a65      	ldr	r2, [pc, #404]	; (8005040 <HAL_DMA_Init+0x1bc>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d045      	beq.n	8004f3c <HAL_DMA_Init+0xb8>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a63      	ldr	r2, [pc, #396]	; (8005044 <HAL_DMA_Init+0x1c0>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d040      	beq.n	8004f3c <HAL_DMA_Init+0xb8>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a62      	ldr	r2, [pc, #392]	; (8005048 <HAL_DMA_Init+0x1c4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d03b      	beq.n	8004f3c <HAL_DMA_Init+0xb8>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a60      	ldr	r2, [pc, #384]	; (800504c <HAL_DMA_Init+0x1c8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d036      	beq.n	8004f3c <HAL_DMA_Init+0xb8>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a5f      	ldr	r2, [pc, #380]	; (8005050 <HAL_DMA_Init+0x1cc>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d031      	beq.n	8004f3c <HAL_DMA_Init+0xb8>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a5d      	ldr	r2, [pc, #372]	; (8005054 <HAL_DMA_Init+0x1d0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d02c      	beq.n	8004f3c <HAL_DMA_Init+0xb8>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a5c      	ldr	r2, [pc, #368]	; (8005058 <HAL_DMA_Init+0x1d4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d027      	beq.n	8004f3c <HAL_DMA_Init+0xb8>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a5a      	ldr	r2, [pc, #360]	; (800505c <HAL_DMA_Init+0x1d8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d022      	beq.n	8004f3c <HAL_DMA_Init+0xb8>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a59      	ldr	r2, [pc, #356]	; (8005060 <HAL_DMA_Init+0x1dc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d01d      	beq.n	8004f3c <HAL_DMA_Init+0xb8>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a57      	ldr	r2, [pc, #348]	; (8005064 <HAL_DMA_Init+0x1e0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d018      	beq.n	8004f3c <HAL_DMA_Init+0xb8>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a56      	ldr	r2, [pc, #344]	; (8005068 <HAL_DMA_Init+0x1e4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d013      	beq.n	8004f3c <HAL_DMA_Init+0xb8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a54      	ldr	r2, [pc, #336]	; (800506c <HAL_DMA_Init+0x1e8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00e      	beq.n	8004f3c <HAL_DMA_Init+0xb8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a53      	ldr	r2, [pc, #332]	; (8005070 <HAL_DMA_Init+0x1ec>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d009      	beq.n	8004f3c <HAL_DMA_Init+0xb8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a51      	ldr	r2, [pc, #324]	; (8005074 <HAL_DMA_Init+0x1f0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d004      	beq.n	8004f3c <HAL_DMA_Init+0xb8>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a50      	ldr	r2, [pc, #320]	; (8005078 <HAL_DMA_Init+0x1f4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d101      	bne.n	8004f40 <HAL_DMA_Init+0xbc>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <HAL_DMA_Init+0xbe>
 8004f40:	2300      	movs	r3, #0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 813b 	beq.w	80051be <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a37      	ldr	r2, [pc, #220]	; (800503c <HAL_DMA_Init+0x1b8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d04a      	beq.n	8004ff8 <HAL_DMA_Init+0x174>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a36      	ldr	r2, [pc, #216]	; (8005040 <HAL_DMA_Init+0x1bc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d045      	beq.n	8004ff8 <HAL_DMA_Init+0x174>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a34      	ldr	r2, [pc, #208]	; (8005044 <HAL_DMA_Init+0x1c0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d040      	beq.n	8004ff8 <HAL_DMA_Init+0x174>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a33      	ldr	r2, [pc, #204]	; (8005048 <HAL_DMA_Init+0x1c4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d03b      	beq.n	8004ff8 <HAL_DMA_Init+0x174>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a31      	ldr	r2, [pc, #196]	; (800504c <HAL_DMA_Init+0x1c8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d036      	beq.n	8004ff8 <HAL_DMA_Init+0x174>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a30      	ldr	r2, [pc, #192]	; (8005050 <HAL_DMA_Init+0x1cc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d031      	beq.n	8004ff8 <HAL_DMA_Init+0x174>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a2e      	ldr	r2, [pc, #184]	; (8005054 <HAL_DMA_Init+0x1d0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d02c      	beq.n	8004ff8 <HAL_DMA_Init+0x174>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a2d      	ldr	r2, [pc, #180]	; (8005058 <HAL_DMA_Init+0x1d4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d027      	beq.n	8004ff8 <HAL_DMA_Init+0x174>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a2b      	ldr	r2, [pc, #172]	; (800505c <HAL_DMA_Init+0x1d8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d022      	beq.n	8004ff8 <HAL_DMA_Init+0x174>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a2a      	ldr	r2, [pc, #168]	; (8005060 <HAL_DMA_Init+0x1dc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d01d      	beq.n	8004ff8 <HAL_DMA_Init+0x174>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a28      	ldr	r2, [pc, #160]	; (8005064 <HAL_DMA_Init+0x1e0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d018      	beq.n	8004ff8 <HAL_DMA_Init+0x174>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a27      	ldr	r2, [pc, #156]	; (8005068 <HAL_DMA_Init+0x1e4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d013      	beq.n	8004ff8 <HAL_DMA_Init+0x174>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a25      	ldr	r2, [pc, #148]	; (800506c <HAL_DMA_Init+0x1e8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00e      	beq.n	8004ff8 <HAL_DMA_Init+0x174>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a24      	ldr	r2, [pc, #144]	; (8005070 <HAL_DMA_Init+0x1ec>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d009      	beq.n	8004ff8 <HAL_DMA_Init+0x174>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a22      	ldr	r2, [pc, #136]	; (8005074 <HAL_DMA_Init+0x1f0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d004      	beq.n	8004ff8 <HAL_DMA_Init+0x174>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a21      	ldr	r2, [pc, #132]	; (8005078 <HAL_DMA_Init+0x1f4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d108      	bne.n	800500a <HAL_DMA_Init+0x186>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0201 	bic.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	e007      	b.n	800501a <HAL_DMA_Init+0x196>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 0201 	bic.w	r2, r2, #1
 8005018:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800501a:	e02f      	b.n	800507c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800501c:	f7fe f886 	bl	800312c <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b05      	cmp	r3, #5
 8005028:	d928      	bls.n	800507c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2220      	movs	r2, #32
 800502e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2203      	movs	r2, #3
 8005034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e246      	b.n	80054ca <HAL_DMA_Init+0x646>
 800503c:	40020010 	.word	0x40020010
 8005040:	40020028 	.word	0x40020028
 8005044:	40020040 	.word	0x40020040
 8005048:	40020058 	.word	0x40020058
 800504c:	40020070 	.word	0x40020070
 8005050:	40020088 	.word	0x40020088
 8005054:	400200a0 	.word	0x400200a0
 8005058:	400200b8 	.word	0x400200b8
 800505c:	40020410 	.word	0x40020410
 8005060:	40020428 	.word	0x40020428
 8005064:	40020440 	.word	0x40020440
 8005068:	40020458 	.word	0x40020458
 800506c:	40020470 	.word	0x40020470
 8005070:	40020488 	.word	0x40020488
 8005074:	400204a0 	.word	0x400204a0
 8005078:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1c8      	bne.n	800501c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4b83      	ldr	r3, [pc, #524]	; (80052a4 <HAL_DMA_Init+0x420>)
 8005096:	4013      	ands	r3, r2
 8005098:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80050a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d107      	bne.n	80050e0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	4313      	orrs	r3, r2
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4313      	orrs	r3, r2
 80050de:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80050e0:	4b71      	ldr	r3, [pc, #452]	; (80052a8 <HAL_DMA_Init+0x424>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	4b71      	ldr	r3, [pc, #452]	; (80052ac <HAL_DMA_Init+0x428>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ec:	d328      	bcc.n	8005140 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b28      	cmp	r3, #40	; 0x28
 80050f4:	d903      	bls.n	80050fe <HAL_DMA_Init+0x27a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b2e      	cmp	r3, #46	; 0x2e
 80050fc:	d917      	bls.n	800512e <HAL_DMA_Init+0x2aa>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b3e      	cmp	r3, #62	; 0x3e
 8005104:	d903      	bls.n	800510e <HAL_DMA_Init+0x28a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b42      	cmp	r3, #66	; 0x42
 800510c:	d90f      	bls.n	800512e <HAL_DMA_Init+0x2aa>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b46      	cmp	r3, #70	; 0x46
 8005114:	d903      	bls.n	800511e <HAL_DMA_Init+0x29a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2b48      	cmp	r3, #72	; 0x48
 800511c:	d907      	bls.n	800512e <HAL_DMA_Init+0x2aa>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2b4e      	cmp	r3, #78	; 0x4e
 8005124:	d905      	bls.n	8005132 <HAL_DMA_Init+0x2ae>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b52      	cmp	r3, #82	; 0x52
 800512c:	d801      	bhi.n	8005132 <HAL_DMA_Init+0x2ae>
 800512e:	2301      	movs	r3, #1
 8005130:	e000      	b.n	8005134 <HAL_DMA_Init+0x2b0>
 8005132:	2300      	movs	r3, #0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800513e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f023 0307 	bic.w	r3, r3, #7
 8005156:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	4313      	orrs	r3, r2
 8005160:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	2b04      	cmp	r3, #4
 8005168:	d117      	bne.n	800519a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00e      	beq.n	800519a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f001 fdcf 	bl	8006d20 <DMA_CheckFifoParam>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2240      	movs	r2, #64	; 0x40
 800518c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e197      	b.n	80054ca <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f001 fd0a 	bl	8006bbc <DMA_CalcBaseAndBitshift>
 80051a8:	4603      	mov	r3, r0
 80051aa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b0:	f003 031f 	and.w	r3, r3, #31
 80051b4:	223f      	movs	r2, #63	; 0x3f
 80051b6:	409a      	lsls	r2, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	609a      	str	r2, [r3, #8]
 80051bc:	e0cd      	b.n	800535a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a3b      	ldr	r2, [pc, #236]	; (80052b0 <HAL_DMA_Init+0x42c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d022      	beq.n	800520e <HAL_DMA_Init+0x38a>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a39      	ldr	r2, [pc, #228]	; (80052b4 <HAL_DMA_Init+0x430>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d01d      	beq.n	800520e <HAL_DMA_Init+0x38a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a38      	ldr	r2, [pc, #224]	; (80052b8 <HAL_DMA_Init+0x434>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d018      	beq.n	800520e <HAL_DMA_Init+0x38a>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a36      	ldr	r2, [pc, #216]	; (80052bc <HAL_DMA_Init+0x438>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d013      	beq.n	800520e <HAL_DMA_Init+0x38a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a35      	ldr	r2, [pc, #212]	; (80052c0 <HAL_DMA_Init+0x43c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00e      	beq.n	800520e <HAL_DMA_Init+0x38a>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a33      	ldr	r2, [pc, #204]	; (80052c4 <HAL_DMA_Init+0x440>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d009      	beq.n	800520e <HAL_DMA_Init+0x38a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a32      	ldr	r2, [pc, #200]	; (80052c8 <HAL_DMA_Init+0x444>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d004      	beq.n	800520e <HAL_DMA_Init+0x38a>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a30      	ldr	r2, [pc, #192]	; (80052cc <HAL_DMA_Init+0x448>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d101      	bne.n	8005212 <HAL_DMA_Init+0x38e>
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <HAL_DMA_Init+0x390>
 8005212:	2300      	movs	r3, #0
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 8097 	beq.w	8005348 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a24      	ldr	r2, [pc, #144]	; (80052b0 <HAL_DMA_Init+0x42c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d021      	beq.n	8005268 <HAL_DMA_Init+0x3e4>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a22      	ldr	r2, [pc, #136]	; (80052b4 <HAL_DMA_Init+0x430>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01c      	beq.n	8005268 <HAL_DMA_Init+0x3e4>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a21      	ldr	r2, [pc, #132]	; (80052b8 <HAL_DMA_Init+0x434>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d017      	beq.n	8005268 <HAL_DMA_Init+0x3e4>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1f      	ldr	r2, [pc, #124]	; (80052bc <HAL_DMA_Init+0x438>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d012      	beq.n	8005268 <HAL_DMA_Init+0x3e4>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1e      	ldr	r2, [pc, #120]	; (80052c0 <HAL_DMA_Init+0x43c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00d      	beq.n	8005268 <HAL_DMA_Init+0x3e4>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a1c      	ldr	r2, [pc, #112]	; (80052c4 <HAL_DMA_Init+0x440>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d008      	beq.n	8005268 <HAL_DMA_Init+0x3e4>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1b      	ldr	r2, [pc, #108]	; (80052c8 <HAL_DMA_Init+0x444>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d003      	beq.n	8005268 <HAL_DMA_Init+0x3e4>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a19      	ldr	r2, [pc, #100]	; (80052cc <HAL_DMA_Init+0x448>)
 8005266:	4293      	cmp	r3, r2
 8005268:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2202      	movs	r2, #2
 800526e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	4b12      	ldr	r3, [pc, #72]	; (80052d0 <HAL_DMA_Init+0x44c>)
 8005286:	4013      	ands	r3, r2
 8005288:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	2b40      	cmp	r3, #64	; 0x40
 8005290:	d020      	beq.n	80052d4 <HAL_DMA_Init+0x450>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	2b80      	cmp	r3, #128	; 0x80
 8005298:	d102      	bne.n	80052a0 <HAL_DMA_Init+0x41c>
 800529a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800529e:	e01a      	b.n	80052d6 <HAL_DMA_Init+0x452>
 80052a0:	2300      	movs	r3, #0
 80052a2:	e018      	b.n	80052d6 <HAL_DMA_Init+0x452>
 80052a4:	fe10803f 	.word	0xfe10803f
 80052a8:	5c001000 	.word	0x5c001000
 80052ac:	ffff0000 	.word	0xffff0000
 80052b0:	58025408 	.word	0x58025408
 80052b4:	5802541c 	.word	0x5802541c
 80052b8:	58025430 	.word	0x58025430
 80052bc:	58025444 	.word	0x58025444
 80052c0:	58025458 	.word	0x58025458
 80052c4:	5802546c 	.word	0x5802546c
 80052c8:	58025480 	.word	0x58025480
 80052cc:	58025494 	.word	0x58025494
 80052d0:	fffe000f 	.word	0xfffe000f
 80052d4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	68d2      	ldr	r2, [r2, #12]
 80052da:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80052dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80052e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80052ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80052f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80052fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005304:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	461a      	mov	r2, r3
 800531a:	4b6e      	ldr	r3, [pc, #440]	; (80054d4 <HAL_DMA_Init+0x650>)
 800531c:	4413      	add	r3, r2
 800531e:	4a6e      	ldr	r2, [pc, #440]	; (80054d8 <HAL_DMA_Init+0x654>)
 8005320:	fba2 2303 	umull	r2, r3, r2, r3
 8005324:	091b      	lsrs	r3, r3, #4
 8005326:	009a      	lsls	r2, r3, #2
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f001 fc45 	bl	8006bbc <DMA_CalcBaseAndBitshift>
 8005332:	4603      	mov	r3, r0
 8005334:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800533a:	f003 031f 	and.w	r3, r3, #31
 800533e:	2201      	movs	r2, #1
 8005340:	409a      	lsls	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	605a      	str	r2, [r3, #4]
 8005346:	e008      	b.n	800535a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2240      	movs	r2, #64	; 0x40
 800534c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2203      	movs	r2, #3
 8005352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e0b7      	b.n	80054ca <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a5f      	ldr	r2, [pc, #380]	; (80054dc <HAL_DMA_Init+0x658>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d072      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a5d      	ldr	r2, [pc, #372]	; (80054e0 <HAL_DMA_Init+0x65c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d06d      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a5c      	ldr	r2, [pc, #368]	; (80054e4 <HAL_DMA_Init+0x660>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d068      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a5a      	ldr	r2, [pc, #360]	; (80054e8 <HAL_DMA_Init+0x664>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d063      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a59      	ldr	r2, [pc, #356]	; (80054ec <HAL_DMA_Init+0x668>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d05e      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a57      	ldr	r2, [pc, #348]	; (80054f0 <HAL_DMA_Init+0x66c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d059      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a56      	ldr	r2, [pc, #344]	; (80054f4 <HAL_DMA_Init+0x670>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d054      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a54      	ldr	r2, [pc, #336]	; (80054f8 <HAL_DMA_Init+0x674>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d04f      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a53      	ldr	r2, [pc, #332]	; (80054fc <HAL_DMA_Init+0x678>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d04a      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a51      	ldr	r2, [pc, #324]	; (8005500 <HAL_DMA_Init+0x67c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d045      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a50      	ldr	r2, [pc, #320]	; (8005504 <HAL_DMA_Init+0x680>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d040      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a4e      	ldr	r2, [pc, #312]	; (8005508 <HAL_DMA_Init+0x684>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d03b      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a4d      	ldr	r2, [pc, #308]	; (800550c <HAL_DMA_Init+0x688>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d036      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a4b      	ldr	r2, [pc, #300]	; (8005510 <HAL_DMA_Init+0x68c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d031      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a4a      	ldr	r2, [pc, #296]	; (8005514 <HAL_DMA_Init+0x690>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d02c      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a48      	ldr	r2, [pc, #288]	; (8005518 <HAL_DMA_Init+0x694>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d027      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a47      	ldr	r2, [pc, #284]	; (800551c <HAL_DMA_Init+0x698>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d022      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a45      	ldr	r2, [pc, #276]	; (8005520 <HAL_DMA_Init+0x69c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01d      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a44      	ldr	r2, [pc, #272]	; (8005524 <HAL_DMA_Init+0x6a0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d018      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a42      	ldr	r2, [pc, #264]	; (8005528 <HAL_DMA_Init+0x6a4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a41      	ldr	r2, [pc, #260]	; (800552c <HAL_DMA_Init+0x6a8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00e      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a3f      	ldr	r2, [pc, #252]	; (8005530 <HAL_DMA_Init+0x6ac>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a3e      	ldr	r2, [pc, #248]	; (8005534 <HAL_DMA_Init+0x6b0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_DMA_Init+0x5c6>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a3c      	ldr	r2, [pc, #240]	; (8005538 <HAL_DMA_Init+0x6b4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d101      	bne.n	800544e <HAL_DMA_Init+0x5ca>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <HAL_DMA_Init+0x5cc>
 800544e:	2300      	movs	r3, #0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d032      	beq.n	80054ba <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f001 fcdf 	bl	8006e18 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	2b80      	cmp	r3, #128	; 0x80
 8005460:	d102      	bne.n	8005468 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800547c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d010      	beq.n	80054a8 <HAL_DMA_Init+0x624>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b08      	cmp	r3, #8
 800548c:	d80c      	bhi.n	80054a8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f001 fd5c 	bl	8006f4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	e008      	b.n	80054ba <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	a7fdabf8 	.word	0xa7fdabf8
 80054d8:	cccccccd 	.word	0xcccccccd
 80054dc:	40020010 	.word	0x40020010
 80054e0:	40020028 	.word	0x40020028
 80054e4:	40020040 	.word	0x40020040
 80054e8:	40020058 	.word	0x40020058
 80054ec:	40020070 	.word	0x40020070
 80054f0:	40020088 	.word	0x40020088
 80054f4:	400200a0 	.word	0x400200a0
 80054f8:	400200b8 	.word	0x400200b8
 80054fc:	40020410 	.word	0x40020410
 8005500:	40020428 	.word	0x40020428
 8005504:	40020440 	.word	0x40020440
 8005508:	40020458 	.word	0x40020458
 800550c:	40020470 	.word	0x40020470
 8005510:	40020488 	.word	0x40020488
 8005514:	400204a0 	.word	0x400204a0
 8005518:	400204b8 	.word	0x400204b8
 800551c:	58025408 	.word	0x58025408
 8005520:	5802541c 	.word	0x5802541c
 8005524:	58025430 	.word	0x58025430
 8005528:	58025444 	.word	0x58025444
 800552c:	58025458 	.word	0x58025458
 8005530:	5802546c 	.word	0x5802546c
 8005534:	58025480 	.word	0x58025480
 8005538:	58025494 	.word	0x58025494

0800553c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e226      	b.n	80059a6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800555e:	2b01      	cmp	r3, #1
 8005560:	d101      	bne.n	8005566 <HAL_DMA_Start_IT+0x2a>
 8005562:	2302      	movs	r3, #2
 8005564:	e21f      	b.n	80059a6 <HAL_DMA_Start_IT+0x46a>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b01      	cmp	r3, #1
 8005578:	f040 820a 	bne.w	8005990 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a68      	ldr	r2, [pc, #416]	; (8005730 <HAL_DMA_Start_IT+0x1f4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d04a      	beq.n	800562a <HAL_DMA_Start_IT+0xee>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a66      	ldr	r2, [pc, #408]	; (8005734 <HAL_DMA_Start_IT+0x1f8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d045      	beq.n	800562a <HAL_DMA_Start_IT+0xee>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a65      	ldr	r2, [pc, #404]	; (8005738 <HAL_DMA_Start_IT+0x1fc>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d040      	beq.n	800562a <HAL_DMA_Start_IT+0xee>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a63      	ldr	r2, [pc, #396]	; (800573c <HAL_DMA_Start_IT+0x200>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d03b      	beq.n	800562a <HAL_DMA_Start_IT+0xee>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a62      	ldr	r2, [pc, #392]	; (8005740 <HAL_DMA_Start_IT+0x204>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d036      	beq.n	800562a <HAL_DMA_Start_IT+0xee>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a60      	ldr	r2, [pc, #384]	; (8005744 <HAL_DMA_Start_IT+0x208>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d031      	beq.n	800562a <HAL_DMA_Start_IT+0xee>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a5f      	ldr	r2, [pc, #380]	; (8005748 <HAL_DMA_Start_IT+0x20c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d02c      	beq.n	800562a <HAL_DMA_Start_IT+0xee>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a5d      	ldr	r2, [pc, #372]	; (800574c <HAL_DMA_Start_IT+0x210>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d027      	beq.n	800562a <HAL_DMA_Start_IT+0xee>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a5c      	ldr	r2, [pc, #368]	; (8005750 <HAL_DMA_Start_IT+0x214>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d022      	beq.n	800562a <HAL_DMA_Start_IT+0xee>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a5a      	ldr	r2, [pc, #360]	; (8005754 <HAL_DMA_Start_IT+0x218>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01d      	beq.n	800562a <HAL_DMA_Start_IT+0xee>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a59      	ldr	r2, [pc, #356]	; (8005758 <HAL_DMA_Start_IT+0x21c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d018      	beq.n	800562a <HAL_DMA_Start_IT+0xee>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a57      	ldr	r2, [pc, #348]	; (800575c <HAL_DMA_Start_IT+0x220>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d013      	beq.n	800562a <HAL_DMA_Start_IT+0xee>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a56      	ldr	r2, [pc, #344]	; (8005760 <HAL_DMA_Start_IT+0x224>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00e      	beq.n	800562a <HAL_DMA_Start_IT+0xee>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a54      	ldr	r2, [pc, #336]	; (8005764 <HAL_DMA_Start_IT+0x228>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d009      	beq.n	800562a <HAL_DMA_Start_IT+0xee>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a53      	ldr	r2, [pc, #332]	; (8005768 <HAL_DMA_Start_IT+0x22c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <HAL_DMA_Start_IT+0xee>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a51      	ldr	r2, [pc, #324]	; (800576c <HAL_DMA_Start_IT+0x230>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d108      	bne.n	800563c <HAL_DMA_Start_IT+0x100>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0201 	bic.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	e007      	b.n	800564c <HAL_DMA_Start_IT+0x110>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0201 	bic.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	68b9      	ldr	r1, [r7, #8]
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f001 f906 	bl	8006864 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a34      	ldr	r2, [pc, #208]	; (8005730 <HAL_DMA_Start_IT+0x1f4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d04a      	beq.n	80056f8 <HAL_DMA_Start_IT+0x1bc>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a33      	ldr	r2, [pc, #204]	; (8005734 <HAL_DMA_Start_IT+0x1f8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d045      	beq.n	80056f8 <HAL_DMA_Start_IT+0x1bc>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a31      	ldr	r2, [pc, #196]	; (8005738 <HAL_DMA_Start_IT+0x1fc>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d040      	beq.n	80056f8 <HAL_DMA_Start_IT+0x1bc>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a30      	ldr	r2, [pc, #192]	; (800573c <HAL_DMA_Start_IT+0x200>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d03b      	beq.n	80056f8 <HAL_DMA_Start_IT+0x1bc>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a2e      	ldr	r2, [pc, #184]	; (8005740 <HAL_DMA_Start_IT+0x204>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d036      	beq.n	80056f8 <HAL_DMA_Start_IT+0x1bc>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a2d      	ldr	r2, [pc, #180]	; (8005744 <HAL_DMA_Start_IT+0x208>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d031      	beq.n	80056f8 <HAL_DMA_Start_IT+0x1bc>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a2b      	ldr	r2, [pc, #172]	; (8005748 <HAL_DMA_Start_IT+0x20c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d02c      	beq.n	80056f8 <HAL_DMA_Start_IT+0x1bc>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a2a      	ldr	r2, [pc, #168]	; (800574c <HAL_DMA_Start_IT+0x210>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d027      	beq.n	80056f8 <HAL_DMA_Start_IT+0x1bc>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a28      	ldr	r2, [pc, #160]	; (8005750 <HAL_DMA_Start_IT+0x214>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d022      	beq.n	80056f8 <HAL_DMA_Start_IT+0x1bc>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a27      	ldr	r2, [pc, #156]	; (8005754 <HAL_DMA_Start_IT+0x218>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d01d      	beq.n	80056f8 <HAL_DMA_Start_IT+0x1bc>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a25      	ldr	r2, [pc, #148]	; (8005758 <HAL_DMA_Start_IT+0x21c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d018      	beq.n	80056f8 <HAL_DMA_Start_IT+0x1bc>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a24      	ldr	r2, [pc, #144]	; (800575c <HAL_DMA_Start_IT+0x220>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d013      	beq.n	80056f8 <HAL_DMA_Start_IT+0x1bc>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a22      	ldr	r2, [pc, #136]	; (8005760 <HAL_DMA_Start_IT+0x224>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00e      	beq.n	80056f8 <HAL_DMA_Start_IT+0x1bc>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a21      	ldr	r2, [pc, #132]	; (8005764 <HAL_DMA_Start_IT+0x228>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d009      	beq.n	80056f8 <HAL_DMA_Start_IT+0x1bc>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a1f      	ldr	r2, [pc, #124]	; (8005768 <HAL_DMA_Start_IT+0x22c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d004      	beq.n	80056f8 <HAL_DMA_Start_IT+0x1bc>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a1e      	ldr	r2, [pc, #120]	; (800576c <HAL_DMA_Start_IT+0x230>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d101      	bne.n	80056fc <HAL_DMA_Start_IT+0x1c0>
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <HAL_DMA_Start_IT+0x1c2>
 80056fc:	2300      	movs	r3, #0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d036      	beq.n	8005770 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f023 021e 	bic.w	r2, r3, #30
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0216 	orr.w	r2, r2, #22
 8005714:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	2b00      	cmp	r3, #0
 800571c:	d03e      	beq.n	800579c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0208 	orr.w	r2, r2, #8
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	e035      	b.n	800579c <HAL_DMA_Start_IT+0x260>
 8005730:	40020010 	.word	0x40020010
 8005734:	40020028 	.word	0x40020028
 8005738:	40020040 	.word	0x40020040
 800573c:	40020058 	.word	0x40020058
 8005740:	40020070 	.word	0x40020070
 8005744:	40020088 	.word	0x40020088
 8005748:	400200a0 	.word	0x400200a0
 800574c:	400200b8 	.word	0x400200b8
 8005750:	40020410 	.word	0x40020410
 8005754:	40020428 	.word	0x40020428
 8005758:	40020440 	.word	0x40020440
 800575c:	40020458 	.word	0x40020458
 8005760:	40020470 	.word	0x40020470
 8005764:	40020488 	.word	0x40020488
 8005768:	400204a0 	.word	0x400204a0
 800576c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f023 020e 	bic.w	r2, r3, #14
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 020a 	orr.w	r2, r2, #10
 8005782:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0204 	orr.w	r2, r2, #4
 800579a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a83      	ldr	r2, [pc, #524]	; (80059b0 <HAL_DMA_Start_IT+0x474>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d072      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a82      	ldr	r2, [pc, #520]	; (80059b4 <HAL_DMA_Start_IT+0x478>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d06d      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a80      	ldr	r2, [pc, #512]	; (80059b8 <HAL_DMA_Start_IT+0x47c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d068      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a7f      	ldr	r2, [pc, #508]	; (80059bc <HAL_DMA_Start_IT+0x480>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d063      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a7d      	ldr	r2, [pc, #500]	; (80059c0 <HAL_DMA_Start_IT+0x484>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d05e      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a7c      	ldr	r2, [pc, #496]	; (80059c4 <HAL_DMA_Start_IT+0x488>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d059      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a7a      	ldr	r2, [pc, #488]	; (80059c8 <HAL_DMA_Start_IT+0x48c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d054      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a79      	ldr	r2, [pc, #484]	; (80059cc <HAL_DMA_Start_IT+0x490>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d04f      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a77      	ldr	r2, [pc, #476]	; (80059d0 <HAL_DMA_Start_IT+0x494>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d04a      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a76      	ldr	r2, [pc, #472]	; (80059d4 <HAL_DMA_Start_IT+0x498>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d045      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a74      	ldr	r2, [pc, #464]	; (80059d8 <HAL_DMA_Start_IT+0x49c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d040      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a73      	ldr	r2, [pc, #460]	; (80059dc <HAL_DMA_Start_IT+0x4a0>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d03b      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a71      	ldr	r2, [pc, #452]	; (80059e0 <HAL_DMA_Start_IT+0x4a4>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d036      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a70      	ldr	r2, [pc, #448]	; (80059e4 <HAL_DMA_Start_IT+0x4a8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d031      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a6e      	ldr	r2, [pc, #440]	; (80059e8 <HAL_DMA_Start_IT+0x4ac>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d02c      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a6d      	ldr	r2, [pc, #436]	; (80059ec <HAL_DMA_Start_IT+0x4b0>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d027      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a6b      	ldr	r2, [pc, #428]	; (80059f0 <HAL_DMA_Start_IT+0x4b4>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d022      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a6a      	ldr	r2, [pc, #424]	; (80059f4 <HAL_DMA_Start_IT+0x4b8>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d01d      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a68      	ldr	r2, [pc, #416]	; (80059f8 <HAL_DMA_Start_IT+0x4bc>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d018      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a67      	ldr	r2, [pc, #412]	; (80059fc <HAL_DMA_Start_IT+0x4c0>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d013      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a65      	ldr	r2, [pc, #404]	; (8005a00 <HAL_DMA_Start_IT+0x4c4>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00e      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a64      	ldr	r2, [pc, #400]	; (8005a04 <HAL_DMA_Start_IT+0x4c8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d009      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a62      	ldr	r2, [pc, #392]	; (8005a08 <HAL_DMA_Start_IT+0x4cc>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d004      	beq.n	800588c <HAL_DMA_Start_IT+0x350>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a61      	ldr	r2, [pc, #388]	; (8005a0c <HAL_DMA_Start_IT+0x4d0>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d101      	bne.n	8005890 <HAL_DMA_Start_IT+0x354>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <HAL_DMA_Start_IT+0x356>
 8005890:	2300      	movs	r3, #0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d01a      	beq.n	80058cc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d007      	beq.n	80058b4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058b2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d007      	beq.n	80058cc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058ca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a37      	ldr	r2, [pc, #220]	; (80059b0 <HAL_DMA_Start_IT+0x474>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d04a      	beq.n	800596c <HAL_DMA_Start_IT+0x430>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a36      	ldr	r2, [pc, #216]	; (80059b4 <HAL_DMA_Start_IT+0x478>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d045      	beq.n	800596c <HAL_DMA_Start_IT+0x430>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a34      	ldr	r2, [pc, #208]	; (80059b8 <HAL_DMA_Start_IT+0x47c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d040      	beq.n	800596c <HAL_DMA_Start_IT+0x430>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a33      	ldr	r2, [pc, #204]	; (80059bc <HAL_DMA_Start_IT+0x480>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d03b      	beq.n	800596c <HAL_DMA_Start_IT+0x430>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a31      	ldr	r2, [pc, #196]	; (80059c0 <HAL_DMA_Start_IT+0x484>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d036      	beq.n	800596c <HAL_DMA_Start_IT+0x430>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a30      	ldr	r2, [pc, #192]	; (80059c4 <HAL_DMA_Start_IT+0x488>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d031      	beq.n	800596c <HAL_DMA_Start_IT+0x430>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a2e      	ldr	r2, [pc, #184]	; (80059c8 <HAL_DMA_Start_IT+0x48c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d02c      	beq.n	800596c <HAL_DMA_Start_IT+0x430>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a2d      	ldr	r2, [pc, #180]	; (80059cc <HAL_DMA_Start_IT+0x490>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d027      	beq.n	800596c <HAL_DMA_Start_IT+0x430>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a2b      	ldr	r2, [pc, #172]	; (80059d0 <HAL_DMA_Start_IT+0x494>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d022      	beq.n	800596c <HAL_DMA_Start_IT+0x430>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a2a      	ldr	r2, [pc, #168]	; (80059d4 <HAL_DMA_Start_IT+0x498>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d01d      	beq.n	800596c <HAL_DMA_Start_IT+0x430>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a28      	ldr	r2, [pc, #160]	; (80059d8 <HAL_DMA_Start_IT+0x49c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d018      	beq.n	800596c <HAL_DMA_Start_IT+0x430>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a27      	ldr	r2, [pc, #156]	; (80059dc <HAL_DMA_Start_IT+0x4a0>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d013      	beq.n	800596c <HAL_DMA_Start_IT+0x430>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a25      	ldr	r2, [pc, #148]	; (80059e0 <HAL_DMA_Start_IT+0x4a4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00e      	beq.n	800596c <HAL_DMA_Start_IT+0x430>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a24      	ldr	r2, [pc, #144]	; (80059e4 <HAL_DMA_Start_IT+0x4a8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d009      	beq.n	800596c <HAL_DMA_Start_IT+0x430>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a22      	ldr	r2, [pc, #136]	; (80059e8 <HAL_DMA_Start_IT+0x4ac>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d004      	beq.n	800596c <HAL_DMA_Start_IT+0x430>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a21      	ldr	r2, [pc, #132]	; (80059ec <HAL_DMA_Start_IT+0x4b0>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d108      	bne.n	800597e <HAL_DMA_Start_IT+0x442>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0201 	orr.w	r2, r2, #1
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	e012      	b.n	80059a4 <HAL_DMA_Start_IT+0x468>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0201 	orr.w	r2, r2, #1
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	e009      	b.n	80059a4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005996:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80059a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	40020010 	.word	0x40020010
 80059b4:	40020028 	.word	0x40020028
 80059b8:	40020040 	.word	0x40020040
 80059bc:	40020058 	.word	0x40020058
 80059c0:	40020070 	.word	0x40020070
 80059c4:	40020088 	.word	0x40020088
 80059c8:	400200a0 	.word	0x400200a0
 80059cc:	400200b8 	.word	0x400200b8
 80059d0:	40020410 	.word	0x40020410
 80059d4:	40020428 	.word	0x40020428
 80059d8:	40020440 	.word	0x40020440
 80059dc:	40020458 	.word	0x40020458
 80059e0:	40020470 	.word	0x40020470
 80059e4:	40020488 	.word	0x40020488
 80059e8:	400204a0 	.word	0x400204a0
 80059ec:	400204b8 	.word	0x400204b8
 80059f0:	58025408 	.word	0x58025408
 80059f4:	5802541c 	.word	0x5802541c
 80059f8:	58025430 	.word	0x58025430
 80059fc:	58025444 	.word	0x58025444
 8005a00:	58025458 	.word	0x58025458
 8005a04:	5802546c 	.word	0x5802546c
 8005a08:	58025480 	.word	0x58025480
 8005a0c:	58025494 	.word	0x58025494

08005a10 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08a      	sub	sp, #40	; 0x28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a1c:	4b67      	ldr	r3, [pc, #412]	; (8005bbc <HAL_DMA_IRQHandler+0x1ac>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a67      	ldr	r2, [pc, #412]	; (8005bc0 <HAL_DMA_IRQHandler+0x1b0>)
 8005a22:	fba2 2303 	umull	r2, r3, r2, r3
 8005a26:	0a9b      	lsrs	r3, r3, #10
 8005a28:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a34:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a5f      	ldr	r2, [pc, #380]	; (8005bc4 <HAL_DMA_IRQHandler+0x1b4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d04a      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0xd2>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a5d      	ldr	r2, [pc, #372]	; (8005bc8 <HAL_DMA_IRQHandler+0x1b8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d045      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0xd2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a5c      	ldr	r2, [pc, #368]	; (8005bcc <HAL_DMA_IRQHandler+0x1bc>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d040      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0xd2>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a5a      	ldr	r2, [pc, #360]	; (8005bd0 <HAL_DMA_IRQHandler+0x1c0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d03b      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0xd2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a59      	ldr	r2, [pc, #356]	; (8005bd4 <HAL_DMA_IRQHandler+0x1c4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d036      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0xd2>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a57      	ldr	r2, [pc, #348]	; (8005bd8 <HAL_DMA_IRQHandler+0x1c8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d031      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0xd2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a56      	ldr	r2, [pc, #344]	; (8005bdc <HAL_DMA_IRQHandler+0x1cc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d02c      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0xd2>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a54      	ldr	r2, [pc, #336]	; (8005be0 <HAL_DMA_IRQHandler+0x1d0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d027      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0xd2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a53      	ldr	r2, [pc, #332]	; (8005be4 <HAL_DMA_IRQHandler+0x1d4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d022      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0xd2>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a51      	ldr	r2, [pc, #324]	; (8005be8 <HAL_DMA_IRQHandler+0x1d8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d01d      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0xd2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a50      	ldr	r2, [pc, #320]	; (8005bec <HAL_DMA_IRQHandler+0x1dc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d018      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0xd2>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a4e      	ldr	r2, [pc, #312]	; (8005bf0 <HAL_DMA_IRQHandler+0x1e0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d013      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0xd2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a4d      	ldr	r2, [pc, #308]	; (8005bf4 <HAL_DMA_IRQHandler+0x1e4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00e      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0xd2>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a4b      	ldr	r2, [pc, #300]	; (8005bf8 <HAL_DMA_IRQHandler+0x1e8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d009      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0xd2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a4a      	ldr	r2, [pc, #296]	; (8005bfc <HAL_DMA_IRQHandler+0x1ec>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d004      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0xd2>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a48      	ldr	r2, [pc, #288]	; (8005c00 <HAL_DMA_IRQHandler+0x1f0>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d101      	bne.n	8005ae6 <HAL_DMA_IRQHandler+0xd6>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <HAL_DMA_IRQHandler+0xd8>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 842b 	beq.w	8006344 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af2:	f003 031f 	and.w	r3, r3, #31
 8005af6:	2208      	movs	r2, #8
 8005af8:	409a      	lsls	r2, r3
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	4013      	ands	r3, r2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 80a2 	beq.w	8005c48 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a2e      	ldr	r2, [pc, #184]	; (8005bc4 <HAL_DMA_IRQHandler+0x1b4>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d04a      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x194>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a2d      	ldr	r2, [pc, #180]	; (8005bc8 <HAL_DMA_IRQHandler+0x1b8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d045      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x194>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a2b      	ldr	r2, [pc, #172]	; (8005bcc <HAL_DMA_IRQHandler+0x1bc>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d040      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x194>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a2a      	ldr	r2, [pc, #168]	; (8005bd0 <HAL_DMA_IRQHandler+0x1c0>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d03b      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x194>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a28      	ldr	r2, [pc, #160]	; (8005bd4 <HAL_DMA_IRQHandler+0x1c4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d036      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x194>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a27      	ldr	r2, [pc, #156]	; (8005bd8 <HAL_DMA_IRQHandler+0x1c8>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d031      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x194>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a25      	ldr	r2, [pc, #148]	; (8005bdc <HAL_DMA_IRQHandler+0x1cc>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d02c      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x194>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a24      	ldr	r2, [pc, #144]	; (8005be0 <HAL_DMA_IRQHandler+0x1d0>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d027      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x194>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a22      	ldr	r2, [pc, #136]	; (8005be4 <HAL_DMA_IRQHandler+0x1d4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d022      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x194>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a21      	ldr	r2, [pc, #132]	; (8005be8 <HAL_DMA_IRQHandler+0x1d8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d01d      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x194>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a1f      	ldr	r2, [pc, #124]	; (8005bec <HAL_DMA_IRQHandler+0x1dc>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d018      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x194>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a1e      	ldr	r2, [pc, #120]	; (8005bf0 <HAL_DMA_IRQHandler+0x1e0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d013      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x194>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1c      	ldr	r2, [pc, #112]	; (8005bf4 <HAL_DMA_IRQHandler+0x1e4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00e      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x194>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a1b      	ldr	r2, [pc, #108]	; (8005bf8 <HAL_DMA_IRQHandler+0x1e8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d009      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x194>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a19      	ldr	r2, [pc, #100]	; (8005bfc <HAL_DMA_IRQHandler+0x1ec>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d004      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x194>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a18      	ldr	r2, [pc, #96]	; (8005c00 <HAL_DMA_IRQHandler+0x1f0>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d12f      	bne.n	8005c04 <HAL_DMA_IRQHandler+0x1f4>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	bf14      	ite	ne
 8005bb2:	2301      	movne	r3, #1
 8005bb4:	2300      	moveq	r3, #0
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	e02e      	b.n	8005c18 <HAL_DMA_IRQHandler+0x208>
 8005bba:	bf00      	nop
 8005bbc:	20000058 	.word	0x20000058
 8005bc0:	1b4e81b5 	.word	0x1b4e81b5
 8005bc4:	40020010 	.word	0x40020010
 8005bc8:	40020028 	.word	0x40020028
 8005bcc:	40020040 	.word	0x40020040
 8005bd0:	40020058 	.word	0x40020058
 8005bd4:	40020070 	.word	0x40020070
 8005bd8:	40020088 	.word	0x40020088
 8005bdc:	400200a0 	.word	0x400200a0
 8005be0:	400200b8 	.word	0x400200b8
 8005be4:	40020410 	.word	0x40020410
 8005be8:	40020428 	.word	0x40020428
 8005bec:	40020440 	.word	0x40020440
 8005bf0:	40020458 	.word	0x40020458
 8005bf4:	40020470 	.word	0x40020470
 8005bf8:	40020488 	.word	0x40020488
 8005bfc:	400204a0 	.word	0x400204a0
 8005c00:	400204b8 	.word	0x400204b8
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	bf14      	ite	ne
 8005c12:	2301      	movne	r3, #1
 8005c14:	2300      	moveq	r3, #0
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d015      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0204 	bic.w	r2, r2, #4
 8005c2a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c30:	f003 031f 	and.w	r3, r3, #31
 8005c34:	2208      	movs	r2, #8
 8005c36:	409a      	lsls	r2, r3
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c40:	f043 0201 	orr.w	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c4c:	f003 031f 	and.w	r3, r3, #31
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	fa22 f303 	lsr.w	r3, r2, r3
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d06e      	beq.n	8005d3c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a69      	ldr	r2, [pc, #420]	; (8005e08 <HAL_DMA_IRQHandler+0x3f8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d04a      	beq.n	8005cfe <HAL_DMA_IRQHandler+0x2ee>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a67      	ldr	r2, [pc, #412]	; (8005e0c <HAL_DMA_IRQHandler+0x3fc>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d045      	beq.n	8005cfe <HAL_DMA_IRQHandler+0x2ee>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a66      	ldr	r2, [pc, #408]	; (8005e10 <HAL_DMA_IRQHandler+0x400>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d040      	beq.n	8005cfe <HAL_DMA_IRQHandler+0x2ee>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a64      	ldr	r2, [pc, #400]	; (8005e14 <HAL_DMA_IRQHandler+0x404>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d03b      	beq.n	8005cfe <HAL_DMA_IRQHandler+0x2ee>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a63      	ldr	r2, [pc, #396]	; (8005e18 <HAL_DMA_IRQHandler+0x408>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d036      	beq.n	8005cfe <HAL_DMA_IRQHandler+0x2ee>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a61      	ldr	r2, [pc, #388]	; (8005e1c <HAL_DMA_IRQHandler+0x40c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d031      	beq.n	8005cfe <HAL_DMA_IRQHandler+0x2ee>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a60      	ldr	r2, [pc, #384]	; (8005e20 <HAL_DMA_IRQHandler+0x410>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d02c      	beq.n	8005cfe <HAL_DMA_IRQHandler+0x2ee>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a5e      	ldr	r2, [pc, #376]	; (8005e24 <HAL_DMA_IRQHandler+0x414>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d027      	beq.n	8005cfe <HAL_DMA_IRQHandler+0x2ee>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a5d      	ldr	r2, [pc, #372]	; (8005e28 <HAL_DMA_IRQHandler+0x418>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d022      	beq.n	8005cfe <HAL_DMA_IRQHandler+0x2ee>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a5b      	ldr	r2, [pc, #364]	; (8005e2c <HAL_DMA_IRQHandler+0x41c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d01d      	beq.n	8005cfe <HAL_DMA_IRQHandler+0x2ee>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a5a      	ldr	r2, [pc, #360]	; (8005e30 <HAL_DMA_IRQHandler+0x420>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d018      	beq.n	8005cfe <HAL_DMA_IRQHandler+0x2ee>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a58      	ldr	r2, [pc, #352]	; (8005e34 <HAL_DMA_IRQHandler+0x424>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d013      	beq.n	8005cfe <HAL_DMA_IRQHandler+0x2ee>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a57      	ldr	r2, [pc, #348]	; (8005e38 <HAL_DMA_IRQHandler+0x428>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00e      	beq.n	8005cfe <HAL_DMA_IRQHandler+0x2ee>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a55      	ldr	r2, [pc, #340]	; (8005e3c <HAL_DMA_IRQHandler+0x42c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d009      	beq.n	8005cfe <HAL_DMA_IRQHandler+0x2ee>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a54      	ldr	r2, [pc, #336]	; (8005e40 <HAL_DMA_IRQHandler+0x430>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d004      	beq.n	8005cfe <HAL_DMA_IRQHandler+0x2ee>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a52      	ldr	r2, [pc, #328]	; (8005e44 <HAL_DMA_IRQHandler+0x434>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d10a      	bne.n	8005d14 <HAL_DMA_IRQHandler+0x304>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	bf14      	ite	ne
 8005d0c:	2301      	movne	r3, #1
 8005d0e:	2300      	moveq	r3, #0
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	e003      	b.n	8005d1c <HAL_DMA_IRQHandler+0x30c>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00d      	beq.n	8005d3c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d24:	f003 031f 	and.w	r3, r3, #31
 8005d28:	2201      	movs	r2, #1
 8005d2a:	409a      	lsls	r2, r3
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d34:	f043 0202 	orr.w	r2, r3, #2
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d40:	f003 031f 	and.w	r3, r3, #31
 8005d44:	2204      	movs	r2, #4
 8005d46:	409a      	lsls	r2, r3
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 808f 	beq.w	8005e70 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a2c      	ldr	r2, [pc, #176]	; (8005e08 <HAL_DMA_IRQHandler+0x3f8>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d04a      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x3e2>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a2a      	ldr	r2, [pc, #168]	; (8005e0c <HAL_DMA_IRQHandler+0x3fc>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d045      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x3e2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a29      	ldr	r2, [pc, #164]	; (8005e10 <HAL_DMA_IRQHandler+0x400>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d040      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x3e2>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a27      	ldr	r2, [pc, #156]	; (8005e14 <HAL_DMA_IRQHandler+0x404>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d03b      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x3e2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a26      	ldr	r2, [pc, #152]	; (8005e18 <HAL_DMA_IRQHandler+0x408>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d036      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x3e2>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a24      	ldr	r2, [pc, #144]	; (8005e1c <HAL_DMA_IRQHandler+0x40c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d031      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x3e2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a23      	ldr	r2, [pc, #140]	; (8005e20 <HAL_DMA_IRQHandler+0x410>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d02c      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x3e2>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a21      	ldr	r2, [pc, #132]	; (8005e24 <HAL_DMA_IRQHandler+0x414>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d027      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x3e2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a20      	ldr	r2, [pc, #128]	; (8005e28 <HAL_DMA_IRQHandler+0x418>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d022      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x3e2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a1e      	ldr	r2, [pc, #120]	; (8005e2c <HAL_DMA_IRQHandler+0x41c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d01d      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x3e2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a1d      	ldr	r2, [pc, #116]	; (8005e30 <HAL_DMA_IRQHandler+0x420>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d018      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x3e2>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1b      	ldr	r2, [pc, #108]	; (8005e34 <HAL_DMA_IRQHandler+0x424>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d013      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x3e2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a1a      	ldr	r2, [pc, #104]	; (8005e38 <HAL_DMA_IRQHandler+0x428>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00e      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x3e2>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a18      	ldr	r2, [pc, #96]	; (8005e3c <HAL_DMA_IRQHandler+0x42c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d009      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x3e2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a17      	ldr	r2, [pc, #92]	; (8005e40 <HAL_DMA_IRQHandler+0x430>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d004      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x3e2>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a15      	ldr	r2, [pc, #84]	; (8005e44 <HAL_DMA_IRQHandler+0x434>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d12a      	bne.n	8005e48 <HAL_DMA_IRQHandler+0x438>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	bf14      	ite	ne
 8005e00:	2301      	movne	r3, #1
 8005e02:	2300      	moveq	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	e023      	b.n	8005e50 <HAL_DMA_IRQHandler+0x440>
 8005e08:	40020010 	.word	0x40020010
 8005e0c:	40020028 	.word	0x40020028
 8005e10:	40020040 	.word	0x40020040
 8005e14:	40020058 	.word	0x40020058
 8005e18:	40020070 	.word	0x40020070
 8005e1c:	40020088 	.word	0x40020088
 8005e20:	400200a0 	.word	0x400200a0
 8005e24:	400200b8 	.word	0x400200b8
 8005e28:	40020410 	.word	0x40020410
 8005e2c:	40020428 	.word	0x40020428
 8005e30:	40020440 	.word	0x40020440
 8005e34:	40020458 	.word	0x40020458
 8005e38:	40020470 	.word	0x40020470
 8005e3c:	40020488 	.word	0x40020488
 8005e40:	400204a0 	.word	0x400204a0
 8005e44:	400204b8 	.word	0x400204b8
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00d      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e58:	f003 031f 	and.w	r3, r3, #31
 8005e5c:	2204      	movs	r2, #4
 8005e5e:	409a      	lsls	r2, r3
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e68:	f043 0204 	orr.w	r2, r3, #4
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e74:	f003 031f 	and.w	r3, r3, #31
 8005e78:	2210      	movs	r2, #16
 8005e7a:	409a      	lsls	r2, r3
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 80a6 	beq.w	8005fd2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a85      	ldr	r2, [pc, #532]	; (80060a0 <HAL_DMA_IRQHandler+0x690>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d04a      	beq.n	8005f26 <HAL_DMA_IRQHandler+0x516>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a83      	ldr	r2, [pc, #524]	; (80060a4 <HAL_DMA_IRQHandler+0x694>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d045      	beq.n	8005f26 <HAL_DMA_IRQHandler+0x516>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a82      	ldr	r2, [pc, #520]	; (80060a8 <HAL_DMA_IRQHandler+0x698>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d040      	beq.n	8005f26 <HAL_DMA_IRQHandler+0x516>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a80      	ldr	r2, [pc, #512]	; (80060ac <HAL_DMA_IRQHandler+0x69c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d03b      	beq.n	8005f26 <HAL_DMA_IRQHandler+0x516>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a7f      	ldr	r2, [pc, #508]	; (80060b0 <HAL_DMA_IRQHandler+0x6a0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d036      	beq.n	8005f26 <HAL_DMA_IRQHandler+0x516>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a7d      	ldr	r2, [pc, #500]	; (80060b4 <HAL_DMA_IRQHandler+0x6a4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d031      	beq.n	8005f26 <HAL_DMA_IRQHandler+0x516>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a7c      	ldr	r2, [pc, #496]	; (80060b8 <HAL_DMA_IRQHandler+0x6a8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d02c      	beq.n	8005f26 <HAL_DMA_IRQHandler+0x516>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a7a      	ldr	r2, [pc, #488]	; (80060bc <HAL_DMA_IRQHandler+0x6ac>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d027      	beq.n	8005f26 <HAL_DMA_IRQHandler+0x516>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a79      	ldr	r2, [pc, #484]	; (80060c0 <HAL_DMA_IRQHandler+0x6b0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d022      	beq.n	8005f26 <HAL_DMA_IRQHandler+0x516>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a77      	ldr	r2, [pc, #476]	; (80060c4 <HAL_DMA_IRQHandler+0x6b4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d01d      	beq.n	8005f26 <HAL_DMA_IRQHandler+0x516>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a76      	ldr	r2, [pc, #472]	; (80060c8 <HAL_DMA_IRQHandler+0x6b8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d018      	beq.n	8005f26 <HAL_DMA_IRQHandler+0x516>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a74      	ldr	r2, [pc, #464]	; (80060cc <HAL_DMA_IRQHandler+0x6bc>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d013      	beq.n	8005f26 <HAL_DMA_IRQHandler+0x516>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a73      	ldr	r2, [pc, #460]	; (80060d0 <HAL_DMA_IRQHandler+0x6c0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00e      	beq.n	8005f26 <HAL_DMA_IRQHandler+0x516>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a71      	ldr	r2, [pc, #452]	; (80060d4 <HAL_DMA_IRQHandler+0x6c4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d009      	beq.n	8005f26 <HAL_DMA_IRQHandler+0x516>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a70      	ldr	r2, [pc, #448]	; (80060d8 <HAL_DMA_IRQHandler+0x6c8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d004      	beq.n	8005f26 <HAL_DMA_IRQHandler+0x516>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a6e      	ldr	r2, [pc, #440]	; (80060dc <HAL_DMA_IRQHandler+0x6cc>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d10a      	bne.n	8005f3c <HAL_DMA_IRQHandler+0x52c>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0308 	and.w	r3, r3, #8
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	bf14      	ite	ne
 8005f34:	2301      	movne	r3, #1
 8005f36:	2300      	moveq	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	e009      	b.n	8005f50 <HAL_DMA_IRQHandler+0x540>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0304 	and.w	r3, r3, #4
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bf14      	ite	ne
 8005f4a:	2301      	movne	r3, #1
 8005f4c:	2300      	moveq	r3, #0
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d03e      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f58:	f003 031f 	and.w	r3, r3, #31
 8005f5c:	2210      	movs	r2, #16
 8005f5e:	409a      	lsls	r2, r3
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d018      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d108      	bne.n	8005f92 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d024      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	4798      	blx	r3
 8005f90:	e01f      	b.n	8005fd2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d01b      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	4798      	blx	r3
 8005fa2:	e016      	b.n	8005fd2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d107      	bne.n	8005fc2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0208 	bic.w	r2, r2, #8
 8005fc0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd6:	f003 031f 	and.w	r3, r3, #31
 8005fda:	2220      	movs	r2, #32
 8005fdc:	409a      	lsls	r2, r3
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 8110 	beq.w	8006208 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a2c      	ldr	r2, [pc, #176]	; (80060a0 <HAL_DMA_IRQHandler+0x690>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d04a      	beq.n	8006088 <HAL_DMA_IRQHandler+0x678>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a2b      	ldr	r2, [pc, #172]	; (80060a4 <HAL_DMA_IRQHandler+0x694>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d045      	beq.n	8006088 <HAL_DMA_IRQHandler+0x678>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a29      	ldr	r2, [pc, #164]	; (80060a8 <HAL_DMA_IRQHandler+0x698>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d040      	beq.n	8006088 <HAL_DMA_IRQHandler+0x678>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a28      	ldr	r2, [pc, #160]	; (80060ac <HAL_DMA_IRQHandler+0x69c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d03b      	beq.n	8006088 <HAL_DMA_IRQHandler+0x678>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a26      	ldr	r2, [pc, #152]	; (80060b0 <HAL_DMA_IRQHandler+0x6a0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d036      	beq.n	8006088 <HAL_DMA_IRQHandler+0x678>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a25      	ldr	r2, [pc, #148]	; (80060b4 <HAL_DMA_IRQHandler+0x6a4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d031      	beq.n	8006088 <HAL_DMA_IRQHandler+0x678>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a23      	ldr	r2, [pc, #140]	; (80060b8 <HAL_DMA_IRQHandler+0x6a8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d02c      	beq.n	8006088 <HAL_DMA_IRQHandler+0x678>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a22      	ldr	r2, [pc, #136]	; (80060bc <HAL_DMA_IRQHandler+0x6ac>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d027      	beq.n	8006088 <HAL_DMA_IRQHandler+0x678>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a20      	ldr	r2, [pc, #128]	; (80060c0 <HAL_DMA_IRQHandler+0x6b0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d022      	beq.n	8006088 <HAL_DMA_IRQHandler+0x678>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a1f      	ldr	r2, [pc, #124]	; (80060c4 <HAL_DMA_IRQHandler+0x6b4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d01d      	beq.n	8006088 <HAL_DMA_IRQHandler+0x678>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1d      	ldr	r2, [pc, #116]	; (80060c8 <HAL_DMA_IRQHandler+0x6b8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d018      	beq.n	8006088 <HAL_DMA_IRQHandler+0x678>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a1c      	ldr	r2, [pc, #112]	; (80060cc <HAL_DMA_IRQHandler+0x6bc>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d013      	beq.n	8006088 <HAL_DMA_IRQHandler+0x678>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a1a      	ldr	r2, [pc, #104]	; (80060d0 <HAL_DMA_IRQHandler+0x6c0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00e      	beq.n	8006088 <HAL_DMA_IRQHandler+0x678>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a19      	ldr	r2, [pc, #100]	; (80060d4 <HAL_DMA_IRQHandler+0x6c4>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d009      	beq.n	8006088 <HAL_DMA_IRQHandler+0x678>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a17      	ldr	r2, [pc, #92]	; (80060d8 <HAL_DMA_IRQHandler+0x6c8>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d004      	beq.n	8006088 <HAL_DMA_IRQHandler+0x678>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a16      	ldr	r2, [pc, #88]	; (80060dc <HAL_DMA_IRQHandler+0x6cc>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d12b      	bne.n	80060e0 <HAL_DMA_IRQHandler+0x6d0>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0310 	and.w	r3, r3, #16
 8006092:	2b00      	cmp	r3, #0
 8006094:	bf14      	ite	ne
 8006096:	2301      	movne	r3, #1
 8006098:	2300      	moveq	r3, #0
 800609a:	b2db      	uxtb	r3, r3
 800609c:	e02a      	b.n	80060f4 <HAL_DMA_IRQHandler+0x6e4>
 800609e:	bf00      	nop
 80060a0:	40020010 	.word	0x40020010
 80060a4:	40020028 	.word	0x40020028
 80060a8:	40020040 	.word	0x40020040
 80060ac:	40020058 	.word	0x40020058
 80060b0:	40020070 	.word	0x40020070
 80060b4:	40020088 	.word	0x40020088
 80060b8:	400200a0 	.word	0x400200a0
 80060bc:	400200b8 	.word	0x400200b8
 80060c0:	40020410 	.word	0x40020410
 80060c4:	40020428 	.word	0x40020428
 80060c8:	40020440 	.word	0x40020440
 80060cc:	40020458 	.word	0x40020458
 80060d0:	40020470 	.word	0x40020470
 80060d4:	40020488 	.word	0x40020488
 80060d8:	400204a0 	.word	0x400204a0
 80060dc:	400204b8 	.word	0x400204b8
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	bf14      	ite	ne
 80060ee:	2301      	movne	r3, #1
 80060f0:	2300      	moveq	r3, #0
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 8087 	beq.w	8006208 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060fe:	f003 031f 	and.w	r3, r3, #31
 8006102:	2220      	movs	r2, #32
 8006104:	409a      	lsls	r2, r3
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b04      	cmp	r3, #4
 8006114:	d139      	bne.n	800618a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0216 	bic.w	r2, r2, #22
 8006124:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	695a      	ldr	r2, [r3, #20]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006134:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d103      	bne.n	8006146 <HAL_DMA_IRQHandler+0x736>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006142:	2b00      	cmp	r3, #0
 8006144:	d007      	beq.n	8006156 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 0208 	bic.w	r2, r2, #8
 8006154:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615a:	f003 031f 	and.w	r3, r3, #31
 800615e:	223f      	movs	r2, #63	; 0x3f
 8006160:	409a      	lsls	r2, r3
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 834a 	beq.w	8006814 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	4798      	blx	r3
          }
          return;
 8006188:	e344      	b.n	8006814 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d018      	beq.n	80061ca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d108      	bne.n	80061b8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d02c      	beq.n	8006208 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	4798      	blx	r3
 80061b6:	e027      	b.n	8006208 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d023      	beq.n	8006208 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	4798      	blx	r3
 80061c8:	e01e      	b.n	8006208 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10f      	bne.n	80061f8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0210 	bic.w	r2, r2, #16
 80061e6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8306 	beq.w	800681e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 8088 	beq.w	8006330 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2204      	movs	r2, #4
 8006224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a7a      	ldr	r2, [pc, #488]	; (8006418 <HAL_DMA_IRQHandler+0xa08>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d04a      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x8b8>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a79      	ldr	r2, [pc, #484]	; (800641c <HAL_DMA_IRQHandler+0xa0c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d045      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x8b8>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a77      	ldr	r2, [pc, #476]	; (8006420 <HAL_DMA_IRQHandler+0xa10>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d040      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x8b8>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a76      	ldr	r2, [pc, #472]	; (8006424 <HAL_DMA_IRQHandler+0xa14>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d03b      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x8b8>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a74      	ldr	r2, [pc, #464]	; (8006428 <HAL_DMA_IRQHandler+0xa18>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d036      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x8b8>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a73      	ldr	r2, [pc, #460]	; (800642c <HAL_DMA_IRQHandler+0xa1c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d031      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x8b8>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a71      	ldr	r2, [pc, #452]	; (8006430 <HAL_DMA_IRQHandler+0xa20>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d02c      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x8b8>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a70      	ldr	r2, [pc, #448]	; (8006434 <HAL_DMA_IRQHandler+0xa24>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d027      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x8b8>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a6e      	ldr	r2, [pc, #440]	; (8006438 <HAL_DMA_IRQHandler+0xa28>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d022      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x8b8>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a6d      	ldr	r2, [pc, #436]	; (800643c <HAL_DMA_IRQHandler+0xa2c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d01d      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x8b8>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a6b      	ldr	r2, [pc, #428]	; (8006440 <HAL_DMA_IRQHandler+0xa30>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d018      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x8b8>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a6a      	ldr	r2, [pc, #424]	; (8006444 <HAL_DMA_IRQHandler+0xa34>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d013      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x8b8>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a68      	ldr	r2, [pc, #416]	; (8006448 <HAL_DMA_IRQHandler+0xa38>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00e      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x8b8>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a67      	ldr	r2, [pc, #412]	; (800644c <HAL_DMA_IRQHandler+0xa3c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d009      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x8b8>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a65      	ldr	r2, [pc, #404]	; (8006450 <HAL_DMA_IRQHandler+0xa40>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d004      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x8b8>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a64      	ldr	r2, [pc, #400]	; (8006454 <HAL_DMA_IRQHandler+0xa44>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d108      	bne.n	80062da <HAL_DMA_IRQHandler+0x8ca>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0201 	bic.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	e007      	b.n	80062ea <HAL_DMA_IRQHandler+0x8da>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0201 	bic.w	r2, r2, #1
 80062e8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3301      	adds	r3, #1
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d307      	bcc.n	8006306 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1f2      	bne.n	80062ea <HAL_DMA_IRQHandler+0x8da>
 8006304:	e000      	b.n	8006308 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006306:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d004      	beq.n	8006320 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2203      	movs	r2, #3
 800631a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800631e:	e003      	b.n	8006328 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 8272 	beq.w	800681e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
 8006342:	e26c      	b.n	800681e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a43      	ldr	r2, [pc, #268]	; (8006458 <HAL_DMA_IRQHandler+0xa48>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d022      	beq.n	8006394 <HAL_DMA_IRQHandler+0x984>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a42      	ldr	r2, [pc, #264]	; (800645c <HAL_DMA_IRQHandler+0xa4c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d01d      	beq.n	8006394 <HAL_DMA_IRQHandler+0x984>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a40      	ldr	r2, [pc, #256]	; (8006460 <HAL_DMA_IRQHandler+0xa50>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d018      	beq.n	8006394 <HAL_DMA_IRQHandler+0x984>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a3f      	ldr	r2, [pc, #252]	; (8006464 <HAL_DMA_IRQHandler+0xa54>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d013      	beq.n	8006394 <HAL_DMA_IRQHandler+0x984>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a3d      	ldr	r2, [pc, #244]	; (8006468 <HAL_DMA_IRQHandler+0xa58>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00e      	beq.n	8006394 <HAL_DMA_IRQHandler+0x984>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a3c      	ldr	r2, [pc, #240]	; (800646c <HAL_DMA_IRQHandler+0xa5c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d009      	beq.n	8006394 <HAL_DMA_IRQHandler+0x984>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a3a      	ldr	r2, [pc, #232]	; (8006470 <HAL_DMA_IRQHandler+0xa60>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d004      	beq.n	8006394 <HAL_DMA_IRQHandler+0x984>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a39      	ldr	r2, [pc, #228]	; (8006474 <HAL_DMA_IRQHandler+0xa64>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d101      	bne.n	8006398 <HAL_DMA_IRQHandler+0x988>
 8006394:	2301      	movs	r3, #1
 8006396:	e000      	b.n	800639a <HAL_DMA_IRQHandler+0x98a>
 8006398:	2300      	movs	r3, #0
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 823f 	beq.w	800681e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ac:	f003 031f 	and.w	r3, r3, #31
 80063b0:	2204      	movs	r2, #4
 80063b2:	409a      	lsls	r2, r3
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	4013      	ands	r3, r2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 80cd 	beq.w	8006558 <HAL_DMA_IRQHandler+0xb48>
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 80c7 	beq.w	8006558 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ce:	f003 031f 	and.w	r3, r3, #31
 80063d2:	2204      	movs	r2, #4
 80063d4:	409a      	lsls	r2, r3
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d049      	beq.n	8006478 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d109      	bne.n	8006402 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 8210 	beq.w	8006818 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006400:	e20a      	b.n	8006818 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 8206 	beq.w	8006818 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006414:	e200      	b.n	8006818 <HAL_DMA_IRQHandler+0xe08>
 8006416:	bf00      	nop
 8006418:	40020010 	.word	0x40020010
 800641c:	40020028 	.word	0x40020028
 8006420:	40020040 	.word	0x40020040
 8006424:	40020058 	.word	0x40020058
 8006428:	40020070 	.word	0x40020070
 800642c:	40020088 	.word	0x40020088
 8006430:	400200a0 	.word	0x400200a0
 8006434:	400200b8 	.word	0x400200b8
 8006438:	40020410 	.word	0x40020410
 800643c:	40020428 	.word	0x40020428
 8006440:	40020440 	.word	0x40020440
 8006444:	40020458 	.word	0x40020458
 8006448:	40020470 	.word	0x40020470
 800644c:	40020488 	.word	0x40020488
 8006450:	400204a0 	.word	0x400204a0
 8006454:	400204b8 	.word	0x400204b8
 8006458:	58025408 	.word	0x58025408
 800645c:	5802541c 	.word	0x5802541c
 8006460:	58025430 	.word	0x58025430
 8006464:	58025444 	.word	0x58025444
 8006468:	58025458 	.word	0x58025458
 800646c:	5802546c 	.word	0x5802546c
 8006470:	58025480 	.word	0x58025480
 8006474:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f003 0320 	and.w	r3, r3, #32
 800647e:	2b00      	cmp	r3, #0
 8006480:	d160      	bne.n	8006544 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a8c      	ldr	r2, [pc, #560]	; (80066b8 <HAL_DMA_IRQHandler+0xca8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d04a      	beq.n	8006522 <HAL_DMA_IRQHandler+0xb12>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a8a      	ldr	r2, [pc, #552]	; (80066bc <HAL_DMA_IRQHandler+0xcac>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d045      	beq.n	8006522 <HAL_DMA_IRQHandler+0xb12>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a89      	ldr	r2, [pc, #548]	; (80066c0 <HAL_DMA_IRQHandler+0xcb0>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d040      	beq.n	8006522 <HAL_DMA_IRQHandler+0xb12>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a87      	ldr	r2, [pc, #540]	; (80066c4 <HAL_DMA_IRQHandler+0xcb4>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d03b      	beq.n	8006522 <HAL_DMA_IRQHandler+0xb12>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a86      	ldr	r2, [pc, #536]	; (80066c8 <HAL_DMA_IRQHandler+0xcb8>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d036      	beq.n	8006522 <HAL_DMA_IRQHandler+0xb12>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a84      	ldr	r2, [pc, #528]	; (80066cc <HAL_DMA_IRQHandler+0xcbc>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d031      	beq.n	8006522 <HAL_DMA_IRQHandler+0xb12>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a83      	ldr	r2, [pc, #524]	; (80066d0 <HAL_DMA_IRQHandler+0xcc0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d02c      	beq.n	8006522 <HAL_DMA_IRQHandler+0xb12>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a81      	ldr	r2, [pc, #516]	; (80066d4 <HAL_DMA_IRQHandler+0xcc4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d027      	beq.n	8006522 <HAL_DMA_IRQHandler+0xb12>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a80      	ldr	r2, [pc, #512]	; (80066d8 <HAL_DMA_IRQHandler+0xcc8>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d022      	beq.n	8006522 <HAL_DMA_IRQHandler+0xb12>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a7e      	ldr	r2, [pc, #504]	; (80066dc <HAL_DMA_IRQHandler+0xccc>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d01d      	beq.n	8006522 <HAL_DMA_IRQHandler+0xb12>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a7d      	ldr	r2, [pc, #500]	; (80066e0 <HAL_DMA_IRQHandler+0xcd0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d018      	beq.n	8006522 <HAL_DMA_IRQHandler+0xb12>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a7b      	ldr	r2, [pc, #492]	; (80066e4 <HAL_DMA_IRQHandler+0xcd4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d013      	beq.n	8006522 <HAL_DMA_IRQHandler+0xb12>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a7a      	ldr	r2, [pc, #488]	; (80066e8 <HAL_DMA_IRQHandler+0xcd8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d00e      	beq.n	8006522 <HAL_DMA_IRQHandler+0xb12>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a78      	ldr	r2, [pc, #480]	; (80066ec <HAL_DMA_IRQHandler+0xcdc>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d009      	beq.n	8006522 <HAL_DMA_IRQHandler+0xb12>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a77      	ldr	r2, [pc, #476]	; (80066f0 <HAL_DMA_IRQHandler+0xce0>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d004      	beq.n	8006522 <HAL_DMA_IRQHandler+0xb12>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a75      	ldr	r2, [pc, #468]	; (80066f4 <HAL_DMA_IRQHandler+0xce4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d108      	bne.n	8006534 <HAL_DMA_IRQHandler+0xb24>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0208 	bic.w	r2, r2, #8
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	e007      	b.n	8006544 <HAL_DMA_IRQHandler+0xb34>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0204 	bic.w	r2, r2, #4
 8006542:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 8165 	beq.w	8006818 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006556:	e15f      	b.n	8006818 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800655c:	f003 031f 	and.w	r3, r3, #31
 8006560:	2202      	movs	r2, #2
 8006562:	409a      	lsls	r2, r3
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	4013      	ands	r3, r2
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 80c5 	beq.w	80066f8 <HAL_DMA_IRQHandler+0xce8>
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 80bf 	beq.w	80066f8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800657e:	f003 031f 	and.w	r3, r3, #31
 8006582:	2202      	movs	r2, #2
 8006584:	409a      	lsls	r2, r3
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d018      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d109      	bne.n	80065b2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 813a 	beq.w	800681c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065b0:	e134      	b.n	800681c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 8130 	beq.w	800681c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065c4:	e12a      	b.n	800681c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d168      	bne.n	80066a2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a38      	ldr	r2, [pc, #224]	; (80066b8 <HAL_DMA_IRQHandler+0xca8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d04a      	beq.n	8006670 <HAL_DMA_IRQHandler+0xc60>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a37      	ldr	r2, [pc, #220]	; (80066bc <HAL_DMA_IRQHandler+0xcac>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d045      	beq.n	8006670 <HAL_DMA_IRQHandler+0xc60>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a35      	ldr	r2, [pc, #212]	; (80066c0 <HAL_DMA_IRQHandler+0xcb0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d040      	beq.n	8006670 <HAL_DMA_IRQHandler+0xc60>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a34      	ldr	r2, [pc, #208]	; (80066c4 <HAL_DMA_IRQHandler+0xcb4>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d03b      	beq.n	8006670 <HAL_DMA_IRQHandler+0xc60>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a32      	ldr	r2, [pc, #200]	; (80066c8 <HAL_DMA_IRQHandler+0xcb8>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d036      	beq.n	8006670 <HAL_DMA_IRQHandler+0xc60>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a31      	ldr	r2, [pc, #196]	; (80066cc <HAL_DMA_IRQHandler+0xcbc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d031      	beq.n	8006670 <HAL_DMA_IRQHandler+0xc60>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a2f      	ldr	r2, [pc, #188]	; (80066d0 <HAL_DMA_IRQHandler+0xcc0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d02c      	beq.n	8006670 <HAL_DMA_IRQHandler+0xc60>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a2e      	ldr	r2, [pc, #184]	; (80066d4 <HAL_DMA_IRQHandler+0xcc4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d027      	beq.n	8006670 <HAL_DMA_IRQHandler+0xc60>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a2c      	ldr	r2, [pc, #176]	; (80066d8 <HAL_DMA_IRQHandler+0xcc8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d022      	beq.n	8006670 <HAL_DMA_IRQHandler+0xc60>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a2b      	ldr	r2, [pc, #172]	; (80066dc <HAL_DMA_IRQHandler+0xccc>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d01d      	beq.n	8006670 <HAL_DMA_IRQHandler+0xc60>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a29      	ldr	r2, [pc, #164]	; (80066e0 <HAL_DMA_IRQHandler+0xcd0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d018      	beq.n	8006670 <HAL_DMA_IRQHandler+0xc60>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a28      	ldr	r2, [pc, #160]	; (80066e4 <HAL_DMA_IRQHandler+0xcd4>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d013      	beq.n	8006670 <HAL_DMA_IRQHandler+0xc60>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a26      	ldr	r2, [pc, #152]	; (80066e8 <HAL_DMA_IRQHandler+0xcd8>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00e      	beq.n	8006670 <HAL_DMA_IRQHandler+0xc60>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a25      	ldr	r2, [pc, #148]	; (80066ec <HAL_DMA_IRQHandler+0xcdc>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d009      	beq.n	8006670 <HAL_DMA_IRQHandler+0xc60>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a23      	ldr	r2, [pc, #140]	; (80066f0 <HAL_DMA_IRQHandler+0xce0>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d004      	beq.n	8006670 <HAL_DMA_IRQHandler+0xc60>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a22      	ldr	r2, [pc, #136]	; (80066f4 <HAL_DMA_IRQHandler+0xce4>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d108      	bne.n	8006682 <HAL_DMA_IRQHandler+0xc72>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0214 	bic.w	r2, r2, #20
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	e007      	b.n	8006692 <HAL_DMA_IRQHandler+0xc82>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 020a 	bic.w	r2, r2, #10
 8006690:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 80b8 	beq.w	800681c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066b4:	e0b2      	b.n	800681c <HAL_DMA_IRQHandler+0xe0c>
 80066b6:	bf00      	nop
 80066b8:	40020010 	.word	0x40020010
 80066bc:	40020028 	.word	0x40020028
 80066c0:	40020040 	.word	0x40020040
 80066c4:	40020058 	.word	0x40020058
 80066c8:	40020070 	.word	0x40020070
 80066cc:	40020088 	.word	0x40020088
 80066d0:	400200a0 	.word	0x400200a0
 80066d4:	400200b8 	.word	0x400200b8
 80066d8:	40020410 	.word	0x40020410
 80066dc:	40020428 	.word	0x40020428
 80066e0:	40020440 	.word	0x40020440
 80066e4:	40020458 	.word	0x40020458
 80066e8:	40020470 	.word	0x40020470
 80066ec:	40020488 	.word	0x40020488
 80066f0:	400204a0 	.word	0x400204a0
 80066f4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066fc:	f003 031f 	and.w	r3, r3, #31
 8006700:	2208      	movs	r2, #8
 8006702:	409a      	lsls	r2, r3
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	4013      	ands	r3, r2
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 8088 	beq.w	800681e <HAL_DMA_IRQHandler+0xe0e>
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 8082 	beq.w	800681e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a41      	ldr	r2, [pc, #260]	; (8006824 <HAL_DMA_IRQHandler+0xe14>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d04a      	beq.n	80067ba <HAL_DMA_IRQHandler+0xdaa>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a3f      	ldr	r2, [pc, #252]	; (8006828 <HAL_DMA_IRQHandler+0xe18>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d045      	beq.n	80067ba <HAL_DMA_IRQHandler+0xdaa>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a3e      	ldr	r2, [pc, #248]	; (800682c <HAL_DMA_IRQHandler+0xe1c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d040      	beq.n	80067ba <HAL_DMA_IRQHandler+0xdaa>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a3c      	ldr	r2, [pc, #240]	; (8006830 <HAL_DMA_IRQHandler+0xe20>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d03b      	beq.n	80067ba <HAL_DMA_IRQHandler+0xdaa>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a3b      	ldr	r2, [pc, #236]	; (8006834 <HAL_DMA_IRQHandler+0xe24>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d036      	beq.n	80067ba <HAL_DMA_IRQHandler+0xdaa>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a39      	ldr	r2, [pc, #228]	; (8006838 <HAL_DMA_IRQHandler+0xe28>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d031      	beq.n	80067ba <HAL_DMA_IRQHandler+0xdaa>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a38      	ldr	r2, [pc, #224]	; (800683c <HAL_DMA_IRQHandler+0xe2c>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d02c      	beq.n	80067ba <HAL_DMA_IRQHandler+0xdaa>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a36      	ldr	r2, [pc, #216]	; (8006840 <HAL_DMA_IRQHandler+0xe30>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d027      	beq.n	80067ba <HAL_DMA_IRQHandler+0xdaa>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a35      	ldr	r2, [pc, #212]	; (8006844 <HAL_DMA_IRQHandler+0xe34>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d022      	beq.n	80067ba <HAL_DMA_IRQHandler+0xdaa>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a33      	ldr	r2, [pc, #204]	; (8006848 <HAL_DMA_IRQHandler+0xe38>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d01d      	beq.n	80067ba <HAL_DMA_IRQHandler+0xdaa>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a32      	ldr	r2, [pc, #200]	; (800684c <HAL_DMA_IRQHandler+0xe3c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d018      	beq.n	80067ba <HAL_DMA_IRQHandler+0xdaa>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a30      	ldr	r2, [pc, #192]	; (8006850 <HAL_DMA_IRQHandler+0xe40>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d013      	beq.n	80067ba <HAL_DMA_IRQHandler+0xdaa>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a2f      	ldr	r2, [pc, #188]	; (8006854 <HAL_DMA_IRQHandler+0xe44>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d00e      	beq.n	80067ba <HAL_DMA_IRQHandler+0xdaa>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a2d      	ldr	r2, [pc, #180]	; (8006858 <HAL_DMA_IRQHandler+0xe48>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d009      	beq.n	80067ba <HAL_DMA_IRQHandler+0xdaa>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a2c      	ldr	r2, [pc, #176]	; (800685c <HAL_DMA_IRQHandler+0xe4c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d004      	beq.n	80067ba <HAL_DMA_IRQHandler+0xdaa>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a2a      	ldr	r2, [pc, #168]	; (8006860 <HAL_DMA_IRQHandler+0xe50>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d108      	bne.n	80067cc <HAL_DMA_IRQHandler+0xdbc>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 021c 	bic.w	r2, r2, #28
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	e007      	b.n	80067dc <HAL_DMA_IRQHandler+0xdcc>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 020e 	bic.w	r2, r2, #14
 80067da:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e0:	f003 031f 	and.w	r3, r3, #31
 80067e4:	2201      	movs	r2, #1
 80067e6:	409a      	lsls	r2, r3
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006806:	2b00      	cmp	r3, #0
 8006808:	d009      	beq.n	800681e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	4798      	blx	r3
 8006812:	e004      	b.n	800681e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006814:	bf00      	nop
 8006816:	e002      	b.n	800681e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006818:	bf00      	nop
 800681a:	e000      	b.n	800681e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800681c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800681e:	3728      	adds	r7, #40	; 0x28
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	40020010 	.word	0x40020010
 8006828:	40020028 	.word	0x40020028
 800682c:	40020040 	.word	0x40020040
 8006830:	40020058 	.word	0x40020058
 8006834:	40020070 	.word	0x40020070
 8006838:	40020088 	.word	0x40020088
 800683c:	400200a0 	.word	0x400200a0
 8006840:	400200b8 	.word	0x400200b8
 8006844:	40020410 	.word	0x40020410
 8006848:	40020428 	.word	0x40020428
 800684c:	40020440 	.word	0x40020440
 8006850:	40020458 	.word	0x40020458
 8006854:	40020470 	.word	0x40020470
 8006858:	40020488 	.word	0x40020488
 800685c:	400204a0 	.word	0x400204a0
 8006860:	400204b8 	.word	0x400204b8

08006864 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
 8006870:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006876:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800687c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a84      	ldr	r2, [pc, #528]	; (8006a94 <DMA_SetConfig+0x230>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d072      	beq.n	800696e <DMA_SetConfig+0x10a>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a82      	ldr	r2, [pc, #520]	; (8006a98 <DMA_SetConfig+0x234>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d06d      	beq.n	800696e <DMA_SetConfig+0x10a>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a81      	ldr	r2, [pc, #516]	; (8006a9c <DMA_SetConfig+0x238>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d068      	beq.n	800696e <DMA_SetConfig+0x10a>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a7f      	ldr	r2, [pc, #508]	; (8006aa0 <DMA_SetConfig+0x23c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d063      	beq.n	800696e <DMA_SetConfig+0x10a>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a7e      	ldr	r2, [pc, #504]	; (8006aa4 <DMA_SetConfig+0x240>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d05e      	beq.n	800696e <DMA_SetConfig+0x10a>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a7c      	ldr	r2, [pc, #496]	; (8006aa8 <DMA_SetConfig+0x244>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d059      	beq.n	800696e <DMA_SetConfig+0x10a>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a7b      	ldr	r2, [pc, #492]	; (8006aac <DMA_SetConfig+0x248>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d054      	beq.n	800696e <DMA_SetConfig+0x10a>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a79      	ldr	r2, [pc, #484]	; (8006ab0 <DMA_SetConfig+0x24c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d04f      	beq.n	800696e <DMA_SetConfig+0x10a>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a78      	ldr	r2, [pc, #480]	; (8006ab4 <DMA_SetConfig+0x250>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d04a      	beq.n	800696e <DMA_SetConfig+0x10a>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a76      	ldr	r2, [pc, #472]	; (8006ab8 <DMA_SetConfig+0x254>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d045      	beq.n	800696e <DMA_SetConfig+0x10a>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a75      	ldr	r2, [pc, #468]	; (8006abc <DMA_SetConfig+0x258>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d040      	beq.n	800696e <DMA_SetConfig+0x10a>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a73      	ldr	r2, [pc, #460]	; (8006ac0 <DMA_SetConfig+0x25c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d03b      	beq.n	800696e <DMA_SetConfig+0x10a>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a72      	ldr	r2, [pc, #456]	; (8006ac4 <DMA_SetConfig+0x260>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d036      	beq.n	800696e <DMA_SetConfig+0x10a>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a70      	ldr	r2, [pc, #448]	; (8006ac8 <DMA_SetConfig+0x264>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d031      	beq.n	800696e <DMA_SetConfig+0x10a>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a6f      	ldr	r2, [pc, #444]	; (8006acc <DMA_SetConfig+0x268>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d02c      	beq.n	800696e <DMA_SetConfig+0x10a>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a6d      	ldr	r2, [pc, #436]	; (8006ad0 <DMA_SetConfig+0x26c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d027      	beq.n	800696e <DMA_SetConfig+0x10a>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a6c      	ldr	r2, [pc, #432]	; (8006ad4 <DMA_SetConfig+0x270>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d022      	beq.n	800696e <DMA_SetConfig+0x10a>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a6a      	ldr	r2, [pc, #424]	; (8006ad8 <DMA_SetConfig+0x274>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d01d      	beq.n	800696e <DMA_SetConfig+0x10a>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a69      	ldr	r2, [pc, #420]	; (8006adc <DMA_SetConfig+0x278>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d018      	beq.n	800696e <DMA_SetConfig+0x10a>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a67      	ldr	r2, [pc, #412]	; (8006ae0 <DMA_SetConfig+0x27c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d013      	beq.n	800696e <DMA_SetConfig+0x10a>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a66      	ldr	r2, [pc, #408]	; (8006ae4 <DMA_SetConfig+0x280>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d00e      	beq.n	800696e <DMA_SetConfig+0x10a>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a64      	ldr	r2, [pc, #400]	; (8006ae8 <DMA_SetConfig+0x284>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d009      	beq.n	800696e <DMA_SetConfig+0x10a>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a63      	ldr	r2, [pc, #396]	; (8006aec <DMA_SetConfig+0x288>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d004      	beq.n	800696e <DMA_SetConfig+0x10a>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a61      	ldr	r2, [pc, #388]	; (8006af0 <DMA_SetConfig+0x28c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d101      	bne.n	8006972 <DMA_SetConfig+0x10e>
 800696e:	2301      	movs	r3, #1
 8006970:	e000      	b.n	8006974 <DMA_SetConfig+0x110>
 8006972:	2300      	movs	r3, #0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00d      	beq.n	8006994 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006980:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006986:	2b00      	cmp	r3, #0
 8006988:	d004      	beq.n	8006994 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006992:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a3e      	ldr	r2, [pc, #248]	; (8006a94 <DMA_SetConfig+0x230>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d04a      	beq.n	8006a34 <DMA_SetConfig+0x1d0>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a3d      	ldr	r2, [pc, #244]	; (8006a98 <DMA_SetConfig+0x234>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d045      	beq.n	8006a34 <DMA_SetConfig+0x1d0>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a3b      	ldr	r2, [pc, #236]	; (8006a9c <DMA_SetConfig+0x238>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d040      	beq.n	8006a34 <DMA_SetConfig+0x1d0>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a3a      	ldr	r2, [pc, #232]	; (8006aa0 <DMA_SetConfig+0x23c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d03b      	beq.n	8006a34 <DMA_SetConfig+0x1d0>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a38      	ldr	r2, [pc, #224]	; (8006aa4 <DMA_SetConfig+0x240>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d036      	beq.n	8006a34 <DMA_SetConfig+0x1d0>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a37      	ldr	r2, [pc, #220]	; (8006aa8 <DMA_SetConfig+0x244>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d031      	beq.n	8006a34 <DMA_SetConfig+0x1d0>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a35      	ldr	r2, [pc, #212]	; (8006aac <DMA_SetConfig+0x248>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d02c      	beq.n	8006a34 <DMA_SetConfig+0x1d0>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a34      	ldr	r2, [pc, #208]	; (8006ab0 <DMA_SetConfig+0x24c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d027      	beq.n	8006a34 <DMA_SetConfig+0x1d0>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a32      	ldr	r2, [pc, #200]	; (8006ab4 <DMA_SetConfig+0x250>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d022      	beq.n	8006a34 <DMA_SetConfig+0x1d0>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a31      	ldr	r2, [pc, #196]	; (8006ab8 <DMA_SetConfig+0x254>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d01d      	beq.n	8006a34 <DMA_SetConfig+0x1d0>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a2f      	ldr	r2, [pc, #188]	; (8006abc <DMA_SetConfig+0x258>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d018      	beq.n	8006a34 <DMA_SetConfig+0x1d0>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a2e      	ldr	r2, [pc, #184]	; (8006ac0 <DMA_SetConfig+0x25c>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d013      	beq.n	8006a34 <DMA_SetConfig+0x1d0>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a2c      	ldr	r2, [pc, #176]	; (8006ac4 <DMA_SetConfig+0x260>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d00e      	beq.n	8006a34 <DMA_SetConfig+0x1d0>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a2b      	ldr	r2, [pc, #172]	; (8006ac8 <DMA_SetConfig+0x264>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d009      	beq.n	8006a34 <DMA_SetConfig+0x1d0>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a29      	ldr	r2, [pc, #164]	; (8006acc <DMA_SetConfig+0x268>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d004      	beq.n	8006a34 <DMA_SetConfig+0x1d0>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a28      	ldr	r2, [pc, #160]	; (8006ad0 <DMA_SetConfig+0x26c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d101      	bne.n	8006a38 <DMA_SetConfig+0x1d4>
 8006a34:	2301      	movs	r3, #1
 8006a36:	e000      	b.n	8006a3a <DMA_SetConfig+0x1d6>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d05a      	beq.n	8006af4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a42:	f003 031f 	and.w	r3, r3, #31
 8006a46:	223f      	movs	r2, #63	; 0x3f
 8006a48:	409a      	lsls	r2, r3
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a5c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	2b40      	cmp	r3, #64	; 0x40
 8006a6c:	d108      	bne.n	8006a80 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006a7e:	e087      	b.n	8006b90 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	60da      	str	r2, [r3, #12]
}
 8006a90:	e07e      	b.n	8006b90 <DMA_SetConfig+0x32c>
 8006a92:	bf00      	nop
 8006a94:	40020010 	.word	0x40020010
 8006a98:	40020028 	.word	0x40020028
 8006a9c:	40020040 	.word	0x40020040
 8006aa0:	40020058 	.word	0x40020058
 8006aa4:	40020070 	.word	0x40020070
 8006aa8:	40020088 	.word	0x40020088
 8006aac:	400200a0 	.word	0x400200a0
 8006ab0:	400200b8 	.word	0x400200b8
 8006ab4:	40020410 	.word	0x40020410
 8006ab8:	40020428 	.word	0x40020428
 8006abc:	40020440 	.word	0x40020440
 8006ac0:	40020458 	.word	0x40020458
 8006ac4:	40020470 	.word	0x40020470
 8006ac8:	40020488 	.word	0x40020488
 8006acc:	400204a0 	.word	0x400204a0
 8006ad0:	400204b8 	.word	0x400204b8
 8006ad4:	58025408 	.word	0x58025408
 8006ad8:	5802541c 	.word	0x5802541c
 8006adc:	58025430 	.word	0x58025430
 8006ae0:	58025444 	.word	0x58025444
 8006ae4:	58025458 	.word	0x58025458
 8006ae8:	5802546c 	.word	0x5802546c
 8006aec:	58025480 	.word	0x58025480
 8006af0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a28      	ldr	r2, [pc, #160]	; (8006b9c <DMA_SetConfig+0x338>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d022      	beq.n	8006b44 <DMA_SetConfig+0x2e0>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a27      	ldr	r2, [pc, #156]	; (8006ba0 <DMA_SetConfig+0x33c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d01d      	beq.n	8006b44 <DMA_SetConfig+0x2e0>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a25      	ldr	r2, [pc, #148]	; (8006ba4 <DMA_SetConfig+0x340>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d018      	beq.n	8006b44 <DMA_SetConfig+0x2e0>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a24      	ldr	r2, [pc, #144]	; (8006ba8 <DMA_SetConfig+0x344>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d013      	beq.n	8006b44 <DMA_SetConfig+0x2e0>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a22      	ldr	r2, [pc, #136]	; (8006bac <DMA_SetConfig+0x348>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d00e      	beq.n	8006b44 <DMA_SetConfig+0x2e0>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a21      	ldr	r2, [pc, #132]	; (8006bb0 <DMA_SetConfig+0x34c>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d009      	beq.n	8006b44 <DMA_SetConfig+0x2e0>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a1f      	ldr	r2, [pc, #124]	; (8006bb4 <DMA_SetConfig+0x350>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d004      	beq.n	8006b44 <DMA_SetConfig+0x2e0>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a1e      	ldr	r2, [pc, #120]	; (8006bb8 <DMA_SetConfig+0x354>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d101      	bne.n	8006b48 <DMA_SetConfig+0x2e4>
 8006b44:	2301      	movs	r3, #1
 8006b46:	e000      	b.n	8006b4a <DMA_SetConfig+0x2e6>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d020      	beq.n	8006b90 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b52:	f003 031f 	and.w	r3, r3, #31
 8006b56:	2201      	movs	r2, #1
 8006b58:	409a      	lsls	r2, r3
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	2b40      	cmp	r3, #64	; 0x40
 8006b6c:	d108      	bne.n	8006b80 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	60da      	str	r2, [r3, #12]
}
 8006b7e:	e007      	b.n	8006b90 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	60da      	str	r2, [r3, #12]
}
 8006b90:	bf00      	nop
 8006b92:	371c      	adds	r7, #28
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	58025408 	.word	0x58025408
 8006ba0:	5802541c 	.word	0x5802541c
 8006ba4:	58025430 	.word	0x58025430
 8006ba8:	58025444 	.word	0x58025444
 8006bac:	58025458 	.word	0x58025458
 8006bb0:	5802546c 	.word	0x5802546c
 8006bb4:	58025480 	.word	0x58025480
 8006bb8:	58025494 	.word	0x58025494

08006bbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a42      	ldr	r2, [pc, #264]	; (8006cd4 <DMA_CalcBaseAndBitshift+0x118>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d04a      	beq.n	8006c64 <DMA_CalcBaseAndBitshift+0xa8>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a41      	ldr	r2, [pc, #260]	; (8006cd8 <DMA_CalcBaseAndBitshift+0x11c>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d045      	beq.n	8006c64 <DMA_CalcBaseAndBitshift+0xa8>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a3f      	ldr	r2, [pc, #252]	; (8006cdc <DMA_CalcBaseAndBitshift+0x120>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d040      	beq.n	8006c64 <DMA_CalcBaseAndBitshift+0xa8>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a3e      	ldr	r2, [pc, #248]	; (8006ce0 <DMA_CalcBaseAndBitshift+0x124>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d03b      	beq.n	8006c64 <DMA_CalcBaseAndBitshift+0xa8>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a3c      	ldr	r2, [pc, #240]	; (8006ce4 <DMA_CalcBaseAndBitshift+0x128>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d036      	beq.n	8006c64 <DMA_CalcBaseAndBitshift+0xa8>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a3b      	ldr	r2, [pc, #236]	; (8006ce8 <DMA_CalcBaseAndBitshift+0x12c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d031      	beq.n	8006c64 <DMA_CalcBaseAndBitshift+0xa8>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a39      	ldr	r2, [pc, #228]	; (8006cec <DMA_CalcBaseAndBitshift+0x130>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d02c      	beq.n	8006c64 <DMA_CalcBaseAndBitshift+0xa8>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a38      	ldr	r2, [pc, #224]	; (8006cf0 <DMA_CalcBaseAndBitshift+0x134>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d027      	beq.n	8006c64 <DMA_CalcBaseAndBitshift+0xa8>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a36      	ldr	r2, [pc, #216]	; (8006cf4 <DMA_CalcBaseAndBitshift+0x138>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d022      	beq.n	8006c64 <DMA_CalcBaseAndBitshift+0xa8>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a35      	ldr	r2, [pc, #212]	; (8006cf8 <DMA_CalcBaseAndBitshift+0x13c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d01d      	beq.n	8006c64 <DMA_CalcBaseAndBitshift+0xa8>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a33      	ldr	r2, [pc, #204]	; (8006cfc <DMA_CalcBaseAndBitshift+0x140>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d018      	beq.n	8006c64 <DMA_CalcBaseAndBitshift+0xa8>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a32      	ldr	r2, [pc, #200]	; (8006d00 <DMA_CalcBaseAndBitshift+0x144>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d013      	beq.n	8006c64 <DMA_CalcBaseAndBitshift+0xa8>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a30      	ldr	r2, [pc, #192]	; (8006d04 <DMA_CalcBaseAndBitshift+0x148>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00e      	beq.n	8006c64 <DMA_CalcBaseAndBitshift+0xa8>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a2f      	ldr	r2, [pc, #188]	; (8006d08 <DMA_CalcBaseAndBitshift+0x14c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d009      	beq.n	8006c64 <DMA_CalcBaseAndBitshift+0xa8>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a2d      	ldr	r2, [pc, #180]	; (8006d0c <DMA_CalcBaseAndBitshift+0x150>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d004      	beq.n	8006c64 <DMA_CalcBaseAndBitshift+0xa8>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a2c      	ldr	r2, [pc, #176]	; (8006d10 <DMA_CalcBaseAndBitshift+0x154>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d101      	bne.n	8006c68 <DMA_CalcBaseAndBitshift+0xac>
 8006c64:	2301      	movs	r3, #1
 8006c66:	e000      	b.n	8006c6a <DMA_CalcBaseAndBitshift+0xae>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d024      	beq.n	8006cb8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	3b10      	subs	r3, #16
 8006c76:	4a27      	ldr	r2, [pc, #156]	; (8006d14 <DMA_CalcBaseAndBitshift+0x158>)
 8006c78:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7c:	091b      	lsrs	r3, r3, #4
 8006c7e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f003 0307 	and.w	r3, r3, #7
 8006c86:	4a24      	ldr	r2, [pc, #144]	; (8006d18 <DMA_CalcBaseAndBitshift+0x15c>)
 8006c88:	5cd3      	ldrb	r3, [r2, r3]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d908      	bls.n	8006ca8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	4b1f      	ldr	r3, [pc, #124]	; (8006d1c <DMA_CalcBaseAndBitshift+0x160>)
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	1d1a      	adds	r2, r3, #4
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	659a      	str	r2, [r3, #88]	; 0x58
 8006ca6:	e00d      	b.n	8006cc4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	461a      	mov	r2, r3
 8006cae:	4b1b      	ldr	r3, [pc, #108]	; (8006d1c <DMA_CalcBaseAndBitshift+0x160>)
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8006cb6:	e005      	b.n	8006cc4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	40020010 	.word	0x40020010
 8006cd8:	40020028 	.word	0x40020028
 8006cdc:	40020040 	.word	0x40020040
 8006ce0:	40020058 	.word	0x40020058
 8006ce4:	40020070 	.word	0x40020070
 8006ce8:	40020088 	.word	0x40020088
 8006cec:	400200a0 	.word	0x400200a0
 8006cf0:	400200b8 	.word	0x400200b8
 8006cf4:	40020410 	.word	0x40020410
 8006cf8:	40020428 	.word	0x40020428
 8006cfc:	40020440 	.word	0x40020440
 8006d00:	40020458 	.word	0x40020458
 8006d04:	40020470 	.word	0x40020470
 8006d08:	40020488 	.word	0x40020488
 8006d0c:	400204a0 	.word	0x400204a0
 8006d10:	400204b8 	.word	0x400204b8
 8006d14:	aaaaaaab 	.word	0xaaaaaaab
 8006d18:	0800f564 	.word	0x0800f564
 8006d1c:	fffffc00 	.word	0xfffffc00

08006d20 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d120      	bne.n	8006d76 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d858      	bhi.n	8006dee <DMA_CheckFifoParam+0xce>
 8006d3c:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <DMA_CheckFifoParam+0x24>)
 8006d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d42:	bf00      	nop
 8006d44:	08006d55 	.word	0x08006d55
 8006d48:	08006d67 	.word	0x08006d67
 8006d4c:	08006d55 	.word	0x08006d55
 8006d50:	08006def 	.word	0x08006def
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d048      	beq.n	8006df2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d64:	e045      	b.n	8006df2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d6e:	d142      	bne.n	8006df6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d74:	e03f      	b.n	8006df6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d7e:	d123      	bne.n	8006dc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d838      	bhi.n	8006dfa <DMA_CheckFifoParam+0xda>
 8006d88:	a201      	add	r2, pc, #4	; (adr r2, 8006d90 <DMA_CheckFifoParam+0x70>)
 8006d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8e:	bf00      	nop
 8006d90:	08006da1 	.word	0x08006da1
 8006d94:	08006da7 	.word	0x08006da7
 8006d98:	08006da1 	.word	0x08006da1
 8006d9c:	08006db9 	.word	0x08006db9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	73fb      	strb	r3, [r7, #15]
        break;
 8006da4:	e030      	b.n	8006e08 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d025      	beq.n	8006dfe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006db6:	e022      	b.n	8006dfe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006dc0:	d11f      	bne.n	8006e02 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006dc6:	e01c      	b.n	8006e02 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d902      	bls.n	8006dd6 <DMA_CheckFifoParam+0xb6>
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d003      	beq.n	8006ddc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006dd4:	e018      	b.n	8006e08 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	73fb      	strb	r3, [r7, #15]
        break;
 8006dda:	e015      	b.n	8006e08 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00e      	beq.n	8006e06 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	73fb      	strb	r3, [r7, #15]
    break;
 8006dec:	e00b      	b.n	8006e06 <DMA_CheckFifoParam+0xe6>
        break;
 8006dee:	bf00      	nop
 8006df0:	e00a      	b.n	8006e08 <DMA_CheckFifoParam+0xe8>
        break;
 8006df2:	bf00      	nop
 8006df4:	e008      	b.n	8006e08 <DMA_CheckFifoParam+0xe8>
        break;
 8006df6:	bf00      	nop
 8006df8:	e006      	b.n	8006e08 <DMA_CheckFifoParam+0xe8>
        break;
 8006dfa:	bf00      	nop
 8006dfc:	e004      	b.n	8006e08 <DMA_CheckFifoParam+0xe8>
        break;
 8006dfe:	bf00      	nop
 8006e00:	e002      	b.n	8006e08 <DMA_CheckFifoParam+0xe8>
        break;
 8006e02:	bf00      	nop
 8006e04:	e000      	b.n	8006e08 <DMA_CheckFifoParam+0xe8>
    break;
 8006e06:	bf00      	nop
    }
  }

  return status;
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop

08006e18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a38      	ldr	r2, [pc, #224]	; (8006f0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d022      	beq.n	8006e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a36      	ldr	r2, [pc, #216]	; (8006f10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d01d      	beq.n	8006e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a35      	ldr	r2, [pc, #212]	; (8006f14 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d018      	beq.n	8006e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a33      	ldr	r2, [pc, #204]	; (8006f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d013      	beq.n	8006e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a32      	ldr	r2, [pc, #200]	; (8006f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d00e      	beq.n	8006e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a30      	ldr	r2, [pc, #192]	; (8006f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d009      	beq.n	8006e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a2f      	ldr	r2, [pc, #188]	; (8006f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d004      	beq.n	8006e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a2d      	ldr	r2, [pc, #180]	; (8006f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d101      	bne.n	8006e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d01a      	beq.n	8006eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	3b08      	subs	r3, #8
 8006e88:	4a28      	ldr	r2, [pc, #160]	; (8006f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8e:	091b      	lsrs	r3, r3, #4
 8006e90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	4b26      	ldr	r3, [pc, #152]	; (8006f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a24      	ldr	r2, [pc, #144]	; (8006f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006ea4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f003 031f 	and.w	r3, r3, #31
 8006eac:	2201      	movs	r2, #1
 8006eae:	409a      	lsls	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006eb4:	e024      	b.n	8006f00 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	3b10      	subs	r3, #16
 8006ebe:	4a1e      	ldr	r2, [pc, #120]	; (8006f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec4:	091b      	lsrs	r3, r3, #4
 8006ec6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	4a1c      	ldr	r2, [pc, #112]	; (8006f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d806      	bhi.n	8006ede <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	4a1b      	ldr	r2, [pc, #108]	; (8006f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d902      	bls.n	8006ede <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3308      	adds	r3, #8
 8006edc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	4b18      	ldr	r3, [pc, #96]	; (8006f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a16      	ldr	r2, [pc, #88]	; (8006f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006ef0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f003 031f 	and.w	r3, r3, #31
 8006ef8:	2201      	movs	r2, #1
 8006efa:	409a      	lsls	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f00:	bf00      	nop
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	58025408 	.word	0x58025408
 8006f10:	5802541c 	.word	0x5802541c
 8006f14:	58025430 	.word	0x58025430
 8006f18:	58025444 	.word	0x58025444
 8006f1c:	58025458 	.word	0x58025458
 8006f20:	5802546c 	.word	0x5802546c
 8006f24:	58025480 	.word	0x58025480
 8006f28:	58025494 	.word	0x58025494
 8006f2c:	cccccccd 	.word	0xcccccccd
 8006f30:	16009600 	.word	0x16009600
 8006f34:	58025880 	.word	0x58025880
 8006f38:	aaaaaaab 	.word	0xaaaaaaab
 8006f3c:	400204b8 	.word	0x400204b8
 8006f40:	4002040f 	.word	0x4002040f
 8006f44:	10008200 	.word	0x10008200
 8006f48:	40020880 	.word	0x40020880

08006f4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d04a      	beq.n	8006ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2b08      	cmp	r3, #8
 8006f66:	d847      	bhi.n	8006ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a25      	ldr	r2, [pc, #148]	; (8007004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d022      	beq.n	8006fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a24      	ldr	r2, [pc, #144]	; (8007008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d01d      	beq.n	8006fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a22      	ldr	r2, [pc, #136]	; (800700c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d018      	beq.n	8006fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a21      	ldr	r2, [pc, #132]	; (8007010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d013      	beq.n	8006fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a1f      	ldr	r2, [pc, #124]	; (8007014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d00e      	beq.n	8006fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a1e      	ldr	r2, [pc, #120]	; (8007018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d009      	beq.n	8006fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a1c      	ldr	r2, [pc, #112]	; (800701c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d004      	beq.n	8006fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a1b      	ldr	r2, [pc, #108]	; (8007020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d101      	bne.n	8006fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e000      	b.n	8006fbe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	4b17      	ldr	r3, [pc, #92]	; (8007024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	461a      	mov	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a15      	ldr	r2, [pc, #84]	; (8007028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006fd4:	671a      	str	r2, [r3, #112]	; 0x70
 8006fd6:	e009      	b.n	8006fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	4b14      	ldr	r3, [pc, #80]	; (800702c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006fdc:	4413      	add	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a11      	ldr	r2, [pc, #68]	; (8007030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006fea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	409a      	lsls	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006ff8:	bf00      	nop
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	58025408 	.word	0x58025408
 8007008:	5802541c 	.word	0x5802541c
 800700c:	58025430 	.word	0x58025430
 8007010:	58025444 	.word	0x58025444
 8007014:	58025458 	.word	0x58025458
 8007018:	5802546c 	.word	0x5802546c
 800701c:	58025480 	.word	0x58025480
 8007020:	58025494 	.word	0x58025494
 8007024:	1600963f 	.word	0x1600963f
 8007028:	58025940 	.word	0x58025940
 800702c:	1000823f 	.word	0x1000823f
 8007030:	40020940 	.word	0x40020940

08007034 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007034:	b480      	push	{r7}
 8007036:	b089      	sub	sp, #36	; 0x24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800703e:	2300      	movs	r3, #0
 8007040:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007042:	4b89      	ldr	r3, [pc, #548]	; (8007268 <HAL_GPIO_Init+0x234>)
 8007044:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007046:	e194      	b.n	8007372 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	2101      	movs	r1, #1
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	fa01 f303 	lsl.w	r3, r1, r3
 8007054:	4013      	ands	r3, r2
 8007056:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 8186 	beq.w	800736c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f003 0303 	and.w	r3, r3, #3
 8007068:	2b01      	cmp	r3, #1
 800706a:	d005      	beq.n	8007078 <HAL_GPIO_Init+0x44>
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f003 0303 	and.w	r3, r3, #3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d130      	bne.n	80070da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	2203      	movs	r2, #3
 8007084:	fa02 f303 	lsl.w	r3, r2, r3
 8007088:	43db      	mvns	r3, r3
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	4013      	ands	r3, r2
 800708e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	68da      	ldr	r2, [r3, #12]
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	fa02 f303 	lsl.w	r3, r2, r3
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	4313      	orrs	r3, r2
 80070a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80070ae:	2201      	movs	r2, #1
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	fa02 f303 	lsl.w	r3, r2, r3
 80070b6:	43db      	mvns	r3, r3
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	4013      	ands	r3, r2
 80070bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	091b      	lsrs	r3, r3, #4
 80070c4:	f003 0201 	and.w	r2, r3, #1
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	fa02 f303 	lsl.w	r3, r2, r3
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d017      	beq.n	8007116 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	005b      	lsls	r3, r3, #1
 80070f0:	2203      	movs	r2, #3
 80070f2:	fa02 f303 	lsl.w	r3, r2, r3
 80070f6:	43db      	mvns	r3, r3
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	4013      	ands	r3, r2
 80070fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	689a      	ldr	r2, [r3, #8]
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	fa02 f303 	lsl.w	r3, r2, r3
 800710a:	69ba      	ldr	r2, [r7, #24]
 800710c:	4313      	orrs	r3, r2
 800710e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f003 0303 	and.w	r3, r3, #3
 800711e:	2b02      	cmp	r3, #2
 8007120:	d123      	bne.n	800716a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	08da      	lsrs	r2, r3, #3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3208      	adds	r2, #8
 800712a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f003 0307 	and.w	r3, r3, #7
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	220f      	movs	r2, #15
 800713a:	fa02 f303 	lsl.w	r3, r2, r3
 800713e:	43db      	mvns	r3, r3
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	4013      	ands	r3, r2
 8007144:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	691a      	ldr	r2, [r3, #16]
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	fa02 f303 	lsl.w	r3, r2, r3
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	4313      	orrs	r3, r2
 800715a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	08da      	lsrs	r2, r3, #3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3208      	adds	r2, #8
 8007164:	69b9      	ldr	r1, [r7, #24]
 8007166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	005b      	lsls	r3, r3, #1
 8007174:	2203      	movs	r2, #3
 8007176:	fa02 f303 	lsl.w	r3, r2, r3
 800717a:	43db      	mvns	r3, r3
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	4013      	ands	r3, r2
 8007180:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f003 0203 	and.w	r2, r3, #3
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	fa02 f303 	lsl.w	r3, r2, r3
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	4313      	orrs	r3, r2
 8007196:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 80e0 	beq.w	800736c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071ac:	4b2f      	ldr	r3, [pc, #188]	; (800726c <HAL_GPIO_Init+0x238>)
 80071ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071b2:	4a2e      	ldr	r2, [pc, #184]	; (800726c <HAL_GPIO_Init+0x238>)
 80071b4:	f043 0302 	orr.w	r3, r3, #2
 80071b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80071bc:	4b2b      	ldr	r3, [pc, #172]	; (800726c <HAL_GPIO_Init+0x238>)
 80071be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071ca:	4a29      	ldr	r2, [pc, #164]	; (8007270 <HAL_GPIO_Init+0x23c>)
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	089b      	lsrs	r3, r3, #2
 80071d0:	3302      	adds	r3, #2
 80071d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	f003 0303 	and.w	r3, r3, #3
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	220f      	movs	r2, #15
 80071e2:	fa02 f303 	lsl.w	r3, r2, r3
 80071e6:	43db      	mvns	r3, r3
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	4013      	ands	r3, r2
 80071ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a20      	ldr	r2, [pc, #128]	; (8007274 <HAL_GPIO_Init+0x240>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d052      	beq.n	800729c <HAL_GPIO_Init+0x268>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a1f      	ldr	r2, [pc, #124]	; (8007278 <HAL_GPIO_Init+0x244>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d031      	beq.n	8007262 <HAL_GPIO_Init+0x22e>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a1e      	ldr	r2, [pc, #120]	; (800727c <HAL_GPIO_Init+0x248>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d02b      	beq.n	800725e <HAL_GPIO_Init+0x22a>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a1d      	ldr	r2, [pc, #116]	; (8007280 <HAL_GPIO_Init+0x24c>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d025      	beq.n	800725a <HAL_GPIO_Init+0x226>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a1c      	ldr	r2, [pc, #112]	; (8007284 <HAL_GPIO_Init+0x250>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d01f      	beq.n	8007256 <HAL_GPIO_Init+0x222>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a1b      	ldr	r2, [pc, #108]	; (8007288 <HAL_GPIO_Init+0x254>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d019      	beq.n	8007252 <HAL_GPIO_Init+0x21e>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a1a      	ldr	r2, [pc, #104]	; (800728c <HAL_GPIO_Init+0x258>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d013      	beq.n	800724e <HAL_GPIO_Init+0x21a>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a19      	ldr	r2, [pc, #100]	; (8007290 <HAL_GPIO_Init+0x25c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d00d      	beq.n	800724a <HAL_GPIO_Init+0x216>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a18      	ldr	r2, [pc, #96]	; (8007294 <HAL_GPIO_Init+0x260>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d007      	beq.n	8007246 <HAL_GPIO_Init+0x212>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a17      	ldr	r2, [pc, #92]	; (8007298 <HAL_GPIO_Init+0x264>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d101      	bne.n	8007242 <HAL_GPIO_Init+0x20e>
 800723e:	2309      	movs	r3, #9
 8007240:	e02d      	b.n	800729e <HAL_GPIO_Init+0x26a>
 8007242:	230a      	movs	r3, #10
 8007244:	e02b      	b.n	800729e <HAL_GPIO_Init+0x26a>
 8007246:	2308      	movs	r3, #8
 8007248:	e029      	b.n	800729e <HAL_GPIO_Init+0x26a>
 800724a:	2307      	movs	r3, #7
 800724c:	e027      	b.n	800729e <HAL_GPIO_Init+0x26a>
 800724e:	2306      	movs	r3, #6
 8007250:	e025      	b.n	800729e <HAL_GPIO_Init+0x26a>
 8007252:	2305      	movs	r3, #5
 8007254:	e023      	b.n	800729e <HAL_GPIO_Init+0x26a>
 8007256:	2304      	movs	r3, #4
 8007258:	e021      	b.n	800729e <HAL_GPIO_Init+0x26a>
 800725a:	2303      	movs	r3, #3
 800725c:	e01f      	b.n	800729e <HAL_GPIO_Init+0x26a>
 800725e:	2302      	movs	r3, #2
 8007260:	e01d      	b.n	800729e <HAL_GPIO_Init+0x26a>
 8007262:	2301      	movs	r3, #1
 8007264:	e01b      	b.n	800729e <HAL_GPIO_Init+0x26a>
 8007266:	bf00      	nop
 8007268:	58000080 	.word	0x58000080
 800726c:	58024400 	.word	0x58024400
 8007270:	58000400 	.word	0x58000400
 8007274:	58020000 	.word	0x58020000
 8007278:	58020400 	.word	0x58020400
 800727c:	58020800 	.word	0x58020800
 8007280:	58020c00 	.word	0x58020c00
 8007284:	58021000 	.word	0x58021000
 8007288:	58021400 	.word	0x58021400
 800728c:	58021800 	.word	0x58021800
 8007290:	58021c00 	.word	0x58021c00
 8007294:	58022000 	.word	0x58022000
 8007298:	58022400 	.word	0x58022400
 800729c:	2300      	movs	r3, #0
 800729e:	69fa      	ldr	r2, [r7, #28]
 80072a0:	f002 0203 	and.w	r2, r2, #3
 80072a4:	0092      	lsls	r2, r2, #2
 80072a6:	4093      	lsls	r3, r2
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80072ae:	4938      	ldr	r1, [pc, #224]	; (8007390 <HAL_GPIO_Init+0x35c>)
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	089b      	lsrs	r3, r3, #2
 80072b4:	3302      	adds	r3, #2
 80072b6:	69ba      	ldr	r2, [r7, #24]
 80072b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80072bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	43db      	mvns	r3, r3
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	4013      	ands	r3, r2
 80072cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	4313      	orrs	r3, r2
 80072e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80072e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80072ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	43db      	mvns	r3, r3
 80072f6:	69ba      	ldr	r2, [r7, #24]
 80072f8:	4013      	ands	r3, r2
 80072fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d003      	beq.n	8007310 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	4313      	orrs	r3, r2
 800730e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	43db      	mvns	r3, r3
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	4013      	ands	r3, r2
 8007326:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	43db      	mvns	r3, r3
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	4013      	ands	r3, r2
 8007350:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	4313      	orrs	r3, r2
 8007364:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	3301      	adds	r3, #1
 8007370:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	fa22 f303 	lsr.w	r3, r2, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	f47f ae63 	bne.w	8007048 <HAL_GPIO_Init+0x14>
  }
}
 8007382:	bf00      	nop
 8007384:	bf00      	nop
 8007386:	3724      	adds	r7, #36	; 0x24
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	58000400 	.word	0x58000400

08007394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	807b      	strh	r3, [r7, #2]
 80073a0:	4613      	mov	r3, r2
 80073a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80073a4:	787b      	ldrb	r3, [r7, #1]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80073aa:	887a      	ldrh	r2, [r7, #2]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80073b0:	e003      	b.n	80073ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80073b2:	887b      	ldrh	r3, [r7, #2]
 80073b4:	041a      	lsls	r2, r3, #16
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	619a      	str	r2, [r3, #24]
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b085      	sub	sp, #20
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	460b      	mov	r3, r1
 80073d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80073d8:	887a      	ldrh	r2, [r7, #2]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4013      	ands	r3, r2
 80073de:	041a      	lsls	r2, r3, #16
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	43d9      	mvns	r1, r3
 80073e4:	887b      	ldrh	r3, [r7, #2]
 80073e6:	400b      	ands	r3, r1
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	619a      	str	r2, [r3, #24]
}
 80073ee:	bf00      	nop
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	4603      	mov	r3, r0
 8007402:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007408:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800740c:	88fb      	ldrh	r3, [r7, #6]
 800740e:	4013      	ands	r3, r2
 8007410:	2b00      	cmp	r3, #0
 8007412:	d008      	beq.n	8007426 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007414:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007418:	88fb      	ldrh	r3, [r7, #6]
 800741a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800741e:	88fb      	ldrh	r3, [r7, #6]
 8007420:	4618      	mov	r0, r3
 8007422:	f000 f804 	bl	800742e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	4603      	mov	r3, r0
 8007436:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800744c:	4b19      	ldr	r3, [pc, #100]	; (80074b4 <HAL_PWREx_ConfigSupply+0x70>)
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f003 0304 	and.w	r3, r3, #4
 8007454:	2b04      	cmp	r3, #4
 8007456:	d00a      	beq.n	800746e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007458:	4b16      	ldr	r3, [pc, #88]	; (80074b4 <HAL_PWREx_ConfigSupply+0x70>)
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f003 0307 	and.w	r3, r3, #7
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	429a      	cmp	r2, r3
 8007464:	d001      	beq.n	800746a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e01f      	b.n	80074aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	e01d      	b.n	80074aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800746e:	4b11      	ldr	r3, [pc, #68]	; (80074b4 <HAL_PWREx_ConfigSupply+0x70>)
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	f023 0207 	bic.w	r2, r3, #7
 8007476:	490f      	ldr	r1, [pc, #60]	; (80074b4 <HAL_PWREx_ConfigSupply+0x70>)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4313      	orrs	r3, r2
 800747c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800747e:	f7fb fe55 	bl	800312c <HAL_GetTick>
 8007482:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007484:	e009      	b.n	800749a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007486:	f7fb fe51 	bl	800312c <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007494:	d901      	bls.n	800749a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e007      	b.n	80074aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800749a:	4b06      	ldr	r3, [pc, #24]	; (80074b4 <HAL_PWREx_ConfigSupply+0x70>)
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a6:	d1ee      	bne.n	8007486 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	58024800 	.word	0x58024800

080074b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b08c      	sub	sp, #48	; 0x30
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d102      	bne.n	80074cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	f000 bc1c 	b.w	8007d04 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 8087 	beq.w	80075e8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074da:	4b9e      	ldr	r3, [pc, #632]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80074e4:	4b9b      	ldr	r3, [pc, #620]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 80074e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80074ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ec:	2b10      	cmp	r3, #16
 80074ee:	d007      	beq.n	8007500 <HAL_RCC_OscConfig+0x48>
 80074f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f2:	2b18      	cmp	r3, #24
 80074f4:	d110      	bne.n	8007518 <HAL_RCC_OscConfig+0x60>
 80074f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f8:	f003 0303 	and.w	r3, r3, #3
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d10b      	bne.n	8007518 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007500:	4b94      	ldr	r3, [pc, #592]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d06c      	beq.n	80075e6 <HAL_RCC_OscConfig+0x12e>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d168      	bne.n	80075e6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e3f5      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007520:	d106      	bne.n	8007530 <HAL_RCC_OscConfig+0x78>
 8007522:	4b8c      	ldr	r3, [pc, #560]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a8b      	ldr	r2, [pc, #556]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 8007528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800752c:	6013      	str	r3, [r2, #0]
 800752e:	e02e      	b.n	800758e <HAL_RCC_OscConfig+0xd6>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10c      	bne.n	8007552 <HAL_RCC_OscConfig+0x9a>
 8007538:	4b86      	ldr	r3, [pc, #536]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a85      	ldr	r2, [pc, #532]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 800753e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007542:	6013      	str	r3, [r2, #0]
 8007544:	4b83      	ldr	r3, [pc, #524]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a82      	ldr	r2, [pc, #520]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 800754a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	e01d      	b.n	800758e <HAL_RCC_OscConfig+0xd6>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800755a:	d10c      	bne.n	8007576 <HAL_RCC_OscConfig+0xbe>
 800755c:	4b7d      	ldr	r3, [pc, #500]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a7c      	ldr	r2, [pc, #496]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 8007562:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	4b7a      	ldr	r3, [pc, #488]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a79      	ldr	r2, [pc, #484]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 800756e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007572:	6013      	str	r3, [r2, #0]
 8007574:	e00b      	b.n	800758e <HAL_RCC_OscConfig+0xd6>
 8007576:	4b77      	ldr	r3, [pc, #476]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a76      	ldr	r2, [pc, #472]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 800757c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	4b74      	ldr	r3, [pc, #464]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a73      	ldr	r2, [pc, #460]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 8007588:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800758c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d013      	beq.n	80075be <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007596:	f7fb fdc9 	bl	800312c <HAL_GetTick>
 800759a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800759c:	e008      	b.n	80075b0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800759e:	f7fb fdc5 	bl	800312c <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	2b64      	cmp	r3, #100	; 0x64
 80075aa:	d901      	bls.n	80075b0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e3a9      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075b0:	4b68      	ldr	r3, [pc, #416]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d0f0      	beq.n	800759e <HAL_RCC_OscConfig+0xe6>
 80075bc:	e014      	b.n	80075e8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075be:	f7fb fdb5 	bl	800312c <HAL_GetTick>
 80075c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80075c4:	e008      	b.n	80075d8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075c6:	f7fb fdb1 	bl	800312c <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	2b64      	cmp	r3, #100	; 0x64
 80075d2:	d901      	bls.n	80075d8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e395      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80075d8:	4b5e      	ldr	r3, [pc, #376]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1f0      	bne.n	80075c6 <HAL_RCC_OscConfig+0x10e>
 80075e4:	e000      	b.n	80075e8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 80ca 	beq.w	800778a <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075f6:	4b57      	ldr	r3, [pc, #348]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075fe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007600:	4b54      	ldr	r3, [pc, #336]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 8007602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007604:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d007      	beq.n	800761c <HAL_RCC_OscConfig+0x164>
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	2b18      	cmp	r3, #24
 8007610:	d156      	bne.n	80076c0 <HAL_RCC_OscConfig+0x208>
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	f003 0303 	and.w	r3, r3, #3
 8007618:	2b00      	cmp	r3, #0
 800761a:	d151      	bne.n	80076c0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800761c:	4b4d      	ldr	r3, [pc, #308]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0304 	and.w	r3, r3, #4
 8007624:	2b00      	cmp	r3, #0
 8007626:	d005      	beq.n	8007634 <HAL_RCC_OscConfig+0x17c>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e367      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007634:	4b47      	ldr	r3, [pc, #284]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f023 0219 	bic.w	r2, r3, #25
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	4944      	ldr	r1, [pc, #272]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 8007642:	4313      	orrs	r3, r2
 8007644:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007646:	f7fb fd71 	bl	800312c <HAL_GetTick>
 800764a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800764c:	e008      	b.n	8007660 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800764e:	f7fb fd6d 	bl	800312c <HAL_GetTick>
 8007652:	4602      	mov	r2, r0
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	2b02      	cmp	r3, #2
 800765a:	d901      	bls.n	8007660 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e351      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007660:	4b3c      	ldr	r3, [pc, #240]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0304 	and.w	r3, r3, #4
 8007668:	2b00      	cmp	r3, #0
 800766a:	d0f0      	beq.n	800764e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800766c:	f7fb fd6a 	bl	8003144 <HAL_GetREVID>
 8007670:	4603      	mov	r3, r0
 8007672:	f241 0203 	movw	r2, #4099	; 0x1003
 8007676:	4293      	cmp	r3, r2
 8007678:	d817      	bhi.n	80076aa <HAL_RCC_OscConfig+0x1f2>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	2b40      	cmp	r3, #64	; 0x40
 8007680:	d108      	bne.n	8007694 <HAL_RCC_OscConfig+0x1dc>
 8007682:	4b34      	ldr	r3, [pc, #208]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800768a:	4a32      	ldr	r2, [pc, #200]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 800768c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007690:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007692:	e07a      	b.n	800778a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007694:	4b2f      	ldr	r3, [pc, #188]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	031b      	lsls	r3, r3, #12
 80076a2:	492c      	ldr	r1, [pc, #176]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 80076a4:	4313      	orrs	r3, r2
 80076a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076a8:	e06f      	b.n	800778a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076aa:	4b2a      	ldr	r3, [pc, #168]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	061b      	lsls	r3, r3, #24
 80076b8:	4926      	ldr	r1, [pc, #152]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076be:	e064      	b.n	800778a <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d047      	beq.n	8007758 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80076c8:	4b22      	ldr	r3, [pc, #136]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f023 0219 	bic.w	r2, r3, #25
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	491f      	ldr	r1, [pc, #124]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076da:	f7fb fd27 	bl	800312c <HAL_GetTick>
 80076de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076e0:	e008      	b.n	80076f4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076e2:	f7fb fd23 	bl	800312c <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d901      	bls.n	80076f4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e307      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076f4:	4b17      	ldr	r3, [pc, #92]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0304 	and.w	r3, r3, #4
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d0f0      	beq.n	80076e2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007700:	f7fb fd20 	bl	8003144 <HAL_GetREVID>
 8007704:	4603      	mov	r3, r0
 8007706:	f241 0203 	movw	r2, #4099	; 0x1003
 800770a:	4293      	cmp	r3, r2
 800770c:	d817      	bhi.n	800773e <HAL_RCC_OscConfig+0x286>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	2b40      	cmp	r3, #64	; 0x40
 8007714:	d108      	bne.n	8007728 <HAL_RCC_OscConfig+0x270>
 8007716:	4b0f      	ldr	r3, [pc, #60]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800771e:	4a0d      	ldr	r2, [pc, #52]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 8007720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007724:	6053      	str	r3, [r2, #4]
 8007726:	e030      	b.n	800778a <HAL_RCC_OscConfig+0x2d2>
 8007728:	4b0a      	ldr	r3, [pc, #40]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	031b      	lsls	r3, r3, #12
 8007736:	4907      	ldr	r1, [pc, #28]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 8007738:	4313      	orrs	r3, r2
 800773a:	604b      	str	r3, [r1, #4]
 800773c:	e025      	b.n	800778a <HAL_RCC_OscConfig+0x2d2>
 800773e:	4b05      	ldr	r3, [pc, #20]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	061b      	lsls	r3, r3, #24
 800774c:	4901      	ldr	r1, [pc, #4]	; (8007754 <HAL_RCC_OscConfig+0x29c>)
 800774e:	4313      	orrs	r3, r2
 8007750:	604b      	str	r3, [r1, #4]
 8007752:	e01a      	b.n	800778a <HAL_RCC_OscConfig+0x2d2>
 8007754:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007758:	4b9e      	ldr	r3, [pc, #632]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a9d      	ldr	r2, [pc, #628]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 800775e:	f023 0301 	bic.w	r3, r3, #1
 8007762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007764:	f7fb fce2 	bl	800312c <HAL_GetTick>
 8007768:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800776a:	e008      	b.n	800777e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800776c:	f7fb fcde 	bl	800312c <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	2b02      	cmp	r3, #2
 8007778:	d901      	bls.n	800777e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e2c2      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800777e:	4b95      	ldr	r3, [pc, #596]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0304 	and.w	r3, r3, #4
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1f0      	bne.n	800776c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0310 	and.w	r3, r3, #16
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 80a9 	beq.w	80078ea <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007798:	4b8e      	ldr	r3, [pc, #568]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077a0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077a2:	4b8c      	ldr	r3, [pc, #560]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 80077a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	2b08      	cmp	r3, #8
 80077ac:	d007      	beq.n	80077be <HAL_RCC_OscConfig+0x306>
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	2b18      	cmp	r3, #24
 80077b2:	d13a      	bne.n	800782a <HAL_RCC_OscConfig+0x372>
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f003 0303 	and.w	r3, r3, #3
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d135      	bne.n	800782a <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80077be:	4b85      	ldr	r3, [pc, #532]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d005      	beq.n	80077d6 <HAL_RCC_OscConfig+0x31e>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	2b80      	cmp	r3, #128	; 0x80
 80077d0:	d001      	beq.n	80077d6 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e296      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80077d6:	f7fb fcb5 	bl	8003144 <HAL_GetREVID>
 80077da:	4603      	mov	r3, r0
 80077dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d817      	bhi.n	8007814 <HAL_RCC_OscConfig+0x35c>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a1b      	ldr	r3, [r3, #32]
 80077e8:	2b20      	cmp	r3, #32
 80077ea:	d108      	bne.n	80077fe <HAL_RCC_OscConfig+0x346>
 80077ec:	4b79      	ldr	r3, [pc, #484]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80077f4:	4a77      	ldr	r2, [pc, #476]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 80077f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077fa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80077fc:	e075      	b.n	80078ea <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80077fe:	4b75      	ldr	r3, [pc, #468]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	069b      	lsls	r3, r3, #26
 800780c:	4971      	ldr	r1, [pc, #452]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 800780e:	4313      	orrs	r3, r2
 8007810:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007812:	e06a      	b.n	80078ea <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007814:	4b6f      	ldr	r3, [pc, #444]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	061b      	lsls	r3, r3, #24
 8007822:	496c      	ldr	r1, [pc, #432]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 8007824:	4313      	orrs	r3, r2
 8007826:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007828:	e05f      	b.n	80078ea <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d042      	beq.n	80078b8 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007832:	4b68      	ldr	r3, [pc, #416]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a67      	ldr	r2, [pc, #412]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 8007838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800783e:	f7fb fc75 	bl	800312c <HAL_GetTick>
 8007842:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007844:	e008      	b.n	8007858 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007846:	f7fb fc71 	bl	800312c <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	2b02      	cmp	r3, #2
 8007852:	d901      	bls.n	8007858 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e255      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007858:	4b5e      	ldr	r3, [pc, #376]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0f0      	beq.n	8007846 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007864:	f7fb fc6e 	bl	8003144 <HAL_GetREVID>
 8007868:	4603      	mov	r3, r0
 800786a:	f241 0203 	movw	r2, #4099	; 0x1003
 800786e:	4293      	cmp	r3, r2
 8007870:	d817      	bhi.n	80078a2 <HAL_RCC_OscConfig+0x3ea>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	2b20      	cmp	r3, #32
 8007878:	d108      	bne.n	800788c <HAL_RCC_OscConfig+0x3d4>
 800787a:	4b56      	ldr	r3, [pc, #344]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007882:	4a54      	ldr	r2, [pc, #336]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 8007884:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007888:	6053      	str	r3, [r2, #4]
 800788a:	e02e      	b.n	80078ea <HAL_RCC_OscConfig+0x432>
 800788c:	4b51      	ldr	r3, [pc, #324]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	069b      	lsls	r3, r3, #26
 800789a:	494e      	ldr	r1, [pc, #312]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 800789c:	4313      	orrs	r3, r2
 800789e:	604b      	str	r3, [r1, #4]
 80078a0:	e023      	b.n	80078ea <HAL_RCC_OscConfig+0x432>
 80078a2:	4b4c      	ldr	r3, [pc, #304]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	061b      	lsls	r3, r3, #24
 80078b0:	4948      	ldr	r1, [pc, #288]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	60cb      	str	r3, [r1, #12]
 80078b6:	e018      	b.n	80078ea <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80078b8:	4b46      	ldr	r3, [pc, #280]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a45      	ldr	r2, [pc, #276]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 80078be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c4:	f7fb fc32 	bl	800312c <HAL_GetTick>
 80078c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80078ca:	e008      	b.n	80078de <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80078cc:	f7fb fc2e 	bl	800312c <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d901      	bls.n	80078de <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e212      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80078de:	4b3d      	ldr	r3, [pc, #244]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1f0      	bne.n	80078cc <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0308 	and.w	r3, r3, #8
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d036      	beq.n	8007964 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d019      	beq.n	8007932 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078fe:	4b35      	ldr	r3, [pc, #212]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 8007900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007902:	4a34      	ldr	r2, [pc, #208]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 8007904:	f043 0301 	orr.w	r3, r3, #1
 8007908:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800790a:	f7fb fc0f 	bl	800312c <HAL_GetTick>
 800790e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007910:	e008      	b.n	8007924 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007912:	f7fb fc0b 	bl	800312c <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	2b02      	cmp	r3, #2
 800791e:	d901      	bls.n	8007924 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e1ef      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007924:	4b2b      	ldr	r3, [pc, #172]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 8007926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007928:	f003 0302 	and.w	r3, r3, #2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d0f0      	beq.n	8007912 <HAL_RCC_OscConfig+0x45a>
 8007930:	e018      	b.n	8007964 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007932:	4b28      	ldr	r3, [pc, #160]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 8007934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007936:	4a27      	ldr	r2, [pc, #156]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 8007938:	f023 0301 	bic.w	r3, r3, #1
 800793c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800793e:	f7fb fbf5 	bl	800312c <HAL_GetTick>
 8007942:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007944:	e008      	b.n	8007958 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007946:	f7fb fbf1 	bl	800312c <HAL_GetTick>
 800794a:	4602      	mov	r2, r0
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	2b02      	cmp	r3, #2
 8007952:	d901      	bls.n	8007958 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e1d5      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007958:	4b1e      	ldr	r3, [pc, #120]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 800795a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800795c:	f003 0302 	and.w	r3, r3, #2
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1f0      	bne.n	8007946 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0320 	and.w	r3, r3, #32
 800796c:	2b00      	cmp	r3, #0
 800796e:	d039      	beq.n	80079e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d019      	beq.n	80079ac <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007978:	4b16      	ldr	r3, [pc, #88]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a15      	ldr	r2, [pc, #84]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 800797e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007982:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007984:	f7fb fbd2 	bl	800312c <HAL_GetTick>
 8007988:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800798a:	e008      	b.n	800799e <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800798c:	f7fb fbce 	bl	800312c <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	2b02      	cmp	r3, #2
 8007998:	d901      	bls.n	800799e <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e1b2      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800799e:	4b0d      	ldr	r3, [pc, #52]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d0f0      	beq.n	800798c <HAL_RCC_OscConfig+0x4d4>
 80079aa:	e01b      	b.n	80079e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80079ac:	4b09      	ldr	r3, [pc, #36]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a08      	ldr	r2, [pc, #32]	; (80079d4 <HAL_RCC_OscConfig+0x51c>)
 80079b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80079b8:	f7fb fbb8 	bl	800312c <HAL_GetTick>
 80079bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80079be:	e00b      	b.n	80079d8 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80079c0:	f7fb fbb4 	bl	800312c <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d904      	bls.n	80079d8 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e198      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
 80079d2:	bf00      	nop
 80079d4:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80079d8:	4ba3      	ldr	r3, [pc, #652]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1ed      	bne.n	80079c0 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0304 	and.w	r3, r3, #4
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f000 8081 	beq.w	8007af4 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80079f2:	4b9e      	ldr	r3, [pc, #632]	; (8007c6c <HAL_RCC_OscConfig+0x7b4>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a9d      	ldr	r2, [pc, #628]	; (8007c6c <HAL_RCC_OscConfig+0x7b4>)
 80079f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079fe:	f7fb fb95 	bl	800312c <HAL_GetTick>
 8007a02:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a04:	e008      	b.n	8007a18 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007a06:	f7fb fb91 	bl	800312c <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	2b64      	cmp	r3, #100	; 0x64
 8007a12:	d901      	bls.n	8007a18 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e175      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a18:	4b94      	ldr	r3, [pc, #592]	; (8007c6c <HAL_RCC_OscConfig+0x7b4>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d0f0      	beq.n	8007a06 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d106      	bne.n	8007a3a <HAL_RCC_OscConfig+0x582>
 8007a2c:	4b8e      	ldr	r3, [pc, #568]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a30:	4a8d      	ldr	r2, [pc, #564]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007a32:	f043 0301 	orr.w	r3, r3, #1
 8007a36:	6713      	str	r3, [r2, #112]	; 0x70
 8007a38:	e02d      	b.n	8007a96 <HAL_RCC_OscConfig+0x5de>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10c      	bne.n	8007a5c <HAL_RCC_OscConfig+0x5a4>
 8007a42:	4b89      	ldr	r3, [pc, #548]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a46:	4a88      	ldr	r2, [pc, #544]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007a48:	f023 0301 	bic.w	r3, r3, #1
 8007a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a4e:	4b86      	ldr	r3, [pc, #536]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a52:	4a85      	ldr	r2, [pc, #532]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007a54:	f023 0304 	bic.w	r3, r3, #4
 8007a58:	6713      	str	r3, [r2, #112]	; 0x70
 8007a5a:	e01c      	b.n	8007a96 <HAL_RCC_OscConfig+0x5de>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	2b05      	cmp	r3, #5
 8007a62:	d10c      	bne.n	8007a7e <HAL_RCC_OscConfig+0x5c6>
 8007a64:	4b80      	ldr	r3, [pc, #512]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a68:	4a7f      	ldr	r2, [pc, #508]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007a6a:	f043 0304 	orr.w	r3, r3, #4
 8007a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a70:	4b7d      	ldr	r3, [pc, #500]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a74:	4a7c      	ldr	r2, [pc, #496]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007a76:	f043 0301 	orr.w	r3, r3, #1
 8007a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a7c:	e00b      	b.n	8007a96 <HAL_RCC_OscConfig+0x5de>
 8007a7e:	4b7a      	ldr	r3, [pc, #488]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a82:	4a79      	ldr	r2, [pc, #484]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007a84:	f023 0301 	bic.w	r3, r3, #1
 8007a88:	6713      	str	r3, [r2, #112]	; 0x70
 8007a8a:	4b77      	ldr	r3, [pc, #476]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8e:	4a76      	ldr	r2, [pc, #472]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007a90:	f023 0304 	bic.w	r3, r3, #4
 8007a94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d015      	beq.n	8007aca <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a9e:	f7fb fb45 	bl	800312c <HAL_GetTick>
 8007aa2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007aa4:	e00a      	b.n	8007abc <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007aa6:	f7fb fb41 	bl	800312c <HAL_GetTick>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d901      	bls.n	8007abc <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e123      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007abc:	4b6a      	ldr	r3, [pc, #424]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d0ee      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x5ee>
 8007ac8:	e014      	b.n	8007af4 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aca:	f7fb fb2f 	bl	800312c <HAL_GetTick>
 8007ace:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ad0:	e00a      	b.n	8007ae8 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ad2:	f7fb fb2b 	bl	800312c <HAL_GetTick>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d901      	bls.n	8007ae8 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e10d      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ae8:	4b5f      	ldr	r3, [pc, #380]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aec:	f003 0302 	and.w	r3, r3, #2
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1ee      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 8102 	beq.w	8007d02 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007afe:	4b5a      	ldr	r3, [pc, #360]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b06:	2b18      	cmp	r3, #24
 8007b08:	f000 80bd 	beq.w	8007c86 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	f040 8095 	bne.w	8007c40 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b16:	4b54      	ldr	r3, [pc, #336]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a53      	ldr	r2, [pc, #332]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007b1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b22:	f7fb fb03 	bl	800312c <HAL_GetTick>
 8007b26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b28:	e008      	b.n	8007b3c <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b2a:	f7fb faff 	bl	800312c <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d901      	bls.n	8007b3c <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e0e3      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b3c:	4b4a      	ldr	r3, [pc, #296]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1f0      	bne.n	8007b2a <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b48:	4b47      	ldr	r3, [pc, #284]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007b4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b4c:	4b48      	ldr	r3, [pc, #288]	; (8007c70 <HAL_RCC_OscConfig+0x7b8>)
 8007b4e:	4013      	ands	r3, r2
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007b58:	0112      	lsls	r2, r2, #4
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	4942      	ldr	r1, [pc, #264]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	628b      	str	r3, [r1, #40]	; 0x28
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b66:	3b01      	subs	r3, #1
 8007b68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b70:	3b01      	subs	r3, #1
 8007b72:	025b      	lsls	r3, r3, #9
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	431a      	orrs	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	041b      	lsls	r3, r3, #16
 8007b80:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b84:	431a      	orrs	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	061b      	lsls	r3, r3, #24
 8007b8e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b92:	4935      	ldr	r1, [pc, #212]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007b98:	4b33      	ldr	r3, [pc, #204]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	4a32      	ldr	r2, [pc, #200]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007b9e:	f023 0301 	bic.w	r3, r3, #1
 8007ba2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007ba4:	4b30      	ldr	r3, [pc, #192]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ba8:	4b32      	ldr	r3, [pc, #200]	; (8007c74 <HAL_RCC_OscConfig+0x7bc>)
 8007baa:	4013      	ands	r3, r2
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007bb0:	00d2      	lsls	r2, r2, #3
 8007bb2:	492d      	ldr	r1, [pc, #180]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007bb8:	4b2b      	ldr	r3, [pc, #172]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbc:	f023 020c 	bic.w	r2, r3, #12
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc4:	4928      	ldr	r1, [pc, #160]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007bca:	4b27      	ldr	r3, [pc, #156]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bce:	f023 0202 	bic.w	r2, r3, #2
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd6:	4924      	ldr	r1, [pc, #144]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007bdc:	4b22      	ldr	r3, [pc, #136]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be0:	4a21      	ldr	r2, [pc, #132]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007be6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007be8:	4b1f      	ldr	r3, [pc, #124]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	4a1e      	ldr	r2, [pc, #120]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007bf4:	4b1c      	ldr	r3, [pc, #112]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf8:	4a1b      	ldr	r2, [pc, #108]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007bfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007c00:	4b19      	ldr	r3, [pc, #100]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c04:	4a18      	ldr	r2, [pc, #96]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007c06:	f043 0301 	orr.w	r3, r3, #1
 8007c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c0c:	4b16      	ldr	r3, [pc, #88]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a15      	ldr	r2, [pc, #84]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c18:	f7fb fa88 	bl	800312c <HAL_GetTick>
 8007c1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c1e:	e008      	b.n	8007c32 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c20:	f7fb fa84 	bl	800312c <HAL_GetTick>
 8007c24:	4602      	mov	r2, r0
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d901      	bls.n	8007c32 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e068      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c32:	4b0d      	ldr	r3, [pc, #52]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d0f0      	beq.n	8007c20 <HAL_RCC_OscConfig+0x768>
 8007c3e:	e060      	b.n	8007d02 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c40:	4b09      	ldr	r3, [pc, #36]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a08      	ldr	r2, [pc, #32]	; (8007c68 <HAL_RCC_OscConfig+0x7b0>)
 8007c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c4c:	f7fb fa6e 	bl	800312c <HAL_GetTick>
 8007c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c52:	e011      	b.n	8007c78 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c54:	f7fb fa6a 	bl	800312c <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d90a      	bls.n	8007c78 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e04e      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
 8007c66:	bf00      	nop
 8007c68:	58024400 	.word	0x58024400
 8007c6c:	58024800 	.word	0x58024800
 8007c70:	fffffc0c 	.word	0xfffffc0c
 8007c74:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c78:	4b24      	ldr	r3, [pc, #144]	; (8007d0c <HAL_RCC_OscConfig+0x854>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1e7      	bne.n	8007c54 <HAL_RCC_OscConfig+0x79c>
 8007c84:	e03d      	b.n	8007d02 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007c86:	4b21      	ldr	r3, [pc, #132]	; (8007d0c <HAL_RCC_OscConfig+0x854>)
 8007c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007c8c:	4b1f      	ldr	r3, [pc, #124]	; (8007d0c <HAL_RCC_OscConfig+0x854>)
 8007c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c90:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d031      	beq.n	8007cfe <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f003 0203 	and.w	r2, r3, #3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d12a      	bne.n	8007cfe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	091b      	lsrs	r3, r3, #4
 8007cac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d122      	bne.n	8007cfe <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d11a      	bne.n	8007cfe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	0a5b      	lsrs	r3, r3, #9
 8007ccc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d111      	bne.n	8007cfe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	0c1b      	lsrs	r3, r3, #16
 8007cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d108      	bne.n	8007cfe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	0e1b      	lsrs	r3, r3, #24
 8007cf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d001      	beq.n	8007d02 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e000      	b.n	8007d04 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3730      	adds	r7, #48	; 0x30
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	58024400 	.word	0x58024400

08007d10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e19c      	b.n	800805e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d24:	4b8a      	ldr	r3, [pc, #552]	; (8007f50 <HAL_RCC_ClockConfig+0x240>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 030f 	and.w	r3, r3, #15
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d910      	bls.n	8007d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d32:	4b87      	ldr	r3, [pc, #540]	; (8007f50 <HAL_RCC_ClockConfig+0x240>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f023 020f 	bic.w	r2, r3, #15
 8007d3a:	4985      	ldr	r1, [pc, #532]	; (8007f50 <HAL_RCC_ClockConfig+0x240>)
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d42:	4b83      	ldr	r3, [pc, #524]	; (8007f50 <HAL_RCC_ClockConfig+0x240>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 030f 	and.w	r3, r3, #15
 8007d4a:	683a      	ldr	r2, [r7, #0]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d001      	beq.n	8007d54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e184      	b.n	800805e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0304 	and.w	r3, r3, #4
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d010      	beq.n	8007d82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	691a      	ldr	r2, [r3, #16]
 8007d64:	4b7b      	ldr	r3, [pc, #492]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d908      	bls.n	8007d82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007d70:	4b78      	ldr	r3, [pc, #480]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	4975      	ldr	r1, [pc, #468]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 0308 	and.w	r3, r3, #8
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d010      	beq.n	8007db0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	695a      	ldr	r2, [r3, #20]
 8007d92:	4b70      	ldr	r3, [pc, #448]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007d94:	69db      	ldr	r3, [r3, #28]
 8007d96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d908      	bls.n	8007db0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007d9e:	4b6d      	ldr	r3, [pc, #436]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	496a      	ldr	r1, [pc, #424]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007dac:	4313      	orrs	r3, r2
 8007dae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0310 	and.w	r3, r3, #16
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d010      	beq.n	8007dde <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	699a      	ldr	r2, [r3, #24]
 8007dc0:	4b64      	ldr	r3, [pc, #400]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007dc2:	69db      	ldr	r3, [r3, #28]
 8007dc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d908      	bls.n	8007dde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007dcc:	4b61      	ldr	r3, [pc, #388]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007dce:	69db      	ldr	r3, [r3, #28]
 8007dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	495e      	ldr	r1, [pc, #376]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0320 	and.w	r3, r3, #32
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d010      	beq.n	8007e0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	69da      	ldr	r2, [r3, #28]
 8007dee:	4b59      	ldr	r3, [pc, #356]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d908      	bls.n	8007e0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007dfa:	4b56      	ldr	r3, [pc, #344]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	4953      	ldr	r1, [pc, #332]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d010      	beq.n	8007e3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	68da      	ldr	r2, [r3, #12]
 8007e1c:	4b4d      	ldr	r3, [pc, #308]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	f003 030f 	and.w	r3, r3, #15
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d908      	bls.n	8007e3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e28:	4b4a      	ldr	r3, [pc, #296]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	f023 020f 	bic.w	r2, r3, #15
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	4947      	ldr	r1, [pc, #284]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d055      	beq.n	8007ef2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007e46:	4b43      	ldr	r3, [pc, #268]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	4940      	ldr	r1, [pc, #256]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d107      	bne.n	8007e70 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e60:	4b3c      	ldr	r3, [pc, #240]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d121      	bne.n	8007eb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e0f6      	b.n	800805e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d107      	bne.n	8007e88 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e78:	4b36      	ldr	r3, [pc, #216]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d115      	bne.n	8007eb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e0ea      	b.n	800805e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d107      	bne.n	8007ea0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e90:	4b30      	ldr	r3, [pc, #192]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d109      	bne.n	8007eb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e0de      	b.n	800805e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ea0:	4b2c      	ldr	r3, [pc, #176]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0304 	and.w	r3, r3, #4
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e0d6      	b.n	800805e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007eb0:	4b28      	ldr	r3, [pc, #160]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	f023 0207 	bic.w	r2, r3, #7
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	4925      	ldr	r1, [pc, #148]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ec2:	f7fb f933 	bl	800312c <HAL_GetTick>
 8007ec6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ec8:	e00a      	b.n	8007ee0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007eca:	f7fb f92f 	bl	800312c <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d901      	bls.n	8007ee0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e0be      	b.n	800805e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ee0:	4b1c      	ldr	r3, [pc, #112]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	00db      	lsls	r3, r3, #3
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d1eb      	bne.n	8007eca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0302 	and.w	r3, r3, #2
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d010      	beq.n	8007f20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	4b14      	ldr	r3, [pc, #80]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	f003 030f 	and.w	r3, r3, #15
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d208      	bcs.n	8007f20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f0e:	4b11      	ldr	r3, [pc, #68]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	f023 020f 	bic.w	r2, r3, #15
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	490e      	ldr	r1, [pc, #56]	; (8007f54 <HAL_RCC_ClockConfig+0x244>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f20:	4b0b      	ldr	r3, [pc, #44]	; (8007f50 <HAL_RCC_ClockConfig+0x240>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 030f 	and.w	r3, r3, #15
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d214      	bcs.n	8007f58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f2e:	4b08      	ldr	r3, [pc, #32]	; (8007f50 <HAL_RCC_ClockConfig+0x240>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f023 020f 	bic.w	r2, r3, #15
 8007f36:	4906      	ldr	r1, [pc, #24]	; (8007f50 <HAL_RCC_ClockConfig+0x240>)
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f3e:	4b04      	ldr	r3, [pc, #16]	; (8007f50 <HAL_RCC_ClockConfig+0x240>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 030f 	and.w	r3, r3, #15
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d005      	beq.n	8007f58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e086      	b.n	800805e <HAL_RCC_ClockConfig+0x34e>
 8007f50:	52002000 	.word	0x52002000
 8007f54:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0304 	and.w	r3, r3, #4
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d010      	beq.n	8007f86 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	4b3f      	ldr	r3, [pc, #252]	; (8008068 <HAL_RCC_ClockConfig+0x358>)
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d208      	bcs.n	8007f86 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f74:	4b3c      	ldr	r3, [pc, #240]	; (8008068 <HAL_RCC_ClockConfig+0x358>)
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	4939      	ldr	r1, [pc, #228]	; (8008068 <HAL_RCC_ClockConfig+0x358>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0308 	and.w	r3, r3, #8
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d010      	beq.n	8007fb4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	695a      	ldr	r2, [r3, #20]
 8007f96:	4b34      	ldr	r3, [pc, #208]	; (8008068 <HAL_RCC_ClockConfig+0x358>)
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d208      	bcs.n	8007fb4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007fa2:	4b31      	ldr	r3, [pc, #196]	; (8008068 <HAL_RCC_ClockConfig+0x358>)
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	492e      	ldr	r1, [pc, #184]	; (8008068 <HAL_RCC_ClockConfig+0x358>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0310 	and.w	r3, r3, #16
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d010      	beq.n	8007fe2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	699a      	ldr	r2, [r3, #24]
 8007fc4:	4b28      	ldr	r3, [pc, #160]	; (8008068 <HAL_RCC_ClockConfig+0x358>)
 8007fc6:	69db      	ldr	r3, [r3, #28]
 8007fc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d208      	bcs.n	8007fe2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007fd0:	4b25      	ldr	r3, [pc, #148]	; (8008068 <HAL_RCC_ClockConfig+0x358>)
 8007fd2:	69db      	ldr	r3, [r3, #28]
 8007fd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	4922      	ldr	r1, [pc, #136]	; (8008068 <HAL_RCC_ClockConfig+0x358>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0320 	and.w	r3, r3, #32
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d010      	beq.n	8008010 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	69da      	ldr	r2, [r3, #28]
 8007ff2:	4b1d      	ldr	r3, [pc, #116]	; (8008068 <HAL_RCC_ClockConfig+0x358>)
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d208      	bcs.n	8008010 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007ffe:	4b1a      	ldr	r3, [pc, #104]	; (8008068 <HAL_RCC_ClockConfig+0x358>)
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	4917      	ldr	r1, [pc, #92]	; (8008068 <HAL_RCC_ClockConfig+0x358>)
 800800c:	4313      	orrs	r3, r2
 800800e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008010:	f000 f834 	bl	800807c <HAL_RCC_GetSysClockFreq>
 8008014:	4602      	mov	r2, r0
 8008016:	4b14      	ldr	r3, [pc, #80]	; (8008068 <HAL_RCC_ClockConfig+0x358>)
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	0a1b      	lsrs	r3, r3, #8
 800801c:	f003 030f 	and.w	r3, r3, #15
 8008020:	4912      	ldr	r1, [pc, #72]	; (800806c <HAL_RCC_ClockConfig+0x35c>)
 8008022:	5ccb      	ldrb	r3, [r1, r3]
 8008024:	f003 031f 	and.w	r3, r3, #31
 8008028:	fa22 f303 	lsr.w	r3, r2, r3
 800802c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800802e:	4b0e      	ldr	r3, [pc, #56]	; (8008068 <HAL_RCC_ClockConfig+0x358>)
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	f003 030f 	and.w	r3, r3, #15
 8008036:	4a0d      	ldr	r2, [pc, #52]	; (800806c <HAL_RCC_ClockConfig+0x35c>)
 8008038:	5cd3      	ldrb	r3, [r2, r3]
 800803a:	f003 031f 	and.w	r3, r3, #31
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	fa22 f303 	lsr.w	r3, r2, r3
 8008044:	4a0a      	ldr	r2, [pc, #40]	; (8008070 <HAL_RCC_ClockConfig+0x360>)
 8008046:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008048:	4a0a      	ldr	r2, [pc, #40]	; (8008074 <HAL_RCC_ClockConfig+0x364>)
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800804e:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <HAL_RCC_ClockConfig+0x368>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4618      	mov	r0, r3
 8008054:	f7fb f820 	bl	8003098 <HAL_InitTick>
 8008058:	4603      	mov	r3, r0
 800805a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800805c:	7bfb      	ldrb	r3, [r7, #15]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3718      	adds	r7, #24
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	58024400 	.word	0x58024400
 800806c:	0800f554 	.word	0x0800f554
 8008070:	2000005c 	.word	0x2000005c
 8008074:	20000058 	.word	0x20000058
 8008078:	20000060 	.word	0x20000060

0800807c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800807c:	b480      	push	{r7}
 800807e:	b089      	sub	sp, #36	; 0x24
 8008080:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008082:	4bb3      	ldr	r3, [pc, #716]	; (8008350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800808a:	2b18      	cmp	r3, #24
 800808c:	f200 8155 	bhi.w	800833a <HAL_RCC_GetSysClockFreq+0x2be>
 8008090:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008096:	bf00      	nop
 8008098:	080080fd 	.word	0x080080fd
 800809c:	0800833b 	.word	0x0800833b
 80080a0:	0800833b 	.word	0x0800833b
 80080a4:	0800833b 	.word	0x0800833b
 80080a8:	0800833b 	.word	0x0800833b
 80080ac:	0800833b 	.word	0x0800833b
 80080b0:	0800833b 	.word	0x0800833b
 80080b4:	0800833b 	.word	0x0800833b
 80080b8:	08008123 	.word	0x08008123
 80080bc:	0800833b 	.word	0x0800833b
 80080c0:	0800833b 	.word	0x0800833b
 80080c4:	0800833b 	.word	0x0800833b
 80080c8:	0800833b 	.word	0x0800833b
 80080cc:	0800833b 	.word	0x0800833b
 80080d0:	0800833b 	.word	0x0800833b
 80080d4:	0800833b 	.word	0x0800833b
 80080d8:	08008129 	.word	0x08008129
 80080dc:	0800833b 	.word	0x0800833b
 80080e0:	0800833b 	.word	0x0800833b
 80080e4:	0800833b 	.word	0x0800833b
 80080e8:	0800833b 	.word	0x0800833b
 80080ec:	0800833b 	.word	0x0800833b
 80080f0:	0800833b 	.word	0x0800833b
 80080f4:	0800833b 	.word	0x0800833b
 80080f8:	0800812f 	.word	0x0800812f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080fc:	4b94      	ldr	r3, [pc, #592]	; (8008350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 0320 	and.w	r3, r3, #32
 8008104:	2b00      	cmp	r3, #0
 8008106:	d009      	beq.n	800811c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008108:	4b91      	ldr	r3, [pc, #580]	; (8008350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	08db      	lsrs	r3, r3, #3
 800810e:	f003 0303 	and.w	r3, r3, #3
 8008112:	4a90      	ldr	r2, [pc, #576]	; (8008354 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008114:	fa22 f303 	lsr.w	r3, r2, r3
 8008118:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800811a:	e111      	b.n	8008340 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800811c:	4b8d      	ldr	r3, [pc, #564]	; (8008354 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800811e:	61bb      	str	r3, [r7, #24]
    break;
 8008120:	e10e      	b.n	8008340 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008122:	4b8d      	ldr	r3, [pc, #564]	; (8008358 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008124:	61bb      	str	r3, [r7, #24]
    break;
 8008126:	e10b      	b.n	8008340 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008128:	4b8c      	ldr	r3, [pc, #560]	; (800835c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800812a:	61bb      	str	r3, [r7, #24]
    break;
 800812c:	e108      	b.n	8008340 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800812e:	4b88      	ldr	r3, [pc, #544]	; (8008350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008132:	f003 0303 	and.w	r3, r3, #3
 8008136:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008138:	4b85      	ldr	r3, [pc, #532]	; (8008350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800813a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813c:	091b      	lsrs	r3, r3, #4
 800813e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008142:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008144:	4b82      	ldr	r3, [pc, #520]	; (8008350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800814e:	4b80      	ldr	r3, [pc, #512]	; (8008350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008152:	08db      	lsrs	r3, r3, #3
 8008154:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	fb02 f303 	mul.w	r3, r2, r3
 800815e:	ee07 3a90 	vmov	s15, r3
 8008162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008166:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 80e1 	beq.w	8008334 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	2b02      	cmp	r3, #2
 8008176:	f000 8083 	beq.w	8008280 <HAL_RCC_GetSysClockFreq+0x204>
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2b02      	cmp	r3, #2
 800817e:	f200 80a1 	bhi.w	80082c4 <HAL_RCC_GetSysClockFreq+0x248>
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d003      	beq.n	8008190 <HAL_RCC_GetSysClockFreq+0x114>
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d056      	beq.n	800823c <HAL_RCC_GetSysClockFreq+0x1c0>
 800818e:	e099      	b.n	80082c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008190:	4b6f      	ldr	r3, [pc, #444]	; (8008350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0320 	and.w	r3, r3, #32
 8008198:	2b00      	cmp	r3, #0
 800819a:	d02d      	beq.n	80081f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800819c:	4b6c      	ldr	r3, [pc, #432]	; (8008350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	08db      	lsrs	r3, r3, #3
 80081a2:	f003 0303 	and.w	r3, r3, #3
 80081a6:	4a6b      	ldr	r2, [pc, #428]	; (8008354 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80081a8:	fa22 f303 	lsr.w	r3, r2, r3
 80081ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	ee07 3a90 	vmov	s15, r3
 80081b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	ee07 3a90 	vmov	s15, r3
 80081be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081c6:	4b62      	ldr	r3, [pc, #392]	; (8008350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ce:	ee07 3a90 	vmov	s15, r3
 80081d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80081da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008360 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80081f6:	e087      	b.n	8008308 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	ee07 3a90 	vmov	s15, r3
 80081fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008202:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008364 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800820a:	4b51      	ldr	r3, [pc, #324]	; (8008350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800820c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008212:	ee07 3a90 	vmov	s15, r3
 8008216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800821a:	ed97 6a02 	vldr	s12, [r7, #8]
 800821e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008360 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800822a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800822e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800823a:	e065      	b.n	8008308 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	ee07 3a90 	vmov	s15, r3
 8008242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008246:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008368 <HAL_RCC_GetSysClockFreq+0x2ec>
 800824a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800824e:	4b40      	ldr	r3, [pc, #256]	; (8008350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008256:	ee07 3a90 	vmov	s15, r3
 800825a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800825e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008262:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008360 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800826a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800826e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800827a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800827e:	e043      	b.n	8008308 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	ee07 3a90 	vmov	s15, r3
 8008286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800828a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800836c <HAL_RCC_GetSysClockFreq+0x2f0>
 800828e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008292:	4b2f      	ldr	r3, [pc, #188]	; (8008350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800829a:	ee07 3a90 	vmov	s15, r3
 800829e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80082a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008360 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082c2:	e021      	b.n	8008308 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	ee07 3a90 	vmov	s15, r3
 80082ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008368 <HAL_RCC_GetSysClockFreq+0x2ec>
 80082d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082d6:	4b1e      	ldr	r3, [pc, #120]	; (8008350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082de:	ee07 3a90 	vmov	s15, r3
 80082e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80082ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008360 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008306:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008308:	4b11      	ldr	r3, [pc, #68]	; (8008350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800830a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830c:	0a5b      	lsrs	r3, r3, #9
 800830e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008312:	3301      	adds	r3, #1
 8008314:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	ee07 3a90 	vmov	s15, r3
 800831c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008320:	edd7 6a07 	vldr	s13, [r7, #28]
 8008324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800832c:	ee17 3a90 	vmov	r3, s15
 8008330:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008332:	e005      	b.n	8008340 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008334:	2300      	movs	r3, #0
 8008336:	61bb      	str	r3, [r7, #24]
    break;
 8008338:	e002      	b.n	8008340 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800833a:	4b07      	ldr	r3, [pc, #28]	; (8008358 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800833c:	61bb      	str	r3, [r7, #24]
    break;
 800833e:	bf00      	nop
  }

  return sysclockfreq;
 8008340:	69bb      	ldr	r3, [r7, #24]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3724      	adds	r7, #36	; 0x24
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	58024400 	.word	0x58024400
 8008354:	03d09000 	.word	0x03d09000
 8008358:	003d0900 	.word	0x003d0900
 800835c:	007a1200 	.word	0x007a1200
 8008360:	46000000 	.word	0x46000000
 8008364:	4c742400 	.word	0x4c742400
 8008368:	4a742400 	.word	0x4a742400
 800836c:	4af42400 	.word	0x4af42400

08008370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008376:	f7ff fe81 	bl	800807c <HAL_RCC_GetSysClockFreq>
 800837a:	4602      	mov	r2, r0
 800837c:	4b10      	ldr	r3, [pc, #64]	; (80083c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	0a1b      	lsrs	r3, r3, #8
 8008382:	f003 030f 	and.w	r3, r3, #15
 8008386:	490f      	ldr	r1, [pc, #60]	; (80083c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008388:	5ccb      	ldrb	r3, [r1, r3]
 800838a:	f003 031f 	and.w	r3, r3, #31
 800838e:	fa22 f303 	lsr.w	r3, r2, r3
 8008392:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008394:	4b0a      	ldr	r3, [pc, #40]	; (80083c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	f003 030f 	and.w	r3, r3, #15
 800839c:	4a09      	ldr	r2, [pc, #36]	; (80083c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800839e:	5cd3      	ldrb	r3, [r2, r3]
 80083a0:	f003 031f 	and.w	r3, r3, #31
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	fa22 f303 	lsr.w	r3, r2, r3
 80083aa:	4a07      	ldr	r2, [pc, #28]	; (80083c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80083ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80083ae:	4a07      	ldr	r2, [pc, #28]	; (80083cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80083b4:	4b04      	ldr	r3, [pc, #16]	; (80083c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80083b6:	681b      	ldr	r3, [r3, #0]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	58024400 	.word	0x58024400
 80083c4:	0800f554 	.word	0x0800f554
 80083c8:	2000005c 	.word	0x2000005c
 80083cc:	20000058 	.word	0x20000058

080083d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80083d4:	f7ff ffcc 	bl	8008370 <HAL_RCC_GetHCLKFreq>
 80083d8:	4602      	mov	r2, r0
 80083da:	4b06      	ldr	r3, [pc, #24]	; (80083f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083dc:	69db      	ldr	r3, [r3, #28]
 80083de:	091b      	lsrs	r3, r3, #4
 80083e0:	f003 0307 	and.w	r3, r3, #7
 80083e4:	4904      	ldr	r1, [pc, #16]	; (80083f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80083e6:	5ccb      	ldrb	r3, [r1, r3]
 80083e8:	f003 031f 	and.w	r3, r3, #31
 80083ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	58024400 	.word	0x58024400
 80083f8:	0800f554 	.word	0x0800f554

080083fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008400:	f7ff ffb6 	bl	8008370 <HAL_RCC_GetHCLKFreq>
 8008404:	4602      	mov	r2, r0
 8008406:	4b06      	ldr	r3, [pc, #24]	; (8008420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	0a1b      	lsrs	r3, r3, #8
 800840c:	f003 0307 	and.w	r3, r3, #7
 8008410:	4904      	ldr	r1, [pc, #16]	; (8008424 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008412:	5ccb      	ldrb	r3, [r1, r3]
 8008414:	f003 031f 	and.w	r3, r3, #31
 8008418:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800841c:	4618      	mov	r0, r3
 800841e:	bd80      	pop	{r7, pc}
 8008420:	58024400 	.word	0x58024400
 8008424:	0800f554 	.word	0x0800f554

08008428 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008430:	2300      	movs	r3, #0
 8008432:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008434:	2300      	movs	r3, #0
 8008436:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d03f      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008448:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800844c:	d02a      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800844e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008452:	d824      	bhi.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008458:	d018      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800845a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800845e:	d81e      	bhi.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008460:	2b00      	cmp	r3, #0
 8008462:	d003      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008468:	d007      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800846a:	e018      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800846c:	4bab      	ldr	r3, [pc, #684]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800846e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008470:	4aaa      	ldr	r2, [pc, #680]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008476:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008478:	e015      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	3304      	adds	r3, #4
 800847e:	2102      	movs	r1, #2
 8008480:	4618      	mov	r0, r3
 8008482:	f001 fff3 	bl	800a46c <RCCEx_PLL2_Config>
 8008486:	4603      	mov	r3, r0
 8008488:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800848a:	e00c      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	3324      	adds	r3, #36	; 0x24
 8008490:	2102      	movs	r1, #2
 8008492:	4618      	mov	r0, r3
 8008494:	f002 f89c 	bl	800a5d0 <RCCEx_PLL3_Config>
 8008498:	4603      	mov	r3, r0
 800849a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800849c:	e003      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	75fb      	strb	r3, [r7, #23]
      break;
 80084a2:	e000      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80084a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d109      	bne.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80084ac:	4b9b      	ldr	r3, [pc, #620]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084b8:	4998      	ldr	r1, [pc, #608]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	650b      	str	r3, [r1, #80]	; 0x50
 80084be:	e001      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084c0:	7dfb      	ldrb	r3, [r7, #23]
 80084c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d03d      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084d4:	2b04      	cmp	r3, #4
 80084d6:	d826      	bhi.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80084d8:	a201      	add	r2, pc, #4	; (adr r2, 80084e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80084da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084de:	bf00      	nop
 80084e0:	080084f5 	.word	0x080084f5
 80084e4:	08008503 	.word	0x08008503
 80084e8:	08008515 	.word	0x08008515
 80084ec:	0800852d 	.word	0x0800852d
 80084f0:	0800852d 	.word	0x0800852d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084f4:	4b89      	ldr	r3, [pc, #548]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f8:	4a88      	ldr	r2, [pc, #544]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008500:	e015      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	3304      	adds	r3, #4
 8008506:	2100      	movs	r1, #0
 8008508:	4618      	mov	r0, r3
 800850a:	f001 ffaf 	bl	800a46c <RCCEx_PLL2_Config>
 800850e:	4603      	mov	r3, r0
 8008510:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008512:	e00c      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	3324      	adds	r3, #36	; 0x24
 8008518:	2100      	movs	r1, #0
 800851a:	4618      	mov	r0, r3
 800851c:	f002 f858 	bl	800a5d0 <RCCEx_PLL3_Config>
 8008520:	4603      	mov	r3, r0
 8008522:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008524:	e003      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	75fb      	strb	r3, [r7, #23]
      break;
 800852a:	e000      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800852c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800852e:	7dfb      	ldrb	r3, [r7, #23]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d109      	bne.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008534:	4b79      	ldr	r3, [pc, #484]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008538:	f023 0207 	bic.w	r2, r3, #7
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008540:	4976      	ldr	r1, [pc, #472]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008542:	4313      	orrs	r3, r2
 8008544:	650b      	str	r3, [r1, #80]	; 0x50
 8008546:	e001      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008548:	7dfb      	ldrb	r3, [r7, #23]
 800854a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008554:	2b00      	cmp	r3, #0
 8008556:	d042      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800855c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008560:	d02b      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008566:	d825      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008568:	2bc0      	cmp	r3, #192	; 0xc0
 800856a:	d028      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x196>
 800856c:	2bc0      	cmp	r3, #192	; 0xc0
 800856e:	d821      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008570:	2b80      	cmp	r3, #128	; 0x80
 8008572:	d016      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008574:	2b80      	cmp	r3, #128	; 0x80
 8008576:	d81d      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008578:	2b00      	cmp	r3, #0
 800857a:	d002      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800857c:	2b40      	cmp	r3, #64	; 0x40
 800857e:	d007      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008580:	e018      	b.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008582:	4b66      	ldr	r3, [pc, #408]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008586:	4a65      	ldr	r2, [pc, #404]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800858c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800858e:	e017      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	3304      	adds	r3, #4
 8008594:	2100      	movs	r1, #0
 8008596:	4618      	mov	r0, r3
 8008598:	f001 ff68 	bl	800a46c <RCCEx_PLL2_Config>
 800859c:	4603      	mov	r3, r0
 800859e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80085a0:	e00e      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	3324      	adds	r3, #36	; 0x24
 80085a6:	2100      	movs	r1, #0
 80085a8:	4618      	mov	r0, r3
 80085aa:	f002 f811 	bl	800a5d0 <RCCEx_PLL3_Config>
 80085ae:	4603      	mov	r3, r0
 80085b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80085b2:	e005      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	75fb      	strb	r3, [r7, #23]
      break;
 80085b8:	e002      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80085ba:	bf00      	nop
 80085bc:	e000      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80085be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085c0:	7dfb      	ldrb	r3, [r7, #23]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d109      	bne.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80085c6:	4b55      	ldr	r3, [pc, #340]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d2:	4952      	ldr	r1, [pc, #328]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085d4:	4313      	orrs	r3, r2
 80085d6:	650b      	str	r3, [r1, #80]	; 0x50
 80085d8:	e001      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085da:	7dfb      	ldrb	r3, [r7, #23]
 80085dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d049      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80085f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085f4:	d030      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80085f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085fa:	d82a      	bhi.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80085fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008600:	d02c      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008602:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008606:	d824      	bhi.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800860c:	d018      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800860e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008612:	d81e      	bhi.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008614:	2b00      	cmp	r3, #0
 8008616:	d003      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008618:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800861c:	d007      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800861e:	e018      	b.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008620:	4b3e      	ldr	r3, [pc, #248]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008624:	4a3d      	ldr	r2, [pc, #244]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800862a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800862c:	e017      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	3304      	adds	r3, #4
 8008632:	2100      	movs	r1, #0
 8008634:	4618      	mov	r0, r3
 8008636:	f001 ff19 	bl	800a46c <RCCEx_PLL2_Config>
 800863a:	4603      	mov	r3, r0
 800863c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800863e:	e00e      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	3324      	adds	r3, #36	; 0x24
 8008644:	2100      	movs	r1, #0
 8008646:	4618      	mov	r0, r3
 8008648:	f001 ffc2 	bl	800a5d0 <RCCEx_PLL3_Config>
 800864c:	4603      	mov	r3, r0
 800864e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008650:	e005      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	75fb      	strb	r3, [r7, #23]
      break;
 8008656:	e002      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008658:	bf00      	nop
 800865a:	e000      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800865c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800865e:	7dfb      	ldrb	r3, [r7, #23]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10a      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008664:	4b2d      	ldr	r3, [pc, #180]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008668:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008672:	492a      	ldr	r1, [pc, #168]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008674:	4313      	orrs	r3, r2
 8008676:	658b      	str	r3, [r1, #88]	; 0x58
 8008678:	e001      	b.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800867a:	7dfb      	ldrb	r3, [r7, #23]
 800867c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008686:	2b00      	cmp	r3, #0
 8008688:	d04c      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008690:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008694:	d030      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008696:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800869a:	d82a      	bhi.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800869c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80086a0:	d02c      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80086a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80086a6:	d824      	bhi.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80086a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086ac:	d018      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80086ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086b2:	d81e      	bhi.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d003      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80086b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086bc:	d007      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80086be:	e018      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086c0:	4b16      	ldr	r3, [pc, #88]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80086c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c4:	4a15      	ldr	r2, [pc, #84]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80086c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80086cc:	e017      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	3304      	adds	r3, #4
 80086d2:	2100      	movs	r1, #0
 80086d4:	4618      	mov	r0, r3
 80086d6:	f001 fec9 	bl	800a46c <RCCEx_PLL2_Config>
 80086da:	4603      	mov	r3, r0
 80086dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80086de:	e00e      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	3324      	adds	r3, #36	; 0x24
 80086e4:	2100      	movs	r1, #0
 80086e6:	4618      	mov	r0, r3
 80086e8:	f001 ff72 	bl	800a5d0 <RCCEx_PLL3_Config>
 80086ec:	4603      	mov	r3, r0
 80086ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80086f0:	e005      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	75fb      	strb	r3, [r7, #23]
      break;
 80086f6:	e002      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80086f8:	bf00      	nop
 80086fa:	e000      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80086fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10d      	bne.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008704:	4b05      	ldr	r3, [pc, #20]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008708:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008712:	4902      	ldr	r1, [pc, #8]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008714:	4313      	orrs	r3, r2
 8008716:	658b      	str	r3, [r1, #88]	; 0x58
 8008718:	e004      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800871a:	bf00      	nop
 800871c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008720:	7dfb      	ldrb	r3, [r7, #23]
 8008722:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d032      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008734:	2b30      	cmp	r3, #48	; 0x30
 8008736:	d01c      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008738:	2b30      	cmp	r3, #48	; 0x30
 800873a:	d817      	bhi.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800873c:	2b20      	cmp	r3, #32
 800873e:	d00c      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008740:	2b20      	cmp	r3, #32
 8008742:	d813      	bhi.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008744:	2b00      	cmp	r3, #0
 8008746:	d016      	beq.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008748:	2b10      	cmp	r3, #16
 800874a:	d10f      	bne.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800874c:	4baf      	ldr	r3, [pc, #700]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800874e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008750:	4aae      	ldr	r2, [pc, #696]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008756:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008758:	e00e      	b.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	3304      	adds	r3, #4
 800875e:	2102      	movs	r1, #2
 8008760:	4618      	mov	r0, r3
 8008762:	f001 fe83 	bl	800a46c <RCCEx_PLL2_Config>
 8008766:	4603      	mov	r3, r0
 8008768:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800876a:	e005      	b.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	75fb      	strb	r3, [r7, #23]
      break;
 8008770:	e002      	b.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008772:	bf00      	nop
 8008774:	e000      	b.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008776:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008778:	7dfb      	ldrb	r3, [r7, #23]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d109      	bne.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800877e:	4ba3      	ldr	r3, [pc, #652]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008782:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800878a:	49a0      	ldr	r1, [pc, #640]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800878c:	4313      	orrs	r3, r2
 800878e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008790:	e001      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008792:	7dfb      	ldrb	r3, [r7, #23]
 8008794:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d047      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087aa:	d030      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80087ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087b0:	d82a      	bhi.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80087b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087b6:	d02c      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80087b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087bc:	d824      	bhi.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80087be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087c2:	d018      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80087c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087c8:	d81e      	bhi.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80087ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087d2:	d007      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80087d4:	e018      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087d6:	4b8d      	ldr	r3, [pc, #564]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80087d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087da:	4a8c      	ldr	r2, [pc, #560]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80087dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80087e2:	e017      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	3304      	adds	r3, #4
 80087e8:	2100      	movs	r1, #0
 80087ea:	4618      	mov	r0, r3
 80087ec:	f001 fe3e 	bl	800a46c <RCCEx_PLL2_Config>
 80087f0:	4603      	mov	r3, r0
 80087f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80087f4:	e00e      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	3324      	adds	r3, #36	; 0x24
 80087fa:	2100      	movs	r1, #0
 80087fc:	4618      	mov	r0, r3
 80087fe:	f001 fee7 	bl	800a5d0 <RCCEx_PLL3_Config>
 8008802:	4603      	mov	r3, r0
 8008804:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008806:	e005      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	75fb      	strb	r3, [r7, #23]
      break;
 800880c:	e002      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800880e:	bf00      	nop
 8008810:	e000      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008814:	7dfb      	ldrb	r3, [r7, #23]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d109      	bne.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800881a:	4b7c      	ldr	r3, [pc, #496]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800881c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800881e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008826:	4979      	ldr	r1, [pc, #484]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008828:	4313      	orrs	r3, r2
 800882a:	650b      	str	r3, [r1, #80]	; 0x50
 800882c:	e001      	b.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800882e:	7dfb      	ldrb	r3, [r7, #23]
 8008830:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d049      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008842:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008846:	d02e      	beq.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800884c:	d828      	bhi.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800884e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008852:	d02a      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008854:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008858:	d822      	bhi.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800885a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800885e:	d026      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008860:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008864:	d81c      	bhi.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008866:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800886a:	d010      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800886c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008870:	d816      	bhi.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008872:	2b00      	cmp	r3, #0
 8008874:	d01d      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800887a:	d111      	bne.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3304      	adds	r3, #4
 8008880:	2101      	movs	r1, #1
 8008882:	4618      	mov	r0, r3
 8008884:	f001 fdf2 	bl	800a46c <RCCEx_PLL2_Config>
 8008888:	4603      	mov	r3, r0
 800888a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800888c:	e012      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3324      	adds	r3, #36	; 0x24
 8008892:	2101      	movs	r1, #1
 8008894:	4618      	mov	r0, r3
 8008896:	f001 fe9b 	bl	800a5d0 <RCCEx_PLL3_Config>
 800889a:	4603      	mov	r3, r0
 800889c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800889e:	e009      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	75fb      	strb	r3, [r7, #23]
      break;
 80088a4:	e006      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80088a6:	bf00      	nop
 80088a8:	e004      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80088aa:	bf00      	nop
 80088ac:	e002      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80088ae:	bf00      	nop
 80088b0:	e000      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80088b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088b4:	7dfb      	ldrb	r3, [r7, #23]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d109      	bne.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80088ba:	4b54      	ldr	r3, [pc, #336]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80088bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088be:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088c6:	4951      	ldr	r1, [pc, #324]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	650b      	str	r3, [r1, #80]	; 0x50
 80088cc:	e001      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ce:	7dfb      	ldrb	r3, [r7, #23]
 80088d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d04b      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80088e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088e8:	d02e      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80088ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088ee:	d828      	bhi.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80088f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088f4:	d02a      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80088f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088fa:	d822      	bhi.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80088fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008900:	d026      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008902:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008906:	d81c      	bhi.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800890c:	d010      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800890e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008912:	d816      	bhi.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008914:	2b00      	cmp	r3, #0
 8008916:	d01d      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008918:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800891c:	d111      	bne.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	3304      	adds	r3, #4
 8008922:	2101      	movs	r1, #1
 8008924:	4618      	mov	r0, r3
 8008926:	f001 fda1 	bl	800a46c <RCCEx_PLL2_Config>
 800892a:	4603      	mov	r3, r0
 800892c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800892e:	e012      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	3324      	adds	r3, #36	; 0x24
 8008934:	2101      	movs	r1, #1
 8008936:	4618      	mov	r0, r3
 8008938:	f001 fe4a 	bl	800a5d0 <RCCEx_PLL3_Config>
 800893c:	4603      	mov	r3, r0
 800893e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008940:	e009      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	75fb      	strb	r3, [r7, #23]
      break;
 8008946:	e006      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008948:	bf00      	nop
 800894a:	e004      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800894c:	bf00      	nop
 800894e:	e002      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008950:	bf00      	nop
 8008952:	e000      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008956:	7dfb      	ldrb	r3, [r7, #23]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10a      	bne.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800895c:	4b2b      	ldr	r3, [pc, #172]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800895e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008960:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800896a:	4928      	ldr	r1, [pc, #160]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800896c:	4313      	orrs	r3, r2
 800896e:	658b      	str	r3, [r1, #88]	; 0x58
 8008970:	e001      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008972:	7dfb      	ldrb	r3, [r7, #23]
 8008974:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d02f      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800898a:	d00e      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x582>
 800898c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008990:	d814      	bhi.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008992:	2b00      	cmp	r3, #0
 8008994:	d015      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800899a:	d10f      	bne.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800899c:	4b1b      	ldr	r3, [pc, #108]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800899e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a0:	4a1a      	ldr	r2, [pc, #104]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80089a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80089a8:	e00c      	b.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	3304      	adds	r3, #4
 80089ae:	2101      	movs	r1, #1
 80089b0:	4618      	mov	r0, r3
 80089b2:	f001 fd5b 	bl	800a46c <RCCEx_PLL2_Config>
 80089b6:	4603      	mov	r3, r0
 80089b8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80089ba:	e003      	b.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	75fb      	strb	r3, [r7, #23]
      break;
 80089c0:	e000      	b.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80089c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d109      	bne.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80089ca:	4b10      	ldr	r3, [pc, #64]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80089cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089d6:	490d      	ldr	r1, [pc, #52]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80089d8:	4313      	orrs	r3, r2
 80089da:	650b      	str	r3, [r1, #80]	; 0x50
 80089dc:	e001      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089de:	7dfb      	ldrb	r3, [r7, #23]
 80089e0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d033      	beq.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d81c      	bhi.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80089f6:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80089f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fc:	08008a37 	.word	0x08008a37
 8008a00:	08008a11 	.word	0x08008a11
 8008a04:	08008a1f 	.word	0x08008a1f
 8008a08:	08008a37 	.word	0x08008a37
 8008a0c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a10:	4bb8      	ldr	r3, [pc, #736]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a14:	4ab7      	ldr	r2, [pc, #732]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008a1c:	e00c      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	3304      	adds	r3, #4
 8008a22:	2102      	movs	r1, #2
 8008a24:	4618      	mov	r0, r3
 8008a26:	f001 fd21 	bl	800a46c <RCCEx_PLL2_Config>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008a2e:	e003      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	75fb      	strb	r3, [r7, #23]
      break;
 8008a34:	e000      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008a36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a38:	7dfb      	ldrb	r3, [r7, #23]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d109      	bne.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008a3e:	4bad      	ldr	r3, [pc, #692]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a42:	f023 0203 	bic.w	r2, r3, #3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a4a:	49aa      	ldr	r1, [pc, #680]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a50:	e001      	b.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a52:	7dfb      	ldrb	r3, [r7, #23]
 8008a54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 8086 	beq.w	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a64:	4ba4      	ldr	r3, [pc, #656]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4aa3      	ldr	r2, [pc, #652]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a70:	f7fa fb5c 	bl	800312c <HAL_GetTick>
 8008a74:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a76:	e009      	b.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a78:	f7fa fb58 	bl	800312c <HAL_GetTick>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	2b64      	cmp	r3, #100	; 0x64
 8008a84:	d902      	bls.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	75fb      	strb	r3, [r7, #23]
        break;
 8008a8a:	e005      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a8c:	4b9a      	ldr	r3, [pc, #616]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d0ef      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008a98:	7dfb      	ldrb	r3, [r7, #23]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d166      	bne.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008a9e:	4b95      	ldr	r3, [pc, #596]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008aa0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008aa8:	4053      	eors	r3, r2
 8008aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d013      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ab2:	4b90      	ldr	r3, [pc, #576]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008abc:	4b8d      	ldr	r3, [pc, #564]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac0:	4a8c      	ldr	r2, [pc, #560]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ac6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008ac8:	4b8a      	ldr	r3, [pc, #552]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008acc:	4a89      	ldr	r2, [pc, #548]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ad2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008ad4:	4a87      	ldr	r2, [pc, #540]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ae4:	d115      	bne.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae6:	f7fa fb21 	bl	800312c <HAL_GetTick>
 8008aea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008aec:	e00b      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aee:	f7fa fb1d 	bl	800312c <HAL_GetTick>
 8008af2:	4602      	mov	r2, r0
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d902      	bls.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	75fb      	strb	r3, [r7, #23]
            break;
 8008b04:	e005      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b06:	4b7b      	ldr	r3, [pc, #492]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d0ed      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d126      	bne.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b26:	d10d      	bne.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008b28:	4b72      	ldr	r3, [pc, #456]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b36:	0919      	lsrs	r1, r3, #4
 8008b38:	4b70      	ldr	r3, [pc, #448]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008b3a:	400b      	ands	r3, r1
 8008b3c:	496d      	ldr	r1, [pc, #436]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	610b      	str	r3, [r1, #16]
 8008b42:	e005      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008b44:	4b6b      	ldr	r3, [pc, #428]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	4a6a      	ldr	r2, [pc, #424]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008b4e:	6113      	str	r3, [r2, #16]
 8008b50:	4b68      	ldr	r3, [pc, #416]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b5e:	4965      	ldr	r1, [pc, #404]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b60:	4313      	orrs	r3, r2
 8008b62:	670b      	str	r3, [r1, #112]	; 0x70
 8008b64:	e004      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	75bb      	strb	r3, [r7, #22]
 8008b6a:	e001      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
 8008b6e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0301 	and.w	r3, r3, #1
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d07e      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b80:	2b28      	cmp	r3, #40	; 0x28
 8008b82:	d867      	bhi.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008b84:	a201      	add	r2, pc, #4	; (adr r2, 8008b8c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8a:	bf00      	nop
 8008b8c:	08008c5b 	.word	0x08008c5b
 8008b90:	08008c55 	.word	0x08008c55
 8008b94:	08008c55 	.word	0x08008c55
 8008b98:	08008c55 	.word	0x08008c55
 8008b9c:	08008c55 	.word	0x08008c55
 8008ba0:	08008c55 	.word	0x08008c55
 8008ba4:	08008c55 	.word	0x08008c55
 8008ba8:	08008c55 	.word	0x08008c55
 8008bac:	08008c31 	.word	0x08008c31
 8008bb0:	08008c55 	.word	0x08008c55
 8008bb4:	08008c55 	.word	0x08008c55
 8008bb8:	08008c55 	.word	0x08008c55
 8008bbc:	08008c55 	.word	0x08008c55
 8008bc0:	08008c55 	.word	0x08008c55
 8008bc4:	08008c55 	.word	0x08008c55
 8008bc8:	08008c55 	.word	0x08008c55
 8008bcc:	08008c43 	.word	0x08008c43
 8008bd0:	08008c55 	.word	0x08008c55
 8008bd4:	08008c55 	.word	0x08008c55
 8008bd8:	08008c55 	.word	0x08008c55
 8008bdc:	08008c55 	.word	0x08008c55
 8008be0:	08008c55 	.word	0x08008c55
 8008be4:	08008c55 	.word	0x08008c55
 8008be8:	08008c55 	.word	0x08008c55
 8008bec:	08008c5b 	.word	0x08008c5b
 8008bf0:	08008c55 	.word	0x08008c55
 8008bf4:	08008c55 	.word	0x08008c55
 8008bf8:	08008c55 	.word	0x08008c55
 8008bfc:	08008c55 	.word	0x08008c55
 8008c00:	08008c55 	.word	0x08008c55
 8008c04:	08008c55 	.word	0x08008c55
 8008c08:	08008c55 	.word	0x08008c55
 8008c0c:	08008c5b 	.word	0x08008c5b
 8008c10:	08008c55 	.word	0x08008c55
 8008c14:	08008c55 	.word	0x08008c55
 8008c18:	08008c55 	.word	0x08008c55
 8008c1c:	08008c55 	.word	0x08008c55
 8008c20:	08008c55 	.word	0x08008c55
 8008c24:	08008c55 	.word	0x08008c55
 8008c28:	08008c55 	.word	0x08008c55
 8008c2c:	08008c5b 	.word	0x08008c5b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3304      	adds	r3, #4
 8008c34:	2101      	movs	r1, #1
 8008c36:	4618      	mov	r0, r3
 8008c38:	f001 fc18 	bl	800a46c <RCCEx_PLL2_Config>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008c40:	e00c      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	3324      	adds	r3, #36	; 0x24
 8008c46:	2101      	movs	r1, #1
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f001 fcc1 	bl	800a5d0 <RCCEx_PLL3_Config>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008c52:	e003      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	75fb      	strb	r3, [r7, #23]
      break;
 8008c58:	e000      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c5c:	7dfb      	ldrb	r3, [r7, #23]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d109      	bne.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008c62:	4b24      	ldr	r3, [pc, #144]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c66:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c6e:	4921      	ldr	r1, [pc, #132]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008c70:	4313      	orrs	r3, r2
 8008c72:	654b      	str	r3, [r1, #84]	; 0x54
 8008c74:	e001      	b.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c76:	7dfb      	ldrb	r3, [r7, #23]
 8008c78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0302 	and.w	r3, r3, #2
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d03e      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c8a:	2b05      	cmp	r3, #5
 8008c8c:	d820      	bhi.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008c8e:	a201      	add	r2, pc, #4	; (adr r2, 8008c94 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c94:	08008cd7 	.word	0x08008cd7
 8008c98:	08008cad 	.word	0x08008cad
 8008c9c:	08008cbf 	.word	0x08008cbf
 8008ca0:	08008cd7 	.word	0x08008cd7
 8008ca4:	08008cd7 	.word	0x08008cd7
 8008ca8:	08008cd7 	.word	0x08008cd7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3304      	adds	r3, #4
 8008cb0:	2101      	movs	r1, #1
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f001 fbda 	bl	800a46c <RCCEx_PLL2_Config>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008cbc:	e00c      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3324      	adds	r3, #36	; 0x24
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f001 fc83 	bl	800a5d0 <RCCEx_PLL3_Config>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008cce:	e003      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8008cd4:	e000      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d110      	bne.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008cde:	4b05      	ldr	r3, [pc, #20]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce2:	f023 0207 	bic.w	r2, r3, #7
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cea:	4902      	ldr	r1, [pc, #8]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008cec:	4313      	orrs	r3, r2
 8008cee:	654b      	str	r3, [r1, #84]	; 0x54
 8008cf0:	e008      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008cf2:	bf00      	nop
 8008cf4:	58024400 	.word	0x58024400
 8008cf8:	58024800 	.word	0x58024800
 8008cfc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d00:	7dfb      	ldrb	r3, [r7, #23]
 8008d02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0304 	and.w	r3, r3, #4
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d039      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d16:	2b05      	cmp	r3, #5
 8008d18:	d820      	bhi.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008d1a:	a201      	add	r2, pc, #4	; (adr r2, 8008d20 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d20:	08008d63 	.word	0x08008d63
 8008d24:	08008d39 	.word	0x08008d39
 8008d28:	08008d4b 	.word	0x08008d4b
 8008d2c:	08008d63 	.word	0x08008d63
 8008d30:	08008d63 	.word	0x08008d63
 8008d34:	08008d63 	.word	0x08008d63
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f001 fb94 	bl	800a46c <RCCEx_PLL2_Config>
 8008d44:	4603      	mov	r3, r0
 8008d46:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008d48:	e00c      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	3324      	adds	r3, #36	; 0x24
 8008d4e:	2101      	movs	r1, #1
 8008d50:	4618      	mov	r0, r3
 8008d52:	f001 fc3d 	bl	800a5d0 <RCCEx_PLL3_Config>
 8008d56:	4603      	mov	r3, r0
 8008d58:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008d5a:	e003      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d60:	e000      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10a      	bne.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008d6a:	4bb7      	ldr	r3, [pc, #732]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d6e:	f023 0207 	bic.w	r2, r3, #7
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d78:	49b3      	ldr	r1, [pc, #716]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	658b      	str	r3, [r1, #88]	; 0x58
 8008d7e:	e001      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
 8008d82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 0320 	and.w	r3, r3, #32
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d04b      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d9a:	d02e      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008da0:	d828      	bhi.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008da6:	d02a      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dac:	d822      	bhi.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008dae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008db2:	d026      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008db4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008db8:	d81c      	bhi.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dbe:	d010      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dc4:	d816      	bhi.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d01d      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008dca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dce:	d111      	bne.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f001 fb48 	bl	800a46c <RCCEx_PLL2_Config>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008de0:	e012      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	3324      	adds	r3, #36	; 0x24
 8008de6:	2102      	movs	r1, #2
 8008de8:	4618      	mov	r0, r3
 8008dea:	f001 fbf1 	bl	800a5d0 <RCCEx_PLL3_Config>
 8008dee:	4603      	mov	r3, r0
 8008df0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008df2:	e009      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	75fb      	strb	r3, [r7, #23]
      break;
 8008df8:	e006      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008dfa:	bf00      	nop
 8008dfc:	e004      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008dfe:	bf00      	nop
 8008e00:	e002      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008e02:	bf00      	nop
 8008e04:	e000      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e08:	7dfb      	ldrb	r3, [r7, #23]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10a      	bne.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e0e:	4b8e      	ldr	r3, [pc, #568]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e1c:	498a      	ldr	r1, [pc, #552]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	654b      	str	r3, [r1, #84]	; 0x54
 8008e22:	e001      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e24:	7dfb      	ldrb	r3, [r7, #23]
 8008e26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d04b      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008e3e:	d02e      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008e40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008e44:	d828      	bhi.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e4a:	d02a      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e50:	d822      	bhi.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008e52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e56:	d026      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008e58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e5c:	d81c      	bhi.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e62:	d010      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e68:	d816      	bhi.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d01d      	beq.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e72:	d111      	bne.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3304      	adds	r3, #4
 8008e78:	2100      	movs	r1, #0
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f001 faf6 	bl	800a46c <RCCEx_PLL2_Config>
 8008e80:	4603      	mov	r3, r0
 8008e82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008e84:	e012      	b.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	3324      	adds	r3, #36	; 0x24
 8008e8a:	2102      	movs	r1, #2
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f001 fb9f 	bl	800a5d0 <RCCEx_PLL3_Config>
 8008e92:	4603      	mov	r3, r0
 8008e94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008e96:	e009      	b.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e9c:	e006      	b.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008e9e:	bf00      	nop
 8008ea0:	e004      	b.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008ea2:	bf00      	nop
 8008ea4:	e002      	b.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008ea6:	bf00      	nop
 8008ea8:	e000      	b.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008eaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008eac:	7dfb      	ldrb	r3, [r7, #23]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10a      	bne.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008eb2:	4b65      	ldr	r3, [pc, #404]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ec0:	4961      	ldr	r1, [pc, #388]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	658b      	str	r3, [r1, #88]	; 0x58
 8008ec6:	e001      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec8:	7dfb      	ldrb	r3, [r7, #23]
 8008eca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d04b      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ede:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008ee2:	d02e      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008ee4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008ee8:	d828      	bhi.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eee:	d02a      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ef4:	d822      	bhi.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008ef6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008efa:	d026      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008efc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008f00:	d81c      	bhi.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f06:	d010      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f0c:	d816      	bhi.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d01d      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f16:	d111      	bne.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f001 faa4 	bl	800a46c <RCCEx_PLL2_Config>
 8008f24:	4603      	mov	r3, r0
 8008f26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008f28:	e012      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	3324      	adds	r3, #36	; 0x24
 8008f2e:	2102      	movs	r1, #2
 8008f30:	4618      	mov	r0, r3
 8008f32:	f001 fb4d 	bl	800a5d0 <RCCEx_PLL3_Config>
 8008f36:	4603      	mov	r3, r0
 8008f38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008f3a:	e009      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f40:	e006      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008f42:	bf00      	nop
 8008f44:	e004      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008f46:	bf00      	nop
 8008f48:	e002      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008f4a:	bf00      	nop
 8008f4c:	e000      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10a      	bne.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008f56:	4b3c      	ldr	r3, [pc, #240]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f64:	4938      	ldr	r1, [pc, #224]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	658b      	str	r3, [r1, #88]	; 0x58
 8008f6a:	e001      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f6c:	7dfb      	ldrb	r3, [r7, #23]
 8008f6e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0308 	and.w	r3, r3, #8
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d01a      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f86:	d10a      	bne.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3324      	adds	r3, #36	; 0x24
 8008f8c:	2102      	movs	r1, #2
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f001 fb1e 	bl	800a5d0 <RCCEx_PLL3_Config>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008f9e:	4b2a      	ldr	r3, [pc, #168]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fac:	4926      	ldr	r1, [pc, #152]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0310 	and.w	r3, r3, #16
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d01a      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fc8:	d10a      	bne.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	3324      	adds	r3, #36	; 0x24
 8008fce:	2102      	movs	r1, #2
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f001 fafd 	bl	800a5d0 <RCCEx_PLL3_Config>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d001      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008fe0:	4b19      	ldr	r3, [pc, #100]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fee:	4916      	ldr	r1, [pc, #88]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d036      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800900a:	d01f      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800900c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009010:	d817      	bhi.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8009016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800901a:	d009      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800901c:	e011      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	3304      	adds	r3, #4
 8009022:	2100      	movs	r1, #0
 8009024:	4618      	mov	r0, r3
 8009026:	f001 fa21 	bl	800a46c <RCCEx_PLL2_Config>
 800902a:	4603      	mov	r3, r0
 800902c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800902e:	e00e      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	3324      	adds	r3, #36	; 0x24
 8009034:	2102      	movs	r1, #2
 8009036:	4618      	mov	r0, r3
 8009038:	f001 faca 	bl	800a5d0 <RCCEx_PLL3_Config>
 800903c:	4603      	mov	r3, r0
 800903e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009040:	e005      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	75fb      	strb	r3, [r7, #23]
      break;
 8009046:	e002      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8009048:	58024400 	.word	0x58024400
      break;
 800904c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800904e:	7dfb      	ldrb	r3, [r7, #23]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10a      	bne.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009054:	4b93      	ldr	r3, [pc, #588]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009058:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009062:	4990      	ldr	r1, [pc, #576]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009064:	4313      	orrs	r3, r2
 8009066:	658b      	str	r3, [r1, #88]	; 0x58
 8009068:	e001      	b.n	800906e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800906a:	7dfb      	ldrb	r3, [r7, #23]
 800906c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009076:	2b00      	cmp	r3, #0
 8009078:	d033      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009080:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009084:	d01c      	beq.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009086:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800908a:	d816      	bhi.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800908c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009090:	d003      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8009092:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009096:	d007      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009098:	e00f      	b.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800909a:	4b82      	ldr	r3, [pc, #520]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800909c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909e:	4a81      	ldr	r2, [pc, #516]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80090a6:	e00c      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	3324      	adds	r3, #36	; 0x24
 80090ac:	2101      	movs	r1, #1
 80090ae:	4618      	mov	r0, r3
 80090b0:	f001 fa8e 	bl	800a5d0 <RCCEx_PLL3_Config>
 80090b4:	4603      	mov	r3, r0
 80090b6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80090b8:	e003      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	75fb      	strb	r3, [r7, #23]
      break;
 80090be:	e000      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80090c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090c2:	7dfb      	ldrb	r3, [r7, #23]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10a      	bne.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80090c8:	4b76      	ldr	r3, [pc, #472]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090d6:	4973      	ldr	r1, [pc, #460]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090d8:	4313      	orrs	r3, r2
 80090da:	654b      	str	r3, [r1, #84]	; 0x54
 80090dc:	e001      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090de:	7dfb      	ldrb	r3, [r7, #23]
 80090e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d029      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d003      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80090f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090fa:	d007      	beq.n	800910c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80090fc:	e00f      	b.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090fe:	4b69      	ldr	r3, [pc, #420]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009102:	4a68      	ldr	r2, [pc, #416]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009108:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800910a:	e00b      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	3304      	adds	r3, #4
 8009110:	2102      	movs	r1, #2
 8009112:	4618      	mov	r0, r3
 8009114:	f001 f9aa 	bl	800a46c <RCCEx_PLL2_Config>
 8009118:	4603      	mov	r3, r0
 800911a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800911c:	e002      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	75fb      	strb	r3, [r7, #23]
      break;
 8009122:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009124:	7dfb      	ldrb	r3, [r7, #23]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d109      	bne.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800912a:	4b5e      	ldr	r3, [pc, #376]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800912c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800912e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009136:	495b      	ldr	r1, [pc, #364]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009138:	4313      	orrs	r3, r2
 800913a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800913c:	e001      	b.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800913e:	7dfb      	ldrb	r3, [r7, #23]
 8009140:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00a      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	3324      	adds	r3, #36	; 0x24
 8009152:	2102      	movs	r1, #2
 8009154:	4618      	mov	r0, r3
 8009156:	f001 fa3b 	bl	800a5d0 <RCCEx_PLL3_Config>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d030      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009174:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009178:	d017      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800917a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800917e:	d811      	bhi.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009184:	d013      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800918a:	d80b      	bhi.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800918c:	2b00      	cmp	r3, #0
 800918e:	d010      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009194:	d106      	bne.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009196:	4b43      	ldr	r3, [pc, #268]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919a:	4a42      	ldr	r2, [pc, #264]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800919c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80091a2:	e007      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	75fb      	strb	r3, [r7, #23]
      break;
 80091a8:	e004      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80091aa:	bf00      	nop
 80091ac:	e002      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80091ae:	bf00      	nop
 80091b0:	e000      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80091b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091b4:	7dfb      	ldrb	r3, [r7, #23]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d109      	bne.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80091ba:	4b3a      	ldr	r3, [pc, #232]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80091bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091c6:	4937      	ldr	r1, [pc, #220]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80091c8:	4313      	orrs	r3, r2
 80091ca:	654b      	str	r3, [r1, #84]	; 0x54
 80091cc:	e001      	b.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ce:	7dfb      	ldrb	r3, [r7, #23]
 80091d0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d008      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80091de:	4b31      	ldr	r3, [pc, #196]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80091e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ea:	492e      	ldr	r1, [pc, #184]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80091ec:	4313      	orrs	r3, r2
 80091ee:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d009      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80091fc:	4b29      	ldr	r3, [pc, #164]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800920a:	4926      	ldr	r1, [pc, #152]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800920c:	4313      	orrs	r3, r2
 800920e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d008      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800921c:	4b21      	ldr	r3, [pc, #132]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800921e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009220:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009228:	491e      	ldr	r1, [pc, #120]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800922a:	4313      	orrs	r3, r2
 800922c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00d      	beq.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800923a:	4b1a      	ldr	r3, [pc, #104]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	4a19      	ldr	r2, [pc, #100]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009240:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009244:	6113      	str	r3, [r2, #16]
 8009246:	4b17      	ldr	r3, [pc, #92]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009248:	691a      	ldr	r2, [r3, #16]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009250:	4914      	ldr	r1, [pc, #80]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009252:	4313      	orrs	r3, r2
 8009254:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	da08      	bge.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800925e:	4b11      	ldr	r3, [pc, #68]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009262:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800926a:	490e      	ldr	r1, [pc, #56]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800926c:	4313      	orrs	r3, r2
 800926e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d009      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800927c:	4b09      	ldr	r3, [pc, #36]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800927e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009280:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800928a:	4906      	ldr	r1, [pc, #24]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800928c:	4313      	orrs	r3, r2
 800928e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009290:	7dbb      	ldrb	r3, [r7, #22]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d101      	bne.n	800929a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	e000      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
}
 800929c:	4618      	mov	r0, r3
 800929e:	3718      	adds	r7, #24
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	58024400 	.word	0x58024400

080092a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b090      	sub	sp, #64	; 0x40
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092b6:	f040 8095 	bne.w	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80092ba:	4bae      	ldr	r3, [pc, #696]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80092bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092be:	f003 0307 	and.w	r3, r3, #7
 80092c2:	633b      	str	r3, [r7, #48]	; 0x30
 80092c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c6:	2b04      	cmp	r3, #4
 80092c8:	f200 8088 	bhi.w	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80092cc:	a201      	add	r2, pc, #4	; (adr r2, 80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80092ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d2:	bf00      	nop
 80092d4:	080092e9 	.word	0x080092e9
 80092d8:	08009311 	.word	0x08009311
 80092dc:	08009339 	.word	0x08009339
 80092e0:	080093d5 	.word	0x080093d5
 80092e4:	08009361 	.word	0x08009361

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092e8:	4ba2      	ldr	r3, [pc, #648]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092f4:	d108      	bne.n	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 ff64 	bl	800a1c8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009304:	f000 bc95 	b.w	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009308:	2300      	movs	r3, #0
 800930a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800930c:	f000 bc91 	b.w	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009310:	4b98      	ldr	r3, [pc, #608]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009318:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800931c:	d108      	bne.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800931e:	f107 0318 	add.w	r3, r7, #24
 8009322:	4618      	mov	r0, r3
 8009324:	f000 fca8 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800932c:	f000 bc81 	b.w	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009330:	2300      	movs	r3, #0
 8009332:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009334:	f000 bc7d 	b.w	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009338:	4b8e      	ldr	r3, [pc, #568]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009344:	d108      	bne.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009346:	f107 030c 	add.w	r3, r7, #12
 800934a:	4618      	mov	r0, r3
 800934c:	f000 fde8 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009354:	f000 bc6d 	b.w	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009358:	2300      	movs	r3, #0
 800935a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800935c:	f000 bc69 	b.w	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009360:	4b84      	ldr	r3, [pc, #528]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009364:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009368:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800936a:	4b82      	ldr	r3, [pc, #520]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f003 0304 	and.w	r3, r3, #4
 8009372:	2b04      	cmp	r3, #4
 8009374:	d10c      	bne.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8009376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009378:	2b00      	cmp	r3, #0
 800937a:	d109      	bne.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800937c:	4b7d      	ldr	r3, [pc, #500]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	08db      	lsrs	r3, r3, #3
 8009382:	f003 0303 	and.w	r3, r3, #3
 8009386:	4a7c      	ldr	r2, [pc, #496]	; (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8009388:	fa22 f303 	lsr.w	r3, r2, r3
 800938c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800938e:	e01f      	b.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009390:	4b78      	ldr	r3, [pc, #480]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800939c:	d106      	bne.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800939e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093a4:	d102      	bne.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80093a6:	4b75      	ldr	r3, [pc, #468]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80093a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093aa:	e011      	b.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093ac:	4b71      	ldr	r3, [pc, #452]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093b8:	d106      	bne.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80093ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093c0:	d102      	bne.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80093c2:	4b6f      	ldr	r3, [pc, #444]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80093c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093c6:	e003      	b.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80093c8:	2300      	movs	r3, #0
 80093ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80093cc:	f000 bc31 	b.w	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80093d0:	f000 bc2f 	b.w	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80093d4:	4b6b      	ldr	r3, [pc, #428]	; (8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80093d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093d8:	f000 bc2b 	b.w	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80093dc:	2300      	movs	r3, #0
 80093de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093e0:	f000 bc27 	b.w	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093ea:	f040 8095 	bne.w	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80093ee:	4b61      	ldr	r3, [pc, #388]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80093f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093f2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80093f6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80093f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093fe:	d04d      	beq.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8009400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009406:	f200 8084 	bhi.w	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800940a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940c:	2bc0      	cmp	r3, #192	; 0xc0
 800940e:	d07d      	beq.n	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009412:	2bc0      	cmp	r3, #192	; 0xc0
 8009414:	d87d      	bhi.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	2b80      	cmp	r3, #128	; 0x80
 800941a:	d02d      	beq.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800941c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941e:	2b80      	cmp	r3, #128	; 0x80
 8009420:	d877      	bhi.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009424:	2b00      	cmp	r3, #0
 8009426:	d003      	beq.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8009428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942a:	2b40      	cmp	r3, #64	; 0x40
 800942c:	d012      	beq.n	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800942e:	e070      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009430:	4b50      	ldr	r3, [pc, #320]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009438:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800943c:	d107      	bne.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800943e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009442:	4618      	mov	r0, r3
 8009444:	f000 fec0 	bl	800a1c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800944c:	e3f1      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800944e:	2300      	movs	r3, #0
 8009450:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009452:	e3ee      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009454:	4b47      	ldr	r3, [pc, #284]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800945c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009460:	d107      	bne.n	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009462:	f107 0318 	add.w	r3, r7, #24
 8009466:	4618      	mov	r0, r3
 8009468:	f000 fc06 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009470:	e3df      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009472:	2300      	movs	r3, #0
 8009474:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009476:	e3dc      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009478:	4b3e      	ldr	r3, [pc, #248]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009484:	d107      	bne.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009486:	f107 030c 	add.w	r3, r7, #12
 800948a:	4618      	mov	r0, r3
 800948c:	f000 fd48 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009494:	e3cd      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800949a:	e3ca      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800949c:	4b35      	ldr	r3, [pc, #212]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800949e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094a4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094a6:	4b33      	ldr	r3, [pc, #204]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 0304 	and.w	r3, r3, #4
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d10c      	bne.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80094b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d109      	bne.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094b8:	4b2e      	ldr	r3, [pc, #184]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	08db      	lsrs	r3, r3, #3
 80094be:	f003 0303 	and.w	r3, r3, #3
 80094c2:	4a2d      	ldr	r2, [pc, #180]	; (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80094c4:	fa22 f303 	lsr.w	r3, r2, r3
 80094c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094ca:	e01e      	b.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094cc:	4b29      	ldr	r3, [pc, #164]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094d8:	d106      	bne.n	80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80094da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094e0:	d102      	bne.n	80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80094e2:	4b26      	ldr	r3, [pc, #152]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80094e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094e6:	e010      	b.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094e8:	4b22      	ldr	r3, [pc, #136]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094f4:	d106      	bne.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80094f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094fc:	d102      	bne.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80094fe:	4b20      	ldr	r3, [pc, #128]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009502:	e002      	b.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009504:	2300      	movs	r3, #0
 8009506:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009508:	e393      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800950a:	e392      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800950c:	4b1d      	ldr	r3, [pc, #116]	; (8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800950e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009510:	e38f      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009512:	2300      	movs	r3, #0
 8009514:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009516:	e38c      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800951e:	f040 80a7 	bne.w	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009522:	4b14      	ldr	r3, [pc, #80]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009526:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800952a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800952c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009532:	d05f      	beq.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009536:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800953a:	f200 8096 	bhi.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800953e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009540:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009544:	f000 808e 	beq.w	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8009548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800954e:	f200 808c 	bhi.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009558:	d03a      	beq.n	80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009560:	f200 8083 	bhi.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00e      	beq.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800956a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009570:	d01c      	beq.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8009572:	e07a      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009574:	58024400 	.word	0x58024400
 8009578:	03d09000 	.word	0x03d09000
 800957c:	003d0900 	.word	0x003d0900
 8009580:	007a1200 	.word	0x007a1200
 8009584:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009588:	4baa      	ldr	r3, [pc, #680]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009590:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009594:	d107      	bne.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800959a:	4618      	mov	r0, r3
 800959c:	f000 fe14 	bl	800a1c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095a4:	e345      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80095a6:	2300      	movs	r3, #0
 80095a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095aa:	e342      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095ac:	4ba1      	ldr	r3, [pc, #644]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095b8:	d107      	bne.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095ba:	f107 0318 	add.w	r3, r7, #24
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 fb5a 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095c8:	e333      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80095ca:	2300      	movs	r3, #0
 80095cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095ce:	e330      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095d0:	4b98      	ldr	r3, [pc, #608]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095dc:	d107      	bne.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095de:	f107 030c 	add.w	r3, r7, #12
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fc9c 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095ec:	e321      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80095ee:	2300      	movs	r3, #0
 80095f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095f2:	e31e      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80095f4:	4b8f      	ldr	r3, [pc, #572]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80095f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095fc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095fe:	4b8d      	ldr	r3, [pc, #564]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 0304 	and.w	r3, r3, #4
 8009606:	2b04      	cmp	r3, #4
 8009608:	d10c      	bne.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800960a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800960c:	2b00      	cmp	r3, #0
 800960e:	d109      	bne.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009610:	4b88      	ldr	r3, [pc, #544]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	08db      	lsrs	r3, r3, #3
 8009616:	f003 0303 	and.w	r3, r3, #3
 800961a:	4a87      	ldr	r2, [pc, #540]	; (8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800961c:	fa22 f303 	lsr.w	r3, r2, r3
 8009620:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009622:	e01e      	b.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009624:	4b83      	ldr	r3, [pc, #524]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800962c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009630:	d106      	bne.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8009632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009634:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009638:	d102      	bne.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800963a:	4b80      	ldr	r3, [pc, #512]	; (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800963c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800963e:	e010      	b.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009640:	4b7c      	ldr	r3, [pc, #496]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800964c:	d106      	bne.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800964e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009654:	d102      	bne.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009656:	4b7a      	ldr	r3, [pc, #488]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800965a:	e002      	b.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800965c:	2300      	movs	r3, #0
 800965e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009660:	e2e7      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009662:	e2e6      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009664:	4b77      	ldr	r3, [pc, #476]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009666:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009668:	e2e3      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800966a:	2300      	movs	r3, #0
 800966c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800966e:	e2e0      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009676:	f040 809c 	bne.w	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800967a:	4b6e      	ldr	r3, [pc, #440]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800967c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800967e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009682:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009686:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800968a:	d054      	beq.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009692:	f200 808b 	bhi.w	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009698:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800969c:	f000 8083 	beq.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80096a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80096a6:	f200 8081 	bhi.w	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80096aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096b0:	d02f      	beq.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80096b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096b8:	d878      	bhi.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80096ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d004      	beq.n	80096ca <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80096c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80096c6:	d012      	beq.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80096c8:	e070      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096ca:	4b5a      	ldr	r3, [pc, #360]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096d6:	d107      	bne.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096dc:	4618      	mov	r0, r3
 80096de:	f000 fd73 	bl	800a1c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096e6:	e2a4      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80096e8:	2300      	movs	r3, #0
 80096ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096ec:	e2a1      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096ee:	4b51      	ldr	r3, [pc, #324]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096fa:	d107      	bne.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096fc:	f107 0318 	add.w	r3, r7, #24
 8009700:	4618      	mov	r0, r3
 8009702:	f000 fab9 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800970a:	e292      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009710:	e28f      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009712:	4b48      	ldr	r3, [pc, #288]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800971a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800971e:	d107      	bne.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009720:	f107 030c 	add.w	r3, r7, #12
 8009724:	4618      	mov	r0, r3
 8009726:	f000 fbfb 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800972e:	e280      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009730:	2300      	movs	r3, #0
 8009732:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009734:	e27d      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009736:	4b3f      	ldr	r3, [pc, #252]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800973a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800973e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009740:	4b3c      	ldr	r3, [pc, #240]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f003 0304 	and.w	r3, r3, #4
 8009748:	2b04      	cmp	r3, #4
 800974a:	d10c      	bne.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800974c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800974e:	2b00      	cmp	r3, #0
 8009750:	d109      	bne.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009752:	4b38      	ldr	r3, [pc, #224]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	08db      	lsrs	r3, r3, #3
 8009758:	f003 0303 	and.w	r3, r3, #3
 800975c:	4a36      	ldr	r2, [pc, #216]	; (8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800975e:	fa22 f303 	lsr.w	r3, r2, r3
 8009762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009764:	e01e      	b.n	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009766:	4b33      	ldr	r3, [pc, #204]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800976e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009772:	d106      	bne.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8009774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009776:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800977a:	d102      	bne.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800977c:	4b2f      	ldr	r3, [pc, #188]	; (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800977e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009780:	e010      	b.n	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009782:	4b2c      	ldr	r3, [pc, #176]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800978a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800978e:	d106      	bne.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009796:	d102      	bne.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009798:	4b29      	ldr	r3, [pc, #164]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800979a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800979c:	e002      	b.n	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800979e:	2300      	movs	r3, #0
 80097a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80097a2:	e246      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80097a4:	e245      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80097a6:	4b27      	ldr	r3, [pc, #156]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80097a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097aa:	e242      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80097ac:	2300      	movs	r3, #0
 80097ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097b0:	e23f      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097b8:	f040 80a8 	bne.w	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80097bc:	4b1d      	ldr	r3, [pc, #116]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80097be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80097c4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80097c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097cc:	d060      	beq.n	8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80097ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097d4:	f200 8097 	bhi.w	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80097d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097de:	f000 808f 	beq.w	8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80097e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097e8:	f200 808d 	bhi.w	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80097ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097f2:	d03b      	beq.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80097f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097fa:	f200 8084 	bhi.w	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80097fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009800:	2b00      	cmp	r3, #0
 8009802:	d004      	beq.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8009804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800980a:	d01d      	beq.n	8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800980c:	e07b      	b.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800980e:	4b09      	ldr	r3, [pc, #36]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800981a:	d107      	bne.n	800982c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800981c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009820:	4618      	mov	r0, r3
 8009822:	f000 fcd1 	bl	800a1c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009828:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800982a:	e202      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800982c:	2300      	movs	r3, #0
 800982e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009830:	e1ff      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009832:	bf00      	nop
 8009834:	58024400 	.word	0x58024400
 8009838:	03d09000 	.word	0x03d09000
 800983c:	003d0900 	.word	0x003d0900
 8009840:	007a1200 	.word	0x007a1200
 8009844:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009848:	4ba3      	ldr	r3, [pc, #652]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009850:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009854:	d107      	bne.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009856:	f107 0318 	add.w	r3, r7, #24
 800985a:	4618      	mov	r0, r3
 800985c:	f000 fa0c 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009864:	e1e5      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009866:	2300      	movs	r3, #0
 8009868:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800986a:	e1e2      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800986c:	4b9a      	ldr	r3, [pc, #616]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009878:	d107      	bne.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800987a:	f107 030c 	add.w	r3, r7, #12
 800987e:	4618      	mov	r0, r3
 8009880:	f000 fb4e 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009888:	e1d3      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800988a:	2300      	movs	r3, #0
 800988c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800988e:	e1d0      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009890:	4b91      	ldr	r3, [pc, #580]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009894:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009898:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800989a:	4b8f      	ldr	r3, [pc, #572]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 0304 	and.w	r3, r3, #4
 80098a2:	2b04      	cmp	r3, #4
 80098a4:	d10c      	bne.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80098a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d109      	bne.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098ac:	4b8a      	ldr	r3, [pc, #552]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	08db      	lsrs	r3, r3, #3
 80098b2:	f003 0303 	and.w	r3, r3, #3
 80098b6:	4a89      	ldr	r2, [pc, #548]	; (8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80098b8:	fa22 f303 	lsr.w	r3, r2, r3
 80098bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098be:	e01e      	b.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098c0:	4b85      	ldr	r3, [pc, #532]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098cc:	d106      	bne.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 80098ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098d4:	d102      	bne.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80098d6:	4b82      	ldr	r3, [pc, #520]	; (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80098d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098da:	e010      	b.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098dc:	4b7e      	ldr	r3, [pc, #504]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098e8:	d106      	bne.n	80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80098ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098f0:	d102      	bne.n	80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80098f2:	4b7c      	ldr	r3, [pc, #496]	; (8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80098f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098f6:	e002      	b.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80098f8:	2300      	movs	r3, #0
 80098fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80098fc:	e199      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80098fe:	e198      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009900:	4b79      	ldr	r3, [pc, #484]	; (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009902:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009904:	e195      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800990a:	e192      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009912:	d173      	bne.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009914:	4b70      	ldr	r3, [pc, #448]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009918:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800991c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800991e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009920:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009924:	d02f      	beq.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8009926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800992c:	d863      	bhi.n	80099f6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800992e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009930:	2b00      	cmp	r3, #0
 8009932:	d004      	beq.n	800993e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8009934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800993a:	d012      	beq.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800993c:	e05b      	b.n	80099f6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800993e:	4b66      	ldr	r3, [pc, #408]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800994a:	d107      	bne.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800994c:	f107 0318 	add.w	r3, r7, #24
 8009950:	4618      	mov	r0, r3
 8009952:	f000 f991 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800995a:	e16a      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800995c:	2300      	movs	r3, #0
 800995e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009960:	e167      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009962:	4b5d      	ldr	r3, [pc, #372]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800996a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800996e:	d107      	bne.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009970:	f107 030c 	add.w	r3, r7, #12
 8009974:	4618      	mov	r0, r3
 8009976:	f000 fad3 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800997e:	e158      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009980:	2300      	movs	r3, #0
 8009982:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009984:	e155      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009986:	4b54      	ldr	r3, [pc, #336]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800998a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800998e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009990:	4b51      	ldr	r3, [pc, #324]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f003 0304 	and.w	r3, r3, #4
 8009998:	2b04      	cmp	r3, #4
 800999a:	d10c      	bne.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800999c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d109      	bne.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099a2:	4b4d      	ldr	r3, [pc, #308]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	08db      	lsrs	r3, r3, #3
 80099a8:	f003 0303 	and.w	r3, r3, #3
 80099ac:	4a4b      	ldr	r2, [pc, #300]	; (8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80099ae:	fa22 f303 	lsr.w	r3, r2, r3
 80099b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099b4:	e01e      	b.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099b6:	4b48      	ldr	r3, [pc, #288]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099c2:	d106      	bne.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80099c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099ca:	d102      	bne.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80099cc:	4b44      	ldr	r3, [pc, #272]	; (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80099ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099d0:	e010      	b.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099d2:	4b41      	ldr	r3, [pc, #260]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099de:	d106      	bne.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80099e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099e6:	d102      	bne.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80099e8:	4b3e      	ldr	r3, [pc, #248]	; (8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80099ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099ec:	e002      	b.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80099ee:	2300      	movs	r3, #0
 80099f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80099f2:	e11e      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80099f4:	e11d      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80099f6:	2300      	movs	r3, #0
 80099f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099fa:	e11a      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a02:	d133      	bne.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009a04:	4b34      	ldr	r3, [pc, #208]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a0c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d004      	beq.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8009a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a1a:	d012      	beq.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009a1c:	e023      	b.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a1e:	4b2e      	ldr	r3, [pc, #184]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a2a:	d107      	bne.n	8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 fbc9 	bl	800a1c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a3a:	e0fa      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a40:	e0f7      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a42:	4b25      	ldr	r3, [pc, #148]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a4e:	d107      	bne.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a50:	f107 0318 	add.w	r3, r7, #24
 8009a54:	4618      	mov	r0, r3
 8009a56:	f000 f90f 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009a5a:	6a3b      	ldr	r3, [r7, #32]
 8009a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a5e:	e0e8      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a60:	2300      	movs	r3, #0
 8009a62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a64:	e0e5      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009a66:	2300      	movs	r3, #0
 8009a68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a6a:	e0e2      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a72:	f040 808f 	bne.w	8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009a76:	4b18      	ldr	r3, [pc, #96]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a7a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009a7e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a86:	d075      	beq.n	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8009a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a8e:	d87e      	bhi.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a96:	d060      	beq.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8009a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a9e:	d876      	bhi.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009aa6:	d045      	beq.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8009aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009aae:	d86e      	bhi.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ab6:	d02b      	beq.n	8009b10 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8009ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009abe:	d866      	bhi.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d004      	beq.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009acc:	d00e      	beq.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009ace:	e05e      	b.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009ad0:	f000 f8bc 	bl	8009c4c <HAL_RCCEx_GetD3PCLK1Freq>
 8009ad4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009ad6:	e0ac      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009ad8:	58024400 	.word	0x58024400
 8009adc:	03d09000 	.word	0x03d09000
 8009ae0:	003d0900 	.word	0x003d0900
 8009ae4:	007a1200 	.word	0x007a1200
 8009ae8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009aec:	4b53      	ldr	r3, [pc, #332]	; (8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009af4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009af8:	d107      	bne.n	8009b0a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009afa:	f107 0318 	add.w	r3, r7, #24
 8009afe:	4618      	mov	r0, r3
 8009b00:	f000 f8ba 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b08:	e093      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b0e:	e090      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b10:	4b4a      	ldr	r3, [pc, #296]	; (8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b1c:	d107      	bne.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b1e:	f107 030c 	add.w	r3, r7, #12
 8009b22:	4618      	mov	r0, r3
 8009b24:	f000 f9fc 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b2c:	e081      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b32:	e07e      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b34:	4b41      	ldr	r3, [pc, #260]	; (8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 0304 	and.w	r3, r3, #4
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	d109      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b40:	4b3e      	ldr	r3, [pc, #248]	; (8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	08db      	lsrs	r3, r3, #3
 8009b46:	f003 0303 	and.w	r3, r3, #3
 8009b4a:	4a3d      	ldr	r2, [pc, #244]	; (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b52:	e06e      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b54:	2300      	movs	r3, #0
 8009b56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b58:	e06b      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009b5a:	4b38      	ldr	r3, [pc, #224]	; (8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b66:	d102      	bne.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8009b68:	4b36      	ldr	r3, [pc, #216]	; (8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b6c:	e061      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b72:	e05e      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b74:	4b31      	ldr	r3, [pc, #196]	; (8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b80:	d102      	bne.n	8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8009b82:	4b31      	ldr	r3, [pc, #196]	; (8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009b84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b86:	e054      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b8c:	e051      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b92:	e04e      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b9a:	d148      	bne.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009b9c:	4b27      	ldr	r3, [pc, #156]	; (8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ba0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ba4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bac:	d02a      	beq.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bb4:	d838      	bhi.n	8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d004      	beq.n	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bc2:	d00d      	beq.n	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009bc4:	e030      	b.n	8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009bc6:	4b1d      	ldr	r3, [pc, #116]	; (8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bd2:	d102      	bne.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8009bd4:	4b1c      	ldr	r3, [pc, #112]	; (8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009bd8:	e02b      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bde:	e028      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009be0:	4b16      	ldr	r3, [pc, #88]	; (8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009be8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bec:	d107      	bne.n	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 fae8 	bl	800a1c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009bfc:	e019      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c02:	e016      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c04:	4b0d      	ldr	r3, [pc, #52]	; (8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c10:	d107      	bne.n	8009c22 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c12:	f107 0318 	add.w	r3, r7, #24
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 f82e 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009c20:	e007      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c22:	2300      	movs	r3, #0
 8009c24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c26:	e004      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c2c:	e001      	b.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3740      	adds	r7, #64	; 0x40
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	58024400 	.word	0x58024400
 8009c40:	03d09000 	.word	0x03d09000
 8009c44:	003d0900 	.word	0x003d0900
 8009c48:	007a1200 	.word	0x007a1200

08009c4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009c50:	f7fe fb8e 	bl	8008370 <HAL_RCC_GetHCLKFreq>
 8009c54:	4602      	mov	r2, r0
 8009c56:	4b06      	ldr	r3, [pc, #24]	; (8009c70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	091b      	lsrs	r3, r3, #4
 8009c5c:	f003 0307 	and.w	r3, r3, #7
 8009c60:	4904      	ldr	r1, [pc, #16]	; (8009c74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009c62:	5ccb      	ldrb	r3, [r1, r3]
 8009c64:	f003 031f 	and.w	r3, r3, #31
 8009c68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	58024400 	.word	0x58024400
 8009c74:	0800f554 	.word	0x0800f554

08009c78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b089      	sub	sp, #36	; 0x24
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c80:	4ba1      	ldr	r3, [pc, #644]	; (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c84:	f003 0303 	and.w	r3, r3, #3
 8009c88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009c8a:	4b9f      	ldr	r3, [pc, #636]	; (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c8e:	0b1b      	lsrs	r3, r3, #12
 8009c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009c96:	4b9c      	ldr	r3, [pc, #624]	; (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9a:	091b      	lsrs	r3, r3, #4
 8009c9c:	f003 0301 	and.w	r3, r3, #1
 8009ca0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009ca2:	4b99      	ldr	r3, [pc, #612]	; (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ca6:	08db      	lsrs	r3, r3, #3
 8009ca8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	fb02 f303 	mul.w	r3, r2, r3
 8009cb2:	ee07 3a90 	vmov	s15, r3
 8009cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 8111 	beq.w	8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	f000 8083 	beq.w	8009dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	f200 80a1 	bhi.w	8009e18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d056      	beq.n	8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009ce2:	e099      	b.n	8009e18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ce4:	4b88      	ldr	r3, [pc, #544]	; (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 0320 	and.w	r3, r3, #32
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d02d      	beq.n	8009d4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009cf0:	4b85      	ldr	r3, [pc, #532]	; (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	08db      	lsrs	r3, r3, #3
 8009cf6:	f003 0303 	and.w	r3, r3, #3
 8009cfa:	4a84      	ldr	r2, [pc, #528]	; (8009f0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8009d00:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	ee07 3a90 	vmov	s15, r3
 8009d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	ee07 3a90 	vmov	s15, r3
 8009d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d1a:	4b7b      	ldr	r3, [pc, #492]	; (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d22:	ee07 3a90 	vmov	s15, r3
 8009d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009f10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d46:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009d4a:	e087      	b.n	8009e5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	ee07 3a90 	vmov	s15, r3
 8009d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009f14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d5e:	4b6a      	ldr	r3, [pc, #424]	; (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d66:	ee07 3a90 	vmov	s15, r3
 8009d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d72:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009f10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d8e:	e065      	b.n	8009e5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	ee07 3a90 	vmov	s15, r3
 8009d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009da2:	4b59      	ldr	r3, [pc, #356]	; (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009daa:	ee07 3a90 	vmov	s15, r3
 8009dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009db6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009f10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dd2:	e043      	b.n	8009e5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	ee07 3a90 	vmov	s15, r3
 8009dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dde:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009de6:	4b48      	ldr	r3, [pc, #288]	; (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dee:	ee07 3a90 	vmov	s15, r3
 8009df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dfa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009f10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e16:	e021      	b.n	8009e5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	ee07 3a90 	vmov	s15, r3
 8009e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e2a:	4b37      	ldr	r3, [pc, #220]	; (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e32:	ee07 3a90 	vmov	s15, r3
 8009e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009f10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009e5c:	4b2a      	ldr	r3, [pc, #168]	; (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e60:	0a5b      	lsrs	r3, r3, #9
 8009e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e66:	ee07 3a90 	vmov	s15, r3
 8009e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e76:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e82:	ee17 2a90 	vmov	r2, s15
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009e8a:	4b1f      	ldr	r3, [pc, #124]	; (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8e:	0c1b      	lsrs	r3, r3, #16
 8009e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e94:	ee07 3a90 	vmov	s15, r3
 8009e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ea0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ea4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eb0:	ee17 2a90 	vmov	r2, s15
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009eb8:	4b13      	ldr	r3, [pc, #76]	; (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ebc:	0e1b      	lsrs	r3, r3, #24
 8009ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ec2:	ee07 3a90 	vmov	s15, r3
 8009ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ece:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ed2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ede:	ee17 2a90 	vmov	r2, s15
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009ee6:	e008      	b.n	8009efa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	609a      	str	r2, [r3, #8]
}
 8009efa:	bf00      	nop
 8009efc:	3724      	adds	r7, #36	; 0x24
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	58024400 	.word	0x58024400
 8009f0c:	03d09000 	.word	0x03d09000
 8009f10:	46000000 	.word	0x46000000
 8009f14:	4c742400 	.word	0x4c742400
 8009f18:	4a742400 	.word	0x4a742400
 8009f1c:	4af42400 	.word	0x4af42400

08009f20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b089      	sub	sp, #36	; 0x24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f28:	4ba1      	ldr	r3, [pc, #644]	; (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2c:	f003 0303 	and.w	r3, r3, #3
 8009f30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009f32:	4b9f      	ldr	r3, [pc, #636]	; (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f36:	0d1b      	lsrs	r3, r3, #20
 8009f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009f3e:	4b9c      	ldr	r3, [pc, #624]	; (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f42:	0a1b      	lsrs	r3, r3, #8
 8009f44:	f003 0301 	and.w	r3, r3, #1
 8009f48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009f4a:	4b99      	ldr	r3, [pc, #612]	; (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f4e:	08db      	lsrs	r3, r3, #3
 8009f50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f54:	693a      	ldr	r2, [r7, #16]
 8009f56:	fb02 f303 	mul.w	r3, r2, r3
 8009f5a:	ee07 3a90 	vmov	s15, r3
 8009f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f000 8111 	beq.w	800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	f000 8083 	beq.w	800a07c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	f200 80a1 	bhi.w	800a0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d003      	beq.n	8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d056      	beq.n	800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009f8a:	e099      	b.n	800a0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f8c:	4b88      	ldr	r3, [pc, #544]	; (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 0320 	and.w	r3, r3, #32
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d02d      	beq.n	8009ff4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f98:	4b85      	ldr	r3, [pc, #532]	; (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	08db      	lsrs	r3, r3, #3
 8009f9e:	f003 0303 	and.w	r3, r3, #3
 8009fa2:	4a84      	ldr	r2, [pc, #528]	; (800a1b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	ee07 3a90 	vmov	s15, r3
 8009fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	ee07 3a90 	vmov	s15, r3
 8009fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fc2:	4b7b      	ldr	r3, [pc, #492]	; (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fca:	ee07 3a90 	vmov	s15, r3
 8009fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fd6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009ff2:	e087      	b.n	800a104 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	ee07 3a90 	vmov	s15, r3
 8009ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a1bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a006:	4b6a      	ldr	r3, [pc, #424]	; (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a00e:	ee07 3a90 	vmov	s15, r3
 800a012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a016:	ed97 6a03 	vldr	s12, [r7, #12]
 800a01a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a01e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a02a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a032:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a036:	e065      	b.n	800a104 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	ee07 3a90 	vmov	s15, r3
 800a03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a042:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a1c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a04a:	4b59      	ldr	r3, [pc, #356]	; (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a052:	ee07 3a90 	vmov	s15, r3
 800a056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a05a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a05e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a06a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a06e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a072:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a076:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a07a:	e043      	b.n	800a104 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	ee07 3a90 	vmov	s15, r3
 800a082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a086:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a08a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a08e:	4b48      	ldr	r3, [pc, #288]	; (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a096:	ee07 3a90 	vmov	s15, r3
 800a09a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a09e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0be:	e021      	b.n	800a104 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	ee07 3a90 	vmov	s15, r3
 800a0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a1c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a0ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0d2:	4b37      	ldr	r3, [pc, #220]	; (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0da:	ee07 3a90 	vmov	s15, r3
 800a0de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a102:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a104:	4b2a      	ldr	r3, [pc, #168]	; (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a108:	0a5b      	lsrs	r3, r3, #9
 800a10a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a10e:	ee07 3a90 	vmov	s15, r3
 800a112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a11a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a11e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a12a:	ee17 2a90 	vmov	r2, s15
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a132:	4b1f      	ldr	r3, [pc, #124]	; (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a136:	0c1b      	lsrs	r3, r3, #16
 800a138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a13c:	ee07 3a90 	vmov	s15, r3
 800a140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a144:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a148:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a14c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a158:	ee17 2a90 	vmov	r2, s15
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a160:	4b13      	ldr	r3, [pc, #76]	; (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a164:	0e1b      	lsrs	r3, r3, #24
 800a166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a16a:	ee07 3a90 	vmov	s15, r3
 800a16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a176:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a17a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a17e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a186:	ee17 2a90 	vmov	r2, s15
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a18e:	e008      	b.n	800a1a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	609a      	str	r2, [r3, #8]
}
 800a1a2:	bf00      	nop
 800a1a4:	3724      	adds	r7, #36	; 0x24
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop
 800a1b0:	58024400 	.word	0x58024400
 800a1b4:	03d09000 	.word	0x03d09000
 800a1b8:	46000000 	.word	0x46000000
 800a1bc:	4c742400 	.word	0x4c742400
 800a1c0:	4a742400 	.word	0x4a742400
 800a1c4:	4af42400 	.word	0x4af42400

0800a1c8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b089      	sub	sp, #36	; 0x24
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1d0:	4ba0      	ldr	r3, [pc, #640]	; (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d4:	f003 0303 	and.w	r3, r3, #3
 800a1d8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a1da:	4b9e      	ldr	r3, [pc, #632]	; (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1de:	091b      	lsrs	r3, r3, #4
 800a1e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1e4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a1e6:	4b9b      	ldr	r3, [pc, #620]	; (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ea:	f003 0301 	and.w	r3, r3, #1
 800a1ee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a1f0:	4b98      	ldr	r3, [pc, #608]	; (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f4:	08db      	lsrs	r3, r3, #3
 800a1f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1fa:	693a      	ldr	r2, [r7, #16]
 800a1fc:	fb02 f303 	mul.w	r3, r2, r3
 800a200:	ee07 3a90 	vmov	s15, r3
 800a204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a208:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f000 8111 	beq.w	800a436 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	2b02      	cmp	r3, #2
 800a218:	f000 8083 	beq.w	800a322 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	2b02      	cmp	r3, #2
 800a220:	f200 80a1 	bhi.w	800a366 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d003      	beq.n	800a232 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d056      	beq.n	800a2de <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a230:	e099      	b.n	800a366 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a232:	4b88      	ldr	r3, [pc, #544]	; (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 0320 	and.w	r3, r3, #32
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d02d      	beq.n	800a29a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a23e:	4b85      	ldr	r3, [pc, #532]	; (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	08db      	lsrs	r3, r3, #3
 800a244:	f003 0303 	and.w	r3, r3, #3
 800a248:	4a83      	ldr	r2, [pc, #524]	; (800a458 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a24a:	fa22 f303 	lsr.w	r3, r2, r3
 800a24e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	ee07 3a90 	vmov	s15, r3
 800a256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	ee07 3a90 	vmov	s15, r3
 800a260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a268:	4b7a      	ldr	r3, [pc, #488]	; (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a26c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a270:	ee07 3a90 	vmov	s15, r3
 800a274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a278:	ed97 6a03 	vldr	s12, [r7, #12]
 800a27c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a45c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a280:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a284:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a288:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a28c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a290:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a294:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a298:	e087      	b.n	800a3aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	ee07 3a90 	vmov	s15, r3
 800a2a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a460 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a2a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ac:	4b69      	ldr	r3, [pc, #420]	; (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b4:	ee07 3a90 	vmov	s15, r3
 800a2b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2c0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a45c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2dc:	e065      	b.n	800a3aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	ee07 3a90 	vmov	s15, r3
 800a2e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2e8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a464 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a2ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2f0:	4b58      	ldr	r3, [pc, #352]	; (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2f8:	ee07 3a90 	vmov	s15, r3
 800a2fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a300:	ed97 6a03 	vldr	s12, [r7, #12]
 800a304:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a45c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a308:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a30c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a310:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a314:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a31c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a320:	e043      	b.n	800a3aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	ee07 3a90 	vmov	s15, r3
 800a328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a32c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a468 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a330:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a334:	4b47      	ldr	r3, [pc, #284]	; (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a33c:	ee07 3a90 	vmov	s15, r3
 800a340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a344:	ed97 6a03 	vldr	s12, [r7, #12]
 800a348:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a45c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a34c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a350:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a354:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a358:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a35c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a360:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a364:	e021      	b.n	800a3aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	ee07 3a90 	vmov	s15, r3
 800a36c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a370:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a460 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a374:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a378:	4b36      	ldr	r3, [pc, #216]	; (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a37a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a37c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a380:	ee07 3a90 	vmov	s15, r3
 800a384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a388:	ed97 6a03 	vldr	s12, [r7, #12]
 800a38c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a45c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a390:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a394:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a398:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a39c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3a8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a3aa:	4b2a      	ldr	r3, [pc, #168]	; (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ae:	0a5b      	lsrs	r3, r3, #9
 800a3b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3b4:	ee07 3a90 	vmov	s15, r3
 800a3b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3d0:	ee17 2a90 	vmov	r2, s15
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a3d8:	4b1e      	ldr	r3, [pc, #120]	; (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3dc:	0c1b      	lsrs	r3, r3, #16
 800a3de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3e2:	ee07 3a90 	vmov	s15, r3
 800a3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3fe:	ee17 2a90 	vmov	r2, s15
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a406:	4b13      	ldr	r3, [pc, #76]	; (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40a:	0e1b      	lsrs	r3, r3, #24
 800a40c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a410:	ee07 3a90 	vmov	s15, r3
 800a414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a418:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a41c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a420:	edd7 6a07 	vldr	s13, [r7, #28]
 800a424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a42c:	ee17 2a90 	vmov	r2, s15
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a434:	e008      	b.n	800a448 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	609a      	str	r2, [r3, #8]
}
 800a448:	bf00      	nop
 800a44a:	3724      	adds	r7, #36	; 0x24
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr
 800a454:	58024400 	.word	0x58024400
 800a458:	03d09000 	.word	0x03d09000
 800a45c:	46000000 	.word	0x46000000
 800a460:	4c742400 	.word	0x4c742400
 800a464:	4a742400 	.word	0x4a742400
 800a468:	4af42400 	.word	0x4af42400

0800a46c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a47a:	4b53      	ldr	r3, [pc, #332]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47e:	f003 0303 	and.w	r3, r3, #3
 800a482:	2b03      	cmp	r3, #3
 800a484:	d101      	bne.n	800a48a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e099      	b.n	800a5be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a48a:	4b4f      	ldr	r3, [pc, #316]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a4e      	ldr	r2, [pc, #312]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a490:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a496:	f7f8 fe49 	bl	800312c <HAL_GetTick>
 800a49a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a49c:	e008      	b.n	800a4b0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a49e:	f7f8 fe45 	bl	800312c <HAL_GetTick>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	1ad3      	subs	r3, r2, r3
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d901      	bls.n	800a4b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a4ac:	2303      	movs	r3, #3
 800a4ae:	e086      	b.n	800a5be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4b0:	4b45      	ldr	r3, [pc, #276]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1f0      	bne.n	800a49e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a4bc:	4b42      	ldr	r3, [pc, #264]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	031b      	lsls	r3, r3, #12
 800a4ca:	493f      	ldr	r1, [pc, #252]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	628b      	str	r3, [r1, #40]	; 0x28
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	025b      	lsls	r3, r3, #9
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	431a      	orrs	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	041b      	lsls	r3, r3, #16
 800a4ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a4f2:	431a      	orrs	r2, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	691b      	ldr	r3, [r3, #16]
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	061b      	lsls	r3, r3, #24
 800a4fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a500:	4931      	ldr	r1, [pc, #196]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a502:	4313      	orrs	r3, r2
 800a504:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a506:	4b30      	ldr	r3, [pc, #192]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	695b      	ldr	r3, [r3, #20]
 800a512:	492d      	ldr	r1, [pc, #180]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a514:	4313      	orrs	r3, r2
 800a516:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a518:	4b2b      	ldr	r3, [pc, #172]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51c:	f023 0220 	bic.w	r2, r3, #32
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	699b      	ldr	r3, [r3, #24]
 800a524:	4928      	ldr	r1, [pc, #160]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a526:	4313      	orrs	r3, r2
 800a528:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a52a:	4b27      	ldr	r3, [pc, #156]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52e:	4a26      	ldr	r2, [pc, #152]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a530:	f023 0310 	bic.w	r3, r3, #16
 800a534:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a536:	4b24      	ldr	r3, [pc, #144]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a538:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a53a:	4b24      	ldr	r3, [pc, #144]	; (800a5cc <RCCEx_PLL2_Config+0x160>)
 800a53c:	4013      	ands	r3, r2
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	69d2      	ldr	r2, [r2, #28]
 800a542:	00d2      	lsls	r2, r2, #3
 800a544:	4920      	ldr	r1, [pc, #128]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a546:	4313      	orrs	r3, r2
 800a548:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a54a:	4b1f      	ldr	r3, [pc, #124]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a54e:	4a1e      	ldr	r2, [pc, #120]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a550:	f043 0310 	orr.w	r3, r3, #16
 800a554:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d106      	bne.n	800a56a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a55c:	4b1a      	ldr	r3, [pc, #104]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a560:	4a19      	ldr	r2, [pc, #100]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a562:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a566:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a568:	e00f      	b.n	800a58a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d106      	bne.n	800a57e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a570:	4b15      	ldr	r3, [pc, #84]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a574:	4a14      	ldr	r2, [pc, #80]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a57a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a57c:	e005      	b.n	800a58a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a57e:	4b12      	ldr	r3, [pc, #72]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a582:	4a11      	ldr	r2, [pc, #68]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a588:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a58a:	4b0f      	ldr	r3, [pc, #60]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a0e      	ldr	r2, [pc, #56]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a590:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a596:	f7f8 fdc9 	bl	800312c <HAL_GetTick>
 800a59a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a59c:	e008      	b.n	800a5b0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a59e:	f7f8 fdc5 	bl	800312c <HAL_GetTick>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	1ad3      	subs	r3, r2, r3
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d901      	bls.n	800a5b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	e006      	b.n	800a5be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a5b0:	4b05      	ldr	r3, [pc, #20]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d0f0      	beq.n	800a59e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	58024400 	.word	0x58024400
 800a5cc:	ffff0007 	.word	0xffff0007

0800a5d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a5de:	4b53      	ldr	r3, [pc, #332]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a5e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e2:	f003 0303 	and.w	r3, r3, #3
 800a5e6:	2b03      	cmp	r3, #3
 800a5e8:	d101      	bne.n	800a5ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e099      	b.n	800a722 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a5ee:	4b4f      	ldr	r3, [pc, #316]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a4e      	ldr	r2, [pc, #312]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a5f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5fa:	f7f8 fd97 	bl	800312c <HAL_GetTick>
 800a5fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a600:	e008      	b.n	800a614 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a602:	f7f8 fd93 	bl	800312c <HAL_GetTick>
 800a606:	4602      	mov	r2, r0
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	1ad3      	subs	r3, r2, r3
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	d901      	bls.n	800a614 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a610:	2303      	movs	r3, #3
 800a612:	e086      	b.n	800a722 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a614:	4b45      	ldr	r3, [pc, #276]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1f0      	bne.n	800a602 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a620:	4b42      	ldr	r3, [pc, #264]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a624:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	051b      	lsls	r3, r3, #20
 800a62e:	493f      	ldr	r1, [pc, #252]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a630:	4313      	orrs	r3, r2
 800a632:	628b      	str	r3, [r1, #40]	; 0x28
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	3b01      	subs	r3, #1
 800a63a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	3b01      	subs	r3, #1
 800a644:	025b      	lsls	r3, r3, #9
 800a646:	b29b      	uxth	r3, r3
 800a648:	431a      	orrs	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	3b01      	subs	r3, #1
 800a650:	041b      	lsls	r3, r3, #16
 800a652:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a656:	431a      	orrs	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	3b01      	subs	r3, #1
 800a65e:	061b      	lsls	r3, r3, #24
 800a660:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a664:	4931      	ldr	r1, [pc, #196]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a666:	4313      	orrs	r3, r2
 800a668:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a66a:	4b30      	ldr	r3, [pc, #192]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	695b      	ldr	r3, [r3, #20]
 800a676:	492d      	ldr	r1, [pc, #180]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a678:	4313      	orrs	r3, r2
 800a67a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a67c:	4b2b      	ldr	r3, [pc, #172]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a680:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	4928      	ldr	r1, [pc, #160]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a68a:	4313      	orrs	r3, r2
 800a68c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a68e:	4b27      	ldr	r3, [pc, #156]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a692:	4a26      	ldr	r2, [pc, #152]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a698:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a69a:	4b24      	ldr	r3, [pc, #144]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a69c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a69e:	4b24      	ldr	r3, [pc, #144]	; (800a730 <RCCEx_PLL3_Config+0x160>)
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	69d2      	ldr	r2, [r2, #28]
 800a6a6:	00d2      	lsls	r2, r2, #3
 800a6a8:	4920      	ldr	r1, [pc, #128]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a6ae:	4b1f      	ldr	r3, [pc, #124]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b2:	4a1e      	ldr	r2, [pc, #120]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d106      	bne.n	800a6ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a6c0:	4b1a      	ldr	r3, [pc, #104]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c4:	4a19      	ldr	r2, [pc, #100]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a6ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a6cc:	e00f      	b.n	800a6ee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d106      	bne.n	800a6e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a6d4:	4b15      	ldr	r3, [pc, #84]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d8:	4a14      	ldr	r2, [pc, #80]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a6de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a6e0:	e005      	b.n	800a6ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a6e2:	4b12      	ldr	r3, [pc, #72]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e6:	4a11      	ldr	r2, [pc, #68]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a6ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a6ee:	4b0f      	ldr	r3, [pc, #60]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a0e      	ldr	r2, [pc, #56]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6fa:	f7f8 fd17 	bl	800312c <HAL_GetTick>
 800a6fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a700:	e008      	b.n	800a714 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a702:	f7f8 fd13 	bl	800312c <HAL_GetTick>
 800a706:	4602      	mov	r2, r0
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	1ad3      	subs	r3, r2, r3
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d901      	bls.n	800a714 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a710:	2303      	movs	r3, #3
 800a712:	e006      	b.n	800a722 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a714:	4b05      	ldr	r3, [pc, #20]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d0f0      	beq.n	800a702 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a720:	7bfb      	ldrb	r3, [r7, #15]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	58024400 	.word	0x58024400
 800a730:	ffff0007 	.word	0xffff0007

0800a734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d101      	bne.n	800a746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	e049      	b.n	800a7da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d106      	bne.n	800a760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7f8 f9d0 	bl	8002b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2202      	movs	r2, #2
 800a764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	3304      	adds	r3, #4
 800a770:	4619      	mov	r1, r3
 800a772:	4610      	mov	r0, r2
 800a774:	f000 ff90 	bl	800b698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b082      	sub	sp, #8
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e049      	b.n	800a888 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d106      	bne.n	800a80e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f841 	bl	800a890 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2202      	movs	r2, #2
 800a812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	3304      	adds	r3, #4
 800a81e:	4619      	mov	r1, r3
 800a820:	4610      	mov	r0, r2
 800a822:	f000 ff39 	bl	800b698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2201      	movs	r2, #1
 800a82a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2201      	movs	r2, #1
 800a832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2201      	movs	r2, #1
 800a83a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2201      	movs	r2, #1
 800a842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2201      	movs	r2, #1
 800a852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2201      	movs	r2, #1
 800a85a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2201      	movs	r2, #1
 800a862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2201      	movs	r2, #1
 800a872:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2201      	movs	r2, #1
 800a882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a898:	bf00      	nop
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d109      	bne.n	800a8c8 <HAL_TIM_PWM_Start+0x24>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	bf14      	ite	ne
 800a8c0:	2301      	movne	r3, #1
 800a8c2:	2300      	moveq	r3, #0
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	e03c      	b.n	800a942 <HAL_TIM_PWM_Start+0x9e>
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	2b04      	cmp	r3, #4
 800a8cc:	d109      	bne.n	800a8e2 <HAL_TIM_PWM_Start+0x3e>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	bf14      	ite	ne
 800a8da:	2301      	movne	r3, #1
 800a8dc:	2300      	moveq	r3, #0
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	e02f      	b.n	800a942 <HAL_TIM_PWM_Start+0x9e>
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	2b08      	cmp	r3, #8
 800a8e6:	d109      	bne.n	800a8fc <HAL_TIM_PWM_Start+0x58>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	bf14      	ite	ne
 800a8f4:	2301      	movne	r3, #1
 800a8f6:	2300      	moveq	r3, #0
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	e022      	b.n	800a942 <HAL_TIM_PWM_Start+0x9e>
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	2b0c      	cmp	r3, #12
 800a900:	d109      	bne.n	800a916 <HAL_TIM_PWM_Start+0x72>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	bf14      	ite	ne
 800a90e:	2301      	movne	r3, #1
 800a910:	2300      	moveq	r3, #0
 800a912:	b2db      	uxtb	r3, r3
 800a914:	e015      	b.n	800a942 <HAL_TIM_PWM_Start+0x9e>
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	2b10      	cmp	r3, #16
 800a91a:	d109      	bne.n	800a930 <HAL_TIM_PWM_Start+0x8c>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a922:	b2db      	uxtb	r3, r3
 800a924:	2b01      	cmp	r3, #1
 800a926:	bf14      	ite	ne
 800a928:	2301      	movne	r3, #1
 800a92a:	2300      	moveq	r3, #0
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	e008      	b.n	800a942 <HAL_TIM_PWM_Start+0x9e>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a936:	b2db      	uxtb	r3, r3
 800a938:	2b01      	cmp	r3, #1
 800a93a:	bf14      	ite	ne
 800a93c:	2301      	movne	r3, #1
 800a93e:	2300      	moveq	r3, #0
 800a940:	b2db      	uxtb	r3, r3
 800a942:	2b00      	cmp	r3, #0
 800a944:	d001      	beq.n	800a94a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	e0a1      	b.n	800aa8e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d104      	bne.n	800a95a <HAL_TIM_PWM_Start+0xb6>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2202      	movs	r2, #2
 800a954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a958:	e023      	b.n	800a9a2 <HAL_TIM_PWM_Start+0xfe>
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	2b04      	cmp	r3, #4
 800a95e:	d104      	bne.n	800a96a <HAL_TIM_PWM_Start+0xc6>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2202      	movs	r2, #2
 800a964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a968:	e01b      	b.n	800a9a2 <HAL_TIM_PWM_Start+0xfe>
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	2b08      	cmp	r3, #8
 800a96e:	d104      	bne.n	800a97a <HAL_TIM_PWM_Start+0xd6>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2202      	movs	r2, #2
 800a974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a978:	e013      	b.n	800a9a2 <HAL_TIM_PWM_Start+0xfe>
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	2b0c      	cmp	r3, #12
 800a97e:	d104      	bne.n	800a98a <HAL_TIM_PWM_Start+0xe6>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2202      	movs	r2, #2
 800a984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a988:	e00b      	b.n	800a9a2 <HAL_TIM_PWM_Start+0xfe>
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	2b10      	cmp	r3, #16
 800a98e:	d104      	bne.n	800a99a <HAL_TIM_PWM_Start+0xf6>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2202      	movs	r2, #2
 800a994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a998:	e003      	b.n	800a9a2 <HAL_TIM_PWM_Start+0xfe>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2202      	movs	r2, #2
 800a99e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	6839      	ldr	r1, [r7, #0]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f001 fa82 	bl	800beb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a38      	ldr	r2, [pc, #224]	; (800aa98 <HAL_TIM_PWM_Start+0x1f4>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d013      	beq.n	800a9e2 <HAL_TIM_PWM_Start+0x13e>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a37      	ldr	r2, [pc, #220]	; (800aa9c <HAL_TIM_PWM_Start+0x1f8>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d00e      	beq.n	800a9e2 <HAL_TIM_PWM_Start+0x13e>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a35      	ldr	r2, [pc, #212]	; (800aaa0 <HAL_TIM_PWM_Start+0x1fc>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d009      	beq.n	800a9e2 <HAL_TIM_PWM_Start+0x13e>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4a34      	ldr	r2, [pc, #208]	; (800aaa4 <HAL_TIM_PWM_Start+0x200>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d004      	beq.n	800a9e2 <HAL_TIM_PWM_Start+0x13e>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a32      	ldr	r2, [pc, #200]	; (800aaa8 <HAL_TIM_PWM_Start+0x204>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d101      	bne.n	800a9e6 <HAL_TIM_PWM_Start+0x142>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e000      	b.n	800a9e8 <HAL_TIM_PWM_Start+0x144>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d007      	beq.n	800a9fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a9fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a25      	ldr	r2, [pc, #148]	; (800aa98 <HAL_TIM_PWM_Start+0x1f4>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d022      	beq.n	800aa4c <HAL_TIM_PWM_Start+0x1a8>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa0e:	d01d      	beq.n	800aa4c <HAL_TIM_PWM_Start+0x1a8>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a25      	ldr	r2, [pc, #148]	; (800aaac <HAL_TIM_PWM_Start+0x208>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d018      	beq.n	800aa4c <HAL_TIM_PWM_Start+0x1a8>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a24      	ldr	r2, [pc, #144]	; (800aab0 <HAL_TIM_PWM_Start+0x20c>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d013      	beq.n	800aa4c <HAL_TIM_PWM_Start+0x1a8>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a22      	ldr	r2, [pc, #136]	; (800aab4 <HAL_TIM_PWM_Start+0x210>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d00e      	beq.n	800aa4c <HAL_TIM_PWM_Start+0x1a8>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a1a      	ldr	r2, [pc, #104]	; (800aa9c <HAL_TIM_PWM_Start+0x1f8>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d009      	beq.n	800aa4c <HAL_TIM_PWM_Start+0x1a8>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a1e      	ldr	r2, [pc, #120]	; (800aab8 <HAL_TIM_PWM_Start+0x214>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d004      	beq.n	800aa4c <HAL_TIM_PWM_Start+0x1a8>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a16      	ldr	r2, [pc, #88]	; (800aaa0 <HAL_TIM_PWM_Start+0x1fc>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d115      	bne.n	800aa78 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	689a      	ldr	r2, [r3, #8]
 800aa52:	4b1a      	ldr	r3, [pc, #104]	; (800aabc <HAL_TIM_PWM_Start+0x218>)
 800aa54:	4013      	ands	r3, r2
 800aa56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2b06      	cmp	r3, #6
 800aa5c:	d015      	beq.n	800aa8a <HAL_TIM_PWM_Start+0x1e6>
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa64:	d011      	beq.n	800aa8a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f042 0201 	orr.w	r2, r2, #1
 800aa74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa76:	e008      	b.n	800aa8a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f042 0201 	orr.w	r2, r2, #1
 800aa86:	601a      	str	r2, [r3, #0]
 800aa88:	e000      	b.n	800aa8c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	40010000 	.word	0x40010000
 800aa9c:	40010400 	.word	0x40010400
 800aaa0:	40014000 	.word	0x40014000
 800aaa4:	40014400 	.word	0x40014400
 800aaa8:	40014800 	.word	0x40014800
 800aaac:	40000400 	.word	0x40000400
 800aab0:	40000800 	.word	0x40000800
 800aab4:	40000c00 	.word	0x40000c00
 800aab8:	40001800 	.word	0x40001800
 800aabc:	00010007 	.word	0x00010007

0800aac0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aaca:	2300      	movs	r3, #0
 800aacc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d109      	bne.n	800aae8 <HAL_TIM_PWM_Start_IT+0x28>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	2b01      	cmp	r3, #1
 800aade:	bf14      	ite	ne
 800aae0:	2301      	movne	r3, #1
 800aae2:	2300      	moveq	r3, #0
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	e03c      	b.n	800ab62 <HAL_TIM_PWM_Start_IT+0xa2>
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	2b04      	cmp	r3, #4
 800aaec:	d109      	bne.n	800ab02 <HAL_TIM_PWM_Start_IT+0x42>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	bf14      	ite	ne
 800aafa:	2301      	movne	r3, #1
 800aafc:	2300      	moveq	r3, #0
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	e02f      	b.n	800ab62 <HAL_TIM_PWM_Start_IT+0xa2>
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	2b08      	cmp	r3, #8
 800ab06:	d109      	bne.n	800ab1c <HAL_TIM_PWM_Start_IT+0x5c>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	bf14      	ite	ne
 800ab14:	2301      	movne	r3, #1
 800ab16:	2300      	moveq	r3, #0
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	e022      	b.n	800ab62 <HAL_TIM_PWM_Start_IT+0xa2>
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	2b0c      	cmp	r3, #12
 800ab20:	d109      	bne.n	800ab36 <HAL_TIM_PWM_Start_IT+0x76>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	bf14      	ite	ne
 800ab2e:	2301      	movne	r3, #1
 800ab30:	2300      	moveq	r3, #0
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	e015      	b.n	800ab62 <HAL_TIM_PWM_Start_IT+0xa2>
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	2b10      	cmp	r3, #16
 800ab3a:	d109      	bne.n	800ab50 <HAL_TIM_PWM_Start_IT+0x90>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	bf14      	ite	ne
 800ab48:	2301      	movne	r3, #1
 800ab4a:	2300      	moveq	r3, #0
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	e008      	b.n	800ab62 <HAL_TIM_PWM_Start_IT+0xa2>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	bf14      	ite	ne
 800ab5c:	2301      	movne	r3, #1
 800ab5e:	2300      	moveq	r3, #0
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	e0ec      	b.n	800ad44 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d104      	bne.n	800ab7a <HAL_TIM_PWM_Start_IT+0xba>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2202      	movs	r2, #2
 800ab74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab78:	e023      	b.n	800abc2 <HAL_TIM_PWM_Start_IT+0x102>
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	2b04      	cmp	r3, #4
 800ab7e:	d104      	bne.n	800ab8a <HAL_TIM_PWM_Start_IT+0xca>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2202      	movs	r2, #2
 800ab84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab88:	e01b      	b.n	800abc2 <HAL_TIM_PWM_Start_IT+0x102>
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	2b08      	cmp	r3, #8
 800ab8e:	d104      	bne.n	800ab9a <HAL_TIM_PWM_Start_IT+0xda>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2202      	movs	r2, #2
 800ab94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab98:	e013      	b.n	800abc2 <HAL_TIM_PWM_Start_IT+0x102>
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	2b0c      	cmp	r3, #12
 800ab9e:	d104      	bne.n	800abaa <HAL_TIM_PWM_Start_IT+0xea>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2202      	movs	r2, #2
 800aba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aba8:	e00b      	b.n	800abc2 <HAL_TIM_PWM_Start_IT+0x102>
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	2b10      	cmp	r3, #16
 800abae:	d104      	bne.n	800abba <HAL_TIM_PWM_Start_IT+0xfa>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2202      	movs	r2, #2
 800abb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abb8:	e003      	b.n	800abc2 <HAL_TIM_PWM_Start_IT+0x102>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2202      	movs	r2, #2
 800abbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2b0c      	cmp	r3, #12
 800abc6:	d841      	bhi.n	800ac4c <HAL_TIM_PWM_Start_IT+0x18c>
 800abc8:	a201      	add	r2, pc, #4	; (adr r2, 800abd0 <HAL_TIM_PWM_Start_IT+0x110>)
 800abca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abce:	bf00      	nop
 800abd0:	0800ac05 	.word	0x0800ac05
 800abd4:	0800ac4d 	.word	0x0800ac4d
 800abd8:	0800ac4d 	.word	0x0800ac4d
 800abdc:	0800ac4d 	.word	0x0800ac4d
 800abe0:	0800ac17 	.word	0x0800ac17
 800abe4:	0800ac4d 	.word	0x0800ac4d
 800abe8:	0800ac4d 	.word	0x0800ac4d
 800abec:	0800ac4d 	.word	0x0800ac4d
 800abf0:	0800ac29 	.word	0x0800ac29
 800abf4:	0800ac4d 	.word	0x0800ac4d
 800abf8:	0800ac4d 	.word	0x0800ac4d
 800abfc:	0800ac4d 	.word	0x0800ac4d
 800ac00:	0800ac3b 	.word	0x0800ac3b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68da      	ldr	r2, [r3, #12]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f042 0202 	orr.w	r2, r2, #2
 800ac12:	60da      	str	r2, [r3, #12]
      break;
 800ac14:	e01d      	b.n	800ac52 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68da      	ldr	r2, [r3, #12]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f042 0204 	orr.w	r2, r2, #4
 800ac24:	60da      	str	r2, [r3, #12]
      break;
 800ac26:	e014      	b.n	800ac52 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68da      	ldr	r2, [r3, #12]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f042 0208 	orr.w	r2, r2, #8
 800ac36:	60da      	str	r2, [r3, #12]
      break;
 800ac38:	e00b      	b.n	800ac52 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	68da      	ldr	r2, [r3, #12]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f042 0210 	orr.w	r2, r2, #16
 800ac48:	60da      	str	r2, [r3, #12]
      break;
 800ac4a:	e002      	b.n	800ac52 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac50:	bf00      	nop
  }

  if (status == HAL_OK)
 800ac52:	7bfb      	ldrb	r3, [r7, #15]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d174      	bne.n	800ad42 <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	6839      	ldr	r1, [r7, #0]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f001 f927 	bl	800beb4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a38      	ldr	r2, [pc, #224]	; (800ad4c <HAL_TIM_PWM_Start_IT+0x28c>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d013      	beq.n	800ac98 <HAL_TIM_PWM_Start_IT+0x1d8>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a36      	ldr	r2, [pc, #216]	; (800ad50 <HAL_TIM_PWM_Start_IT+0x290>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d00e      	beq.n	800ac98 <HAL_TIM_PWM_Start_IT+0x1d8>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a35      	ldr	r2, [pc, #212]	; (800ad54 <HAL_TIM_PWM_Start_IT+0x294>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d009      	beq.n	800ac98 <HAL_TIM_PWM_Start_IT+0x1d8>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a33      	ldr	r2, [pc, #204]	; (800ad58 <HAL_TIM_PWM_Start_IT+0x298>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d004      	beq.n	800ac98 <HAL_TIM_PWM_Start_IT+0x1d8>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a32      	ldr	r2, [pc, #200]	; (800ad5c <HAL_TIM_PWM_Start_IT+0x29c>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d101      	bne.n	800ac9c <HAL_TIM_PWM_Start_IT+0x1dc>
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e000      	b.n	800ac9e <HAL_TIM_PWM_Start_IT+0x1de>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d007      	beq.n	800acb2 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800acb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a25      	ldr	r2, [pc, #148]	; (800ad4c <HAL_TIM_PWM_Start_IT+0x28c>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d022      	beq.n	800ad02 <HAL_TIM_PWM_Start_IT+0x242>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acc4:	d01d      	beq.n	800ad02 <HAL_TIM_PWM_Start_IT+0x242>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a25      	ldr	r2, [pc, #148]	; (800ad60 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d018      	beq.n	800ad02 <HAL_TIM_PWM_Start_IT+0x242>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a23      	ldr	r2, [pc, #140]	; (800ad64 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d013      	beq.n	800ad02 <HAL_TIM_PWM_Start_IT+0x242>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a22      	ldr	r2, [pc, #136]	; (800ad68 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d00e      	beq.n	800ad02 <HAL_TIM_PWM_Start_IT+0x242>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a19      	ldr	r2, [pc, #100]	; (800ad50 <HAL_TIM_PWM_Start_IT+0x290>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d009      	beq.n	800ad02 <HAL_TIM_PWM_Start_IT+0x242>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a1e      	ldr	r2, [pc, #120]	; (800ad6c <HAL_TIM_PWM_Start_IT+0x2ac>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d004      	beq.n	800ad02 <HAL_TIM_PWM_Start_IT+0x242>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a15      	ldr	r2, [pc, #84]	; (800ad54 <HAL_TIM_PWM_Start_IT+0x294>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d115      	bne.n	800ad2e <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	689a      	ldr	r2, [r3, #8]
 800ad08:	4b19      	ldr	r3, [pc, #100]	; (800ad70 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	2b06      	cmp	r3, #6
 800ad12:	d015      	beq.n	800ad40 <HAL_TIM_PWM_Start_IT+0x280>
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad1a:	d011      	beq.n	800ad40 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f042 0201 	orr.w	r2, r2, #1
 800ad2a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad2c:	e008      	b.n	800ad40 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f042 0201 	orr.w	r2, r2, #1
 800ad3c:	601a      	str	r2, [r3, #0]
 800ad3e:	e000      	b.n	800ad42 <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad40:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ad42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	40010000 	.word	0x40010000
 800ad50:	40010400 	.word	0x40010400
 800ad54:	40014000 	.word	0x40014000
 800ad58:	40014400 	.word	0x40014400
 800ad5c:	40014800 	.word	0x40014800
 800ad60:	40000400 	.word	0x40000400
 800ad64:	40000800 	.word	0x40000800
 800ad68:	40000c00 	.word	0x40000c00
 800ad6c:	40001800 	.word	0x40001800
 800ad70:	00010007 	.word	0x00010007

0800ad74 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b086      	sub	sp, #24
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d101      	bne.n	800ad88 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	e08f      	b.n	800aea8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d106      	bne.n	800ada2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7f7 fef9 	bl	8002b94 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2202      	movs	r2, #2
 800ada6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	6899      	ldr	r1, [r3, #8]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	4b3e      	ldr	r3, [pc, #248]	; (800aeb0 <HAL_TIM_Encoder_Init+0x13c>)
 800adb6:	400b      	ands	r3, r1
 800adb8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	3304      	adds	r3, #4
 800adc2:	4619      	mov	r1, r3
 800adc4:	4610      	mov	r0, r2
 800adc6:	f000 fc67 	bl	800b698 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	6a1b      	ldr	r3, [r3, #32]
 800ade0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	697a      	ldr	r2, [r7, #20]
 800ade8:	4313      	orrs	r3, r2
 800adea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800adec:	693a      	ldr	r2, [r7, #16]
 800adee:	4b31      	ldr	r3, [pc, #196]	; (800aeb4 <HAL_TIM_Encoder_Init+0x140>)
 800adf0:	4013      	ands	r3, r2
 800adf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	689a      	ldr	r2, [r3, #8]
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	699b      	ldr	r3, [r3, #24]
 800adfc:	021b      	lsls	r3, r3, #8
 800adfe:	4313      	orrs	r3, r2
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	4b2b      	ldr	r3, [pc, #172]	; (800aeb8 <HAL_TIM_Encoder_Init+0x144>)
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	4b2a      	ldr	r3, [pc, #168]	; (800aebc <HAL_TIM_Encoder_Init+0x148>)
 800ae12:	4013      	ands	r3, r2
 800ae14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	68da      	ldr	r2, [r3, #12]
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	69db      	ldr	r3, [r3, #28]
 800ae1e:	021b      	lsls	r3, r3, #8
 800ae20:	4313      	orrs	r3, r2
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	011a      	lsls	r2, r3, #4
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	031b      	lsls	r3, r3, #12
 800ae34:	4313      	orrs	r3, r2
 800ae36:	693a      	ldr	r2, [r7, #16]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ae42:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ae4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	685a      	ldr	r2, [r3, #4]
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	695b      	ldr	r3, [r3, #20]
 800ae54:	011b      	lsls	r3, r3, #4
 800ae56:	4313      	orrs	r3, r2
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	693a      	ldr	r2, [r7, #16]
 800ae6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2201      	movs	r2, #1
 800ae82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2201      	movs	r2, #1
 800ae92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3718      	adds	r7, #24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	fffebff8 	.word	0xfffebff8
 800aeb4:	fffffcfc 	.word	0xfffffcfc
 800aeb8:	fffff3f3 	.word	0xfffff3f3
 800aebc:	ffff0f0f 	.word	0xffff0f0f

0800aec0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aed0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aed8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aee0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aee8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d110      	bne.n	800af12 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aef0:	7bfb      	ldrb	r3, [r7, #15]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d102      	bne.n	800aefc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800aef6:	7b7b      	ldrb	r3, [r7, #13]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d001      	beq.n	800af00 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	e069      	b.n	800afd4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2202      	movs	r2, #2
 800af04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2202      	movs	r2, #2
 800af0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af10:	e031      	b.n	800af76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	2b04      	cmp	r3, #4
 800af16:	d110      	bne.n	800af3a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800af18:	7bbb      	ldrb	r3, [r7, #14]
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d102      	bne.n	800af24 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800af1e:	7b3b      	ldrb	r3, [r7, #12]
 800af20:	2b01      	cmp	r3, #1
 800af22:	d001      	beq.n	800af28 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800af24:	2301      	movs	r3, #1
 800af26:	e055      	b.n	800afd4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2202      	movs	r2, #2
 800af2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2202      	movs	r2, #2
 800af34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af38:	e01d      	b.n	800af76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800af3a:	7bfb      	ldrb	r3, [r7, #15]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d108      	bne.n	800af52 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800af40:	7bbb      	ldrb	r3, [r7, #14]
 800af42:	2b01      	cmp	r3, #1
 800af44:	d105      	bne.n	800af52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800af46:	7b7b      	ldrb	r3, [r7, #13]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d102      	bne.n	800af52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800af4c:	7b3b      	ldrb	r3, [r7, #12]
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d001      	beq.n	800af56 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	e03e      	b.n	800afd4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2202      	movs	r2, #2
 800af5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2202      	movs	r2, #2
 800af62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2202      	movs	r2, #2
 800af6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2202      	movs	r2, #2
 800af72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d003      	beq.n	800af84 <HAL_TIM_Encoder_Start+0xc4>
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	2b04      	cmp	r3, #4
 800af80:	d008      	beq.n	800af94 <HAL_TIM_Encoder_Start+0xd4>
 800af82:	e00f      	b.n	800afa4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2201      	movs	r2, #1
 800af8a:	2100      	movs	r1, #0
 800af8c:	4618      	mov	r0, r3
 800af8e:	f000 ff91 	bl	800beb4 <TIM_CCxChannelCmd>
      break;
 800af92:	e016      	b.n	800afc2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2201      	movs	r2, #1
 800af9a:	2104      	movs	r1, #4
 800af9c:	4618      	mov	r0, r3
 800af9e:	f000 ff89 	bl	800beb4 <TIM_CCxChannelCmd>
      break;
 800afa2:	e00e      	b.n	800afc2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2201      	movs	r2, #1
 800afaa:	2100      	movs	r1, #0
 800afac:	4618      	mov	r0, r3
 800afae:	f000 ff81 	bl	800beb4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2201      	movs	r2, #1
 800afb8:	2104      	movs	r1, #4
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 ff7a 	bl	800beb4 <TIM_CCxChannelCmd>
      break;
 800afc0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f042 0201 	orr.w	r2, r2, #1
 800afd0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	f003 0302 	and.w	r3, r3, #2
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d122      	bne.n	800b038 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	f003 0302 	and.w	r3, r3, #2
 800affc:	2b02      	cmp	r3, #2
 800affe:	d11b      	bne.n	800b038 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f06f 0202 	mvn.w	r2, #2
 800b008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2201      	movs	r2, #1
 800b00e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	699b      	ldr	r3, [r3, #24]
 800b016:	f003 0303 	and.w	r3, r3, #3
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d003      	beq.n	800b026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fb1c 	bl	800b65c <HAL_TIM_IC_CaptureCallback>
 800b024:	e005      	b.n	800b032 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fb0e 	bl	800b648 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fb1f 	bl	800b670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	691b      	ldr	r3, [r3, #16]
 800b03e:	f003 0304 	and.w	r3, r3, #4
 800b042:	2b04      	cmp	r3, #4
 800b044:	d122      	bne.n	800b08c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	f003 0304 	and.w	r3, r3, #4
 800b050:	2b04      	cmp	r3, #4
 800b052:	d11b      	bne.n	800b08c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f06f 0204 	mvn.w	r2, #4
 800b05c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2202      	movs	r2, #2
 800b062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	699b      	ldr	r3, [r3, #24]
 800b06a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d003      	beq.n	800b07a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 faf2 	bl	800b65c <HAL_TIM_IC_CaptureCallback>
 800b078:	e005      	b.n	800b086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 fae4 	bl	800b648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 faf5 	bl	800b670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	f003 0308 	and.w	r3, r3, #8
 800b096:	2b08      	cmp	r3, #8
 800b098:	d122      	bne.n	800b0e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	f003 0308 	and.w	r3, r3, #8
 800b0a4:	2b08      	cmp	r3, #8
 800b0a6:	d11b      	bne.n	800b0e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f06f 0208 	mvn.w	r2, #8
 800b0b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2204      	movs	r2, #4
 800b0b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	69db      	ldr	r3, [r3, #28]
 800b0be:	f003 0303 	and.w	r3, r3, #3
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d003      	beq.n	800b0ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 fac8 	bl	800b65c <HAL_TIM_IC_CaptureCallback>
 800b0cc:	e005      	b.n	800b0da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 faba 	bl	800b648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 facb 	bl	800b670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	691b      	ldr	r3, [r3, #16]
 800b0e6:	f003 0310 	and.w	r3, r3, #16
 800b0ea:	2b10      	cmp	r3, #16
 800b0ec:	d122      	bne.n	800b134 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	f003 0310 	and.w	r3, r3, #16
 800b0f8:	2b10      	cmp	r3, #16
 800b0fa:	d11b      	bne.n	800b134 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f06f 0210 	mvn.w	r2, #16
 800b104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2208      	movs	r2, #8
 800b10a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	69db      	ldr	r3, [r3, #28]
 800b112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b116:	2b00      	cmp	r3, #0
 800b118:	d003      	beq.n	800b122 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 fa9e 	bl	800b65c <HAL_TIM_IC_CaptureCallback>
 800b120:	e005      	b.n	800b12e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 fa90 	bl	800b648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 faa1 	bl	800b670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	691b      	ldr	r3, [r3, #16]
 800b13a:	f003 0301 	and.w	r3, r3, #1
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d10e      	bne.n	800b160 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	f003 0301 	and.w	r3, r3, #1
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d107      	bne.n	800b160 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f06f 0201 	mvn.w	r2, #1
 800b158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 fa6a 	bl	800b634 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b16a:	2b80      	cmp	r3, #128	; 0x80
 800b16c:	d10e      	bne.n	800b18c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b178:	2b80      	cmp	r3, #128	; 0x80
 800b17a:	d107      	bne.n	800b18c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 ffd0 	bl	800c12c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	691b      	ldr	r3, [r3, #16]
 800b192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b19a:	d10e      	bne.n	800b1ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1a6:	2b80      	cmp	r3, #128	; 0x80
 800b1a8:	d107      	bne.n	800b1ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b1b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 ffc3 	bl	800c140 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1c4:	2b40      	cmp	r3, #64	; 0x40
 800b1c6:	d10e      	bne.n	800b1e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1d2:	2b40      	cmp	r3, #64	; 0x40
 800b1d4:	d107      	bne.n	800b1e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b1de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 fa4f 	bl	800b684 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	f003 0320 	and.w	r3, r3, #32
 800b1f0:	2b20      	cmp	r3, #32
 800b1f2:	d10e      	bne.n	800b212 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	f003 0320 	and.w	r3, r3, #32
 800b1fe:	2b20      	cmp	r3, #32
 800b200:	d107      	bne.n	800b212 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f06f 0220 	mvn.w	r2, #32
 800b20a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 ff83 	bl	800c118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b212:	bf00      	nop
 800b214:	3708      	adds	r7, #8
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
	...

0800b21c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b086      	sub	sp, #24
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b232:	2b01      	cmp	r3, #1
 800b234:	d101      	bne.n	800b23a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b236:	2302      	movs	r3, #2
 800b238:	e0ff      	b.n	800b43a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2201      	movs	r2, #1
 800b23e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2b14      	cmp	r3, #20
 800b246:	f200 80f0 	bhi.w	800b42a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b24a:	a201      	add	r2, pc, #4	; (adr r2, 800b250 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b250:	0800b2a5 	.word	0x0800b2a5
 800b254:	0800b42b 	.word	0x0800b42b
 800b258:	0800b42b 	.word	0x0800b42b
 800b25c:	0800b42b 	.word	0x0800b42b
 800b260:	0800b2e5 	.word	0x0800b2e5
 800b264:	0800b42b 	.word	0x0800b42b
 800b268:	0800b42b 	.word	0x0800b42b
 800b26c:	0800b42b 	.word	0x0800b42b
 800b270:	0800b327 	.word	0x0800b327
 800b274:	0800b42b 	.word	0x0800b42b
 800b278:	0800b42b 	.word	0x0800b42b
 800b27c:	0800b42b 	.word	0x0800b42b
 800b280:	0800b367 	.word	0x0800b367
 800b284:	0800b42b 	.word	0x0800b42b
 800b288:	0800b42b 	.word	0x0800b42b
 800b28c:	0800b42b 	.word	0x0800b42b
 800b290:	0800b3a9 	.word	0x0800b3a9
 800b294:	0800b42b 	.word	0x0800b42b
 800b298:	0800b42b 	.word	0x0800b42b
 800b29c:	0800b42b 	.word	0x0800b42b
 800b2a0:	0800b3e9 	.word	0x0800b3e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68b9      	ldr	r1, [r7, #8]
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f000 fa8e 	bl	800b7cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	699a      	ldr	r2, [r3, #24]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f042 0208 	orr.w	r2, r2, #8
 800b2be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	699a      	ldr	r2, [r3, #24]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f022 0204 	bic.w	r2, r2, #4
 800b2ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	6999      	ldr	r1, [r3, #24]
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	691a      	ldr	r2, [r3, #16]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	430a      	orrs	r2, r1
 800b2e0:	619a      	str	r2, [r3, #24]
      break;
 800b2e2:	e0a5      	b.n	800b430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	68b9      	ldr	r1, [r7, #8]
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f000 fafe 	bl	800b8ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	699a      	ldr	r2, [r3, #24]
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	699a      	ldr	r2, [r3, #24]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b30e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	6999      	ldr	r1, [r3, #24]
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	691b      	ldr	r3, [r3, #16]
 800b31a:	021a      	lsls	r2, r3, #8
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	430a      	orrs	r2, r1
 800b322:	619a      	str	r2, [r3, #24]
      break;
 800b324:	e084      	b.n	800b430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68b9      	ldr	r1, [r7, #8]
 800b32c:	4618      	mov	r0, r3
 800b32e:	f000 fb67 	bl	800ba00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	69da      	ldr	r2, [r3, #28]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f042 0208 	orr.w	r2, r2, #8
 800b340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	69da      	ldr	r2, [r3, #28]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f022 0204 	bic.w	r2, r2, #4
 800b350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	69d9      	ldr	r1, [r3, #28]
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	691a      	ldr	r2, [r3, #16]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	430a      	orrs	r2, r1
 800b362:	61da      	str	r2, [r3, #28]
      break;
 800b364:	e064      	b.n	800b430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	68b9      	ldr	r1, [r7, #8]
 800b36c:	4618      	mov	r0, r3
 800b36e:	f000 fbcf 	bl	800bb10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	69da      	ldr	r2, [r3, #28]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	69da      	ldr	r2, [r3, #28]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	69d9      	ldr	r1, [r3, #28]
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	691b      	ldr	r3, [r3, #16]
 800b39c:	021a      	lsls	r2, r3, #8
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	430a      	orrs	r2, r1
 800b3a4:	61da      	str	r2, [r3, #28]
      break;
 800b3a6:	e043      	b.n	800b430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	68b9      	ldr	r1, [r7, #8]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f000 fc18 	bl	800bbe4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f042 0208 	orr.w	r2, r2, #8
 800b3c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f022 0204 	bic.w	r2, r2, #4
 800b3d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	691a      	ldr	r2, [r3, #16]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	430a      	orrs	r2, r1
 800b3e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b3e6:	e023      	b.n	800b430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	68b9      	ldr	r1, [r7, #8]
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f000 fc5c 	bl	800bcac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b402:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b412:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	691b      	ldr	r3, [r3, #16]
 800b41e:	021a      	lsls	r2, r3, #8
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	430a      	orrs	r2, r1
 800b426:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b428:	e002      	b.n	800b430 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b42a:	2301      	movs	r3, #1
 800b42c:	75fb      	strb	r3, [r7, #23]
      break;
 800b42e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2200      	movs	r2, #0
 800b434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b438:	7dfb      	ldrb	r3, [r7, #23]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3718      	adds	r7, #24
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop

0800b444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b44e:	2300      	movs	r3, #0
 800b450:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d101      	bne.n	800b460 <HAL_TIM_ConfigClockSource+0x1c>
 800b45c:	2302      	movs	r3, #2
 800b45e:	e0dc      	b.n	800b61a <HAL_TIM_ConfigClockSource+0x1d6>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2202      	movs	r2, #2
 800b46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b478:	68ba      	ldr	r2, [r7, #8]
 800b47a:	4b6a      	ldr	r3, [pc, #424]	; (800b624 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b47c:	4013      	ands	r3, r2
 800b47e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b486:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	68ba      	ldr	r2, [r7, #8]
 800b48e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a64      	ldr	r2, [pc, #400]	; (800b628 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b496:	4293      	cmp	r3, r2
 800b498:	f000 80a9 	beq.w	800b5ee <HAL_TIM_ConfigClockSource+0x1aa>
 800b49c:	4a62      	ldr	r2, [pc, #392]	; (800b628 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	f200 80ae 	bhi.w	800b600 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4a4:	4a61      	ldr	r2, [pc, #388]	; (800b62c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	f000 80a1 	beq.w	800b5ee <HAL_TIM_ConfigClockSource+0x1aa>
 800b4ac:	4a5f      	ldr	r2, [pc, #380]	; (800b62c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	f200 80a6 	bhi.w	800b600 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4b4:	4a5e      	ldr	r2, [pc, #376]	; (800b630 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	f000 8099 	beq.w	800b5ee <HAL_TIM_ConfigClockSource+0x1aa>
 800b4bc:	4a5c      	ldr	r2, [pc, #368]	; (800b630 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	f200 809e 	bhi.w	800b600 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b4c8:	f000 8091 	beq.w	800b5ee <HAL_TIM_ConfigClockSource+0x1aa>
 800b4cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b4d0:	f200 8096 	bhi.w	800b600 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4d8:	f000 8089 	beq.w	800b5ee <HAL_TIM_ConfigClockSource+0x1aa>
 800b4dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4e0:	f200 808e 	bhi.w	800b600 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4e8:	d03e      	beq.n	800b568 <HAL_TIM_ConfigClockSource+0x124>
 800b4ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4ee:	f200 8087 	bhi.w	800b600 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4f6:	f000 8086 	beq.w	800b606 <HAL_TIM_ConfigClockSource+0x1c2>
 800b4fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4fe:	d87f      	bhi.n	800b600 <HAL_TIM_ConfigClockSource+0x1bc>
 800b500:	2b70      	cmp	r3, #112	; 0x70
 800b502:	d01a      	beq.n	800b53a <HAL_TIM_ConfigClockSource+0xf6>
 800b504:	2b70      	cmp	r3, #112	; 0x70
 800b506:	d87b      	bhi.n	800b600 <HAL_TIM_ConfigClockSource+0x1bc>
 800b508:	2b60      	cmp	r3, #96	; 0x60
 800b50a:	d050      	beq.n	800b5ae <HAL_TIM_ConfigClockSource+0x16a>
 800b50c:	2b60      	cmp	r3, #96	; 0x60
 800b50e:	d877      	bhi.n	800b600 <HAL_TIM_ConfigClockSource+0x1bc>
 800b510:	2b50      	cmp	r3, #80	; 0x50
 800b512:	d03c      	beq.n	800b58e <HAL_TIM_ConfigClockSource+0x14a>
 800b514:	2b50      	cmp	r3, #80	; 0x50
 800b516:	d873      	bhi.n	800b600 <HAL_TIM_ConfigClockSource+0x1bc>
 800b518:	2b40      	cmp	r3, #64	; 0x40
 800b51a:	d058      	beq.n	800b5ce <HAL_TIM_ConfigClockSource+0x18a>
 800b51c:	2b40      	cmp	r3, #64	; 0x40
 800b51e:	d86f      	bhi.n	800b600 <HAL_TIM_ConfigClockSource+0x1bc>
 800b520:	2b30      	cmp	r3, #48	; 0x30
 800b522:	d064      	beq.n	800b5ee <HAL_TIM_ConfigClockSource+0x1aa>
 800b524:	2b30      	cmp	r3, #48	; 0x30
 800b526:	d86b      	bhi.n	800b600 <HAL_TIM_ConfigClockSource+0x1bc>
 800b528:	2b20      	cmp	r3, #32
 800b52a:	d060      	beq.n	800b5ee <HAL_TIM_ConfigClockSource+0x1aa>
 800b52c:	2b20      	cmp	r3, #32
 800b52e:	d867      	bhi.n	800b600 <HAL_TIM_ConfigClockSource+0x1bc>
 800b530:	2b00      	cmp	r3, #0
 800b532:	d05c      	beq.n	800b5ee <HAL_TIM_ConfigClockSource+0x1aa>
 800b534:	2b10      	cmp	r3, #16
 800b536:	d05a      	beq.n	800b5ee <HAL_TIM_ConfigClockSource+0x1aa>
 800b538:	e062      	b.n	800b600 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6818      	ldr	r0, [r3, #0]
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	6899      	ldr	r1, [r3, #8]
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	685a      	ldr	r2, [r3, #4]
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	f000 fc93 	bl	800be74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b55c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68ba      	ldr	r2, [r7, #8]
 800b564:	609a      	str	r2, [r3, #8]
      break;
 800b566:	e04f      	b.n	800b608 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6818      	ldr	r0, [r3, #0]
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	6899      	ldr	r1, [r3, #8]
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	685a      	ldr	r2, [r3, #4]
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	f000 fc7c 	bl	800be74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	689a      	ldr	r2, [r3, #8]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b58a:	609a      	str	r2, [r3, #8]
      break;
 800b58c:	e03c      	b.n	800b608 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6818      	ldr	r0, [r3, #0]
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	6859      	ldr	r1, [r3, #4]
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	461a      	mov	r2, r3
 800b59c:	f000 fbec 	bl	800bd78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	2150      	movs	r1, #80	; 0x50
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f000 fc46 	bl	800be38 <TIM_ITRx_SetConfig>
      break;
 800b5ac:	e02c      	b.n	800b608 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6818      	ldr	r0, [r3, #0]
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	6859      	ldr	r1, [r3, #4]
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	f000 fc0b 	bl	800bdd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2160      	movs	r1, #96	; 0x60
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f000 fc36 	bl	800be38 <TIM_ITRx_SetConfig>
      break;
 800b5cc:	e01c      	b.n	800b608 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6818      	ldr	r0, [r3, #0]
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	6859      	ldr	r1, [r3, #4]
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	f000 fbcc 	bl	800bd78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2140      	movs	r1, #64	; 0x40
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f000 fc26 	bl	800be38 <TIM_ITRx_SetConfig>
      break;
 800b5ec:	e00c      	b.n	800b608 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	f000 fc1d 	bl	800be38 <TIM_ITRx_SetConfig>
      break;
 800b5fe:	e003      	b.n	800b608 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b600:	2301      	movs	r3, #1
 800b602:	73fb      	strb	r3, [r7, #15]
      break;
 800b604:	e000      	b.n	800b608 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b606:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b618:	7bfb      	ldrb	r3, [r7, #15]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	ffceff88 	.word	0xffceff88
 800b628:	00100040 	.word	0x00100040
 800b62c:	00100030 	.word	0x00100030
 800b630:	00100020 	.word	0x00100020

0800b634 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b63c:	bf00      	nop
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b650:	bf00      	nop
 800b652:	370c      	adds	r7, #12
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b664:	bf00      	nop
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b678:	bf00      	nop
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b68c:	bf00      	nop
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4a40      	ldr	r2, [pc, #256]	; (800b7ac <TIM_Base_SetConfig+0x114>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d013      	beq.n	800b6d8 <TIM_Base_SetConfig+0x40>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6b6:	d00f      	beq.n	800b6d8 <TIM_Base_SetConfig+0x40>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a3d      	ldr	r2, [pc, #244]	; (800b7b0 <TIM_Base_SetConfig+0x118>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d00b      	beq.n	800b6d8 <TIM_Base_SetConfig+0x40>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a3c      	ldr	r2, [pc, #240]	; (800b7b4 <TIM_Base_SetConfig+0x11c>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d007      	beq.n	800b6d8 <TIM_Base_SetConfig+0x40>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a3b      	ldr	r2, [pc, #236]	; (800b7b8 <TIM_Base_SetConfig+0x120>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d003      	beq.n	800b6d8 <TIM_Base_SetConfig+0x40>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a3a      	ldr	r2, [pc, #232]	; (800b7bc <TIM_Base_SetConfig+0x124>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d108      	bne.n	800b6ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4a2f      	ldr	r2, [pc, #188]	; (800b7ac <TIM_Base_SetConfig+0x114>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d01f      	beq.n	800b732 <TIM_Base_SetConfig+0x9a>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6f8:	d01b      	beq.n	800b732 <TIM_Base_SetConfig+0x9a>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4a2c      	ldr	r2, [pc, #176]	; (800b7b0 <TIM_Base_SetConfig+0x118>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d017      	beq.n	800b732 <TIM_Base_SetConfig+0x9a>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a2b      	ldr	r2, [pc, #172]	; (800b7b4 <TIM_Base_SetConfig+0x11c>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d013      	beq.n	800b732 <TIM_Base_SetConfig+0x9a>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a2a      	ldr	r2, [pc, #168]	; (800b7b8 <TIM_Base_SetConfig+0x120>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d00f      	beq.n	800b732 <TIM_Base_SetConfig+0x9a>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a29      	ldr	r2, [pc, #164]	; (800b7bc <TIM_Base_SetConfig+0x124>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d00b      	beq.n	800b732 <TIM_Base_SetConfig+0x9a>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a28      	ldr	r2, [pc, #160]	; (800b7c0 <TIM_Base_SetConfig+0x128>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d007      	beq.n	800b732 <TIM_Base_SetConfig+0x9a>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a27      	ldr	r2, [pc, #156]	; (800b7c4 <TIM_Base_SetConfig+0x12c>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d003      	beq.n	800b732 <TIM_Base_SetConfig+0x9a>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a26      	ldr	r2, [pc, #152]	; (800b7c8 <TIM_Base_SetConfig+0x130>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d108      	bne.n	800b744 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	4313      	orrs	r3, r2
 800b742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	695b      	ldr	r3, [r3, #20]
 800b74e:	4313      	orrs	r3, r2
 800b750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	689a      	ldr	r2, [r3, #8]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4a10      	ldr	r2, [pc, #64]	; (800b7ac <TIM_Base_SetConfig+0x114>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d00f      	beq.n	800b790 <TIM_Base_SetConfig+0xf8>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a12      	ldr	r2, [pc, #72]	; (800b7bc <TIM_Base_SetConfig+0x124>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d00b      	beq.n	800b790 <TIM_Base_SetConfig+0xf8>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a11      	ldr	r2, [pc, #68]	; (800b7c0 <TIM_Base_SetConfig+0x128>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d007      	beq.n	800b790 <TIM_Base_SetConfig+0xf8>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a10      	ldr	r2, [pc, #64]	; (800b7c4 <TIM_Base_SetConfig+0x12c>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d003      	beq.n	800b790 <TIM_Base_SetConfig+0xf8>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4a0f      	ldr	r2, [pc, #60]	; (800b7c8 <TIM_Base_SetConfig+0x130>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d103      	bne.n	800b798 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	691a      	ldr	r2, [r3, #16]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2201      	movs	r2, #1
 800b79c:	615a      	str	r2, [r3, #20]
}
 800b79e:	bf00      	nop
 800b7a0:	3714      	adds	r7, #20
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop
 800b7ac:	40010000 	.word	0x40010000
 800b7b0:	40000400 	.word	0x40000400
 800b7b4:	40000800 	.word	0x40000800
 800b7b8:	40000c00 	.word	0x40000c00
 800b7bc:	40010400 	.word	0x40010400
 800b7c0:	40014000 	.word	0x40014000
 800b7c4:	40014400 	.word	0x40014400
 800b7c8:	40014800 	.word	0x40014800

0800b7cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b087      	sub	sp, #28
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a1b      	ldr	r3, [r3, #32]
 800b7da:	f023 0201 	bic.w	r2, r3, #1
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a1b      	ldr	r3, [r3, #32]
 800b7e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	4b37      	ldr	r3, [pc, #220]	; (800b8d4 <TIM_OC1_SetConfig+0x108>)
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f023 0303 	bic.w	r3, r3, #3
 800b802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	4313      	orrs	r3, r2
 800b80c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	f023 0302 	bic.w	r3, r3, #2
 800b814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	697a      	ldr	r2, [r7, #20]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4a2d      	ldr	r2, [pc, #180]	; (800b8d8 <TIM_OC1_SetConfig+0x10c>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d00f      	beq.n	800b848 <TIM_OC1_SetConfig+0x7c>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4a2c      	ldr	r2, [pc, #176]	; (800b8dc <TIM_OC1_SetConfig+0x110>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d00b      	beq.n	800b848 <TIM_OC1_SetConfig+0x7c>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4a2b      	ldr	r2, [pc, #172]	; (800b8e0 <TIM_OC1_SetConfig+0x114>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d007      	beq.n	800b848 <TIM_OC1_SetConfig+0x7c>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a2a      	ldr	r2, [pc, #168]	; (800b8e4 <TIM_OC1_SetConfig+0x118>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d003      	beq.n	800b848 <TIM_OC1_SetConfig+0x7c>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4a29      	ldr	r2, [pc, #164]	; (800b8e8 <TIM_OC1_SetConfig+0x11c>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d10c      	bne.n	800b862 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	f023 0308 	bic.w	r3, r3, #8
 800b84e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	697a      	ldr	r2, [r7, #20]
 800b856:	4313      	orrs	r3, r2
 800b858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	f023 0304 	bic.w	r3, r3, #4
 800b860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a1c      	ldr	r2, [pc, #112]	; (800b8d8 <TIM_OC1_SetConfig+0x10c>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d00f      	beq.n	800b88a <TIM_OC1_SetConfig+0xbe>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4a1b      	ldr	r2, [pc, #108]	; (800b8dc <TIM_OC1_SetConfig+0x110>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d00b      	beq.n	800b88a <TIM_OC1_SetConfig+0xbe>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a1a      	ldr	r2, [pc, #104]	; (800b8e0 <TIM_OC1_SetConfig+0x114>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d007      	beq.n	800b88a <TIM_OC1_SetConfig+0xbe>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	4a19      	ldr	r2, [pc, #100]	; (800b8e4 <TIM_OC1_SetConfig+0x118>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d003      	beq.n	800b88a <TIM_OC1_SetConfig+0xbe>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	4a18      	ldr	r2, [pc, #96]	; (800b8e8 <TIM_OC1_SetConfig+0x11c>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d111      	bne.n	800b8ae <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	695b      	ldr	r3, [r3, #20]
 800b89e:	693a      	ldr	r2, [r7, #16]
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	699b      	ldr	r3, [r3, #24]
 800b8a8:	693a      	ldr	r2, [r7, #16]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	693a      	ldr	r2, [r7, #16]
 800b8b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	68fa      	ldr	r2, [r7, #12]
 800b8b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	685a      	ldr	r2, [r3, #4]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	697a      	ldr	r2, [r7, #20]
 800b8c6:	621a      	str	r2, [r3, #32]
}
 800b8c8:	bf00      	nop
 800b8ca:	371c      	adds	r7, #28
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr
 800b8d4:	fffeff8f 	.word	0xfffeff8f
 800b8d8:	40010000 	.word	0x40010000
 800b8dc:	40010400 	.word	0x40010400
 800b8e0:	40014000 	.word	0x40014000
 800b8e4:	40014400 	.word	0x40014400
 800b8e8:	40014800 	.word	0x40014800

0800b8ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b087      	sub	sp, #28
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a1b      	ldr	r3, [r3, #32]
 800b8fa:	f023 0210 	bic.w	r2, r3, #16
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a1b      	ldr	r3, [r3, #32]
 800b906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	699b      	ldr	r3, [r3, #24]
 800b912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	4b34      	ldr	r3, [pc, #208]	; (800b9e8 <TIM_OC2_SetConfig+0xfc>)
 800b918:	4013      	ands	r3, r2
 800b91a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	021b      	lsls	r3, r3, #8
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	4313      	orrs	r3, r2
 800b92e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	f023 0320 	bic.w	r3, r3, #32
 800b936:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	011b      	lsls	r3, r3, #4
 800b93e:	697a      	ldr	r2, [r7, #20]
 800b940:	4313      	orrs	r3, r2
 800b942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	4a29      	ldr	r2, [pc, #164]	; (800b9ec <TIM_OC2_SetConfig+0x100>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d003      	beq.n	800b954 <TIM_OC2_SetConfig+0x68>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4a28      	ldr	r2, [pc, #160]	; (800b9f0 <TIM_OC2_SetConfig+0x104>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d10d      	bne.n	800b970 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b95a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	011b      	lsls	r3, r3, #4
 800b962:	697a      	ldr	r2, [r7, #20]
 800b964:	4313      	orrs	r3, r2
 800b966:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b96e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a1e      	ldr	r2, [pc, #120]	; (800b9ec <TIM_OC2_SetConfig+0x100>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d00f      	beq.n	800b998 <TIM_OC2_SetConfig+0xac>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4a1d      	ldr	r2, [pc, #116]	; (800b9f0 <TIM_OC2_SetConfig+0x104>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d00b      	beq.n	800b998 <TIM_OC2_SetConfig+0xac>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4a1c      	ldr	r2, [pc, #112]	; (800b9f4 <TIM_OC2_SetConfig+0x108>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d007      	beq.n	800b998 <TIM_OC2_SetConfig+0xac>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	4a1b      	ldr	r2, [pc, #108]	; (800b9f8 <TIM_OC2_SetConfig+0x10c>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d003      	beq.n	800b998 <TIM_OC2_SetConfig+0xac>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4a1a      	ldr	r2, [pc, #104]	; (800b9fc <TIM_OC2_SetConfig+0x110>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d113      	bne.n	800b9c0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b99e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b9a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	695b      	ldr	r3, [r3, #20]
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	693a      	ldr	r2, [r7, #16]
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	699b      	ldr	r3, [r3, #24]
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	693a      	ldr	r2, [r7, #16]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	693a      	ldr	r2, [r7, #16]
 800b9c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	685a      	ldr	r2, [r3, #4]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	697a      	ldr	r2, [r7, #20]
 800b9d8:	621a      	str	r2, [r3, #32]
}
 800b9da:	bf00      	nop
 800b9dc:	371c      	adds	r7, #28
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	feff8fff 	.word	0xfeff8fff
 800b9ec:	40010000 	.word	0x40010000
 800b9f0:	40010400 	.word	0x40010400
 800b9f4:	40014000 	.word	0x40014000
 800b9f8:	40014400 	.word	0x40014400
 800b9fc:	40014800 	.word	0x40014800

0800ba00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b087      	sub	sp, #28
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6a1b      	ldr	r3, [r3, #32]
 800ba0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a1b      	ldr	r3, [r3, #32]
 800ba1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	69db      	ldr	r3, [r3, #28]
 800ba26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	4b33      	ldr	r3, [pc, #204]	; (800baf8 <TIM_OC3_SetConfig+0xf8>)
 800ba2c:	4013      	ands	r3, r2
 800ba2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f023 0303 	bic.w	r3, r3, #3
 800ba36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68fa      	ldr	r2, [r7, #12]
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	689b      	ldr	r3, [r3, #8]
 800ba4e:	021b      	lsls	r3, r3, #8
 800ba50:	697a      	ldr	r2, [r7, #20]
 800ba52:	4313      	orrs	r3, r2
 800ba54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4a28      	ldr	r2, [pc, #160]	; (800bafc <TIM_OC3_SetConfig+0xfc>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d003      	beq.n	800ba66 <TIM_OC3_SetConfig+0x66>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a27      	ldr	r2, [pc, #156]	; (800bb00 <TIM_OC3_SetConfig+0x100>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d10d      	bne.n	800ba82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	021b      	lsls	r3, r3, #8
 800ba74:	697a      	ldr	r2, [r7, #20]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	4a1d      	ldr	r2, [pc, #116]	; (800bafc <TIM_OC3_SetConfig+0xfc>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d00f      	beq.n	800baaa <TIM_OC3_SetConfig+0xaa>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	4a1c      	ldr	r2, [pc, #112]	; (800bb00 <TIM_OC3_SetConfig+0x100>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d00b      	beq.n	800baaa <TIM_OC3_SetConfig+0xaa>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	4a1b      	ldr	r2, [pc, #108]	; (800bb04 <TIM_OC3_SetConfig+0x104>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d007      	beq.n	800baaa <TIM_OC3_SetConfig+0xaa>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4a1a      	ldr	r2, [pc, #104]	; (800bb08 <TIM_OC3_SetConfig+0x108>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d003      	beq.n	800baaa <TIM_OC3_SetConfig+0xaa>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4a19      	ldr	r2, [pc, #100]	; (800bb0c <TIM_OC3_SetConfig+0x10c>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d113      	bne.n	800bad2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	695b      	ldr	r3, [r3, #20]
 800babe:	011b      	lsls	r3, r3, #4
 800bac0:	693a      	ldr	r2, [r7, #16]
 800bac2:	4313      	orrs	r3, r2
 800bac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	699b      	ldr	r3, [r3, #24]
 800baca:	011b      	lsls	r3, r3, #4
 800bacc:	693a      	ldr	r2, [r7, #16]
 800bace:	4313      	orrs	r3, r2
 800bad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	693a      	ldr	r2, [r7, #16]
 800bad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	685a      	ldr	r2, [r3, #4]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	697a      	ldr	r2, [r7, #20]
 800baea:	621a      	str	r2, [r3, #32]
}
 800baec:	bf00      	nop
 800baee:	371c      	adds	r7, #28
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr
 800baf8:	fffeff8f 	.word	0xfffeff8f
 800bafc:	40010000 	.word	0x40010000
 800bb00:	40010400 	.word	0x40010400
 800bb04:	40014000 	.word	0x40014000
 800bb08:	40014400 	.word	0x40014400
 800bb0c:	40014800 	.word	0x40014800

0800bb10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b087      	sub	sp, #28
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6a1b      	ldr	r3, [r3, #32]
 800bb1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a1b      	ldr	r3, [r3, #32]
 800bb2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	69db      	ldr	r3, [r3, #28]
 800bb36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	4b24      	ldr	r3, [pc, #144]	; (800bbcc <TIM_OC4_SetConfig+0xbc>)
 800bb3c:	4013      	ands	r3, r2
 800bb3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	021b      	lsls	r3, r3, #8
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	031b      	lsls	r3, r3, #12
 800bb62:	693a      	ldr	r2, [r7, #16]
 800bb64:	4313      	orrs	r3, r2
 800bb66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4a19      	ldr	r2, [pc, #100]	; (800bbd0 <TIM_OC4_SetConfig+0xc0>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d00f      	beq.n	800bb90 <TIM_OC4_SetConfig+0x80>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	4a18      	ldr	r2, [pc, #96]	; (800bbd4 <TIM_OC4_SetConfig+0xc4>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d00b      	beq.n	800bb90 <TIM_OC4_SetConfig+0x80>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4a17      	ldr	r2, [pc, #92]	; (800bbd8 <TIM_OC4_SetConfig+0xc8>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d007      	beq.n	800bb90 <TIM_OC4_SetConfig+0x80>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	4a16      	ldr	r2, [pc, #88]	; (800bbdc <TIM_OC4_SetConfig+0xcc>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d003      	beq.n	800bb90 <TIM_OC4_SetConfig+0x80>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4a15      	ldr	r2, [pc, #84]	; (800bbe0 <TIM_OC4_SetConfig+0xd0>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d109      	bne.n	800bba4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	019b      	lsls	r3, r3, #6
 800bb9e:	697a      	ldr	r2, [r7, #20]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	697a      	ldr	r2, [r7, #20]
 800bba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	685a      	ldr	r2, [r3, #4]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	693a      	ldr	r2, [r7, #16]
 800bbbc:	621a      	str	r2, [r3, #32]
}
 800bbbe:	bf00      	nop
 800bbc0:	371c      	adds	r7, #28
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	feff8fff 	.word	0xfeff8fff
 800bbd0:	40010000 	.word	0x40010000
 800bbd4:	40010400 	.word	0x40010400
 800bbd8:	40014000 	.word	0x40014000
 800bbdc:	40014400 	.word	0x40014400
 800bbe0:	40014800 	.word	0x40014800

0800bbe4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b087      	sub	sp, #28
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a1b      	ldr	r3, [r3, #32]
 800bbf2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6a1b      	ldr	r3, [r3, #32]
 800bbfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bc0c:	68fa      	ldr	r2, [r7, #12]
 800bc0e:	4b21      	ldr	r3, [pc, #132]	; (800bc94 <TIM_OC5_SetConfig+0xb0>)
 800bc10:	4013      	ands	r3, r2
 800bc12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bc24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	041b      	lsls	r3, r3, #16
 800bc2c:	693a      	ldr	r2, [r7, #16]
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	4a18      	ldr	r2, [pc, #96]	; (800bc98 <TIM_OC5_SetConfig+0xb4>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d00f      	beq.n	800bc5a <TIM_OC5_SetConfig+0x76>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	4a17      	ldr	r2, [pc, #92]	; (800bc9c <TIM_OC5_SetConfig+0xb8>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d00b      	beq.n	800bc5a <TIM_OC5_SetConfig+0x76>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4a16      	ldr	r2, [pc, #88]	; (800bca0 <TIM_OC5_SetConfig+0xbc>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d007      	beq.n	800bc5a <TIM_OC5_SetConfig+0x76>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4a15      	ldr	r2, [pc, #84]	; (800bca4 <TIM_OC5_SetConfig+0xc0>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d003      	beq.n	800bc5a <TIM_OC5_SetConfig+0x76>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4a14      	ldr	r2, [pc, #80]	; (800bca8 <TIM_OC5_SetConfig+0xc4>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d109      	bne.n	800bc6e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	695b      	ldr	r3, [r3, #20]
 800bc66:	021b      	lsls	r3, r3, #8
 800bc68:	697a      	ldr	r2, [r7, #20]
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	697a      	ldr	r2, [r7, #20]
 800bc72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	693a      	ldr	r2, [r7, #16]
 800bc86:	621a      	str	r2, [r3, #32]
}
 800bc88:	bf00      	nop
 800bc8a:	371c      	adds	r7, #28
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr
 800bc94:	fffeff8f 	.word	0xfffeff8f
 800bc98:	40010000 	.word	0x40010000
 800bc9c:	40010400 	.word	0x40010400
 800bca0:	40014000 	.word	0x40014000
 800bca4:	40014400 	.word	0x40014400
 800bca8:	40014800 	.word	0x40014800

0800bcac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b087      	sub	sp, #28
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6a1b      	ldr	r3, [r3, #32]
 800bcba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6a1b      	ldr	r3, [r3, #32]
 800bcc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	4b22      	ldr	r3, [pc, #136]	; (800bd60 <TIM_OC6_SetConfig+0xb4>)
 800bcd8:	4013      	ands	r3, r2
 800bcda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	021b      	lsls	r3, r3, #8
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	4313      	orrs	r3, r2
 800bce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bcee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	051b      	lsls	r3, r3, #20
 800bcf6:	693a      	ldr	r2, [r7, #16]
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4a19      	ldr	r2, [pc, #100]	; (800bd64 <TIM_OC6_SetConfig+0xb8>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d00f      	beq.n	800bd24 <TIM_OC6_SetConfig+0x78>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a18      	ldr	r2, [pc, #96]	; (800bd68 <TIM_OC6_SetConfig+0xbc>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d00b      	beq.n	800bd24 <TIM_OC6_SetConfig+0x78>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a17      	ldr	r2, [pc, #92]	; (800bd6c <TIM_OC6_SetConfig+0xc0>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d007      	beq.n	800bd24 <TIM_OC6_SetConfig+0x78>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a16      	ldr	r2, [pc, #88]	; (800bd70 <TIM_OC6_SetConfig+0xc4>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d003      	beq.n	800bd24 <TIM_OC6_SetConfig+0x78>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a15      	ldr	r2, [pc, #84]	; (800bd74 <TIM_OC6_SetConfig+0xc8>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d109      	bne.n	800bd38 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bd2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	695b      	ldr	r3, [r3, #20]
 800bd30:	029b      	lsls	r3, r3, #10
 800bd32:	697a      	ldr	r2, [r7, #20]
 800bd34:	4313      	orrs	r3, r2
 800bd36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	697a      	ldr	r2, [r7, #20]
 800bd3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	68fa      	ldr	r2, [r7, #12]
 800bd42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	685a      	ldr	r2, [r3, #4]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	693a      	ldr	r2, [r7, #16]
 800bd50:	621a      	str	r2, [r3, #32]
}
 800bd52:	bf00      	nop
 800bd54:	371c      	adds	r7, #28
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	feff8fff 	.word	0xfeff8fff
 800bd64:	40010000 	.word	0x40010000
 800bd68:	40010400 	.word	0x40010400
 800bd6c:	40014000 	.word	0x40014000
 800bd70:	40014400 	.word	0x40014400
 800bd74:	40014800 	.word	0x40014800

0800bd78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b087      	sub	sp, #28
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	6a1b      	ldr	r3, [r3, #32]
 800bd88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	6a1b      	ldr	r3, [r3, #32]
 800bd8e:	f023 0201 	bic.w	r2, r3, #1
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	699b      	ldr	r3, [r3, #24]
 800bd9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bda2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	011b      	lsls	r3, r3, #4
 800bda8:	693a      	ldr	r2, [r7, #16]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	f023 030a 	bic.w	r3, r3, #10
 800bdb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bdb6:	697a      	ldr	r2, [r7, #20]
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	693a      	ldr	r2, [r7, #16]
 800bdc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	697a      	ldr	r2, [r7, #20]
 800bdc8:	621a      	str	r2, [r3, #32]
}
 800bdca:	bf00      	nop
 800bdcc:	371c      	adds	r7, #28
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr

0800bdd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bdd6:	b480      	push	{r7}
 800bdd8:	b087      	sub	sp, #28
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	60f8      	str	r0, [r7, #12]
 800bdde:	60b9      	str	r1, [r7, #8]
 800bde0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	6a1b      	ldr	r3, [r3, #32]
 800bde6:	f023 0210 	bic.w	r2, r3, #16
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	699b      	ldr	r3, [r3, #24]
 800bdf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6a1b      	ldr	r3, [r3, #32]
 800bdf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800be00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	031b      	lsls	r3, r3, #12
 800be06:	697a      	ldr	r2, [r7, #20]
 800be08:	4313      	orrs	r3, r2
 800be0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800be12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	011b      	lsls	r3, r3, #4
 800be18:	693a      	ldr	r2, [r7, #16]
 800be1a:	4313      	orrs	r3, r2
 800be1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	697a      	ldr	r2, [r7, #20]
 800be22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	693a      	ldr	r2, [r7, #16]
 800be28:	621a      	str	r2, [r3, #32]
}
 800be2a:	bf00      	nop
 800be2c:	371c      	adds	r7, #28
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
	...

0800be38 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800be38:	b480      	push	{r7}
 800be3a:	b085      	sub	sp, #20
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	689b      	ldr	r3, [r3, #8]
 800be46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	4b09      	ldr	r3, [pc, #36]	; (800be70 <TIM_ITRx_SetConfig+0x38>)
 800be4c:	4013      	ands	r3, r2
 800be4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be50:	683a      	ldr	r2, [r7, #0]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	4313      	orrs	r3, r2
 800be56:	f043 0307 	orr.w	r3, r3, #7
 800be5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	609a      	str	r2, [r3, #8]
}
 800be62:	bf00      	nop
 800be64:	3714      	adds	r7, #20
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop
 800be70:	ffcfff8f 	.word	0xffcfff8f

0800be74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be74:	b480      	push	{r7}
 800be76:	b087      	sub	sp, #28
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	607a      	str	r2, [r7, #4]
 800be80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	689b      	ldr	r3, [r3, #8]
 800be86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	021a      	lsls	r2, r3, #8
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	431a      	orrs	r2, r3
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	4313      	orrs	r3, r2
 800be9c:	697a      	ldr	r2, [r7, #20]
 800be9e:	4313      	orrs	r3, r2
 800bea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	697a      	ldr	r2, [r7, #20]
 800bea6:	609a      	str	r2, [r3, #8]
}
 800bea8:	bf00      	nop
 800beaa:	371c      	adds	r7, #28
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b087      	sub	sp, #28
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	f003 031f 	and.w	r3, r3, #31
 800bec6:	2201      	movs	r2, #1
 800bec8:	fa02 f303 	lsl.w	r3, r2, r3
 800becc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	6a1a      	ldr	r2, [r3, #32]
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	43db      	mvns	r3, r3
 800bed6:	401a      	ands	r2, r3
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	6a1a      	ldr	r2, [r3, #32]
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	f003 031f 	and.w	r3, r3, #31
 800bee6:	6879      	ldr	r1, [r7, #4]
 800bee8:	fa01 f303 	lsl.w	r3, r1, r3
 800beec:	431a      	orrs	r2, r3
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	621a      	str	r2, [r3, #32]
}
 800bef2:	bf00      	nop
 800bef4:	371c      	adds	r7, #28
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
	...

0800bf00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b085      	sub	sp, #20
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d101      	bne.n	800bf18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf14:	2302      	movs	r3, #2
 800bf16:	e06d      	b.n	800bff4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2202      	movs	r2, #2
 800bf24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4a30      	ldr	r2, [pc, #192]	; (800c000 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d004      	beq.n	800bf4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	4a2f      	ldr	r2, [pc, #188]	; (800c004 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d108      	bne.n	800bf5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bf52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	68fa      	ldr	r2, [r7, #12]
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a20      	ldr	r2, [pc, #128]	; (800c000 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d022      	beq.n	800bfc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf8a:	d01d      	beq.n	800bfc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a1d      	ldr	r2, [pc, #116]	; (800c008 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d018      	beq.n	800bfc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a1c      	ldr	r2, [pc, #112]	; (800c00c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d013      	beq.n	800bfc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a1a      	ldr	r2, [pc, #104]	; (800c010 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d00e      	beq.n	800bfc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4a15      	ldr	r2, [pc, #84]	; (800c004 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d009      	beq.n	800bfc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4a16      	ldr	r2, [pc, #88]	; (800c014 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d004      	beq.n	800bfc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a15      	ldr	r2, [pc, #84]	; (800c018 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d10c      	bne.n	800bfe2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	68ba      	ldr	r2, [r7, #8]
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68ba      	ldr	r2, [r7, #8]
 800bfe0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bff2:	2300      	movs	r3, #0
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3714      	adds	r7, #20
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr
 800c000:	40010000 	.word	0x40010000
 800c004:	40010400 	.word	0x40010400
 800c008:	40000400 	.word	0x40000400
 800c00c:	40000800 	.word	0x40000800
 800c010:	40000c00 	.word	0x40000c00
 800c014:	40001800 	.word	0x40001800
 800c018:	40014000 	.word	0x40014000

0800c01c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b085      	sub	sp, #20
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c026:	2300      	movs	r3, #0
 800c028:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c030:	2b01      	cmp	r3, #1
 800c032:	d101      	bne.n	800c038 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c034:	2302      	movs	r3, #2
 800c036:	e065      	b.n	800c104 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	4313      	orrs	r3, r2
 800c04c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	4313      	orrs	r3, r2
 800c05a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	4313      	orrs	r3, r2
 800c068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4313      	orrs	r3, r2
 800c076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	691b      	ldr	r3, [r3, #16]
 800c082:	4313      	orrs	r3, r2
 800c084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	695b      	ldr	r3, [r3, #20]
 800c090:	4313      	orrs	r3, r2
 800c092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	699b      	ldr	r3, [r3, #24]
 800c0ac:	041b      	lsls	r3, r3, #16
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a16      	ldr	r2, [pc, #88]	; (800c110 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d004      	beq.n	800c0c6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a14      	ldr	r2, [pc, #80]	; (800c114 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d115      	bne.n	800c0f2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d0:	051b      	lsls	r3, r3, #20
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	69db      	ldr	r3, [r3, #28]
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	6a1b      	ldr	r3, [r3, #32]
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68fa      	ldr	r2, [r7, #12]
 800c0f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c102:	2300      	movs	r3, #0
}
 800c104:	4618      	mov	r0, r3
 800c106:	3714      	adds	r7, #20
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr
 800c110:	40010000 	.word	0x40010000
 800c114:	40010400 	.word	0x40010400

0800c118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c120:	bf00      	nop
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr

0800c12c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c134:	bf00      	nop
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c148:	bf00      	nop
 800c14a:	370c      	adds	r7, #12
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr

0800c154 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d101      	bne.n	800c166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c162:	2301      	movs	r3, #1
 800c164:	e042      	b.n	800c1ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d106      	bne.n	800c17e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f7f6 fd91 	bl	8002ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2224      	movs	r2, #36	; 0x24
 800c182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f022 0201 	bic.w	r2, r2, #1
 800c194:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 f942 	bl	800c420 <UART_SetConfig>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d101      	bne.n	800c1a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e022      	b.n	800c1ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d002      	beq.n	800c1b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 fe96 	bl	800cee0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	685a      	ldr	r2, [r3, #4]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c1c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	689a      	ldr	r2, [r3, #8]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c1d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f042 0201 	orr.w	r2, r2, #1
 800c1e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 ff1d 	bl	800d024 <UART_CheckIdleState>
 800c1ea:	4603      	mov	r3, r0
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3708      	adds	r7, #8
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b08a      	sub	sp, #40	; 0x28
 800c1f8:	af02      	add	r7, sp, #8
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	603b      	str	r3, [r7, #0]
 800c200:	4613      	mov	r3, r2
 800c202:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c20a:	2b20      	cmp	r3, #32
 800c20c:	f040 8083 	bne.w	800c316 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d002      	beq.n	800c21c <HAL_UART_Transmit+0x28>
 800c216:	88fb      	ldrh	r3, [r7, #6]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d101      	bne.n	800c220 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c21c:	2301      	movs	r3, #1
 800c21e:	e07b      	b.n	800c318 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c226:	2b01      	cmp	r3, #1
 800c228:	d101      	bne.n	800c22e <HAL_UART_Transmit+0x3a>
 800c22a:	2302      	movs	r3, #2
 800c22c:	e074      	b.n	800c318 <HAL_UART_Transmit+0x124>
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2201      	movs	r2, #1
 800c232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2200      	movs	r2, #0
 800c23a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2221      	movs	r2, #33	; 0x21
 800c242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c246:	f7f6 ff71 	bl	800312c <HAL_GetTick>
 800c24a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	88fa      	ldrh	r2, [r7, #6]
 800c250:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	88fa      	ldrh	r2, [r7, #6]
 800c258:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c264:	d108      	bne.n	800c278 <HAL_UART_Transmit+0x84>
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	691b      	ldr	r3, [r3, #16]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d104      	bne.n	800c278 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c26e:	2300      	movs	r3, #0
 800c270:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	61bb      	str	r3, [r7, #24]
 800c276:	e003      	b.n	800c280 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c27c:	2300      	movs	r3, #0
 800c27e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2200      	movs	r2, #0
 800c284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c288:	e02c      	b.n	800c2e4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	9300      	str	r3, [sp, #0]
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	2200      	movs	r2, #0
 800c292:	2180      	movs	r1, #128	; 0x80
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f000 ff10 	bl	800d0ba <UART_WaitOnFlagUntilTimeout>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d001      	beq.n	800c2a4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c2a0:	2303      	movs	r3, #3
 800c2a2:	e039      	b.n	800c318 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d10b      	bne.n	800c2c2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c2aa:	69bb      	ldr	r3, [r7, #24]
 800c2ac:	881b      	ldrh	r3, [r3, #0]
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	3302      	adds	r3, #2
 800c2be:	61bb      	str	r3, [r7, #24]
 800c2c0:	e007      	b.n	800c2d2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c2c2:	69fb      	ldr	r3, [r7, #28]
 800c2c4:	781a      	ldrb	r2, [r3, #0]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d1cc      	bne.n	800c28a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	9300      	str	r3, [sp, #0]
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	2140      	movs	r1, #64	; 0x40
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	f000 fedd 	bl	800d0ba <UART_WaitOnFlagUntilTimeout>
 800c300:	4603      	mov	r3, r0
 800c302:	2b00      	cmp	r3, #0
 800c304:	d001      	beq.n	800c30a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c306:	2303      	movs	r3, #3
 800c308:	e006      	b.n	800c318 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2220      	movs	r2, #32
 800c30e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c312:	2300      	movs	r3, #0
 800c314:	e000      	b.n	800c318 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c316:	2302      	movs	r3, #2
  }
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3720      	adds	r7, #32
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b08a      	sub	sp, #40	; 0x28
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	4613      	mov	r3, r2
 800c32c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c334:	2b20      	cmp	r3, #32
 800c336:	d142      	bne.n	800c3be <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d002      	beq.n	800c344 <HAL_UART_Receive_DMA+0x24>
 800c33e:	88fb      	ldrh	r3, [r7, #6]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d101      	bne.n	800c348 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c344:	2301      	movs	r3, #1
 800c346:	e03b      	b.n	800c3c0 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d101      	bne.n	800c356 <HAL_UART_Receive_DMA+0x36>
 800c352:	2302      	movs	r3, #2
 800c354:	e034      	b.n	800c3c0 <HAL_UART_Receive_DMA+0xa0>
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2201      	movs	r2, #1
 800c35a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2200      	movs	r2, #0
 800c362:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a17      	ldr	r2, [pc, #92]	; (800c3c8 <HAL_UART_Receive_DMA+0xa8>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d01f      	beq.n	800c3ae <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d018      	beq.n	800c3ae <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	e853 3f00 	ldrex	r3, [r3]
 800c388:	613b      	str	r3, [r7, #16]
   return(result);
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c390:	627b      	str	r3, [r7, #36]	; 0x24
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	461a      	mov	r2, r3
 800c398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39a:	623b      	str	r3, [r7, #32]
 800c39c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c39e:	69f9      	ldr	r1, [r7, #28]
 800c3a0:	6a3a      	ldr	r2, [r7, #32]
 800c3a2:	e841 2300 	strex	r3, r2, [r1]
 800c3a6:	61bb      	str	r3, [r7, #24]
   return(result);
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1e6      	bne.n	800c37c <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c3ae:	88fb      	ldrh	r3, [r7, #6]
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	68b9      	ldr	r1, [r7, #8]
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	f000 ff49 	bl	800d24c <UART_Start_Receive_DMA>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	e000      	b.n	800c3c0 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c3be:	2302      	movs	r3, #2
  }
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3728      	adds	r7, #40	; 0x28
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	58000c00 	.word	0x58000c00

0800c3cc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c3d4:	bf00      	nop
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b083      	sub	sp, #12
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c3e8:	bf00      	nop
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c3fc:	bf00      	nop
 800c3fe:	370c      	adds	r7, #12
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr

0800c408 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	460b      	mov	r3, r1
 800c412:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c420:	b5b0      	push	{r4, r5, r7, lr}
 800c422:	b08e      	sub	sp, #56	; 0x38
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c428:	2300      	movs	r3, #0
 800c42a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	689a      	ldr	r2, [r3, #8]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	691b      	ldr	r3, [r3, #16]
 800c436:	431a      	orrs	r2, r3
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	695b      	ldr	r3, [r3, #20]
 800c43c:	431a      	orrs	r2, r3
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	69db      	ldr	r3, [r3, #28]
 800c442:	4313      	orrs	r3, r2
 800c444:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	681a      	ldr	r2, [r3, #0]
 800c44c:	4bbf      	ldr	r3, [pc, #764]	; (800c74c <UART_SetConfig+0x32c>)
 800c44e:	4013      	ands	r3, r2
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	6812      	ldr	r2, [r2, #0]
 800c454:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c456:	430b      	orrs	r3, r1
 800c458:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	68da      	ldr	r2, [r3, #12]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	430a      	orrs	r2, r1
 800c46e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	699b      	ldr	r3, [r3, #24]
 800c474:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4ab5      	ldr	r2, [pc, #724]	; (800c750 <UART_SetConfig+0x330>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d004      	beq.n	800c48a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6a1b      	ldr	r3, [r3, #32]
 800c484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c486:	4313      	orrs	r3, r2
 800c488:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	689a      	ldr	r2, [r3, #8]
 800c490:	4bb0      	ldr	r3, [pc, #704]	; (800c754 <UART_SetConfig+0x334>)
 800c492:	4013      	ands	r3, r2
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	6812      	ldr	r2, [r2, #0]
 800c498:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c49a:	430b      	orrs	r3, r1
 800c49c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a4:	f023 010f 	bic.w	r1, r3, #15
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	430a      	orrs	r2, r1
 800c4b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4aa7      	ldr	r2, [pc, #668]	; (800c758 <UART_SetConfig+0x338>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d176      	bne.n	800c5ac <UART_SetConfig+0x18c>
 800c4be:	4ba7      	ldr	r3, [pc, #668]	; (800c75c <UART_SetConfig+0x33c>)
 800c4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c4c6:	2b28      	cmp	r3, #40	; 0x28
 800c4c8:	d86c      	bhi.n	800c5a4 <UART_SetConfig+0x184>
 800c4ca:	a201      	add	r2, pc, #4	; (adr r2, 800c4d0 <UART_SetConfig+0xb0>)
 800c4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4d0:	0800c575 	.word	0x0800c575
 800c4d4:	0800c5a5 	.word	0x0800c5a5
 800c4d8:	0800c5a5 	.word	0x0800c5a5
 800c4dc:	0800c5a5 	.word	0x0800c5a5
 800c4e0:	0800c5a5 	.word	0x0800c5a5
 800c4e4:	0800c5a5 	.word	0x0800c5a5
 800c4e8:	0800c5a5 	.word	0x0800c5a5
 800c4ec:	0800c5a5 	.word	0x0800c5a5
 800c4f0:	0800c57d 	.word	0x0800c57d
 800c4f4:	0800c5a5 	.word	0x0800c5a5
 800c4f8:	0800c5a5 	.word	0x0800c5a5
 800c4fc:	0800c5a5 	.word	0x0800c5a5
 800c500:	0800c5a5 	.word	0x0800c5a5
 800c504:	0800c5a5 	.word	0x0800c5a5
 800c508:	0800c5a5 	.word	0x0800c5a5
 800c50c:	0800c5a5 	.word	0x0800c5a5
 800c510:	0800c585 	.word	0x0800c585
 800c514:	0800c5a5 	.word	0x0800c5a5
 800c518:	0800c5a5 	.word	0x0800c5a5
 800c51c:	0800c5a5 	.word	0x0800c5a5
 800c520:	0800c5a5 	.word	0x0800c5a5
 800c524:	0800c5a5 	.word	0x0800c5a5
 800c528:	0800c5a5 	.word	0x0800c5a5
 800c52c:	0800c5a5 	.word	0x0800c5a5
 800c530:	0800c58d 	.word	0x0800c58d
 800c534:	0800c5a5 	.word	0x0800c5a5
 800c538:	0800c5a5 	.word	0x0800c5a5
 800c53c:	0800c5a5 	.word	0x0800c5a5
 800c540:	0800c5a5 	.word	0x0800c5a5
 800c544:	0800c5a5 	.word	0x0800c5a5
 800c548:	0800c5a5 	.word	0x0800c5a5
 800c54c:	0800c5a5 	.word	0x0800c5a5
 800c550:	0800c595 	.word	0x0800c595
 800c554:	0800c5a5 	.word	0x0800c5a5
 800c558:	0800c5a5 	.word	0x0800c5a5
 800c55c:	0800c5a5 	.word	0x0800c5a5
 800c560:	0800c5a5 	.word	0x0800c5a5
 800c564:	0800c5a5 	.word	0x0800c5a5
 800c568:	0800c5a5 	.word	0x0800c5a5
 800c56c:	0800c5a5 	.word	0x0800c5a5
 800c570:	0800c59d 	.word	0x0800c59d
 800c574:	2301      	movs	r3, #1
 800c576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c57a:	e222      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c57c:	2304      	movs	r3, #4
 800c57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c582:	e21e      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c584:	2308      	movs	r3, #8
 800c586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c58a:	e21a      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c58c:	2310      	movs	r3, #16
 800c58e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c592:	e216      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c594:	2320      	movs	r3, #32
 800c596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c59a:	e212      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c59c:	2340      	movs	r3, #64	; 0x40
 800c59e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5a2:	e20e      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c5a4:	2380      	movs	r3, #128	; 0x80
 800c5a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5aa:	e20a      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a6b      	ldr	r2, [pc, #428]	; (800c760 <UART_SetConfig+0x340>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d130      	bne.n	800c618 <UART_SetConfig+0x1f8>
 800c5b6:	4b69      	ldr	r3, [pc, #420]	; (800c75c <UART_SetConfig+0x33c>)
 800c5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5ba:	f003 0307 	and.w	r3, r3, #7
 800c5be:	2b05      	cmp	r3, #5
 800c5c0:	d826      	bhi.n	800c610 <UART_SetConfig+0x1f0>
 800c5c2:	a201      	add	r2, pc, #4	; (adr r2, 800c5c8 <UART_SetConfig+0x1a8>)
 800c5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c8:	0800c5e1 	.word	0x0800c5e1
 800c5cc:	0800c5e9 	.word	0x0800c5e9
 800c5d0:	0800c5f1 	.word	0x0800c5f1
 800c5d4:	0800c5f9 	.word	0x0800c5f9
 800c5d8:	0800c601 	.word	0x0800c601
 800c5dc:	0800c609 	.word	0x0800c609
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5e6:	e1ec      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c5e8:	2304      	movs	r3, #4
 800c5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ee:	e1e8      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c5f0:	2308      	movs	r3, #8
 800c5f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5f6:	e1e4      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c5f8:	2310      	movs	r3, #16
 800c5fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5fe:	e1e0      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c600:	2320      	movs	r3, #32
 800c602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c606:	e1dc      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c608:	2340      	movs	r3, #64	; 0x40
 800c60a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c60e:	e1d8      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c610:	2380      	movs	r3, #128	; 0x80
 800c612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c616:	e1d4      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a51      	ldr	r2, [pc, #324]	; (800c764 <UART_SetConfig+0x344>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d130      	bne.n	800c684 <UART_SetConfig+0x264>
 800c622:	4b4e      	ldr	r3, [pc, #312]	; (800c75c <UART_SetConfig+0x33c>)
 800c624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c626:	f003 0307 	and.w	r3, r3, #7
 800c62a:	2b05      	cmp	r3, #5
 800c62c:	d826      	bhi.n	800c67c <UART_SetConfig+0x25c>
 800c62e:	a201      	add	r2, pc, #4	; (adr r2, 800c634 <UART_SetConfig+0x214>)
 800c630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c634:	0800c64d 	.word	0x0800c64d
 800c638:	0800c655 	.word	0x0800c655
 800c63c:	0800c65d 	.word	0x0800c65d
 800c640:	0800c665 	.word	0x0800c665
 800c644:	0800c66d 	.word	0x0800c66d
 800c648:	0800c675 	.word	0x0800c675
 800c64c:	2300      	movs	r3, #0
 800c64e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c652:	e1b6      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c654:	2304      	movs	r3, #4
 800c656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c65a:	e1b2      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c65c:	2308      	movs	r3, #8
 800c65e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c662:	e1ae      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c664:	2310      	movs	r3, #16
 800c666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c66a:	e1aa      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c66c:	2320      	movs	r3, #32
 800c66e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c672:	e1a6      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c674:	2340      	movs	r3, #64	; 0x40
 800c676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c67a:	e1a2      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c67c:	2380      	movs	r3, #128	; 0x80
 800c67e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c682:	e19e      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a37      	ldr	r2, [pc, #220]	; (800c768 <UART_SetConfig+0x348>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d130      	bne.n	800c6f0 <UART_SetConfig+0x2d0>
 800c68e:	4b33      	ldr	r3, [pc, #204]	; (800c75c <UART_SetConfig+0x33c>)
 800c690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c692:	f003 0307 	and.w	r3, r3, #7
 800c696:	2b05      	cmp	r3, #5
 800c698:	d826      	bhi.n	800c6e8 <UART_SetConfig+0x2c8>
 800c69a:	a201      	add	r2, pc, #4	; (adr r2, 800c6a0 <UART_SetConfig+0x280>)
 800c69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a0:	0800c6b9 	.word	0x0800c6b9
 800c6a4:	0800c6c1 	.word	0x0800c6c1
 800c6a8:	0800c6c9 	.word	0x0800c6c9
 800c6ac:	0800c6d1 	.word	0x0800c6d1
 800c6b0:	0800c6d9 	.word	0x0800c6d9
 800c6b4:	0800c6e1 	.word	0x0800c6e1
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6be:	e180      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c6c0:	2304      	movs	r3, #4
 800c6c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6c6:	e17c      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c6c8:	2308      	movs	r3, #8
 800c6ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6ce:	e178      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c6d0:	2310      	movs	r3, #16
 800c6d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6d6:	e174      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c6d8:	2320      	movs	r3, #32
 800c6da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6de:	e170      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c6e0:	2340      	movs	r3, #64	; 0x40
 800c6e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6e6:	e16c      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c6e8:	2380      	movs	r3, #128	; 0x80
 800c6ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6ee:	e168      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a1d      	ldr	r2, [pc, #116]	; (800c76c <UART_SetConfig+0x34c>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d142      	bne.n	800c780 <UART_SetConfig+0x360>
 800c6fa:	4b18      	ldr	r3, [pc, #96]	; (800c75c <UART_SetConfig+0x33c>)
 800c6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6fe:	f003 0307 	and.w	r3, r3, #7
 800c702:	2b05      	cmp	r3, #5
 800c704:	d838      	bhi.n	800c778 <UART_SetConfig+0x358>
 800c706:	a201      	add	r2, pc, #4	; (adr r2, 800c70c <UART_SetConfig+0x2ec>)
 800c708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c70c:	0800c725 	.word	0x0800c725
 800c710:	0800c72d 	.word	0x0800c72d
 800c714:	0800c735 	.word	0x0800c735
 800c718:	0800c73d 	.word	0x0800c73d
 800c71c:	0800c745 	.word	0x0800c745
 800c720:	0800c771 	.word	0x0800c771
 800c724:	2300      	movs	r3, #0
 800c726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c72a:	e14a      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c72c:	2304      	movs	r3, #4
 800c72e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c732:	e146      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c734:	2308      	movs	r3, #8
 800c736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c73a:	e142      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c73c:	2310      	movs	r3, #16
 800c73e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c742:	e13e      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c744:	2320      	movs	r3, #32
 800c746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c74a:	e13a      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c74c:	cfff69f3 	.word	0xcfff69f3
 800c750:	58000c00 	.word	0x58000c00
 800c754:	11fff4ff 	.word	0x11fff4ff
 800c758:	40011000 	.word	0x40011000
 800c75c:	58024400 	.word	0x58024400
 800c760:	40004400 	.word	0x40004400
 800c764:	40004800 	.word	0x40004800
 800c768:	40004c00 	.word	0x40004c00
 800c76c:	40005000 	.word	0x40005000
 800c770:	2340      	movs	r3, #64	; 0x40
 800c772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c776:	e124      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c778:	2380      	movs	r3, #128	; 0x80
 800c77a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c77e:	e120      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4acc      	ldr	r2, [pc, #816]	; (800cab8 <UART_SetConfig+0x698>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d176      	bne.n	800c878 <UART_SetConfig+0x458>
 800c78a:	4bcc      	ldr	r3, [pc, #816]	; (800cabc <UART_SetConfig+0x69c>)
 800c78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c78e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c792:	2b28      	cmp	r3, #40	; 0x28
 800c794:	d86c      	bhi.n	800c870 <UART_SetConfig+0x450>
 800c796:	a201      	add	r2, pc, #4	; (adr r2, 800c79c <UART_SetConfig+0x37c>)
 800c798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c79c:	0800c841 	.word	0x0800c841
 800c7a0:	0800c871 	.word	0x0800c871
 800c7a4:	0800c871 	.word	0x0800c871
 800c7a8:	0800c871 	.word	0x0800c871
 800c7ac:	0800c871 	.word	0x0800c871
 800c7b0:	0800c871 	.word	0x0800c871
 800c7b4:	0800c871 	.word	0x0800c871
 800c7b8:	0800c871 	.word	0x0800c871
 800c7bc:	0800c849 	.word	0x0800c849
 800c7c0:	0800c871 	.word	0x0800c871
 800c7c4:	0800c871 	.word	0x0800c871
 800c7c8:	0800c871 	.word	0x0800c871
 800c7cc:	0800c871 	.word	0x0800c871
 800c7d0:	0800c871 	.word	0x0800c871
 800c7d4:	0800c871 	.word	0x0800c871
 800c7d8:	0800c871 	.word	0x0800c871
 800c7dc:	0800c851 	.word	0x0800c851
 800c7e0:	0800c871 	.word	0x0800c871
 800c7e4:	0800c871 	.word	0x0800c871
 800c7e8:	0800c871 	.word	0x0800c871
 800c7ec:	0800c871 	.word	0x0800c871
 800c7f0:	0800c871 	.word	0x0800c871
 800c7f4:	0800c871 	.word	0x0800c871
 800c7f8:	0800c871 	.word	0x0800c871
 800c7fc:	0800c859 	.word	0x0800c859
 800c800:	0800c871 	.word	0x0800c871
 800c804:	0800c871 	.word	0x0800c871
 800c808:	0800c871 	.word	0x0800c871
 800c80c:	0800c871 	.word	0x0800c871
 800c810:	0800c871 	.word	0x0800c871
 800c814:	0800c871 	.word	0x0800c871
 800c818:	0800c871 	.word	0x0800c871
 800c81c:	0800c861 	.word	0x0800c861
 800c820:	0800c871 	.word	0x0800c871
 800c824:	0800c871 	.word	0x0800c871
 800c828:	0800c871 	.word	0x0800c871
 800c82c:	0800c871 	.word	0x0800c871
 800c830:	0800c871 	.word	0x0800c871
 800c834:	0800c871 	.word	0x0800c871
 800c838:	0800c871 	.word	0x0800c871
 800c83c:	0800c869 	.word	0x0800c869
 800c840:	2301      	movs	r3, #1
 800c842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c846:	e0bc      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c848:	2304      	movs	r3, #4
 800c84a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c84e:	e0b8      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c850:	2308      	movs	r3, #8
 800c852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c856:	e0b4      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c858:	2310      	movs	r3, #16
 800c85a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c85e:	e0b0      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c860:	2320      	movs	r3, #32
 800c862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c866:	e0ac      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c868:	2340      	movs	r3, #64	; 0x40
 800c86a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c86e:	e0a8      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c870:	2380      	movs	r3, #128	; 0x80
 800c872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c876:	e0a4      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a90      	ldr	r2, [pc, #576]	; (800cac0 <UART_SetConfig+0x6a0>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d130      	bne.n	800c8e4 <UART_SetConfig+0x4c4>
 800c882:	4b8e      	ldr	r3, [pc, #568]	; (800cabc <UART_SetConfig+0x69c>)
 800c884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c886:	f003 0307 	and.w	r3, r3, #7
 800c88a:	2b05      	cmp	r3, #5
 800c88c:	d826      	bhi.n	800c8dc <UART_SetConfig+0x4bc>
 800c88e:	a201      	add	r2, pc, #4	; (adr r2, 800c894 <UART_SetConfig+0x474>)
 800c890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c894:	0800c8ad 	.word	0x0800c8ad
 800c898:	0800c8b5 	.word	0x0800c8b5
 800c89c:	0800c8bd 	.word	0x0800c8bd
 800c8a0:	0800c8c5 	.word	0x0800c8c5
 800c8a4:	0800c8cd 	.word	0x0800c8cd
 800c8a8:	0800c8d5 	.word	0x0800c8d5
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8b2:	e086      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c8b4:	2304      	movs	r3, #4
 800c8b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ba:	e082      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c8bc:	2308      	movs	r3, #8
 800c8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8c2:	e07e      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c8c4:	2310      	movs	r3, #16
 800c8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ca:	e07a      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c8cc:	2320      	movs	r3, #32
 800c8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8d2:	e076      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c8d4:	2340      	movs	r3, #64	; 0x40
 800c8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8da:	e072      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c8dc:	2380      	movs	r3, #128	; 0x80
 800c8de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8e2:	e06e      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a76      	ldr	r2, [pc, #472]	; (800cac4 <UART_SetConfig+0x6a4>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d130      	bne.n	800c950 <UART_SetConfig+0x530>
 800c8ee:	4b73      	ldr	r3, [pc, #460]	; (800cabc <UART_SetConfig+0x69c>)
 800c8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8f2:	f003 0307 	and.w	r3, r3, #7
 800c8f6:	2b05      	cmp	r3, #5
 800c8f8:	d826      	bhi.n	800c948 <UART_SetConfig+0x528>
 800c8fa:	a201      	add	r2, pc, #4	; (adr r2, 800c900 <UART_SetConfig+0x4e0>)
 800c8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c900:	0800c919 	.word	0x0800c919
 800c904:	0800c921 	.word	0x0800c921
 800c908:	0800c929 	.word	0x0800c929
 800c90c:	0800c931 	.word	0x0800c931
 800c910:	0800c939 	.word	0x0800c939
 800c914:	0800c941 	.word	0x0800c941
 800c918:	2300      	movs	r3, #0
 800c91a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c91e:	e050      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c920:	2304      	movs	r3, #4
 800c922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c926:	e04c      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c928:	2308      	movs	r3, #8
 800c92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c92e:	e048      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c930:	2310      	movs	r3, #16
 800c932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c936:	e044      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c938:	2320      	movs	r3, #32
 800c93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c93e:	e040      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c940:	2340      	movs	r3, #64	; 0x40
 800c942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c946:	e03c      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c948:	2380      	movs	r3, #128	; 0x80
 800c94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c94e:	e038      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a5c      	ldr	r2, [pc, #368]	; (800cac8 <UART_SetConfig+0x6a8>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d130      	bne.n	800c9bc <UART_SetConfig+0x59c>
 800c95a:	4b58      	ldr	r3, [pc, #352]	; (800cabc <UART_SetConfig+0x69c>)
 800c95c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c95e:	f003 0307 	and.w	r3, r3, #7
 800c962:	2b05      	cmp	r3, #5
 800c964:	d826      	bhi.n	800c9b4 <UART_SetConfig+0x594>
 800c966:	a201      	add	r2, pc, #4	; (adr r2, 800c96c <UART_SetConfig+0x54c>)
 800c968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c96c:	0800c985 	.word	0x0800c985
 800c970:	0800c98d 	.word	0x0800c98d
 800c974:	0800c995 	.word	0x0800c995
 800c978:	0800c99d 	.word	0x0800c99d
 800c97c:	0800c9a5 	.word	0x0800c9a5
 800c980:	0800c9ad 	.word	0x0800c9ad
 800c984:	2302      	movs	r3, #2
 800c986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c98a:	e01a      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c98c:	2304      	movs	r3, #4
 800c98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c992:	e016      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c994:	2308      	movs	r3, #8
 800c996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c99a:	e012      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c99c:	2310      	movs	r3, #16
 800c99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9a2:	e00e      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c9a4:	2320      	movs	r3, #32
 800c9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9aa:	e00a      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c9ac:	2340      	movs	r3, #64	; 0x40
 800c9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9b2:	e006      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c9b4:	2380      	movs	r3, #128	; 0x80
 800c9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ba:	e002      	b.n	800c9c2 <UART_SetConfig+0x5a2>
 800c9bc:	2380      	movs	r3, #128	; 0x80
 800c9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a40      	ldr	r2, [pc, #256]	; (800cac8 <UART_SetConfig+0x6a8>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	f040 80ef 	bne.w	800cbac <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c9ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c9d2:	2b20      	cmp	r3, #32
 800c9d4:	dc46      	bgt.n	800ca64 <UART_SetConfig+0x644>
 800c9d6:	2b02      	cmp	r3, #2
 800c9d8:	f2c0 8081 	blt.w	800cade <UART_SetConfig+0x6be>
 800c9dc:	3b02      	subs	r3, #2
 800c9de:	2b1e      	cmp	r3, #30
 800c9e0:	d87d      	bhi.n	800cade <UART_SetConfig+0x6be>
 800c9e2:	a201      	add	r2, pc, #4	; (adr r2, 800c9e8 <UART_SetConfig+0x5c8>)
 800c9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9e8:	0800ca6b 	.word	0x0800ca6b
 800c9ec:	0800cadf 	.word	0x0800cadf
 800c9f0:	0800ca73 	.word	0x0800ca73
 800c9f4:	0800cadf 	.word	0x0800cadf
 800c9f8:	0800cadf 	.word	0x0800cadf
 800c9fc:	0800cadf 	.word	0x0800cadf
 800ca00:	0800ca83 	.word	0x0800ca83
 800ca04:	0800cadf 	.word	0x0800cadf
 800ca08:	0800cadf 	.word	0x0800cadf
 800ca0c:	0800cadf 	.word	0x0800cadf
 800ca10:	0800cadf 	.word	0x0800cadf
 800ca14:	0800cadf 	.word	0x0800cadf
 800ca18:	0800cadf 	.word	0x0800cadf
 800ca1c:	0800cadf 	.word	0x0800cadf
 800ca20:	0800ca93 	.word	0x0800ca93
 800ca24:	0800cadf 	.word	0x0800cadf
 800ca28:	0800cadf 	.word	0x0800cadf
 800ca2c:	0800cadf 	.word	0x0800cadf
 800ca30:	0800cadf 	.word	0x0800cadf
 800ca34:	0800cadf 	.word	0x0800cadf
 800ca38:	0800cadf 	.word	0x0800cadf
 800ca3c:	0800cadf 	.word	0x0800cadf
 800ca40:	0800cadf 	.word	0x0800cadf
 800ca44:	0800cadf 	.word	0x0800cadf
 800ca48:	0800cadf 	.word	0x0800cadf
 800ca4c:	0800cadf 	.word	0x0800cadf
 800ca50:	0800cadf 	.word	0x0800cadf
 800ca54:	0800cadf 	.word	0x0800cadf
 800ca58:	0800cadf 	.word	0x0800cadf
 800ca5c:	0800cadf 	.word	0x0800cadf
 800ca60:	0800cad1 	.word	0x0800cad1
 800ca64:	2b40      	cmp	r3, #64	; 0x40
 800ca66:	d036      	beq.n	800cad6 <UART_SetConfig+0x6b6>
 800ca68:	e039      	b.n	800cade <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ca6a:	f7fd f8ef 	bl	8009c4c <HAL_RCCEx_GetD3PCLK1Freq>
 800ca6e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ca70:	e03b      	b.n	800caea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca72:	f107 0314 	add.w	r3, r7, #20
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7fd f8fe 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca80:	e033      	b.n	800caea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca82:	f107 0308 	add.w	r3, r7, #8
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7fd fa4a 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca90:	e02b      	b.n	800caea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca92:	4b0a      	ldr	r3, [pc, #40]	; (800cabc <UART_SetConfig+0x69c>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f003 0320 	and.w	r3, r3, #32
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d009      	beq.n	800cab2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca9e:	4b07      	ldr	r3, [pc, #28]	; (800cabc <UART_SetConfig+0x69c>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	08db      	lsrs	r3, r3, #3
 800caa4:	f003 0303 	and.w	r3, r3, #3
 800caa8:	4a08      	ldr	r2, [pc, #32]	; (800cacc <UART_SetConfig+0x6ac>)
 800caaa:	fa22 f303 	lsr.w	r3, r2, r3
 800caae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cab0:	e01b      	b.n	800caea <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800cab2:	4b06      	ldr	r3, [pc, #24]	; (800cacc <UART_SetConfig+0x6ac>)
 800cab4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cab6:	e018      	b.n	800caea <UART_SetConfig+0x6ca>
 800cab8:	40011400 	.word	0x40011400
 800cabc:	58024400 	.word	0x58024400
 800cac0:	40007800 	.word	0x40007800
 800cac4:	40007c00 	.word	0x40007c00
 800cac8:	58000c00 	.word	0x58000c00
 800cacc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cad0:	4bc4      	ldr	r3, [pc, #784]	; (800cde4 <UART_SetConfig+0x9c4>)
 800cad2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cad4:	e009      	b.n	800caea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cada:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cadc:	e005      	b.n	800caea <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800cade:	2300      	movs	r3, #0
 800cae0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cae2:	2301      	movs	r3, #1
 800cae4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cae8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800caea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caec:	2b00      	cmp	r3, #0
 800caee:	f000 81da 	beq.w	800cea6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf6:	4abc      	ldr	r2, [pc, #752]	; (800cde8 <UART_SetConfig+0x9c8>)
 800caf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cafc:	461a      	mov	r2, r3
 800cafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb00:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb04:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	685a      	ldr	r2, [r3, #4]
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	005b      	lsls	r3, r3, #1
 800cb0e:	4413      	add	r3, r2
 800cb10:	6a3a      	ldr	r2, [r7, #32]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d305      	bcc.n	800cb22 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb1c:	6a3a      	ldr	r2, [r7, #32]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d903      	bls.n	800cb2a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800cb22:	2301      	movs	r3, #1
 800cb24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cb28:	e1bd      	b.n	800cea6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f04f 0100 	mov.w	r1, #0
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb36:	4aac      	ldr	r2, [pc, #688]	; (800cde8 <UART_SetConfig+0x9c8>)
 800cb38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb3c:	b29a      	uxth	r2, r3
 800cb3e:	f04f 0300 	mov.w	r3, #0
 800cb42:	f7f3 fbc9 	bl	80002d8 <__aeabi_uldivmod>
 800cb46:	4602      	mov	r2, r0
 800cb48:	460b      	mov	r3, r1
 800cb4a:	4610      	mov	r0, r2
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	f04f 0200 	mov.w	r2, #0
 800cb52:	f04f 0300 	mov.w	r3, #0
 800cb56:	020b      	lsls	r3, r1, #8
 800cb58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cb5c:	0202      	lsls	r2, r0, #8
 800cb5e:	6879      	ldr	r1, [r7, #4]
 800cb60:	6849      	ldr	r1, [r1, #4]
 800cb62:	0849      	lsrs	r1, r1, #1
 800cb64:	4608      	mov	r0, r1
 800cb66:	f04f 0100 	mov.w	r1, #0
 800cb6a:	1814      	adds	r4, r2, r0
 800cb6c:	eb43 0501 	adc.w	r5, r3, r1
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	461a      	mov	r2, r3
 800cb76:	f04f 0300 	mov.w	r3, #0
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	4629      	mov	r1, r5
 800cb7e:	f7f3 fbab 	bl	80002d8 <__aeabi_uldivmod>
 800cb82:	4602      	mov	r2, r0
 800cb84:	460b      	mov	r3, r1
 800cb86:	4613      	mov	r3, r2
 800cb88:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb90:	d308      	bcc.n	800cba4 <UART_SetConfig+0x784>
 800cb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb98:	d204      	bcs.n	800cba4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cba0:	60da      	str	r2, [r3, #12]
 800cba2:	e180      	b.n	800cea6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800cba4:	2301      	movs	r3, #1
 800cba6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cbaa:	e17c      	b.n	800cea6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	69db      	ldr	r3, [r3, #28]
 800cbb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cbb4:	f040 80be 	bne.w	800cd34 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800cbb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cbbc:	2b20      	cmp	r3, #32
 800cbbe:	dc49      	bgt.n	800cc54 <UART_SetConfig+0x834>
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	db7c      	blt.n	800ccbe <UART_SetConfig+0x89e>
 800cbc4:	2b20      	cmp	r3, #32
 800cbc6:	d87a      	bhi.n	800ccbe <UART_SetConfig+0x89e>
 800cbc8:	a201      	add	r2, pc, #4	; (adr r2, 800cbd0 <UART_SetConfig+0x7b0>)
 800cbca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbce:	bf00      	nop
 800cbd0:	0800cc5b 	.word	0x0800cc5b
 800cbd4:	0800cc63 	.word	0x0800cc63
 800cbd8:	0800ccbf 	.word	0x0800ccbf
 800cbdc:	0800ccbf 	.word	0x0800ccbf
 800cbe0:	0800cc6b 	.word	0x0800cc6b
 800cbe4:	0800ccbf 	.word	0x0800ccbf
 800cbe8:	0800ccbf 	.word	0x0800ccbf
 800cbec:	0800ccbf 	.word	0x0800ccbf
 800cbf0:	0800cc7b 	.word	0x0800cc7b
 800cbf4:	0800ccbf 	.word	0x0800ccbf
 800cbf8:	0800ccbf 	.word	0x0800ccbf
 800cbfc:	0800ccbf 	.word	0x0800ccbf
 800cc00:	0800ccbf 	.word	0x0800ccbf
 800cc04:	0800ccbf 	.word	0x0800ccbf
 800cc08:	0800ccbf 	.word	0x0800ccbf
 800cc0c:	0800ccbf 	.word	0x0800ccbf
 800cc10:	0800cc8b 	.word	0x0800cc8b
 800cc14:	0800ccbf 	.word	0x0800ccbf
 800cc18:	0800ccbf 	.word	0x0800ccbf
 800cc1c:	0800ccbf 	.word	0x0800ccbf
 800cc20:	0800ccbf 	.word	0x0800ccbf
 800cc24:	0800ccbf 	.word	0x0800ccbf
 800cc28:	0800ccbf 	.word	0x0800ccbf
 800cc2c:	0800ccbf 	.word	0x0800ccbf
 800cc30:	0800ccbf 	.word	0x0800ccbf
 800cc34:	0800ccbf 	.word	0x0800ccbf
 800cc38:	0800ccbf 	.word	0x0800ccbf
 800cc3c:	0800ccbf 	.word	0x0800ccbf
 800cc40:	0800ccbf 	.word	0x0800ccbf
 800cc44:	0800ccbf 	.word	0x0800ccbf
 800cc48:	0800ccbf 	.word	0x0800ccbf
 800cc4c:	0800ccbf 	.word	0x0800ccbf
 800cc50:	0800ccb1 	.word	0x0800ccb1
 800cc54:	2b40      	cmp	r3, #64	; 0x40
 800cc56:	d02e      	beq.n	800ccb6 <UART_SetConfig+0x896>
 800cc58:	e031      	b.n	800ccbe <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc5a:	f7fb fbb9 	bl	80083d0 <HAL_RCC_GetPCLK1Freq>
 800cc5e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cc60:	e033      	b.n	800ccca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc62:	f7fb fbcb 	bl	80083fc <HAL_RCC_GetPCLK2Freq>
 800cc66:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cc68:	e02f      	b.n	800ccca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc6a:	f107 0314 	add.w	r3, r7, #20
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fd f802 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cc74:	69bb      	ldr	r3, [r7, #24]
 800cc76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc78:	e027      	b.n	800ccca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc7a:	f107 0308 	add.w	r3, r7, #8
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7fd f94e 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc88:	e01f      	b.n	800ccca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc8a:	4b58      	ldr	r3, [pc, #352]	; (800cdec <UART_SetConfig+0x9cc>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f003 0320 	and.w	r3, r3, #32
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d009      	beq.n	800ccaa <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cc96:	4b55      	ldr	r3, [pc, #340]	; (800cdec <UART_SetConfig+0x9cc>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	08db      	lsrs	r3, r3, #3
 800cc9c:	f003 0303 	and.w	r3, r3, #3
 800cca0:	4a53      	ldr	r2, [pc, #332]	; (800cdf0 <UART_SetConfig+0x9d0>)
 800cca2:	fa22 f303 	lsr.w	r3, r2, r3
 800cca6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cca8:	e00f      	b.n	800ccca <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800ccaa:	4b51      	ldr	r3, [pc, #324]	; (800cdf0 <UART_SetConfig+0x9d0>)
 800ccac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ccae:	e00c      	b.n	800ccca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ccb0:	4b4c      	ldr	r3, [pc, #304]	; (800cde4 <UART_SetConfig+0x9c4>)
 800ccb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ccb4:	e009      	b.n	800ccca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ccb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ccba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ccbc:	e005      	b.n	800ccca <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ccc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ccca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f000 80ea 	beq.w	800cea6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd6:	4a44      	ldr	r2, [pc, #272]	; (800cde8 <UART_SetConfig+0x9c8>)
 800ccd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccdc:	461a      	mov	r2, r3
 800ccde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cce4:	005a      	lsls	r2, r3, #1
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	085b      	lsrs	r3, r3, #1
 800ccec:	441a      	add	r2, r3
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccf6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ccf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfa:	2b0f      	cmp	r3, #15
 800ccfc:	d916      	bls.n	800cd2c <UART_SetConfig+0x90c>
 800ccfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd04:	d212      	bcs.n	800cd2c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd08:	b29b      	uxth	r3, r3
 800cd0a:	f023 030f 	bic.w	r3, r3, #15
 800cd0e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd12:	085b      	lsrs	r3, r3, #1
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	f003 0307 	and.w	r3, r3, #7
 800cd1a:	b29a      	uxth	r2, r3
 800cd1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cd28:	60da      	str	r2, [r3, #12]
 800cd2a:	e0bc      	b.n	800cea6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cd32:	e0b8      	b.n	800cea6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cd34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cd38:	2b20      	cmp	r3, #32
 800cd3a:	dc4b      	bgt.n	800cdd4 <UART_SetConfig+0x9b4>
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	f2c0 8087 	blt.w	800ce50 <UART_SetConfig+0xa30>
 800cd42:	2b20      	cmp	r3, #32
 800cd44:	f200 8084 	bhi.w	800ce50 <UART_SetConfig+0xa30>
 800cd48:	a201      	add	r2, pc, #4	; (adr r2, 800cd50 <UART_SetConfig+0x930>)
 800cd4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd4e:	bf00      	nop
 800cd50:	0800cddb 	.word	0x0800cddb
 800cd54:	0800cdf5 	.word	0x0800cdf5
 800cd58:	0800ce51 	.word	0x0800ce51
 800cd5c:	0800ce51 	.word	0x0800ce51
 800cd60:	0800cdfd 	.word	0x0800cdfd
 800cd64:	0800ce51 	.word	0x0800ce51
 800cd68:	0800ce51 	.word	0x0800ce51
 800cd6c:	0800ce51 	.word	0x0800ce51
 800cd70:	0800ce0d 	.word	0x0800ce0d
 800cd74:	0800ce51 	.word	0x0800ce51
 800cd78:	0800ce51 	.word	0x0800ce51
 800cd7c:	0800ce51 	.word	0x0800ce51
 800cd80:	0800ce51 	.word	0x0800ce51
 800cd84:	0800ce51 	.word	0x0800ce51
 800cd88:	0800ce51 	.word	0x0800ce51
 800cd8c:	0800ce51 	.word	0x0800ce51
 800cd90:	0800ce1d 	.word	0x0800ce1d
 800cd94:	0800ce51 	.word	0x0800ce51
 800cd98:	0800ce51 	.word	0x0800ce51
 800cd9c:	0800ce51 	.word	0x0800ce51
 800cda0:	0800ce51 	.word	0x0800ce51
 800cda4:	0800ce51 	.word	0x0800ce51
 800cda8:	0800ce51 	.word	0x0800ce51
 800cdac:	0800ce51 	.word	0x0800ce51
 800cdb0:	0800ce51 	.word	0x0800ce51
 800cdb4:	0800ce51 	.word	0x0800ce51
 800cdb8:	0800ce51 	.word	0x0800ce51
 800cdbc:	0800ce51 	.word	0x0800ce51
 800cdc0:	0800ce51 	.word	0x0800ce51
 800cdc4:	0800ce51 	.word	0x0800ce51
 800cdc8:	0800ce51 	.word	0x0800ce51
 800cdcc:	0800ce51 	.word	0x0800ce51
 800cdd0:	0800ce43 	.word	0x0800ce43
 800cdd4:	2b40      	cmp	r3, #64	; 0x40
 800cdd6:	d037      	beq.n	800ce48 <UART_SetConfig+0xa28>
 800cdd8:	e03a      	b.n	800ce50 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cdda:	f7fb faf9 	bl	80083d0 <HAL_RCC_GetPCLK1Freq>
 800cdde:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cde0:	e03c      	b.n	800ce5c <UART_SetConfig+0xa3c>
 800cde2:	bf00      	nop
 800cde4:	003d0900 	.word	0x003d0900
 800cde8:	0800f56c 	.word	0x0800f56c
 800cdec:	58024400 	.word	0x58024400
 800cdf0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cdf4:	f7fb fb02 	bl	80083fc <HAL_RCC_GetPCLK2Freq>
 800cdf8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cdfa:	e02f      	b.n	800ce5c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdfc:	f107 0314 	add.w	r3, r7, #20
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7fc ff39 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce0a:	e027      	b.n	800ce5c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce0c:	f107 0308 	add.w	r3, r7, #8
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7fd f885 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce1a:	e01f      	b.n	800ce5c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce1c:	4b2c      	ldr	r3, [pc, #176]	; (800ced0 <UART_SetConfig+0xab0>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f003 0320 	and.w	r3, r3, #32
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d009      	beq.n	800ce3c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ce28:	4b29      	ldr	r3, [pc, #164]	; (800ced0 <UART_SetConfig+0xab0>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	08db      	lsrs	r3, r3, #3
 800ce2e:	f003 0303 	and.w	r3, r3, #3
 800ce32:	4a28      	ldr	r2, [pc, #160]	; (800ced4 <UART_SetConfig+0xab4>)
 800ce34:	fa22 f303 	lsr.w	r3, r2, r3
 800ce38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ce3a:	e00f      	b.n	800ce5c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800ce3c:	4b25      	ldr	r3, [pc, #148]	; (800ced4 <UART_SetConfig+0xab4>)
 800ce3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce40:	e00c      	b.n	800ce5c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ce42:	4b25      	ldr	r3, [pc, #148]	; (800ced8 <UART_SetConfig+0xab8>)
 800ce44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce46:	e009      	b.n	800ce5c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce4e:	e005      	b.n	800ce5c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800ce50:	2300      	movs	r3, #0
 800ce52:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ce54:	2301      	movs	r3, #1
 800ce56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ce5a:	bf00      	nop
    }

    if (pclk != 0U)
 800ce5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d021      	beq.n	800cea6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce66:	4a1d      	ldr	r2, [pc, #116]	; (800cedc <UART_SetConfig+0xabc>)
 800ce68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce70:	fbb3 f2f2 	udiv	r2, r3, r2
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	085b      	lsrs	r3, r3, #1
 800ce7a:	441a      	add	r2, r3
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce84:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce88:	2b0f      	cmp	r3, #15
 800ce8a:	d909      	bls.n	800cea0 <UART_SetConfig+0xa80>
 800ce8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce92:	d205      	bcs.n	800cea0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ce94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	60da      	str	r2, [r3, #12]
 800ce9e:	e002      	b.n	800cea6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800cea0:	2301      	movs	r3, #1
 800cea2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2201      	movs	r2, #1
 800ceaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2200      	movs	r2, #0
 800cec0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cec2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3738      	adds	r7, #56	; 0x38
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bdb0      	pop	{r4, r5, r7, pc}
 800cece:	bf00      	nop
 800ced0:	58024400 	.word	0x58024400
 800ced4:	03d09000 	.word	0x03d09000
 800ced8:	003d0900 	.word	0x003d0900
 800cedc:	0800f56c 	.word	0x0800f56c

0800cee0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceec:	f003 0301 	and.w	r3, r3, #1
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00a      	beq.n	800cf0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	430a      	orrs	r2, r1
 800cf08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf0e:	f003 0302 	and.w	r3, r3, #2
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d00a      	beq.n	800cf2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	430a      	orrs	r2, r1
 800cf2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf30:	f003 0304 	and.w	r3, r3, #4
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d00a      	beq.n	800cf4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	430a      	orrs	r2, r1
 800cf4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf52:	f003 0308 	and.w	r3, r3, #8
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d00a      	beq.n	800cf70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	430a      	orrs	r2, r1
 800cf6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf74:	f003 0310 	and.w	r3, r3, #16
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d00a      	beq.n	800cf92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	689b      	ldr	r3, [r3, #8]
 800cf82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	430a      	orrs	r2, r1
 800cf90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf96:	f003 0320 	and.w	r3, r3, #32
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d00a      	beq.n	800cfb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	430a      	orrs	r2, r1
 800cfb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d01a      	beq.n	800cff6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	430a      	orrs	r2, r1
 800cfd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfde:	d10a      	bne.n	800cff6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	430a      	orrs	r2, r1
 800cff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d00a      	beq.n	800d018 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	430a      	orrs	r2, r1
 800d016:	605a      	str	r2, [r3, #4]
  }
}
 800d018:	bf00      	nop
 800d01a:	370c      	adds	r7, #12
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b086      	sub	sp, #24
 800d028:	af02      	add	r7, sp, #8
 800d02a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2200      	movs	r2, #0
 800d030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d034:	f7f6 f87a 	bl	800312c <HAL_GetTick>
 800d038:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f003 0308 	and.w	r3, r3, #8
 800d044:	2b08      	cmp	r3, #8
 800d046:	d10e      	bne.n	800d066 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d04c:	9300      	str	r3, [sp, #0]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2200      	movs	r2, #0
 800d052:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 f82f 	bl	800d0ba <UART_WaitOnFlagUntilTimeout>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d001      	beq.n	800d066 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d062:	2303      	movs	r3, #3
 800d064:	e025      	b.n	800d0b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f003 0304 	and.w	r3, r3, #4
 800d070:	2b04      	cmp	r3, #4
 800d072:	d10e      	bne.n	800d092 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d074:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d078:	9300      	str	r3, [sp, #0]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2200      	movs	r2, #0
 800d07e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f000 f819 	bl	800d0ba <UART_WaitOnFlagUntilTimeout>
 800d088:	4603      	mov	r3, r0
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d001      	beq.n	800d092 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d08e:	2303      	movs	r3, #3
 800d090:	e00f      	b.n	800d0b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2220      	movs	r2, #32
 800d096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2220      	movs	r2, #32
 800d09e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d0b0:	2300      	movs	r3, #0
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3710      	adds	r7, #16
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b09c      	sub	sp, #112	; 0x70
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	60f8      	str	r0, [r7, #12]
 800d0c2:	60b9      	str	r1, [r7, #8]
 800d0c4:	603b      	str	r3, [r7, #0]
 800d0c6:	4613      	mov	r3, r2
 800d0c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0ca:	e0a9      	b.n	800d220 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0d2:	f000 80a5 	beq.w	800d220 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0d6:	f7f6 f829 	bl	800312c <HAL_GetTick>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	1ad3      	subs	r3, r2, r3
 800d0e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d302      	bcc.n	800d0ec <UART_WaitOnFlagUntilTimeout+0x32>
 800d0e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d140      	bne.n	800d16e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0f4:	e853 3f00 	ldrex	r3, [r3]
 800d0f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d0fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d100:	667b      	str	r3, [r7, #100]	; 0x64
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	461a      	mov	r2, r3
 800d108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d10a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d10c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d10e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d110:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d112:	e841 2300 	strex	r3, r2, [r1]
 800d116:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d1e6      	bne.n	800d0ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	3308      	adds	r3, #8
 800d124:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d128:	e853 3f00 	ldrex	r3, [r3]
 800d12c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d130:	f023 0301 	bic.w	r3, r3, #1
 800d134:	663b      	str	r3, [r7, #96]	; 0x60
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	3308      	adds	r3, #8
 800d13c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d13e:	64ba      	str	r2, [r7, #72]	; 0x48
 800d140:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d142:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d146:	e841 2300 	strex	r3, r2, [r1]
 800d14a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d14c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1e5      	bne.n	800d11e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2220      	movs	r2, #32
 800d156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2220      	movs	r2, #32
 800d15e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2200      	movs	r2, #0
 800d166:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d16a:	2303      	movs	r3, #3
 800d16c:	e069      	b.n	800d242 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f003 0304 	and.w	r3, r3, #4
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d051      	beq.n	800d220 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	69db      	ldr	r3, [r3, #28]
 800d182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d18a:	d149      	bne.n	800d220 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d194:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19e:	e853 3f00 	ldrex	r3, [r3]
 800d1a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d1aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1b4:	637b      	str	r3, [r7, #52]	; 0x34
 800d1b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d1ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1bc:	e841 2300 	strex	r3, r2, [r1]
 800d1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d1e6      	bne.n	800d196 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	3308      	adds	r3, #8
 800d1ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	e853 3f00 	ldrex	r3, [r3]
 800d1d6:	613b      	str	r3, [r7, #16]
   return(result);
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	f023 0301 	bic.w	r3, r3, #1
 800d1de:	66bb      	str	r3, [r7, #104]	; 0x68
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	3308      	adds	r3, #8
 800d1e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d1e8:	623a      	str	r2, [r7, #32]
 800d1ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ec:	69f9      	ldr	r1, [r7, #28]
 800d1ee:	6a3a      	ldr	r2, [r7, #32]
 800d1f0:	e841 2300 	strex	r3, r2, [r1]
 800d1f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d1f6:	69bb      	ldr	r3, [r7, #24]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d1e5      	bne.n	800d1c8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2220      	movs	r2, #32
 800d200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2220      	movs	r2, #32
 800d208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2220      	movs	r2, #32
 800d210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2200      	movs	r2, #0
 800d218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d21c:	2303      	movs	r3, #3
 800d21e:	e010      	b.n	800d242 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	69da      	ldr	r2, [r3, #28]
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	4013      	ands	r3, r2
 800d22a:	68ba      	ldr	r2, [r7, #8]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	bf0c      	ite	eq
 800d230:	2301      	moveq	r3, #1
 800d232:	2300      	movne	r3, #0
 800d234:	b2db      	uxtb	r3, r3
 800d236:	461a      	mov	r2, r3
 800d238:	79fb      	ldrb	r3, [r7, #7]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	f43f af46 	beq.w	800d0cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d240:	2300      	movs	r3, #0
}
 800d242:	4618      	mov	r0, r3
 800d244:	3770      	adds	r7, #112	; 0x70
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
	...

0800d24c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b096      	sub	sp, #88	; 0x58
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	4613      	mov	r3, r2
 800d258:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	68ba      	ldr	r2, [r7, #8]
 800d25e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	88fa      	ldrh	r2, [r7, #6]
 800d264:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	2200      	movs	r2, #0
 800d26c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2222      	movs	r2, #34	; 0x22
 800d274:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d02c      	beq.n	800d2da <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d284:	4a42      	ldr	r2, [pc, #264]	; (800d390 <UART_Start_Receive_DMA+0x144>)
 800d286:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d28c:	4a41      	ldr	r2, [pc, #260]	; (800d394 <UART_Start_Receive_DMA+0x148>)
 800d28e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d294:	4a40      	ldr	r2, [pc, #256]	; (800d398 <UART_Start_Receive_DMA+0x14c>)
 800d296:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d29c:	2200      	movs	r2, #0
 800d29e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	3324      	adds	r3, #36	; 0x24
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	88fb      	ldrh	r3, [r7, #6]
 800d2b4:	f7f8 f942 	bl	800553c <HAL_DMA_Start_IT>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00d      	beq.n	800d2da <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2210      	movs	r2, #16
 800d2c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2220      	movs	r2, #32
 800d2d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e055      	b.n	800d386 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	691b      	ldr	r3, [r3, #16]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d018      	beq.n	800d31c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2f2:	e853 3f00 	ldrex	r3, [r3]
 800d2f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2fe:	657b      	str	r3, [r7, #84]	; 0x54
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	461a      	mov	r2, r3
 800d306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d308:	64bb      	str	r3, [r7, #72]	; 0x48
 800d30a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d30c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d30e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d310:	e841 2300 	strex	r3, r2, [r1]
 800d314:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d1e6      	bne.n	800d2ea <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	3308      	adds	r3, #8
 800d322:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d326:	e853 3f00 	ldrex	r3, [r3]
 800d32a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32e:	f043 0301 	orr.w	r3, r3, #1
 800d332:	653b      	str	r3, [r7, #80]	; 0x50
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	3308      	adds	r3, #8
 800d33a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d33c:	637a      	str	r2, [r7, #52]	; 0x34
 800d33e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d340:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d344:	e841 2300 	strex	r3, r2, [r1]
 800d348:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d1e5      	bne.n	800d31c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	3308      	adds	r3, #8
 800d356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	e853 3f00 	ldrex	r3, [r3]
 800d35e:	613b      	str	r3, [r7, #16]
   return(result);
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d366:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	3308      	adds	r3, #8
 800d36e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d370:	623a      	str	r2, [r7, #32]
 800d372:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d374:	69f9      	ldr	r1, [r7, #28]
 800d376:	6a3a      	ldr	r2, [r7, #32]
 800d378:	e841 2300 	strex	r3, r2, [r1]
 800d37c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d1e5      	bne.n	800d350 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d384:	2300      	movs	r3, #0
}
 800d386:	4618      	mov	r0, r3
 800d388:	3758      	adds	r7, #88	; 0x58
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	0800d4ed 	.word	0x0800d4ed
 800d394:	0800d60f 	.word	0x0800d60f
 800d398:	0800d647 	.word	0x0800d647

0800d39c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b08f      	sub	sp, #60	; 0x3c
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3aa:	6a3b      	ldr	r3, [r7, #32]
 800d3ac:	e853 3f00 	ldrex	r3, [r3]
 800d3b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d3b8:	637b      	str	r3, [r7, #52]	; 0x34
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3c4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3ca:	e841 2300 	strex	r3, r2, [r1]
 800d3ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d1e6      	bne.n	800d3a4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	3308      	adds	r3, #8
 800d3dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	e853 3f00 	ldrex	r3, [r3]
 800d3e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d3ec:	633b      	str	r3, [r7, #48]	; 0x30
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	3308      	adds	r3, #8
 800d3f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3f6:	61ba      	str	r2, [r7, #24]
 800d3f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3fa:	6979      	ldr	r1, [r7, #20]
 800d3fc:	69ba      	ldr	r2, [r7, #24]
 800d3fe:	e841 2300 	strex	r3, r2, [r1]
 800d402:	613b      	str	r3, [r7, #16]
   return(result);
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d1e5      	bne.n	800d3d6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2220      	movs	r2, #32
 800d40e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d412:	bf00      	nop
 800d414:	373c      	adds	r7, #60	; 0x3c
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr
	...

0800d420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d420:	b480      	push	{r7}
 800d422:	b095      	sub	sp, #84	; 0x54
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d430:	e853 3f00 	ldrex	r3, [r3]
 800d434:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d438:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d43c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	461a      	mov	r2, r3
 800d444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d446:	643b      	str	r3, [r7, #64]	; 0x40
 800d448:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d44a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d44c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d44e:	e841 2300 	strex	r3, r2, [r1]
 800d452:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d456:	2b00      	cmp	r3, #0
 800d458:	d1e6      	bne.n	800d428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	3308      	adds	r3, #8
 800d460:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d462:	6a3b      	ldr	r3, [r7, #32]
 800d464:	e853 3f00 	ldrex	r3, [r3]
 800d468:	61fb      	str	r3, [r7, #28]
   return(result);
 800d46a:	69fa      	ldr	r2, [r7, #28]
 800d46c:	4b1e      	ldr	r3, [pc, #120]	; (800d4e8 <UART_EndRxTransfer+0xc8>)
 800d46e:	4013      	ands	r3, r2
 800d470:	64bb      	str	r3, [r7, #72]	; 0x48
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	3308      	adds	r3, #8
 800d478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d47a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d47c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d482:	e841 2300 	strex	r3, r2, [r1]
 800d486:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d1e5      	bne.n	800d45a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d492:	2b01      	cmp	r3, #1
 800d494:	d118      	bne.n	800d4c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	e853 3f00 	ldrex	r3, [r3]
 800d4a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	f023 0310 	bic.w	r3, r3, #16
 800d4aa:	647b      	str	r3, [r7, #68]	; 0x44
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4b4:	61bb      	str	r3, [r7, #24]
 800d4b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4b8:	6979      	ldr	r1, [r7, #20]
 800d4ba:	69ba      	ldr	r2, [r7, #24]
 800d4bc:	e841 2300 	strex	r3, r2, [r1]
 800d4c0:	613b      	str	r3, [r7, #16]
   return(result);
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d1e6      	bne.n	800d496 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2220      	movs	r2, #32
 800d4cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d4dc:	bf00      	nop
 800d4de:	3754      	adds	r7, #84	; 0x54
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr
 800d4e8:	effffffe 	.word	0xeffffffe

0800d4ec <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b09c      	sub	sp, #112	; 0x70
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	69db      	ldr	r3, [r3, #28]
 800d4fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d502:	d071      	beq.n	800d5e8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d506:	2200      	movs	r2, #0
 800d508:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d50c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d514:	e853 3f00 	ldrex	r3, [r3]
 800d518:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d51a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d51c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d520:	66bb      	str	r3, [r7, #104]	; 0x68
 800d522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	461a      	mov	r2, r3
 800d528:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d52a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d52c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d52e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d530:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d532:	e841 2300 	strex	r3, r2, [r1]
 800d536:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d1e6      	bne.n	800d50c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d53e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	3308      	adds	r3, #8
 800d544:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d548:	e853 3f00 	ldrex	r3, [r3]
 800d54c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d550:	f023 0301 	bic.w	r3, r3, #1
 800d554:	667b      	str	r3, [r7, #100]	; 0x64
 800d556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	3308      	adds	r3, #8
 800d55c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d55e:	647a      	str	r2, [r7, #68]	; 0x44
 800d560:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d562:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d564:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d566:	e841 2300 	strex	r3, r2, [r1]
 800d56a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d56c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d1e5      	bne.n	800d53e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	3308      	adds	r3, #8
 800d578:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57c:	e853 3f00 	ldrex	r3, [r3]
 800d580:	623b      	str	r3, [r7, #32]
   return(result);
 800d582:	6a3b      	ldr	r3, [r7, #32]
 800d584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d588:	663b      	str	r3, [r7, #96]	; 0x60
 800d58a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	3308      	adds	r3, #8
 800d590:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d592:	633a      	str	r2, [r7, #48]	; 0x30
 800d594:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d596:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d59a:	e841 2300 	strex	r3, r2, [r1]
 800d59e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d1e5      	bne.n	800d572 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d5a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5a8:	2220      	movs	r2, #32
 800d5aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d118      	bne.n	800d5e8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	e853 3f00 	ldrex	r3, [r3]
 800d5c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f023 0310 	bic.w	r3, r3, #16
 800d5ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5d4:	61fb      	str	r3, [r7, #28]
 800d5d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5d8:	69b9      	ldr	r1, [r7, #24]
 800d5da:	69fa      	ldr	r2, [r7, #28]
 800d5dc:	e841 2300 	strex	r3, r2, [r1]
 800d5e0:	617b      	str	r3, [r7, #20]
   return(result);
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d1e6      	bne.n	800d5b6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d107      	bne.n	800d600 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d5f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d5fa:	f7fe ff05 	bl	800c408 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d5fe:	e002      	b.n	800d606 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800d600:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d602:	f7fe fee3 	bl	800c3cc <HAL_UART_RxCpltCallback>
}
 800d606:	bf00      	nop
 800d608:	3770      	adds	r7, #112	; 0x70
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}

0800d60e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d60e:	b580      	push	{r7, lr}
 800d610:	b084      	sub	sp, #16
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d61a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d620:	2b01      	cmp	r3, #1
 800d622:	d109      	bne.n	800d638 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d62a:	085b      	lsrs	r3, r3, #1
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	4619      	mov	r1, r3
 800d630:	68f8      	ldr	r0, [r7, #12]
 800d632:	f7fe fee9 	bl	800c408 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d636:	e002      	b.n	800d63e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	f7fe fed1 	bl	800c3e0 <HAL_UART_RxHalfCpltCallback>
}
 800d63e:	bf00      	nop
 800d640:	3710      	adds	r7, #16
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}

0800d646 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d646:	b580      	push	{r7, lr}
 800d648:	b086      	sub	sp, #24
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d652:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d65a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d662:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d66e:	2b80      	cmp	r3, #128	; 0x80
 800d670:	d109      	bne.n	800d686 <UART_DMAError+0x40>
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	2b21      	cmp	r3, #33	; 0x21
 800d676:	d106      	bne.n	800d686 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	2200      	movs	r2, #0
 800d67c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d680:	6978      	ldr	r0, [r7, #20]
 800d682:	f7ff fe8b 	bl	800d39c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	689b      	ldr	r3, [r3, #8]
 800d68c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d690:	2b40      	cmp	r3, #64	; 0x40
 800d692:	d109      	bne.n	800d6a8 <UART_DMAError+0x62>
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2b22      	cmp	r3, #34	; 0x22
 800d698:	d106      	bne.n	800d6a8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	2200      	movs	r2, #0
 800d69e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d6a2:	6978      	ldr	r0, [r7, #20]
 800d6a4:	f7ff febc 	bl	800d420 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6ae:	f043 0210 	orr.w	r2, r3, #16
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d6b8:	6978      	ldr	r0, [r7, #20]
 800d6ba:	f7fe fe9b 	bl	800c3f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6be:	bf00      	nop
 800d6c0:	3718      	adds	r7, #24
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}

0800d6c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d6c6:	b480      	push	{r7}
 800d6c8:	b085      	sub	sp, #20
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d101      	bne.n	800d6dc <HAL_UARTEx_DisableFifoMode+0x16>
 800d6d8:	2302      	movs	r3, #2
 800d6da:	e027      	b.n	800d72c <HAL_UARTEx_DisableFifoMode+0x66>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2201      	movs	r2, #1
 800d6e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2224      	movs	r2, #36	; 0x24
 800d6e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	f022 0201 	bic.w	r2, r2, #1
 800d702:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d70a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2200      	movs	r2, #0
 800d710:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	68fa      	ldr	r2, [r7, #12]
 800d718:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2220      	movs	r2, #32
 800d71e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2200      	movs	r2, #0
 800d726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d72a:	2300      	movs	r3, #0
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3714      	adds	r7, #20
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr

0800d738 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d101      	bne.n	800d750 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d74c:	2302      	movs	r3, #2
 800d74e:	e02d      	b.n	800d7ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2201      	movs	r2, #1
 800d754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2224      	movs	r2, #36	; 0x24
 800d75c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	681a      	ldr	r2, [r3, #0]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f022 0201 	bic.w	r2, r2, #1
 800d776:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	683a      	ldr	r2, [r7, #0]
 800d788:	430a      	orrs	r2, r1
 800d78a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f000 f84f 	bl	800d830 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	68fa      	ldr	r2, [r7, #12]
 800d798:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2220      	movs	r2, #32
 800d79e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3710      	adds	r7, #16
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d101      	bne.n	800d7cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d7c8:	2302      	movs	r3, #2
 800d7ca:	e02d      	b.n	800d828 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2224      	movs	r2, #36	; 0x24
 800d7d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f022 0201 	bic.w	r2, r2, #1
 800d7f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	689b      	ldr	r3, [r3, #8]
 800d7fa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	683a      	ldr	r2, [r7, #0]
 800d804:	430a      	orrs	r2, r1
 800d806:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f000 f811 	bl	800d830 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	68fa      	ldr	r2, [r7, #12]
 800d814:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2220      	movs	r2, #32
 800d81a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2200      	movs	r2, #0
 800d822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d826:	2300      	movs	r3, #0
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3710      	adds	r7, #16
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d830:	b480      	push	{r7}
 800d832:	b085      	sub	sp, #20
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d108      	bne.n	800d852 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2201      	movs	r2, #1
 800d844:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2201      	movs	r2, #1
 800d84c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d850:	e031      	b.n	800d8b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d852:	2310      	movs	r3, #16
 800d854:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d856:	2310      	movs	r3, #16
 800d858:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	689b      	ldr	r3, [r3, #8]
 800d860:	0e5b      	lsrs	r3, r3, #25
 800d862:	b2db      	uxtb	r3, r3
 800d864:	f003 0307 	and.w	r3, r3, #7
 800d868:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	689b      	ldr	r3, [r3, #8]
 800d870:	0f5b      	lsrs	r3, r3, #29
 800d872:	b2db      	uxtb	r3, r3
 800d874:	f003 0307 	and.w	r3, r3, #7
 800d878:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d87a:	7bbb      	ldrb	r3, [r7, #14]
 800d87c:	7b3a      	ldrb	r2, [r7, #12]
 800d87e:	4911      	ldr	r1, [pc, #68]	; (800d8c4 <UARTEx_SetNbDataToProcess+0x94>)
 800d880:	5c8a      	ldrb	r2, [r1, r2]
 800d882:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d886:	7b3a      	ldrb	r2, [r7, #12]
 800d888:	490f      	ldr	r1, [pc, #60]	; (800d8c8 <UARTEx_SetNbDataToProcess+0x98>)
 800d88a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d88c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d890:	b29a      	uxth	r2, r3
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d898:	7bfb      	ldrb	r3, [r7, #15]
 800d89a:	7b7a      	ldrb	r2, [r7, #13]
 800d89c:	4909      	ldr	r1, [pc, #36]	; (800d8c4 <UARTEx_SetNbDataToProcess+0x94>)
 800d89e:	5c8a      	ldrb	r2, [r1, r2]
 800d8a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d8a4:	7b7a      	ldrb	r2, [r7, #13]
 800d8a6:	4908      	ldr	r1, [pc, #32]	; (800d8c8 <UARTEx_SetNbDataToProcess+0x98>)
 800d8a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d8aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800d8ae:	b29a      	uxth	r2, r3
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d8b6:	bf00      	nop
 800d8b8:	3714      	adds	r7, #20
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr
 800d8c2:	bf00      	nop
 800d8c4:	0800f584 	.word	0x0800f584
 800d8c8:	0800f58c 	.word	0x0800f58c

0800d8cc <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b085      	sub	sp, #20
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	691b      	ldr	r3, [r3, #16]
 800d8da:	3303      	adds	r3, #3
 800d8dc:	f023 0303 	bic.w	r3, r3, #3
 800d8e0:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 800d8e2:	4b16      	ldr	r3, [pc, #88]	; (800d93c <network_configure_activations+0x70>)
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800d8e8:	4b14      	ldr	r3, [pc, #80]	; (800d93c <network_configure_activations+0x70>)
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	60da      	str	r2, [r3, #12]
    dense_110_output_array.data = AI_PTR(activations + 0);
 800d8ee:	4a14      	ldr	r2, [pc, #80]	; (800d940 <network_configure_activations+0x74>)
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	6093      	str	r3, [r2, #8]
    dense_110_output_array.data_start = AI_PTR(activations + 0);
 800d8f4:	4a12      	ldr	r2, [pc, #72]	; (800d940 <network_configure_activations+0x74>)
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	60d3      	str	r3, [r2, #12]
    dense_110_nl_output_array.data = AI_PTR(activations + 0);
 800d8fa:	4a12      	ldr	r2, [pc, #72]	; (800d944 <network_configure_activations+0x78>)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	6093      	str	r3, [r2, #8]
    dense_110_nl_output_array.data_start = AI_PTR(activations + 0);
 800d900:	4a10      	ldr	r2, [pc, #64]	; (800d944 <network_configure_activations+0x78>)
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	60d3      	str	r3, [r2, #12]
    dense_111_output_array.data = AI_PTR(activations + 20);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	3314      	adds	r3, #20
 800d90a:	4a0f      	ldr	r2, [pc, #60]	; (800d948 <network_configure_activations+0x7c>)
 800d90c:	6093      	str	r3, [r2, #8]
    dense_111_output_array.data_start = AI_PTR(activations + 20);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	3314      	adds	r3, #20
 800d912:	4a0d      	ldr	r2, [pc, #52]	; (800d948 <network_configure_activations+0x7c>)
 800d914:	60d3      	str	r3, [r2, #12]
    dense_111_nl_output_array.data = AI_PTR(activations + 0);
 800d916:	4a0d      	ldr	r2, [pc, #52]	; (800d94c <network_configure_activations+0x80>)
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	6093      	str	r3, [r2, #8]
    dense_111_nl_output_array.data_start = AI_PTR(activations + 0);
 800d91c:	4a0b      	ldr	r2, [pc, #44]	; (800d94c <network_configure_activations+0x80>)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	60d3      	str	r3, [r2, #12]
    dense_112_output_array.data = AI_PTR(NULL);
 800d922:	4b0b      	ldr	r3, [pc, #44]	; (800d950 <network_configure_activations+0x84>)
 800d924:	2200      	movs	r2, #0
 800d926:	609a      	str	r2, [r3, #8]
    dense_112_output_array.data_start = AI_PTR(NULL);
 800d928:	4b09      	ldr	r3, [pc, #36]	; (800d950 <network_configure_activations+0x84>)
 800d92a:	2200      	movs	r2, #0
 800d92c:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800d92e:	2301      	movs	r3, #1
}
 800d930:	4618      	mov	r0, r3
 800d932:	3714      	adds	r7, #20
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr
 800d93c:	200000cc 	.word	0x200000cc
 800d940:	200000dc 	.word	0x200000dc
 800d944:	200000ec 	.word	0x200000ec
 800d948:	200000fc 	.word	0x200000fc
 800d94c:	2000010c 	.word	0x2000010c
 800d950:	2000011c 	.word	0x2000011c

0800d954 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800d954:	b480      	push	{r7}
 800d956:	b085      	sub	sp, #20
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	691b      	ldr	r3, [r3, #16]
 800d962:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_110_weights_array.format |= AI_FMT_FLAG_CONST;
 800d964:	4b21      	ldr	r3, [pc, #132]	; (800d9ec <network_configure_weights+0x98>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d96c:	4a1f      	ldr	r2, [pc, #124]	; (800d9ec <network_configure_weights+0x98>)
 800d96e:	6013      	str	r3, [r2, #0]
    dense_110_weights_array.data = AI_PTR(weights + 0);
 800d970:	4a1e      	ldr	r2, [pc, #120]	; (800d9ec <network_configure_weights+0x98>)
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	6093      	str	r3, [r2, #8]
    dense_110_weights_array.data_start = AI_PTR(weights + 0);
 800d976:	4a1d      	ldr	r2, [pc, #116]	; (800d9ec <network_configure_weights+0x98>)
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	60d3      	str	r3, [r2, #12]
    dense_111_weights_array.format |= AI_FMT_FLAG_CONST;
 800d97c:	4b1c      	ldr	r3, [pc, #112]	; (800d9f0 <network_configure_weights+0x9c>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d984:	4a1a      	ldr	r2, [pc, #104]	; (800d9f0 <network_configure_weights+0x9c>)
 800d986:	6013      	str	r3, [r2, #0]
    dense_111_weights_array.data = AI_PTR(weights + 1600);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800d98e:	4a18      	ldr	r2, [pc, #96]	; (800d9f0 <network_configure_weights+0x9c>)
 800d990:	6093      	str	r3, [r2, #8]
    dense_111_weights_array.data_start = AI_PTR(weights + 1600);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800d998:	4a15      	ldr	r2, [pc, #84]	; (800d9f0 <network_configure_weights+0x9c>)
 800d99a:	60d3      	str	r3, [r2, #12]
    dense_112_weights_array.format |= AI_FMT_FLAG_CONST;
 800d99c:	4b15      	ldr	r3, [pc, #84]	; (800d9f4 <network_configure_weights+0xa0>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d9a4:	4a13      	ldr	r2, [pc, #76]	; (800d9f4 <network_configure_weights+0xa0>)
 800d9a6:	6013      	str	r3, [r2, #0]
    dense_112_weights_array.data = AI_PTR(weights + 1700);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 800d9ae:	4a11      	ldr	r2, [pc, #68]	; (800d9f4 <network_configure_weights+0xa0>)
 800d9b0:	6093      	str	r3, [r2, #8]
    dense_112_weights_array.data_start = AI_PTR(weights + 1700);
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 800d9b8:	4a0e      	ldr	r2, [pc, #56]	; (800d9f4 <network_configure_weights+0xa0>)
 800d9ba:	60d3      	str	r3, [r2, #12]
    dense_112_bias_array.format |= AI_FMT_FLAG_CONST;
 800d9bc:	4b0e      	ldr	r3, [pc, #56]	; (800d9f8 <network_configure_weights+0xa4>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d9c4:	4a0c      	ldr	r2, [pc, #48]	; (800d9f8 <network_configure_weights+0xa4>)
 800d9c6:	6013      	str	r3, [r2, #0]
    dense_112_bias_array.data = AI_PTR(weights + 1720);
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 800d9ce:	4a0a      	ldr	r2, [pc, #40]	; (800d9f8 <network_configure_weights+0xa4>)
 800d9d0:	6093      	str	r3, [r2, #8]
    dense_112_bias_array.data_start = AI_PTR(weights + 1720);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 800d9d8:	4a07      	ldr	r2, [pc, #28]	; (800d9f8 <network_configure_weights+0xa4>)
 800d9da:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800d9dc:	2301      	movs	r3, #1
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3714      	adds	r7, #20
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr
 800d9ea:	bf00      	nop
 800d9ec:	2000012c 	.word	0x2000012c
 800d9f0:	2000013c 	.word	0x2000013c
 800d9f4:	2000014c 	.word	0x2000014c
 800d9f8:	2000015c 	.word	0x2000015c

0800d9fc <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af02      	add	r7, sp, #8
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800da06:	2300      	movs	r3, #0
 800da08:	9301      	str	r3, [sp, #4]
 800da0a:	2304      	movs	r3, #4
 800da0c:	9300      	str	r3, [sp, #0]
 800da0e:	2301      	movs	r3, #1
 800da10:	4a04      	ldr	r2, [pc, #16]	; (800da24 <ai_network_create+0x28>)
 800da12:	6839      	ldr	r1, [r7, #0]
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f000 f861 	bl	800dadc <ai_platform_network_create>
 800da1a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3708      	adds	r7, #8
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	20000068 	.word	0x20000068

0800da28 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800da32:	6839      	ldr	r1, [r7, #0]
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 f917 	bl	800dc68 <ai_platform_network_init>
 800da3a:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d101      	bne.n	800da46 <ai_network_init+0x1e>
 800da42:	2300      	movs	r3, #0
 800da44:	e02b      	b.n	800da9e <ai_network_init+0x76>

  ai_bool ok = true;
 800da46:	2301      	movs	r3, #1
 800da48:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	4619      	mov	r1, r3
 800da4e:	68f8      	ldr	r0, [r7, #12]
 800da50:	f7ff ff80 	bl	800d954 <network_configure_weights>
 800da54:	4603      	mov	r3, r0
 800da56:	461a      	mov	r2, r3
 800da58:	7afb      	ldrb	r3, [r7, #11]
 800da5a:	4013      	ands	r3, r2
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	bf14      	ite	ne
 800da60:	2301      	movne	r3, #1
 800da62:	2300      	moveq	r3, #0
 800da64:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	3318      	adds	r3, #24
 800da6a:	4619      	mov	r1, r3
 800da6c:	68f8      	ldr	r0, [r7, #12]
 800da6e:	f7ff ff2d 	bl	800d8cc <network_configure_activations>
 800da72:	4603      	mov	r3, r0
 800da74:	461a      	mov	r2, r3
 800da76:	7afb      	ldrb	r3, [r7, #11]
 800da78:	4013      	ands	r3, r2
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	bf14      	ite	ne
 800da7e:	2301      	movne	r3, #1
 800da80:	2300      	moveq	r3, #0
 800da82:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f000 f9c9 	bl	800de1c <ai_platform_network_post_init>
 800da8a:	4603      	mov	r3, r0
 800da8c:	461a      	mov	r2, r3
 800da8e:	7afb      	ldrb	r3, [r7, #11]
 800da90:	4013      	ands	r3, r2
 800da92:	2b00      	cmp	r3, #0
 800da94:	bf14      	ite	ne
 800da96:	2301      	movne	r3, #1
 800da98:	2300      	moveq	r3, #0
 800da9a:	72fb      	strb	r3, [r7, #11]

  return ok;
 800da9c:	7afb      	ldrb	r3, [r7, #11]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b084      	sub	sp, #16
 800daaa:	af00      	add	r7, sp, #0
 800daac:	60f8      	str	r0, [r7, #12]
 800daae:	60b9      	str	r1, [r7, #8]
 800dab0:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	68b9      	ldr	r1, [r7, #8]
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f000 fa5e 	bl	800df78 <ai_platform_network_process>
 800dabc:	4603      	mov	r3, r0
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3710      	adds	r7, #16
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
	...

0800dac8 <ai_network_data_weights_get>:
*/

#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 800dac8:	b480      	push	{r7}
 800daca:	af00      	add	r7, sp, #0
    0x3f, 0x69, 0xa1, 0x2a, 0x3f, 0x94, 0xda, 0x18, 0xbf,
    0xbc, 0xa8, 0x32, 0x3f, 0xd8, 0xa3, 0x99, 0xbe, 0x9e,
    0x89, 0x9e, 0xbf, 0x4f, 0xad, 0x03, 0xbf, 0xa9, 0x5a,
    0x59, 0xbf, 0xa7, 0x1e, 0x1d, 0xbf, 0xf2, 0x3c, 0xb9,
    0xbe, 0x13, 0xca, 0x5c, 0x3f, 0x74, 0x1b, 0x9f, 0x3c  };
  return AI_HANDLE_PTR(s_network_weights);
 800dacc:	4b02      	ldr	r3, [pc, #8]	; (800dad8 <ai_network_data_weights_get+0x10>)
}
 800dace:	4618      	mov	r0, r3
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr
 800dad8:	0800f5c0 	.word	0x0800f5c0

0800dadc <ai_platform_network_create>:
 800dadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dae0:	4d56      	ldr	r5, [pc, #344]	; (800dc3c <ai_platform_network_create+0x160>)
 800dae2:	b082      	sub	sp, #8
 800dae4:	4e56      	ldr	r6, [pc, #344]	; (800dc40 <ai_platform_network_create+0x164>)
 800dae6:	6829      	ldr	r1, [r5, #0]
 800dae8:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800daec:	f021 0101 	bic.w	r1, r1, #1
 800daf0:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 800daf4:	6029      	str	r1, [r5, #0]
 800daf6:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 800dafa:	6831      	ldr	r1, [r6, #0]
 800dafc:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800db00:	194d      	adds	r5, r1, r5
 800db02:	2d01      	cmp	r5, #1
 800db04:	d939      	bls.n	800db7a <ai_platform_network_create+0x9e>
 800db06:	f240 4549 	movw	r5, #1097	; 0x449
 800db0a:	42a9      	cmp	r1, r5
 800db0c:	d035      	beq.n	800db7a <ai_platform_network_create+0x9e>
 800db0e:	494d      	ldr	r1, [pc, #308]	; (800dc44 <ai_platform_network_create+0x168>)
 800db10:	6809      	ldr	r1, [r1, #0]
 800db12:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800db16:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800db1a:	d01f      	beq.n	800db5c <ai_platform_network_create+0x80>
 800db1c:	2800      	cmp	r0, #0
 800db1e:	d03b      	beq.n	800db98 <ai_platform_network_create+0xbc>
 800db20:	4698      	mov	r8, r3
 800db22:	4606      	mov	r6, r0
 800db24:	4b48      	ldr	r3, [pc, #288]	; (800dc48 <ai_platform_network_create+0x16c>)
 800db26:	4615      	mov	r5, r2
 800db28:	6013      	str	r3, [r2, #0]
 800db2a:	6032      	str	r2, [r6, #0]
 800db2c:	f000 fcd0 	bl	800e4d0 <core_init>
 800db30:	2800      	cmp	r0, #0
 800db32:	d136      	bne.n	800dba2 <ai_platform_network_create+0xc6>
 800db34:	ea4f 6808 	mov.w	r8, r8, lsl #24
 800db38:	2230      	movs	r2, #48	; 0x30
 800db3a:	0424      	lsls	r4, r4, #16
 800db3c:	2300      	movs	r3, #0
 800db3e:	2110      	movs	r1, #16
 800db40:	6033      	str	r3, [r6, #0]
 800db42:	2000      	movs	r0, #0
 800db44:	ea44 2307 	orr.w	r3, r4, r7, lsl #8
 800db48:	f362 0007 	bfi	r0, r2, #0, #8
 800db4c:	ea43 0308 	orr.w	r3, r3, r8
 800db50:	f361 201f 	bfi	r0, r1, #8, #24
 800db54:	662b      	str	r3, [r5, #96]	; 0x60
 800db56:	b002      	add	sp, #8
 800db58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db5c:	493b      	ldr	r1, [pc, #236]	; (800dc4c <ai_platform_network_create+0x170>)
 800db5e:	2501      	movs	r5, #1
 800db60:	460e      	mov	r6, r1
 800db62:	600d      	str	r5, [r1, #0]
 800db64:	6831      	ldr	r1, [r6, #0]
 800db66:	2900      	cmp	r1, #0
 800db68:	d1fc      	bne.n	800db64 <ai_platform_network_create+0x88>
 800db6a:	4939      	ldr	r1, [pc, #228]	; (800dc50 <ai_platform_network_create+0x174>)
 800db6c:	4e39      	ldr	r6, [pc, #228]	; (800dc54 <ai_platform_network_create+0x178>)
 800db6e:	4d3a      	ldr	r5, [pc, #232]	; (800dc58 <ai_platform_network_create+0x17c>)
 800db70:	600e      	str	r6, [r1, #0]
 800db72:	6809      	ldr	r1, [r1, #0]
 800db74:	42a9      	cmp	r1, r5
 800db76:	d0d1      	beq.n	800db1c <ai_platform_network_create+0x40>
 800db78:	e7fe      	b.n	800db78 <ai_platform_network_create+0x9c>
 800db7a:	4938      	ldr	r1, [pc, #224]	; (800dc5c <ai_platform_network_create+0x180>)
 800db7c:	2501      	movs	r5, #1
 800db7e:	460e      	mov	r6, r1
 800db80:	600d      	str	r5, [r1, #0]
 800db82:	6831      	ldr	r1, [r6, #0]
 800db84:	2900      	cmp	r1, #0
 800db86:	d1fc      	bne.n	800db82 <ai_platform_network_create+0xa6>
 800db88:	4935      	ldr	r1, [pc, #212]	; (800dc60 <ai_platform_network_create+0x184>)
 800db8a:	4e32      	ldr	r6, [pc, #200]	; (800dc54 <ai_platform_network_create+0x178>)
 800db8c:	4d32      	ldr	r5, [pc, #200]	; (800dc58 <ai_platform_network_create+0x17c>)
 800db8e:	600e      	str	r6, [r1, #0]
 800db90:	6809      	ldr	r1, [r1, #0]
 800db92:	42a9      	cmp	r1, r5
 800db94:	d0c2      	beq.n	800db1c <ai_platform_network_create+0x40>
 800db96:	e7fe      	b.n	800db96 <ai_platform_network_create+0xba>
 800db98:	f241 0010 	movw	r0, #4112	; 0x1010
 800db9c:	b002      	add	sp, #8
 800db9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dba2:	4a26      	ldr	r2, [pc, #152]	; (800dc3c <ai_platform_network_create+0x160>)
 800dba4:	4926      	ldr	r1, [pc, #152]	; (800dc40 <ai_platform_network_create+0x164>)
 800dba6:	6813      	ldr	r3, [r2, #0]
 800dba8:	f023 0301 	bic.w	r3, r3, #1
 800dbac:	6013      	str	r3, [r2, #0]
 800dbae:	f46f 638a 	mvn.w	r3, #1104	; 0x450
 800dbb2:	680a      	ldr	r2, [r1, #0]
 800dbb4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800dbb8:	18d3      	adds	r3, r2, r3
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d914      	bls.n	800dbe8 <ai_platform_network_create+0x10c>
 800dbbe:	f240 4349 	movw	r3, #1097	; 0x449
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d010      	beq.n	800dbe8 <ai_platform_network_create+0x10c>
 800dbc6:	4b1f      	ldr	r3, [pc, #124]	; (800dc44 <ai_platform_network_create+0x168>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dbce:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800dbd2:	d022      	beq.n	800dc1a <ai_platform_network_create+0x13e>
 800dbd4:	ea4f 6808 	mov.w	r8, r8, lsl #24
 800dbd8:	0424      	lsls	r4, r4, #16
 800dbda:	ea48 0304 	orr.w	r3, r8, r4
 800dbde:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800dbe2:	d010      	beq.n	800dc06 <ai_platform_network_create+0x12a>
 800dbe4:	2201      	movs	r2, #1
 800dbe6:	e7a9      	b.n	800db3c <ai_platform_network_create+0x60>
 800dbe8:	4b1c      	ldr	r3, [pc, #112]	; (800dc5c <ai_platform_network_create+0x180>)
 800dbea:	2201      	movs	r2, #1
 800dbec:	4619      	mov	r1, r3
 800dbee:	601a      	str	r2, [r3, #0]
 800dbf0:	680b      	ldr	r3, [r1, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d1fc      	bne.n	800dbf0 <ai_platform_network_create+0x114>
 800dbf6:	4b1a      	ldr	r3, [pc, #104]	; (800dc60 <ai_platform_network_create+0x184>)
 800dbf8:	4916      	ldr	r1, [pc, #88]	; (800dc54 <ai_platform_network_create+0x178>)
 800dbfa:	4a17      	ldr	r2, [pc, #92]	; (800dc58 <ai_platform_network_create+0x17c>)
 800dbfc:	6019      	str	r1, [r3, #0]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d0e7      	beq.n	800dbd4 <ai_platform_network_create+0xf8>
 800dc04:	e7fe      	b.n	800dc04 <ai_platform_network_create+0x128>
 800dc06:	4b17      	ldr	r3, [pc, #92]	; (800dc64 <ai_platform_network_create+0x188>)
 800dc08:	a802      	add	r0, sp, #8
 800dc0a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800dc0e:	f001 fa85 	bl	800f11c <ai_check_custom_types>
 800dc12:	b188      	cbz	r0, 800dc38 <ai_platform_network_create+0x15c>
 800dc14:	2100      	movs	r1, #0
 800dc16:	460a      	mov	r2, r1
 800dc18:	e793      	b.n	800db42 <ai_platform_network_create+0x66>
 800dc1a:	4b0c      	ldr	r3, [pc, #48]	; (800dc4c <ai_platform_network_create+0x170>)
 800dc1c:	2201      	movs	r2, #1
 800dc1e:	4619      	mov	r1, r3
 800dc20:	601a      	str	r2, [r3, #0]
 800dc22:	680b      	ldr	r3, [r1, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d1fc      	bne.n	800dc22 <ai_platform_network_create+0x146>
 800dc28:	4b09      	ldr	r3, [pc, #36]	; (800dc50 <ai_platform_network_create+0x174>)
 800dc2a:	490a      	ldr	r1, [pc, #40]	; (800dc54 <ai_platform_network_create+0x178>)
 800dc2c:	4a0a      	ldr	r2, [pc, #40]	; (800dc58 <ai_platform_network_create+0x17c>)
 800dc2e:	6019      	str	r1, [r3, #0]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d0ce      	beq.n	800dbd4 <ai_platform_network_create+0xf8>
 800dc36:	e7fe      	b.n	800dc36 <ai_platform_network_create+0x15a>
 800dc38:	2202      	movs	r2, #2
 800dc3a:	e77f      	b.n	800db3c <ai_platform_network_create+0x60>
 800dc3c:	e0002000 	.word	0xe0002000
 800dc40:	e0042000 	.word	0xe0042000
 800dc44:	5c001000 	.word	0x5c001000
 800dc48:	a1c00100 	.word	0xa1c00100
 800dc4c:	58024c08 	.word	0x58024c08
 800dc50:	58024c00 	.word	0x58024c00
 800dc54:	f407a5c2 	.word	0xf407a5c2
 800dc58:	b5e8b5cd 	.word	0xb5e8b5cd
 800dc5c:	40023008 	.word	0x40023008
 800dc60:	40023000 	.word	0x40023000
 800dc64:	84048403 	.word	0x84048403

0800dc68 <ai_platform_network_init>:
 800dc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc6a:	2800      	cmp	r0, #0
 800dc6c:	d061      	beq.n	800dd32 <ai_platform_network_init+0xca>
 800dc6e:	4b61      	ldr	r3, [pc, #388]	; (800ddf4 <ai_platform_network_init+0x18c>)
 800dc70:	6802      	ldr	r2, [r0, #0]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d15d      	bne.n	800dd32 <ai_platform_network_init+0xca>
 800dc76:	4a60      	ldr	r2, [pc, #384]	; (800ddf8 <ai_platform_network_init+0x190>)
 800dc78:	4c60      	ldr	r4, [pc, #384]	; (800ddfc <ai_platform_network_init+0x194>)
 800dc7a:	6813      	ldr	r3, [r2, #0]
 800dc7c:	f023 0301 	bic.w	r3, r3, #1
 800dc80:	6013      	str	r3, [r2, #0]
 800dc82:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800dc86:	6823      	ldr	r3, [r4, #0]
 800dc88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc8c:	189a      	adds	r2, r3, r2
 800dc8e:	2a01      	cmp	r2, #1
 800dc90:	d92f      	bls.n	800dcf2 <ai_platform_network_init+0x8a>
 800dc92:	f240 4249 	movw	r2, #1097	; 0x449
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d02b      	beq.n	800dcf2 <ai_platform_network_init+0x8a>
 800dc9a:	4b59      	ldr	r3, [pc, #356]	; (800de00 <ai_platform_network_init+0x198>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dca2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800dca6:	d05f      	beq.n	800dd68 <ai_platform_network_init+0x100>
 800dca8:	4605      	mov	r5, r0
 800dcaa:	460c      	mov	r4, r1
 800dcac:	2900      	cmp	r1, #0
 800dcae:	f000 8099 	beq.w	800dde4 <ai_platform_network_init+0x17c>
 800dcb2:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 800dcb4:	690e      	ldr	r6, [r1, #16]
 800dcb6:	2f00      	cmp	r7, #0
 800dcb8:	f000 8083 	beq.w	800ddc2 <ai_platform_network_init+0x15a>
 800dcbc:	b346      	cbz	r6, 800dd10 <ai_platform_network_init+0xa8>
 800dcbe:	f105 0c18 	add.w	ip, r5, #24
 800dcc2:	f104 0718 	add.w	r7, r4, #24
 800dcc6:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800dcca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dccc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dcd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dcd4:	2403      	movs	r4, #3
 800dcd6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800dcda:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dcdc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dcde:	e897 0003 	ldmia.w	r7, {r0, r1}
 800dce2:	e886 0003 	stmia.w	r6, {r0, r1}
 800dce6:	60ec      	str	r4, [r5, #12]
 800dce8:	4628      	mov	r0, r5
 800dcea:	f001 fa41 	bl	800f170 <ai_layers_init_all>
 800dcee:	4628      	mov	r0, r5
 800dcf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcf2:	4b44      	ldr	r3, [pc, #272]	; (800de04 <ai_platform_network_init+0x19c>)
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	461c      	mov	r4, r3
 800dcf8:	601a      	str	r2, [r3, #0]
 800dcfa:	6823      	ldr	r3, [r4, #0]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d1fc      	bne.n	800dcfa <ai_platform_network_init+0x92>
 800dd00:	4b41      	ldr	r3, [pc, #260]	; (800de08 <ai_platform_network_init+0x1a0>)
 800dd02:	4c42      	ldr	r4, [pc, #264]	; (800de0c <ai_platform_network_init+0x1a4>)
 800dd04:	4a42      	ldr	r2, [pc, #264]	; (800de10 <ai_platform_network_init+0x1a8>)
 800dd06:	601c      	str	r4, [r3, #0]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d0cc      	beq.n	800dca8 <ai_platform_network_init+0x40>
 800dd0e:	e7fe      	b.n	800dd0e <ai_platform_network_init+0xa6>
 800dd10:	8921      	ldrh	r1, [r4, #8]
 800dd12:	88e2      	ldrh	r2, [r4, #6]
 800dd14:	68e3      	ldr	r3, [r4, #12]
 800dd16:	fb02 f201 	mul.w	r2, r2, r1
 800dd1a:	fb03 f302 	mul.w	r3, r3, r2
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d0cd      	beq.n	800dcbe <ai_platform_network_init+0x56>
 800dd22:	f105 0010 	add.w	r0, r5, #16
 800dd26:	2212      	movs	r2, #18
 800dd28:	2110      	movs	r1, #16
 800dd2a:	f000 fbd3 	bl	800e4d4 <core_set_error>
 800dd2e:	4630      	mov	r0, r6
 800dd30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd32:	4a31      	ldr	r2, [pc, #196]	; (800ddf8 <ai_platform_network_init+0x190>)
 800dd34:	4931      	ldr	r1, [pc, #196]	; (800ddfc <ai_platform_network_init+0x194>)
 800dd36:	6813      	ldr	r3, [r2, #0]
 800dd38:	f023 0301 	bic.w	r3, r3, #1
 800dd3c:	6013      	str	r3, [r2, #0]
 800dd3e:	680b      	ldr	r3, [r1, #0]
 800dd40:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800dd44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd48:	185a      	adds	r2, r3, r1
 800dd4a:	2a01      	cmp	r2, #1
 800dd4c:	d91b      	bls.n	800dd86 <ai_platform_network_init+0x11e>
 800dd4e:	f240 4249 	movw	r2, #1097	; 0x449
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d017      	beq.n	800dd86 <ai_platform_network_init+0x11e>
 800dd56:	4b2a      	ldr	r3, [pc, #168]	; (800de00 <ai_platform_network_init+0x198>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd5e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800dd62:	d01f      	beq.n	800dda4 <ai_platform_network_init+0x13c>
 800dd64:	2000      	movs	r0, #0
 800dd66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd68:	4b2a      	ldr	r3, [pc, #168]	; (800de14 <ai_platform_network_init+0x1ac>)
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	461c      	mov	r4, r3
 800dd6e:	601a      	str	r2, [r3, #0]
 800dd70:	6823      	ldr	r3, [r4, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d1fc      	bne.n	800dd70 <ai_platform_network_init+0x108>
 800dd76:	4b28      	ldr	r3, [pc, #160]	; (800de18 <ai_platform_network_init+0x1b0>)
 800dd78:	4c24      	ldr	r4, [pc, #144]	; (800de0c <ai_platform_network_init+0x1a4>)
 800dd7a:	4a25      	ldr	r2, [pc, #148]	; (800de10 <ai_platform_network_init+0x1a8>)
 800dd7c:	601c      	str	r4, [r3, #0]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d091      	beq.n	800dca8 <ai_platform_network_init+0x40>
 800dd84:	e7fe      	b.n	800dd84 <ai_platform_network_init+0x11c>
 800dd86:	4b1f      	ldr	r3, [pc, #124]	; (800de04 <ai_platform_network_init+0x19c>)
 800dd88:	2201      	movs	r2, #1
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	601a      	str	r2, [r3, #0]
 800dd8e:	680b      	ldr	r3, [r1, #0]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d1fc      	bne.n	800dd8e <ai_platform_network_init+0x126>
 800dd94:	4b1c      	ldr	r3, [pc, #112]	; (800de08 <ai_platform_network_init+0x1a0>)
 800dd96:	491d      	ldr	r1, [pc, #116]	; (800de0c <ai_platform_network_init+0x1a4>)
 800dd98:	4a1d      	ldr	r2, [pc, #116]	; (800de10 <ai_platform_network_init+0x1a8>)
 800dd9a:	6019      	str	r1, [r3, #0]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d0e0      	beq.n	800dd64 <ai_platform_network_init+0xfc>
 800dda2:	e7fe      	b.n	800dda2 <ai_platform_network_init+0x13a>
 800dda4:	4b1b      	ldr	r3, [pc, #108]	; (800de14 <ai_platform_network_init+0x1ac>)
 800dda6:	2201      	movs	r2, #1
 800dda8:	4619      	mov	r1, r3
 800ddaa:	601a      	str	r2, [r3, #0]
 800ddac:	680b      	ldr	r3, [r1, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d1fc      	bne.n	800ddac <ai_platform_network_init+0x144>
 800ddb2:	4b19      	ldr	r3, [pc, #100]	; (800de18 <ai_platform_network_init+0x1b0>)
 800ddb4:	4915      	ldr	r1, [pc, #84]	; (800de0c <ai_platform_network_init+0x1a4>)
 800ddb6:	4a16      	ldr	r2, [pc, #88]	; (800de10 <ai_platform_network_init+0x1a8>)
 800ddb8:	6019      	str	r1, [r3, #0]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d0d1      	beq.n	800dd64 <ai_platform_network_init+0xfc>
 800ddc0:	e7fe      	b.n	800ddc0 <ai_platform_network_init+0x158>
 800ddc2:	8c09      	ldrh	r1, [r1, #32]
 800ddc4:	8be2      	ldrh	r2, [r4, #30]
 800ddc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddc8:	fb02 f201 	mul.w	r2, r2, r1
 800ddcc:	fb03 f302 	mul.w	r3, r3, r2
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f43f af73 	beq.w	800dcbc <ai_platform_network_init+0x54>
 800ddd6:	2213      	movs	r2, #19
 800ddd8:	2110      	movs	r1, #16
 800ddda:	3010      	adds	r0, #16
 800dddc:	f000 fb7a 	bl	800e4d4 <core_set_error>
 800dde0:	4638      	mov	r0, r7
 800dde2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dde4:	2211      	movs	r2, #17
 800dde6:	2110      	movs	r1, #16
 800dde8:	3010      	adds	r0, #16
 800ddea:	f000 fb73 	bl	800e4d4 <core_set_error>
 800ddee:	4620      	mov	r0, r4
 800ddf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	a1c00100 	.word	0xa1c00100
 800ddf8:	e0002000 	.word	0xe0002000
 800ddfc:	e0042000 	.word	0xe0042000
 800de00:	5c001000 	.word	0x5c001000
 800de04:	40023008 	.word	0x40023008
 800de08:	40023000 	.word	0x40023000
 800de0c:	f407a5c2 	.word	0xf407a5c2
 800de10:	b5e8b5cd 	.word	0xb5e8b5cd
 800de14:	58024c08 	.word	0x58024c08
 800de18:	58024c00 	.word	0x58024c00

0800de1c <ai_platform_network_post_init>:
 800de1c:	b538      	push	{r3, r4, r5, lr}
 800de1e:	b118      	cbz	r0, 800de28 <ai_platform_network_post_init+0xc>
 800de20:	4b4b      	ldr	r3, [pc, #300]	; (800df50 <ai_platform_network_post_init+0x134>)
 800de22:	6802      	ldr	r2, [r0, #0]
 800de24:	429a      	cmp	r2, r3
 800de26:	d029      	beq.n	800de7c <ai_platform_network_post_init+0x60>
 800de28:	4a4a      	ldr	r2, [pc, #296]	; (800df54 <ai_platform_network_post_init+0x138>)
 800de2a:	494b      	ldr	r1, [pc, #300]	; (800df58 <ai_platform_network_post_init+0x13c>)
 800de2c:	6813      	ldr	r3, [r2, #0]
 800de2e:	f023 0301 	bic.w	r3, r3, #1
 800de32:	6013      	str	r3, [r2, #0]
 800de34:	680b      	ldr	r3, [r1, #0]
 800de36:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800de3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800de3e:	185a      	adds	r2, r3, r1
 800de40:	2a01      	cmp	r2, #1
 800de42:	d90c      	bls.n	800de5e <ai_platform_network_post_init+0x42>
 800de44:	f240 4249 	movw	r2, #1097	; 0x449
 800de48:	4293      	cmp	r3, r2
 800de4a:	d008      	beq.n	800de5e <ai_platform_network_post_init+0x42>
 800de4c:	4b43      	ldr	r3, [pc, #268]	; (800df5c <ai_platform_network_post_init+0x140>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800de54:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800de58:	d046      	beq.n	800dee8 <ai_platform_network_post_init+0xcc>
 800de5a:	2000      	movs	r0, #0
 800de5c:	bd38      	pop	{r3, r4, r5, pc}
 800de5e:	4b40      	ldr	r3, [pc, #256]	; (800df60 <ai_platform_network_post_init+0x144>)
 800de60:	2201      	movs	r2, #1
 800de62:	4619      	mov	r1, r3
 800de64:	601a      	str	r2, [r3, #0]
 800de66:	680b      	ldr	r3, [r1, #0]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d1fc      	bne.n	800de66 <ai_platform_network_post_init+0x4a>
 800de6c:	4b3d      	ldr	r3, [pc, #244]	; (800df64 <ai_platform_network_post_init+0x148>)
 800de6e:	493e      	ldr	r1, [pc, #248]	; (800df68 <ai_platform_network_post_init+0x14c>)
 800de70:	4a3e      	ldr	r2, [pc, #248]	; (800df6c <ai_platform_network_post_init+0x150>)
 800de72:	6019      	str	r1, [r3, #0]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4293      	cmp	r3, r2
 800de78:	d0ef      	beq.n	800de5a <ai_platform_network_post_init+0x3e>
 800de7a:	e7fe      	b.n	800de7a <ai_platform_network_post_init+0x5e>
 800de7c:	4a35      	ldr	r2, [pc, #212]	; (800df54 <ai_platform_network_post_init+0x138>)
 800de7e:	4936      	ldr	r1, [pc, #216]	; (800df58 <ai_platform_network_post_init+0x13c>)
 800de80:	6813      	ldr	r3, [r2, #0]
 800de82:	f023 0301 	bic.w	r3, r3, #1
 800de86:	6013      	str	r3, [r2, #0]
 800de88:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800de8c:	680b      	ldr	r3, [r1, #0]
 800de8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800de92:	189a      	adds	r2, r3, r2
 800de94:	2a01      	cmp	r2, #1
 800de96:	d94c      	bls.n	800df32 <ai_platform_network_post_init+0x116>
 800de98:	f240 4249 	movw	r2, #1097	; 0x449
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d048      	beq.n	800df32 <ai_platform_network_post_init+0x116>
 800dea0:	4b2e      	ldr	r3, [pc, #184]	; (800df5c <ai_platform_network_post_init+0x140>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dea8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800deac:	d032      	beq.n	800df14 <ai_platform_network_post_init+0xf8>
 800deae:	68c3      	ldr	r3, [r0, #12]
 800deb0:	4604      	mov	r4, r0
 800deb2:	f013 0502 	ands.w	r5, r3, #2
 800deb6:	d026      	beq.n	800df06 <ai_platform_network_post_init+0xea>
 800deb8:	f001 f96e 	bl	800f198 <ai_layers_post_init_all>
 800debc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800debe:	b18b      	cbz	r3, 800dee4 <ai_platform_network_post_init+0xc8>
 800dec0:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800dec2:	b90d      	cbnz	r5, 800dec8 <ai_platform_network_post_init+0xac>
 800dec4:	e00e      	b.n	800dee4 <ai_platform_network_post_init+0xc8>
 800dec6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dec8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800deca:	4629      	mov	r1, r5
 800decc:	2000      	movs	r0, #0
 800dece:	4798      	blx	r3
 800ded0:	692a      	ldr	r2, [r5, #16]
 800ded2:	1b53      	subs	r3, r2, r5
 800ded4:	4615      	mov	r5, r2
 800ded6:	bf18      	it	ne
 800ded8:	2301      	movne	r3, #1
 800deda:	2a00      	cmp	r2, #0
 800dedc:	bf08      	it	eq
 800dede:	2300      	moveq	r3, #0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d1f0      	bne.n	800dec6 <ai_platform_network_post_init+0xaa>
 800dee4:	2001      	movs	r0, #1
 800dee6:	bd38      	pop	{r3, r4, r5, pc}
 800dee8:	4b21      	ldr	r3, [pc, #132]	; (800df70 <ai_platform_network_post_init+0x154>)
 800deea:	2201      	movs	r2, #1
 800deec:	4619      	mov	r1, r3
 800deee:	601a      	str	r2, [r3, #0]
 800def0:	680b      	ldr	r3, [r1, #0]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d1fc      	bne.n	800def0 <ai_platform_network_post_init+0xd4>
 800def6:	4b1f      	ldr	r3, [pc, #124]	; (800df74 <ai_platform_network_post_init+0x158>)
 800def8:	491b      	ldr	r1, [pc, #108]	; (800df68 <ai_platform_network_post_init+0x14c>)
 800defa:	4a1c      	ldr	r2, [pc, #112]	; (800df6c <ai_platform_network_post_init+0x150>)
 800defc:	6019      	str	r1, [r3, #0]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	4293      	cmp	r3, r2
 800df02:	d0aa      	beq.n	800de5a <ai_platform_network_post_init+0x3e>
 800df04:	e7fe      	b.n	800df04 <ai_platform_network_post_init+0xe8>
 800df06:	2210      	movs	r2, #16
 800df08:	2111      	movs	r1, #17
 800df0a:	3010      	adds	r0, #16
 800df0c:	f000 fae2 	bl	800e4d4 <core_set_error>
 800df10:	4628      	mov	r0, r5
 800df12:	bd38      	pop	{r3, r4, r5, pc}
 800df14:	4b16      	ldr	r3, [pc, #88]	; (800df70 <ai_platform_network_post_init+0x154>)
 800df16:	2201      	movs	r2, #1
 800df18:	4619      	mov	r1, r3
 800df1a:	601a      	str	r2, [r3, #0]
 800df1c:	680b      	ldr	r3, [r1, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d1fc      	bne.n	800df1c <ai_platform_network_post_init+0x100>
 800df22:	4b14      	ldr	r3, [pc, #80]	; (800df74 <ai_platform_network_post_init+0x158>)
 800df24:	4910      	ldr	r1, [pc, #64]	; (800df68 <ai_platform_network_post_init+0x14c>)
 800df26:	4a11      	ldr	r2, [pc, #68]	; (800df6c <ai_platform_network_post_init+0x150>)
 800df28:	6019      	str	r1, [r3, #0]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d0be      	beq.n	800deae <ai_platform_network_post_init+0x92>
 800df30:	e7fe      	b.n	800df30 <ai_platform_network_post_init+0x114>
 800df32:	4b0b      	ldr	r3, [pc, #44]	; (800df60 <ai_platform_network_post_init+0x144>)
 800df34:	2201      	movs	r2, #1
 800df36:	4619      	mov	r1, r3
 800df38:	601a      	str	r2, [r3, #0]
 800df3a:	680b      	ldr	r3, [r1, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d1fc      	bne.n	800df3a <ai_platform_network_post_init+0x11e>
 800df40:	4b08      	ldr	r3, [pc, #32]	; (800df64 <ai_platform_network_post_init+0x148>)
 800df42:	4909      	ldr	r1, [pc, #36]	; (800df68 <ai_platform_network_post_init+0x14c>)
 800df44:	4a09      	ldr	r2, [pc, #36]	; (800df6c <ai_platform_network_post_init+0x150>)
 800df46:	6019      	str	r1, [r3, #0]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d0af      	beq.n	800deae <ai_platform_network_post_init+0x92>
 800df4e:	e7fe      	b.n	800df4e <ai_platform_network_post_init+0x132>
 800df50:	a1c00100 	.word	0xa1c00100
 800df54:	e0002000 	.word	0xe0002000
 800df58:	e0042000 	.word	0xe0042000
 800df5c:	5c001000 	.word	0x5c001000
 800df60:	40023008 	.word	0x40023008
 800df64:	40023000 	.word	0x40023000
 800df68:	f407a5c2 	.word	0xf407a5c2
 800df6c:	b5e8b5cd 	.word	0xb5e8b5cd
 800df70:	58024c08 	.word	0x58024c08
 800df74:	58024c00 	.word	0x58024c00

0800df78 <ai_platform_network_process>:
 800df78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df7c:	4617      	mov	r7, r2
 800df7e:	b083      	sub	sp, #12
 800df80:	4604      	mov	r4, r0
 800df82:	b120      	cbz	r0, 800df8e <ai_platform_network_process+0x16>
 800df84:	4b89      	ldr	r3, [pc, #548]	; (800e1ac <ai_platform_network_process+0x234>)
 800df86:	6802      	ldr	r2, [r0, #0]
 800df88:	429a      	cmp	r2, r3
 800df8a:	bf18      	it	ne
 800df8c:	2400      	movne	r4, #0
 800df8e:	4a88      	ldr	r2, [pc, #544]	; (800e1b0 <ai_platform_network_process+0x238>)
 800df90:	4888      	ldr	r0, [pc, #544]	; (800e1b4 <ai_platform_network_process+0x23c>)
 800df92:	6813      	ldr	r3, [r2, #0]
 800df94:	f023 0301 	bic.w	r3, r3, #1
 800df98:	6013      	str	r3, [r2, #0]
 800df9a:	6803      	ldr	r3, [r0, #0]
 800df9c:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 800dfa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dfa4:	181a      	adds	r2, r3, r0
 800dfa6:	2a01      	cmp	r2, #1
 800dfa8:	f240 80cc 	bls.w	800e144 <ai_platform_network_process+0x1cc>
 800dfac:	f240 4249 	movw	r2, #1097	; 0x449
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	f000 80c7 	beq.w	800e144 <ai_platform_network_process+0x1cc>
 800dfb6:	4b80      	ldr	r3, [pc, #512]	; (800e1b8 <ai_platform_network_process+0x240>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dfbe:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800dfc2:	f000 80af 	beq.w	800e124 <ai_platform_network_process+0x1ac>
 800dfc6:	2c00      	cmp	r4, #0
 800dfc8:	f000 80e1 	beq.w	800e18e <ai_platform_network_process+0x216>
 800dfcc:	68e2      	ldr	r2, [r4, #12]
 800dfce:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800dfd2:	f002 0203 	and.w	r2, r2, #3
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	f000 80c4 	beq.w	800e164 <ai_platform_network_process+0x1ec>
 800dfdc:	2000      	movs	r0, #0
 800dfde:	2a03      	cmp	r2, #3
 800dfe0:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
 800dfe4:	6160      	str	r0, [r4, #20]
 800dfe6:	f040 80cc 	bne.w	800e182 <ai_platform_network_process+0x20a>
 800dfea:	2900      	cmp	r1, #0
 800dfec:	f000 80bd 	beq.w	800e16a <ai_platform_network_process+0x1f2>
 800dff0:	faba f28a 	clz	r2, sl
 800dff4:	0952      	lsrs	r2, r2, #5
 800dff6:	2a00      	cmp	r2, #0
 800dff8:	f040 80b7 	bne.w	800e16a <ai_platform_network_process+0x1f2>
 800dffc:	f8ba 0000 	ldrh.w	r0, [sl]
 800e000:	2800      	cmp	r0, #0
 800e002:	f000 80b2 	beq.w	800e16a <ai_platform_network_process+0x1f2>
 800e006:	888d      	ldrh	r5, [r1, #4]
 800e008:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e00c:	9501      	str	r5, [sp, #4]
 800e00e:	2800      	cmp	r0, #0
 800e010:	f000 80e2 	beq.w	800e1d8 <ai_platform_network_process+0x260>
 800e014:	6806      	ldr	r6, [r0, #0]
 800e016:	2e00      	cmp	r6, #0
 800e018:	f000 80de 	beq.w	800e1d8 <ai_platform_network_process+0x260>
 800e01c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e020:	f8d3 9000 	ldr.w	r9, [r3]
 800e024:	f1b9 0f00 	cmp.w	r9, #0
 800e028:	f000 809f 	beq.w	800e16a <ai_platform_network_process+0x1f2>
 800e02c:	460d      	mov	r5, r1
 800e02e:	4690      	mov	r8, r2
 800e030:	e061      	b.n	800e0f6 <ai_platform_network_process+0x17e>
 800e032:	68f3      	ldr	r3, [r6, #12]
 800e034:	68da      	ldr	r2, [r3, #12]
 800e036:	455a      	cmp	r2, fp
 800e038:	d16b      	bne.n	800e112 <ai_platform_network_process+0x19a>
 800e03a:	689a      	ldr	r2, [r3, #8]
 800e03c:	4572      	cmp	r2, lr
 800e03e:	d168      	bne.n	800e112 <ai_platform_network_process+0x19a>
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	459c      	cmp	ip, r3
 800e044:	d165      	bne.n	800e112 <ai_platform_network_process+0x19a>
 800e046:	6800      	ldr	r0, [r0, #0]
 800e048:	f001 f954 	bl	800f2f4 <ai_array_get_byte_size>
 800e04c:	68f2      	ldr	r2, [r6, #12]
 800e04e:	6973      	ldr	r3, [r6, #20]
 800e050:	68d2      	ldr	r2, [r2, #12]
 800e052:	68db      	ldr	r3, [r3, #12]
 800e054:	fb03 f302 	mul.w	r3, r3, r2
 800e058:	4298      	cmp	r0, r3
 800e05a:	d35a      	bcc.n	800e112 <ai_platform_network_process+0x19a>
 800e05c:	69b3      	ldr	r3, [r6, #24]
 800e05e:	6818      	ldr	r0, [r3, #0]
 800e060:	f001 f8fc 	bl	800f25c <ai_array_to_buffer_fmt>
 800e064:	682b      	ldr	r3, [r5, #0]
 800e066:	4043      	eors	r3, r0
 800e068:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800e06c:	f040 8226 	bne.w	800e4bc <ai_platform_network_process+0x544>
 800e070:	692b      	ldr	r3, [r5, #16]
 800e072:	2b00      	cmp	r3, #0
 800e074:	f000 821a 	beq.w	800e4ac <ai_platform_network_process+0x534>
 800e078:	88ab      	ldrh	r3, [r5, #4]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	f000 808d 	beq.w	800e19a <ai_platform_network_process+0x222>
 800e080:	9a01      	ldr	r2, [sp, #4]
 800e082:	68f1      	ldr	r1, [r6, #12]
 800e084:	429a      	cmp	r2, r3
 800e086:	68c9      	ldr	r1, [r1, #12]
 800e088:	bf38      	it	cc
 800e08a:	461a      	movcc	r2, r3
 800e08c:	9201      	str	r2, [sp, #4]
 800e08e:	6972      	ldr	r2, [r6, #20]
 800e090:	68d3      	ldr	r3, [r2, #12]
 800e092:	fb03 f301 	mul.w	r3, r3, r1
 800e096:	f8c9 3008 	str.w	r3, [r9, #8]
 800e09a:	88aa      	ldrh	r2, [r5, #4]
 800e09c:	fb03 f302 	mul.w	r3, r3, r2
 800e0a0:	f8c9 300c 	str.w	r3, [r9, #12]
 800e0a4:	6929      	ldr	r1, [r5, #16]
 800e0a6:	f8c9 1004 	str.w	r1, [r9, #4]
 800e0aa:	692a      	ldr	r2, [r5, #16]
 800e0ac:	4413      	add	r3, r2
 800e0ae:	f8c9 3000 	str.w	r3, [r9]
 800e0b2:	69b0      	ldr	r0, [r6, #24]
 800e0b4:	6803      	ldr	r3, [r0, #0]
 800e0b6:	009a      	lsls	r2, r3, #2
 800e0b8:	d408      	bmi.n	800e0cc <ai_platform_network_process+0x154>
 800e0ba:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800e0be:	1a9b      	subs	r3, r3, r2
 800e0c0:	4419      	add	r1, r3
 800e0c2:	6081      	str	r1, [r0, #8]
 800e0c4:	69b3      	ldr	r3, [r6, #24]
 800e0c6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800e0ca:	60da      	str	r2, [r3, #12]
 800e0cc:	f108 0801 	add.w	r8, r8, #1
 800e0d0:	f8ba 3000 	ldrh.w	r3, [sl]
 800e0d4:	4598      	cmp	r8, r3
 800e0d6:	d27d      	bcs.n	800e1d4 <ai_platform_network_process+0x25c>
 800e0d8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d079      	beq.n	800e1d4 <ai_platform_network_process+0x25c>
 800e0e0:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800e0e4:	2e00      	cmp	r6, #0
 800e0e6:	d075      	beq.n	800e1d4 <ai_platform_network_process+0x25c>
 800e0e8:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e0ec:	3518      	adds	r5, #24
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 800e0f4:	d039      	beq.n	800e16a <ai_platform_network_process+0x1f2>
 800e0f6:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 800e0fa:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 800e0fe:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800e102:	fb0b f30e 	mul.w	r3, fp, lr
 800e106:	69b0      	ldr	r0, [r6, #24]
 800e108:	fb0c f303 	mul.w	r3, ip, r3
 800e10c:	6841      	ldr	r1, [r0, #4]
 800e10e:	4299      	cmp	r1, r3
 800e110:	d28f      	bcs.n	800e032 <ai_platform_network_process+0xba>
 800e112:	f104 0010 	add.w	r0, r4, #16
 800e116:	2218      	movs	r2, #24
 800e118:	2112      	movs	r1, #18
 800e11a:	f04f 0b00 	mov.w	fp, #0
 800e11e:	f000 f9d9 	bl	800e4d4 <core_set_error>
 800e122:	e02a      	b.n	800e17a <ai_platform_network_process+0x202>
 800e124:	4b25      	ldr	r3, [pc, #148]	; (800e1bc <ai_platform_network_process+0x244>)
 800e126:	2201      	movs	r2, #1
 800e128:	4618      	mov	r0, r3
 800e12a:	601a      	str	r2, [r3, #0]
 800e12c:	6803      	ldr	r3, [r0, #0]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d1fc      	bne.n	800e12c <ai_platform_network_process+0x1b4>
 800e132:	4b23      	ldr	r3, [pc, #140]	; (800e1c0 <ai_platform_network_process+0x248>)
 800e134:	4823      	ldr	r0, [pc, #140]	; (800e1c4 <ai_platform_network_process+0x24c>)
 800e136:	4a24      	ldr	r2, [pc, #144]	; (800e1c8 <ai_platform_network_process+0x250>)
 800e138:	6018      	str	r0, [r3, #0]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4293      	cmp	r3, r2
 800e13e:	f43f af42 	beq.w	800dfc6 <ai_platform_network_process+0x4e>
 800e142:	e7fe      	b.n	800e142 <ai_platform_network_process+0x1ca>
 800e144:	4b21      	ldr	r3, [pc, #132]	; (800e1cc <ai_platform_network_process+0x254>)
 800e146:	2201      	movs	r2, #1
 800e148:	4618      	mov	r0, r3
 800e14a:	601a      	str	r2, [r3, #0]
 800e14c:	6803      	ldr	r3, [r0, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d1fc      	bne.n	800e14c <ai_platform_network_process+0x1d4>
 800e152:	4b1f      	ldr	r3, [pc, #124]	; (800e1d0 <ai_platform_network_process+0x258>)
 800e154:	481b      	ldr	r0, [pc, #108]	; (800e1c4 <ai_platform_network_process+0x24c>)
 800e156:	4a1c      	ldr	r2, [pc, #112]	; (800e1c8 <ai_platform_network_process+0x250>)
 800e158:	6018      	str	r0, [r3, #0]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4293      	cmp	r3, r2
 800e15e:	f43f af32 	beq.w	800dfc6 <ai_platform_network_process+0x4e>
 800e162:	e7fe      	b.n	800e162 <ai_platform_network_process+0x1ea>
 800e164:	2a03      	cmp	r2, #3
 800e166:	6163      	str	r3, [r4, #20]
 800e168:	d10b      	bne.n	800e182 <ai_platform_network_process+0x20a>
 800e16a:	f04f 0b00 	mov.w	fp, #0
 800e16e:	f104 0010 	add.w	r0, r4, #16
 800e172:	2217      	movs	r2, #23
 800e174:	2112      	movs	r1, #18
 800e176:	f000 f9ad 	bl	800e4d4 <core_set_error>
 800e17a:	4658      	mov	r0, fp
 800e17c:	b003      	add	sp, #12
 800e17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e182:	f104 0010 	add.w	r0, r4, #16
 800e186:	2230      	movs	r2, #48	; 0x30
 800e188:	2111      	movs	r1, #17
 800e18a:	f000 f9a3 	bl	800e4d4 <core_set_error>
 800e18e:	f04f 0b00 	mov.w	fp, #0
 800e192:	4658      	mov	r0, fp
 800e194:	b003      	add	sp, #12
 800e196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e19a:	f104 0010 	add.w	r0, r4, #16
 800e19e:	2221      	movs	r2, #33	; 0x21
 800e1a0:	2112      	movs	r1, #18
 800e1a2:	469b      	mov	fp, r3
 800e1a4:	f000 f996 	bl	800e4d4 <core_set_error>
 800e1a8:	e7e7      	b.n	800e17a <ai_platform_network_process+0x202>
 800e1aa:	bf00      	nop
 800e1ac:	a1c00100 	.word	0xa1c00100
 800e1b0:	e0002000 	.word	0xe0002000
 800e1b4:	e0042000 	.word	0xe0042000
 800e1b8:	5c001000 	.word	0x5c001000
 800e1bc:	58024c08 	.word	0x58024c08
 800e1c0:	58024c00 	.word	0x58024c00
 800e1c4:	f407a5c2 	.word	0xf407a5c2
 800e1c8:	b5e8b5cd 	.word	0xb5e8b5cd
 800e1cc:	40023008 	.word	0x40023008
 800e1d0:	40023000 	.word	0x40023000
 800e1d4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800e1d8:	2f00      	cmp	r7, #0
 800e1da:	f000 80ab 	beq.w	800e334 <ai_platform_network_process+0x3bc>
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	f240 809c 	bls.w	800e31c <ai_platform_network_process+0x3a4>
 800e1e4:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
 800e1e8:	f11a 0f0c 	cmn.w	sl, #12
 800e1ec:	f000 8096 	beq.w	800e31c <ai_platform_network_process+0x3a4>
 800e1f0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	f000 8091 	beq.w	800e31c <ai_platform_network_process+0x3a4>
 800e1fa:	463d      	mov	r5, r7
 800e1fc:	f04f 0900 	mov.w	r9, #0
 800e200:	9400      	str	r4, [sp, #0]
 800e202:	4599      	cmp	r9, r3
 800e204:	f080 8093 	bcs.w	800e32e <ai_platform_network_process+0x3b6>
 800e208:	f8da 3010 	ldr.w	r3, [sl, #16]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f000 808e 	beq.w	800e32e <ai_platform_network_process+0x3b6>
 800e212:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 800e216:	2e00      	cmp	r6, #0
 800e218:	f000 8089 	beq.w	800e32e <ai_platform_network_process+0x3b6>
 800e21c:	f8da 3014 	ldr.w	r3, [sl, #20]
 800e220:	ea4f 1409 	mov.w	r4, r9, lsl #4
 800e224:	f8d3 8000 	ldr.w	r8, [r3]
 800e228:	eb18 0704 	adds.w	r7, r8, r4
 800e22c:	f000 8135 	beq.w	800e49a <ai_platform_network_process+0x522>
 800e230:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 800e234:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 800e238:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800e23c:	fb0b f30e 	mul.w	r3, fp, lr
 800e240:	69b0      	ldr	r0, [r6, #24]
 800e242:	fb0c f303 	mul.w	r3, ip, r3
 800e246:	6841      	ldr	r1, [r0, #4]
 800e248:	4299      	cmp	r1, r3
 800e24a:	d366      	bcc.n	800e31a <ai_platform_network_process+0x3a2>
 800e24c:	68f3      	ldr	r3, [r6, #12]
 800e24e:	68da      	ldr	r2, [r3, #12]
 800e250:	455a      	cmp	r2, fp
 800e252:	d162      	bne.n	800e31a <ai_platform_network_process+0x3a2>
 800e254:	689a      	ldr	r2, [r3, #8]
 800e256:	4572      	cmp	r2, lr
 800e258:	d15f      	bne.n	800e31a <ai_platform_network_process+0x3a2>
 800e25a:	685b      	ldr	r3, [r3, #4]
 800e25c:	459c      	cmp	ip, r3
 800e25e:	d15c      	bne.n	800e31a <ai_platform_network_process+0x3a2>
 800e260:	6800      	ldr	r0, [r0, #0]
 800e262:	f001 f847 	bl	800f2f4 <ai_array_get_byte_size>
 800e266:	68f2      	ldr	r2, [r6, #12]
 800e268:	6973      	ldr	r3, [r6, #20]
 800e26a:	68d2      	ldr	r2, [r2, #12]
 800e26c:	68db      	ldr	r3, [r3, #12]
 800e26e:	fb03 f302 	mul.w	r3, r3, r2
 800e272:	4298      	cmp	r0, r3
 800e274:	d351      	bcc.n	800e31a <ai_platform_network_process+0x3a2>
 800e276:	69b3      	ldr	r3, [r6, #24]
 800e278:	6818      	ldr	r0, [r3, #0]
 800e27a:	f000 ffef 	bl	800f25c <ai_array_to_buffer_fmt>
 800e27e:	682b      	ldr	r3, [r5, #0]
 800e280:	4043      	eors	r3, r0
 800e282:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800e286:	d13e      	bne.n	800e306 <ai_platform_network_process+0x38e>
 800e288:	692b      	ldr	r3, [r5, #16]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d032      	beq.n	800e2f4 <ai_platform_network_process+0x37c>
 800e28e:	88ab      	ldrh	r3, [r5, #4]
 800e290:	b33b      	cbz	r3, 800e2e2 <ai_platform_network_process+0x36a>
 800e292:	9a01      	ldr	r2, [sp, #4]
 800e294:	68f1      	ldr	r1, [r6, #12]
 800e296:	429a      	cmp	r2, r3
 800e298:	68c9      	ldr	r1, [r1, #12]
 800e29a:	bf38      	it	cc
 800e29c:	461a      	movcc	r2, r3
 800e29e:	9201      	str	r2, [sp, #4]
 800e2a0:	6972      	ldr	r2, [r6, #20]
 800e2a2:	68d3      	ldr	r3, [r2, #12]
 800e2a4:	fb03 f301 	mul.w	r3, r3, r1
 800e2a8:	60bb      	str	r3, [r7, #8]
 800e2aa:	88aa      	ldrh	r2, [r5, #4]
 800e2ac:	fb03 f302 	mul.w	r3, r3, r2
 800e2b0:	60fb      	str	r3, [r7, #12]
 800e2b2:	6929      	ldr	r1, [r5, #16]
 800e2b4:	6079      	str	r1, [r7, #4]
 800e2b6:	692a      	ldr	r2, [r5, #16]
 800e2b8:	4413      	add	r3, r2
 800e2ba:	f848 3004 	str.w	r3, [r8, r4]
 800e2be:	69b0      	ldr	r0, [r6, #24]
 800e2c0:	6803      	ldr	r3, [r0, #0]
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	d407      	bmi.n	800e2d6 <ai_platform_network_process+0x35e>
 800e2c6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800e2ca:	1a9b      	subs	r3, r3, r2
 800e2cc:	4419      	add	r1, r3
 800e2ce:	6081      	str	r1, [r0, #8]
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	69b3      	ldr	r3, [r6, #24]
 800e2d4:	60da      	str	r2, [r3, #12]
 800e2d6:	f109 0901 	add.w	r9, r9, #1
 800e2da:	3518      	adds	r5, #24
 800e2dc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800e2e0:	e78f      	b.n	800e202 <ai_platform_network_process+0x28a>
 800e2e2:	9c00      	ldr	r4, [sp, #0]
 800e2e4:	2221      	movs	r2, #33	; 0x21
 800e2e6:	2113      	movs	r1, #19
 800e2e8:	469b      	mov	fp, r3
 800e2ea:	f104 0010 	add.w	r0, r4, #16
 800e2ee:	f000 f8f1 	bl	800e4d4 <core_set_error>
 800e2f2:	e742      	b.n	800e17a <ai_platform_network_process+0x202>
 800e2f4:	9c00      	ldr	r4, [sp, #0]
 800e2f6:	2217      	movs	r2, #23
 800e2f8:	2113      	movs	r1, #19
 800e2fa:	469b      	mov	fp, r3
 800e2fc:	f104 0010 	add.w	r0, r4, #16
 800e300:	f000 f8e8 	bl	800e4d4 <core_set_error>
 800e304:	e739      	b.n	800e17a <ai_platform_network_process+0x202>
 800e306:	9c00      	ldr	r4, [sp, #0]
 800e308:	2219      	movs	r2, #25
 800e30a:	2113      	movs	r1, #19
 800e30c:	f04f 0b00 	mov.w	fp, #0
 800e310:	f104 0010 	add.w	r0, r4, #16
 800e314:	f000 f8de 	bl	800e4d4 <core_set_error>
 800e318:	e72f      	b.n	800e17a <ai_platform_network_process+0x202>
 800e31a:	9c00      	ldr	r4, [sp, #0]
 800e31c:	f104 0010 	add.w	r0, r4, #16
 800e320:	2218      	movs	r2, #24
 800e322:	2113      	movs	r1, #19
 800e324:	f04f 0b00 	mov.w	fp, #0
 800e328:	f000 f8d4 	bl	800e4d4 <core_set_error>
 800e32c:	e725      	b.n	800e17a <ai_platform_network_process+0x202>
 800e32e:	9c00      	ldr	r4, [sp, #0]
 800e330:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800e334:	9a01      	ldr	r2, [sp, #4]
 800e336:	82a2      	strh	r2, [r4, #20]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	f000 80a9 	beq.w	800e490 <ai_platform_network_process+0x518>
 800e33e:	2b01      	cmp	r3, #1
 800e340:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800e342:	f240 80a8 	bls.w	800e496 <ai_platform_network_process+0x51e>
 800e346:	f105 060c 	add.w	r6, r5, #12
 800e34a:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 800e34e:	8aa3      	ldrh	r3, [r4, #20]
 800e350:	455b      	cmp	r3, fp
 800e352:	f67f af12 	bls.w	800e17a <ai_platform_network_process+0x202>
 800e356:	9400      	str	r4, [sp, #0]
 800e358:	2d00      	cmp	r5, #0
 800e35a:	d037      	beq.n	800e3cc <ai_platform_network_process+0x454>
 800e35c:	882b      	ldrh	r3, [r5, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d034      	beq.n	800e3cc <ai_platform_network_process+0x454>
 800e362:	686b      	ldr	r3, [r5, #4]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d031      	beq.n	800e3cc <ai_platform_network_process+0x454>
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d02e      	beq.n	800e3cc <ai_platform_network_process+0x454>
 800e36e:	f04f 0800 	mov.w	r8, #0
 800e372:	e01a      	b.n	800e3aa <ai_platform_network_process+0x432>
 800e374:	68d4      	ldr	r4, [r2, #12]
 800e376:	1b00      	subs	r0, r0, r4
 800e378:	4401      	add	r1, r0
 800e37a:	6091      	str	r1, [r2, #8]
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	699b      	ldr	r3, [r3, #24]
 800e380:	60da      	str	r2, [r3, #12]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f108 0801 	add.w	r8, r8, #1
 800e388:	68b9      	ldr	r1, [r7, #8]
 800e38a:	f85a 2009 	ldr.w	r2, [sl, r9]
 800e38e:	440b      	add	r3, r1
 800e390:	4293      	cmp	r3, r2
 800e392:	d301      	bcc.n	800e398 <ai_platform_network_process+0x420>
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	1ad3      	subs	r3, r2, r3
 800e398:	607b      	str	r3, [r7, #4]
 800e39a:	882b      	ldrh	r3, [r5, #0]
 800e39c:	4598      	cmp	r8, r3
 800e39e:	d215      	bcs.n	800e3cc <ai_platform_network_process+0x454>
 800e3a0:	686b      	ldr	r3, [r5, #4]
 800e3a2:	b19b      	cbz	r3, 800e3cc <ai_platform_network_process+0x454>
 800e3a4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800e3a8:	b183      	cbz	r3, 800e3cc <ai_platform_network_process+0x454>
 800e3aa:	68a9      	ldr	r1, [r5, #8]
 800e3ac:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800e3b0:	699a      	ldr	r2, [r3, #24]
 800e3b2:	f8d1 a000 	ldr.w	sl, [r1]
 800e3b6:	6814      	ldr	r4, [r2, #0]
 800e3b8:	eb0a 0709 	add.w	r7, sl, r9
 800e3bc:	6890      	ldr	r0, [r2, #8]
 800e3be:	00a4      	lsls	r4, r4, #2
 800e3c0:	6879      	ldr	r1, [r7, #4]
 800e3c2:	d5d7      	bpl.n	800e374 <ai_platform_network_process+0x3fc>
 800e3c4:	68ba      	ldr	r2, [r7, #8]
 800e3c6:	f000 ffe1 	bl	800f38c <memcpy>
 800e3ca:	e7da      	b.n	800e382 <ai_platform_network_process+0x40a>
 800e3cc:	9800      	ldr	r0, [sp, #0]
 800e3ce:	f000 fef9 	bl	800f1c4 <ai_layers_forward_all>
 800e3d2:	2e00      	cmp	r6, #0
 800e3d4:	d04a      	beq.n	800e46c <ai_platform_network_process+0x4f4>
 800e3d6:	8833      	ldrh	r3, [r6, #0]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d047      	beq.n	800e46c <ai_platform_network_process+0x4f4>
 800e3dc:	6873      	ldr	r3, [r6, #4]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d044      	beq.n	800e46c <ai_platform_network_process+0x4f4>
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d041      	beq.n	800e46c <ai_platform_network_process+0x4f4>
 800e3e8:	f04f 0800 	mov.w	r8, #0
 800e3ec:	e019      	b.n	800e422 <ai_platform_network_process+0x4aa>
 800e3ee:	f85a 2009 	ldr.w	r2, [sl, r9]
 800e3f2:	4291      	cmp	r1, r2
 800e3f4:	d301      	bcc.n	800e3fa <ai_platform_network_process+0x482>
 800e3f6:	68f9      	ldr	r1, [r7, #12]
 800e3f8:	1a51      	subs	r1, r2, r1
 800e3fa:	6079      	str	r1, [r7, #4]
 800e3fc:	f108 0801 	add.w	r8, r8, #1
 800e400:	6998      	ldr	r0, [r3, #24]
 800e402:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 800e406:	1b12      	subs	r2, r2, r4
 800e408:	440a      	add	r2, r1
 800e40a:	6082      	str	r2, [r0, #8]
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	699b      	ldr	r3, [r3, #24]
 800e410:	60da      	str	r2, [r3, #12]
 800e412:	8833      	ldrh	r3, [r6, #0]
 800e414:	4598      	cmp	r8, r3
 800e416:	d229      	bcs.n	800e46c <ai_platform_network_process+0x4f4>
 800e418:	6873      	ldr	r3, [r6, #4]
 800e41a:	b33b      	cbz	r3, 800e46c <ai_platform_network_process+0x4f4>
 800e41c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800e420:	b323      	cbz	r3, 800e46c <ai_platform_network_process+0x4f4>
 800e422:	68b2      	ldr	r2, [r6, #8]
 800e424:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800e428:	f8d3 e018 	ldr.w	lr, [r3, #24]
 800e42c:	f8d2 a000 	ldr.w	sl, [r2]
 800e430:	f8de 1000 	ldr.w	r1, [lr]
 800e434:	eb0a 0709 	add.w	r7, sl, r9
 800e438:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 800e43c:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 800e440:	eb00 0102 	add.w	r1, r0, r2
 800e444:	d0d3      	beq.n	800e3ee <ai_platform_network_process+0x476>
 800e446:	f8de 1008 	ldr.w	r1, [lr, #8]
 800e44a:	f000 ff9f 	bl	800f38c <memcpy>
 800e44e:	f85a 2009 	ldr.w	r2, [sl, r9]
 800e452:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 800e456:	440b      	add	r3, r1
 800e458:	4293      	cmp	r3, r2
 800e45a:	d301      	bcc.n	800e460 <ai_platform_network_process+0x4e8>
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	1ad3      	subs	r3, r2, r3
 800e460:	607b      	str	r3, [r7, #4]
 800e462:	f108 0801 	add.w	r8, r8, #1
 800e466:	8833      	ldrh	r3, [r6, #0]
 800e468:	4598      	cmp	r8, r3
 800e46a:	d3d5      	bcc.n	800e418 <ai_platform_network_process+0x4a0>
 800e46c:	9b00      	ldr	r3, [sp, #0]
 800e46e:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 800e472:	461a      	mov	r2, r3
 800e474:	8a9b      	ldrh	r3, [r3, #20]
 800e476:	f10b 0b01 	add.w	fp, fp, #1
 800e47a:	fa1f fb8b 	uxth.w	fp, fp
 800e47e:	455b      	cmp	r3, fp
 800e480:	f8a2 b016 	strh.w	fp, [r2, #22]
 800e484:	f63f af68 	bhi.w	800e358 <ai_platform_network_process+0x3e0>
 800e488:	4658      	mov	r0, fp
 800e48a:	b003      	add	sp, #12
 800e48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e490:	461d      	mov	r5, r3
 800e492:	461e      	mov	r6, r3
 800e494:	e759      	b.n	800e34a <ai_platform_network_process+0x3d2>
 800e496:	2600      	movs	r6, #0
 800e498:	e757      	b.n	800e34a <ai_platform_network_process+0x3d2>
 800e49a:	9c00      	ldr	r4, [sp, #0]
 800e49c:	2217      	movs	r2, #23
 800e49e:	2113      	movs	r1, #19
 800e4a0:	46bb      	mov	fp, r7
 800e4a2:	f104 0010 	add.w	r0, r4, #16
 800e4a6:	f000 f815 	bl	800e4d4 <core_set_error>
 800e4aa:	e666      	b.n	800e17a <ai_platform_network_process+0x202>
 800e4ac:	f104 0010 	add.w	r0, r4, #16
 800e4b0:	2217      	movs	r2, #23
 800e4b2:	2112      	movs	r1, #18
 800e4b4:	469b      	mov	fp, r3
 800e4b6:	f000 f80d 	bl	800e4d4 <core_set_error>
 800e4ba:	e65e      	b.n	800e17a <ai_platform_network_process+0x202>
 800e4bc:	f104 0010 	add.w	r0, r4, #16
 800e4c0:	2219      	movs	r2, #25
 800e4c2:	2112      	movs	r1, #18
 800e4c4:	f04f 0b00 	mov.w	fp, #0
 800e4c8:	f000 f804 	bl	800e4d4 <core_set_error>
 800e4cc:	e655      	b.n	800e17a <ai_platform_network_process+0x202>
 800e4ce:	bf00      	nop

0800e4d0 <core_init>:
 800e4d0:	2001      	movs	r0, #1
 800e4d2:	4770      	bx	lr

0800e4d4 <core_set_error>:
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	7800      	ldrb	r0, [r0, #0]
 800e4d8:	b930      	cbnz	r0, 800e4e8 <core_set_error+0x14>
 800e4da:	7019      	strb	r1, [r3, #0]
 800e4dc:	2001      	movs	r0, #1
 800e4de:	6819      	ldr	r1, [r3, #0]
 800e4e0:	f362 211f 	bfi	r1, r2, #8, #24
 800e4e4:	6019      	str	r1, [r3, #0]
 800e4e6:	4770      	bx	lr
 800e4e8:	2000      	movs	r0, #0
 800e4ea:	4770      	bx	lr

0800e4ec <ai_dict8_dot_array_f32>:
 800e4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f0:	9d06      	ldr	r5, [sp, #24]
 800e4f2:	4c88      	ldr	r4, [pc, #544]	; (800e714 <ai_dict8_dot_array_f32+0x228>)
 800e4f4:	2d07      	cmp	r5, #7
 800e4f6:	442c      	add	r4, r5
 800e4f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e4fc:	f104 0620 	add.w	r6, r4, #32
 800e500:	d817      	bhi.n	800e532 <ai_dict8_dot_array_f32+0x46>
 800e502:	42b3      	cmp	r3, r6
 800e504:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800e718 <ai_dict8_dot_array_f32+0x22c>
 800e508:	d20b      	bcs.n	800e522 <ai_dict8_dot_array_f32+0x36>
 800e50a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e50e:	ecf3 7a01 	vldmia	r3!, {s15}
 800e512:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e516:	42b3      	cmp	r3, r6
 800e518:	edd4 6a00 	vldr	s13, [r4]
 800e51c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e520:	d3f3      	bcc.n	800e50a <ai_dict8_dot_array_f32+0x1e>
 800e522:	edd0 7a00 	vldr	s15, [r0]
 800e526:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e52a:	ed80 7a00 	vstr	s14, [r0]
 800e52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e532:	f001 0503 	and.w	r5, r1, #3
 800e536:	2d02      	cmp	r5, #2
 800e538:	f000 80f0 	beq.w	800e71c <ai_dict8_dot_array_f32+0x230>
 800e53c:	2d03      	cmp	r5, #3
 800e53e:	f000 81ff 	beq.w	800e940 <ai_dict8_dot_array_f32+0x454>
 800e542:	2d01      	cmp	r5, #1
 800e544:	f000 81f0 	beq.w	800e928 <ai_dict8_dot_array_f32+0x43c>
 800e548:	42a3      	cmp	r3, r4
 800e54a:	f200 81fc 	bhi.w	800e946 <ai_dict8_dot_array_f32+0x45a>
 800e54e:	1ae4      	subs	r4, r4, r3
 800e550:	f101 0810 	add.w	r8, r1, #16
 800e554:	f101 0508 	add.w	r5, r1, #8
 800e558:	f103 0720 	add.w	r7, r3, #32
 800e55c:	0964      	lsrs	r4, r4, #5
 800e55e:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800e718 <ai_dict8_dot_array_f32+0x22c>
 800e562:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 800e566:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 800e56a:	3508      	adds	r5, #8
 800e56c:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 800e570:	3720      	adds	r7, #32
 800e572:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800e576:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 800e57a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800e57e:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 800e582:	edde 7a00 	vldr	s15, [lr]
 800e586:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 800e58a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e58e:	eddc 5a00 	vldr	s11, [ip]
 800e592:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 800e596:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 800e59a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800e59e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800e5a2:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 800e5a6:	ed9c 4a00 	vldr	s8, [ip]
 800e5aa:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 800e5ae:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800e5b2:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 800e5b6:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800e5ba:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 800e5be:	eee4 7a26 	vfma.f32	s15, s8, s13
 800e5c2:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 800e5c6:	ed9c 4a00 	vldr	s8, [ip]
 800e5ca:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 800e5ce:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 800e5d2:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800e5d6:	eee4 7a05 	vfma.f32	s15, s8, s10
 800e5da:	ed9e 5a00 	vldr	s10, [lr]
 800e5de:	ed9c 4a00 	vldr	s8, [ip]
 800e5e2:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 800e5e6:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 800e5ea:	4545      	cmp	r5, r8
 800e5ec:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800e5f0:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800e5f4:	eee5 7a06 	vfma.f32	s15, s10, s12
 800e5f8:	ed9e 5a00 	vldr	s10, [lr]
 800e5fc:	ed9c 6a00 	vldr	s12, [ip]
 800e600:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e604:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e608:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e60c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e610:	d1a9      	bne.n	800e566 <ai_dict8_dot_array_f32+0x7a>
 800e612:	3401      	adds	r4, #1
 800e614:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800e618:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800e61c:	42b3      	cmp	r3, r6
 800e61e:	d280      	bcs.n	800e522 <ai_dict8_dot_array_f32+0x36>
 800e620:	461c      	mov	r4, r3
 800e622:	780d      	ldrb	r5, [r1, #0]
 800e624:	ecf4 6a01 	vldmia	r4!, {s13}
 800e628:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e62c:	42a6      	cmp	r6, r4
 800e62e:	edd5 7a00 	vldr	s15, [r5]
 800e632:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e636:	f67f af74 	bls.w	800e522 <ai_dict8_dot_array_f32+0x36>
 800e63a:	784d      	ldrb	r5, [r1, #1]
 800e63c:	f103 0408 	add.w	r4, r3, #8
 800e640:	edd3 6a01 	vldr	s13, [r3, #4]
 800e644:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e648:	42a6      	cmp	r6, r4
 800e64a:	edd5 7a00 	vldr	s15, [r5]
 800e64e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e652:	f67f af66 	bls.w	800e522 <ai_dict8_dot_array_f32+0x36>
 800e656:	788d      	ldrb	r5, [r1, #2]
 800e658:	f103 040c 	add.w	r4, r3, #12
 800e65c:	edd3 6a02 	vldr	s13, [r3, #8]
 800e660:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e664:	42a6      	cmp	r6, r4
 800e666:	edd5 7a00 	vldr	s15, [r5]
 800e66a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e66e:	f67f af58 	bls.w	800e522 <ai_dict8_dot_array_f32+0x36>
 800e672:	78cd      	ldrb	r5, [r1, #3]
 800e674:	f103 0410 	add.w	r4, r3, #16
 800e678:	edd3 6a03 	vldr	s13, [r3, #12]
 800e67c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e680:	42a6      	cmp	r6, r4
 800e682:	edd5 7a00 	vldr	s15, [r5]
 800e686:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e68a:	f67f af4a 	bls.w	800e522 <ai_dict8_dot_array_f32+0x36>
 800e68e:	790d      	ldrb	r5, [r1, #4]
 800e690:	f103 0414 	add.w	r4, r3, #20
 800e694:	edd3 6a04 	vldr	s13, [r3, #16]
 800e698:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e69c:	42a6      	cmp	r6, r4
 800e69e:	edd5 7a00 	vldr	s15, [r5]
 800e6a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6a6:	f67f af3c 	bls.w	800e522 <ai_dict8_dot_array_f32+0x36>
 800e6aa:	794d      	ldrb	r5, [r1, #5]
 800e6ac:	f103 0418 	add.w	r4, r3, #24
 800e6b0:	edd3 6a05 	vldr	s13, [r3, #20]
 800e6b4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e6b8:	42a6      	cmp	r6, r4
 800e6ba:	edd5 7a00 	vldr	s15, [r5]
 800e6be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6c2:	f67f af2e 	bls.w	800e522 <ai_dict8_dot_array_f32+0x36>
 800e6c6:	798d      	ldrb	r5, [r1, #6]
 800e6c8:	f103 041c 	add.w	r4, r3, #28
 800e6cc:	edd3 6a06 	vldr	s13, [r3, #24]
 800e6d0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e6d4:	42a6      	cmp	r6, r4
 800e6d6:	edd5 7a00 	vldr	s15, [r5]
 800e6da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6de:	f67f af20 	bls.w	800e522 <ai_dict8_dot_array_f32+0x36>
 800e6e2:	79cd      	ldrb	r5, [r1, #7]
 800e6e4:	f103 0420 	add.w	r4, r3, #32
 800e6e8:	edd3 6a07 	vldr	s13, [r3, #28]
 800e6ec:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e6f0:	42a6      	cmp	r6, r4
 800e6f2:	edd5 7a00 	vldr	s15, [r5]
 800e6f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6fa:	f67f af12 	bls.w	800e522 <ai_dict8_dot_array_f32+0x36>
 800e6fe:	7a09      	ldrb	r1, [r1, #8]
 800e700:	edd3 7a08 	vldr	s15, [r3, #32]
 800e704:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e708:	edd2 6a00 	vldr	s13, [r2]
 800e70c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e710:	e707      	b.n	800e522 <ai_dict8_dot_array_f32+0x36>
 800e712:	bf00      	nop
 800e714:	3ffffff8 	.word	0x3ffffff8
 800e718:	00000000 	.word	0x00000000
 800e71c:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 800e718 <ai_dict8_dot_array_f32+0x22c>
 800e720:	780d      	ldrb	r5, [r1, #0]
 800e722:	3304      	adds	r3, #4
 800e724:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e728:	3101      	adds	r1, #1
 800e72a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e72e:	edd5 6a00 	vldr	s13, [r5]
 800e732:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e736:	780d      	ldrb	r5, [r1, #0]
 800e738:	1d1f      	adds	r7, r3, #4
 800e73a:	edd3 7a00 	vldr	s15, [r3]
 800e73e:	f101 0c01 	add.w	ip, r1, #1
 800e742:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e746:	42bc      	cmp	r4, r7
 800e748:	edd5 6a00 	vldr	s13, [r5]
 800e74c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e750:	d365      	bcc.n	800e81e <ai_dict8_dot_array_f32+0x332>
 800e752:	3324      	adds	r3, #36	; 0x24
 800e754:	f101 0e11 	add.w	lr, r1, #17
 800e758:	3109      	adds	r1, #9
 800e75a:	eba6 0803 	sub.w	r8, r6, r3
 800e75e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800e762:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 800e766:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800e76a:	3108      	adds	r1, #8
 800e76c:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 800e770:	3320      	adds	r3, #32
 800e772:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e776:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 800e77a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e77e:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 800e782:	edd5 7a00 	vldr	s15, [r5]
 800e786:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 800e78a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e78e:	edd4 5a00 	vldr	s11, [r4]
 800e792:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 800e796:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 800e79a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800e79e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e7a2:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800e7a6:	ed94 4a00 	vldr	s8, [r4]
 800e7aa:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 800e7ae:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e7b2:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 800e7b6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e7ba:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 800e7be:	eee4 7a26 	vfma.f32	s15, s8, s13
 800e7c2:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 800e7c6:	ed94 4a00 	vldr	s8, [r4]
 800e7ca:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 800e7ce:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 800e7d2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e7d6:	eee4 7a05 	vfma.f32	s15, s8, s10
 800e7da:	ed95 5a00 	vldr	s10, [r5]
 800e7de:	ed94 4a00 	vldr	s8, [r4]
 800e7e2:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800e7e6:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 800e7ea:	458e      	cmp	lr, r1
 800e7ec:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e7f0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e7f4:	eee5 7a06 	vfma.f32	s15, s10, s12
 800e7f8:	ed95 5a00 	vldr	s10, [r5]
 800e7fc:	ed94 6a00 	vldr	s12, [r4]
 800e800:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e804:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e808:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e80c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e810:	d1a9      	bne.n	800e766 <ai_dict8_dot_array_f32+0x27a>
 800e812:	f108 0801 	add.w	r8, r8, #1
 800e816:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800e81a:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 800e81e:	42b7      	cmp	r7, r6
 800e820:	f4bf ae7f 	bcs.w	800e522 <ai_dict8_dot_array_f32+0x36>
 800e824:	463b      	mov	r3, r7
 800e826:	f89c 1000 	ldrb.w	r1, [ip]
 800e82a:	ecf3 6a01 	vldmia	r3!, {s13}
 800e82e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e832:	429e      	cmp	r6, r3
 800e834:	edd1 7a00 	vldr	s15, [r1]
 800e838:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e83c:	f67f ae71 	bls.w	800e522 <ai_dict8_dot_array_f32+0x36>
 800e840:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800e844:	f107 0308 	add.w	r3, r7, #8
 800e848:	edd7 6a01 	vldr	s13, [r7, #4]
 800e84c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e850:	429e      	cmp	r6, r3
 800e852:	edd1 7a00 	vldr	s15, [r1]
 800e856:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e85a:	f67f ae62 	bls.w	800e522 <ai_dict8_dot_array_f32+0x36>
 800e85e:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800e862:	f107 030c 	add.w	r3, r7, #12
 800e866:	edd7 6a02 	vldr	s13, [r7, #8]
 800e86a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e86e:	429e      	cmp	r6, r3
 800e870:	edd1 7a00 	vldr	s15, [r1]
 800e874:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e878:	f67f ae53 	bls.w	800e522 <ai_dict8_dot_array_f32+0x36>
 800e87c:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800e880:	f107 0310 	add.w	r3, r7, #16
 800e884:	edd7 6a03 	vldr	s13, [r7, #12]
 800e888:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e88c:	429e      	cmp	r6, r3
 800e88e:	edd1 7a00 	vldr	s15, [r1]
 800e892:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e896:	f67f ae44 	bls.w	800e522 <ai_dict8_dot_array_f32+0x36>
 800e89a:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800e89e:	f107 0314 	add.w	r3, r7, #20
 800e8a2:	edd7 6a04 	vldr	s13, [r7, #16]
 800e8a6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e8aa:	429e      	cmp	r6, r3
 800e8ac:	edd1 7a00 	vldr	s15, [r1]
 800e8b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e8b4:	f67f ae35 	bls.w	800e522 <ai_dict8_dot_array_f32+0x36>
 800e8b8:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800e8bc:	f107 0318 	add.w	r3, r7, #24
 800e8c0:	edd7 6a05 	vldr	s13, [r7, #20]
 800e8c4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e8c8:	429e      	cmp	r6, r3
 800e8ca:	edd1 7a00 	vldr	s15, [r1]
 800e8ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e8d2:	f67f ae26 	bls.w	800e522 <ai_dict8_dot_array_f32+0x36>
 800e8d6:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800e8da:	f107 031c 	add.w	r3, r7, #28
 800e8de:	edd7 6a06 	vldr	s13, [r7, #24]
 800e8e2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e8e6:	429e      	cmp	r6, r3
 800e8e8:	edd1 7a00 	vldr	s15, [r1]
 800e8ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e8f0:	f67f ae17 	bls.w	800e522 <ai_dict8_dot_array_f32+0x36>
 800e8f4:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800e8f8:	f107 0320 	add.w	r3, r7, #32
 800e8fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800e900:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e904:	429e      	cmp	r6, r3
 800e906:	edd1 7a00 	vldr	s15, [r1]
 800e90a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e90e:	f67f ae08 	bls.w	800e522 <ai_dict8_dot_array_f32+0x36>
 800e912:	f89c 3008 	ldrb.w	r3, [ip, #8]
 800e916:	edd7 7a08 	vldr	s15, [r7, #32]
 800e91a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e91e:	edd2 6a00 	vldr	s13, [r2]
 800e922:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e926:	e5fc      	b.n	800e522 <ai_dict8_dot_array_f32+0x36>
 800e928:	780d      	ldrb	r5, [r1, #0]
 800e92a:	3304      	adds	r3, #4
 800e92c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e930:	3101      	adds	r1, #1
 800e932:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e936:	ed95 7a00 	vldr	s14, [r5]
 800e93a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e93e:	e6ef      	b.n	800e720 <ai_dict8_dot_array_f32+0x234>
 800e940:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 800e718 <ai_dict8_dot_array_f32+0x22c>
 800e944:	e6f7      	b.n	800e736 <ai_dict8_dot_array_f32+0x24a>
 800e946:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 800e718 <ai_dict8_dot_array_f32+0x22c>
 800e94a:	e667      	b.n	800e61c <ai_dict8_dot_array_f32+0x130>

0800e94c <ai_dict4_dot_array_f32>:
 800e94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e950:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e952:	f027 0c01 	bic.w	ip, r7, #1
 800e956:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800e95a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800e95e:	f000 80ad 	beq.w	800eabc <ai_dict4_dot_array_f32+0x170>
 800e962:	1d0d      	adds	r5, r1, #4
 800e964:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800e968:	f103 0420 	add.w	r4, r3, #32
 800e96c:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800eac4 <ai_dict4_dot_array_f32+0x178>
 800e970:	eb05 0e09 	add.w	lr, r5, r9
 800e974:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800e978:	3504      	adds	r5, #4
 800e97a:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 800e97e:	3420      	adds	r4, #32
 800e980:	f006 0a0f 	and.w	sl, r6, #15
 800e984:	0936      	lsrs	r6, r6, #4
 800e986:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800e98a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800e98e:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 800e992:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e996:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 800e99a:	edda 7a00 	vldr	s15, [sl]
 800e99e:	edd6 5a00 	vldr	s11, [r6]
 800e9a2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e9a6:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 800e9aa:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 800e9ae:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800e9b2:	f006 060f 	and.w	r6, r6, #15
 800e9b6:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800e9ba:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 800e9be:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800e9c2:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 800e9c6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e9ca:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 800e9ce:	ed9a 3a00 	vldr	s6, [sl]
 800e9d2:	ed96 5a00 	vldr	s10, [r6]
 800e9d6:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 800e9da:	eee3 7a04 	vfma.f32	s15, s6, s8
 800e9de:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 800e9e2:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800e9e6:	f00a 0a0f 	and.w	sl, sl, #15
 800e9ea:	45ae      	cmp	lr, r5
 800e9ec:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800e9f0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800e9f4:	ed9b 3a00 	vldr	s6, [fp]
 800e9f8:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 800e9fc:	eee5 7a06 	vfma.f32	s15, s10, s12
 800ea00:	ed9a 4a00 	vldr	s8, [sl]
 800ea04:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 800ea08:	f006 060f 	and.w	r6, r6, #15
 800ea0c:	ed9a 5a00 	vldr	s10, [sl]
 800ea10:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ea14:	ed96 6a00 	vldr	s12, [r6]
 800ea18:	eee3 7a23 	vfma.f32	s15, s6, s7
 800ea1c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ea20:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ea24:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ea28:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ea2c:	d1a2      	bne.n	800e974 <ai_dict4_dot_array_f32+0x28>
 800ea2e:	4449      	add	r1, r9
 800ea30:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800ea34:	459c      	cmp	ip, r3
 800ea36:	d92d      	bls.n	800ea94 <ai_dict4_dot_array_f32+0x148>
 800ea38:	f10c 0c07 	add.w	ip, ip, #7
 800ea3c:	f103 0508 	add.w	r5, r3, #8
 800ea40:	f103 0810 	add.w	r8, r3, #16
 800ea44:	f101 3eff 	add.w	lr, r1, #4294967295
 800ea48:	ebac 0c05 	sub.w	ip, ip, r5
 800ea4c:	f02c 0407 	bic.w	r4, ip, #7
 800ea50:	44a0      	add	r8, r4
 800ea52:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800ea56:	3508      	adds	r5, #8
 800ea58:	ed55 5a03 	vldr	s11, [r5, #-12]
 800ea5c:	f004 060f 	and.w	r6, r4, #15
 800ea60:	0924      	lsrs	r4, r4, #4
 800ea62:	ed55 6a04 	vldr	s13, [r5, #-16]
 800ea66:	45a8      	cmp	r8, r5
 800ea68:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ea6c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ea70:	edd6 7a00 	vldr	s15, [r6]
 800ea74:	ed94 6a00 	vldr	s12, [r4]
 800ea78:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ea7c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ea80:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ea84:	d1e5      	bne.n	800ea52 <ai_dict4_dot_array_f32+0x106>
 800ea86:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800ea8a:	f10c 0c01 	add.w	ip, ip, #1
 800ea8e:	4461      	add	r1, ip
 800ea90:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800ea94:	07fc      	lsls	r4, r7, #31
 800ea96:	d509      	bpl.n	800eaac <ai_dict4_dot_array_f32+0x160>
 800ea98:	7809      	ldrb	r1, [r1, #0]
 800ea9a:	edd3 7a00 	vldr	s15, [r3]
 800ea9e:	090b      	lsrs	r3, r1, #4
 800eaa0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800eaa4:	edd2 6a00 	vldr	s13, [r2]
 800eaa8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800eaac:	edd0 7a00 	vldr	s15, [r0]
 800eab0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eab4:	ed80 7a00 	vstr	s14, [r0]
 800eab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eabc:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800eac4 <ai_dict4_dot_array_f32+0x178>
 800eac0:	e7b8      	b.n	800ea34 <ai_dict4_dot_array_f32+0xe8>
 800eac2:	bf00      	nop
 800eac4:	00000000 	.word	0x00000000

0800eac8 <forward_dense>:
 800eac8:	6982      	ldr	r2, [r0, #24]
 800eaca:	8813      	ldrh	r3, [r2, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	f000 81c8 	beq.w	800ee62 <forward_dense+0x39a>
 800ead2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ead6:	ed2d 8b08 	vpush	{d8-d11}
 800eada:	6851      	ldr	r1, [r2, #4]
 800eadc:	b091      	sub	sp, #68	; 0x44
 800eade:	684d      	ldr	r5, [r1, #4]
 800eae0:	b105      	cbz	r5, 800eae4 <forward_dense+0x1c>
 800eae2:	682d      	ldr	r5, [r5, #0]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	f240 81b9 	bls.w	800ee5c <forward_dense+0x394>
 800eaea:	690a      	ldr	r2, [r1, #16]
 800eaec:	b102      	cbz	r2, 800eaf0 <forward_dense+0x28>
 800eaee:	6812      	ldr	r2, [r2, #0]
 800eaf0:	2b02      	cmp	r3, #2
 800eaf2:	f000 81b8 	beq.w	800ee66 <forward_dense+0x39e>
 800eaf6:	69cb      	ldr	r3, [r1, #28]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	f000 8209 	beq.w	800ef10 <forward_dense+0x448>
 800eafe:	6818      	ldr	r0, [r3, #0]
 800eb00:	9008      	str	r0, [sp, #32]
 800eb02:	f111 0018 	adds.w	r0, r1, #24
 800eb06:	f000 81dc 	beq.w	800eec2 <forward_dense+0x3fa>
 800eb0a:	8b09      	ldrh	r1, [r1, #24]
 800eb0c:	2901      	cmp	r1, #1
 800eb0e:	f240 81fc 	bls.w	800ef0a <forward_dense+0x442>
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	f000 81d7 	beq.w	800eec6 <forward_dense+0x3fe>
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	9306      	str	r3, [sp, #24]
 800eb1c:	9b08      	ldr	r3, [sp, #32]
 800eb1e:	68d6      	ldr	r6, [r2, #12]
 800eb20:	699b      	ldr	r3, [r3, #24]
 800eb22:	68b0      	ldr	r0, [r6, #8]
 800eb24:	681f      	ldr	r7, [r3, #0]
 800eb26:	68f4      	ldr	r4, [r6, #12]
 800eb28:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 800eb2c:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 800eb30:	f3c7 4743 	ubfx	r7, r7, #17, #4
 800eb34:	fb04 f000 	mul.w	r0, r4, r0
 800eb38:	fa4e f10c 	asr.w	r1, lr, ip
 800eb3c:	2f04      	cmp	r7, #4
 800eb3e:	9007      	str	r0, [sp, #28]
 800eb40:	910b      	str	r1, [sp, #44]	; 0x2c
 800eb42:	68e9      	ldr	r1, [r5, #12]
 800eb44:	6870      	ldr	r0, [r6, #4]
 800eb46:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800eb4a:	f000 81db 	beq.w	800ef04 <forward_dense+0x43c>
 800eb4e:	2f08      	cmp	r7, #8
 800eb50:	f000 81d8 	beq.w	800ef04 <forward_dense+0x43c>
 800eb54:	f04f 0a00 	mov.w	sl, #0
 800eb58:	6992      	ldr	r2, [r2, #24]
 800eb5a:	0080      	lsls	r0, r0, #2
 800eb5c:	69a9      	ldr	r1, [r5, #24]
 800eb5e:	6894      	ldr	r4, [r2, #8]
 800eb60:	9a08      	ldr	r2, [sp, #32]
 800eb62:	9009      	str	r0, [sp, #36]	; 0x24
 800eb64:	1826      	adds	r6, r4, r0
 800eb66:	6952      	ldr	r2, [r2, #20]
 800eb68:	9404      	str	r4, [sp, #16]
 800eb6a:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800eb6e:	9a07      	ldr	r2, [sp, #28]
 800eb70:	688f      	ldr	r7, [r1, #8]
 800eb72:	2a00      	cmp	r2, #0
 800eb74:	f000 81c1 	beq.w	800eefa <forward_dense+0x432>
 800eb78:	f1a8 0210 	sub.w	r2, r8, #16
 800eb7c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800eb80:	689d      	ldr	r5, [r3, #8]
 800eb82:	0912      	lsrs	r2, r2, #4
 800eb84:	910a      	str	r1, [sp, #40]	; 0x28
 800eb86:	2100      	movs	r1, #0
 800eb88:	9b06      	ldr	r3, [sp, #24]
 800eb8a:	3201      	adds	r2, #1
 800eb8c:	eddf 2acf 	vldr	s5, [pc, #828]	; 800eecc <forward_dense+0x404>
 800eb90:	9105      	str	r1, [sp, #20]
 800eb92:	f008 010f 	and.w	r1, r8, #15
 800eb96:	0192      	lsls	r2, r2, #6
 800eb98:	910d      	str	r1, [sp, #52]	; 0x34
 800eb9a:	920c      	str	r2, [sp, #48]	; 0x30
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d042      	beq.n	800ec26 <forward_dense+0x15e>
 800eba0:	699b      	ldr	r3, [r3, #24]
 800eba2:	689c      	ldr	r4, [r3, #8]
 800eba4:	9b04      	ldr	r3, [sp, #16]
 800eba6:	f1ba 0f00 	cmp.w	sl, #0
 800ebaa:	d041      	beq.n	800ec30 <forward_dense+0x168>
 800ebac:	42b3      	cmp	r3, r6
 800ebae:	d229      	bcs.n	800ec04 <forward_dense+0x13c>
 800ebb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ebb2:	469b      	mov	fp, r3
 800ebb4:	ab0f      	add	r3, sp, #60	; 0x3c
 800ebb6:	2a04      	cmp	r2, #4
 800ebb8:	9303      	str	r3, [sp, #12]
 800ebba:	4633      	mov	r3, r6
 800ebbc:	4646      	mov	r6, r8
 800ebbe:	4698      	mov	r8, r3
 800ebc0:	f000 8154 	beq.w	800ee6c <forward_dense+0x3a4>
 800ebc4:	2c00      	cmp	r4, #0
 800ebc6:	f000 8183 	beq.w	800eed0 <forward_dense+0x408>
 800ebca:	f8d4 c000 	ldr.w	ip, [r4]
 800ebce:	463b      	mov	r3, r7
 800ebd0:	4629      	mov	r1, r5
 800ebd2:	9600      	str	r6, [sp, #0]
 800ebd4:	4652      	mov	r2, sl
 800ebd6:	9803      	ldr	r0, [sp, #12]
 800ebd8:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800ebdc:	f7ff fc86 	bl	800e4ec <ai_dict8_dot_array_f32>
 800ebe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebe2:	3404      	adds	r4, #4
 800ebe4:	444d      	add	r5, r9
 800ebe6:	f84b 3b04 	str.w	r3, [fp], #4
 800ebea:	45c3      	cmp	fp, r8
 800ebec:	d3ea      	bcc.n	800ebc4 <forward_dense+0xfc>
 800ebee:	4643      	mov	r3, r8
 800ebf0:	46b0      	mov	r8, r6
 800ebf2:	461e      	mov	r6, r3
 800ebf4:	9a04      	ldr	r2, [sp, #16]
 800ebf6:	43d3      	mvns	r3, r2
 800ebf8:	4433      	add	r3, r6
 800ebfa:	f023 0303 	bic.w	r3, r3, #3
 800ebfe:	3304      	adds	r3, #4
 800ec00:	18d3      	adds	r3, r2, r3
 800ec02:	9304      	str	r3, [sp, #16]
 800ec04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec06:	9b05      	ldr	r3, [sp, #20]
 800ec08:	4417      	add	r7, r2
 800ec0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	4416      	add	r6, r2
 800ec10:	9a07      	ldr	r2, [sp, #28]
 800ec12:	9305      	str	r3, [sp, #20]
 800ec14:	4293      	cmp	r3, r2
 800ec16:	f000 8170 	beq.w	800eefa <forward_dense+0x432>
 800ec1a:	9b08      	ldr	r3, [sp, #32]
 800ec1c:	699b      	ldr	r3, [r3, #24]
 800ec1e:	689d      	ldr	r5, [r3, #8]
 800ec20:	9b06      	ldr	r3, [sp, #24]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d1bc      	bne.n	800eba0 <forward_dense+0xd8>
 800ec26:	461c      	mov	r4, r3
 800ec28:	9b04      	ldr	r3, [sp, #16]
 800ec2a:	f1ba 0f00 	cmp.w	sl, #0
 800ec2e:	d1bd      	bne.n	800ebac <forward_dense+0xe4>
 800ec30:	42b3      	cmp	r3, r6
 800ec32:	d2e7      	bcs.n	800ec04 <forward_dense+0x13c>
 800ec34:	4618      	mov	r0, r3
 800ec36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec38:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800ec3c:	eb07 0c03 	add.w	ip, r7, r3
 800ec40:	469e      	mov	lr, r3
 800ec42:	2c00      	cmp	r4, #0
 800ec44:	f000 80fe 	beq.w	800ee44 <forward_dense+0x37c>
 800ec48:	f1b8 0f0f 	cmp.w	r8, #15
 800ec4c:	ed94 6a00 	vldr	s12, [r4]
 800ec50:	f104 0404 	add.w	r4, r4, #4
 800ec54:	f240 80fc 	bls.w	800ee50 <forward_dense+0x388>
 800ec58:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ec5c:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800ec60:	4641      	mov	r1, r8
 800ec62:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800eecc <forward_dense+0x404>
 800ec66:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 800ec6a:	3910      	subs	r1, #16
 800ec6c:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 800ec70:	3240      	adds	r2, #64	; 0x40
 800ec72:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 800ec76:	290f      	cmp	r1, #15
 800ec78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec7c:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 800ec80:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 800ec84:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800ec88:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 800ec8c:	eee5 7a87 	vfma.f32	s15, s11, s14
 800ec90:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 800ec94:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 800ec98:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 800ec9c:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 800eca0:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 800eca4:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 800eca8:	eee2 7a03 	vfma.f32	s15, s4, s6
 800ecac:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800ecb0:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800ecb4:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800ecb8:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800ecbc:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 800ecc0:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 800ecc4:	eee3 7a84 	vfma.f32	s15, s7, s8
 800ecc8:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 800eccc:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 800ecd0:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 800ecd4:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 800ecd8:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 800ecdc:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 800ece0:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ece4:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 800ece8:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800ecec:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 800ecf0:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 800ecf4:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 800ecf8:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 800ecfc:	eee5 7a87 	vfma.f32	s15, s11, s14
 800ed00:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 800ed04:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 800ed08:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800ed0c:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800ed10:	eee9 7a89 	vfma.f32	s15, s19, s18
 800ed14:	eee8 7a88 	vfma.f32	s15, s17, s16
 800ed18:	eee0 7a20 	vfma.f32	s15, s0, s1
 800ed1c:	eee1 7a21 	vfma.f32	s15, s2, s3
 800ed20:	eee2 7a03 	vfma.f32	s15, s4, s6
 800ed24:	eee3 7a84 	vfma.f32	s15, s7, s8
 800ed28:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ed2c:	eee5 7a87 	vfma.f32	s15, s11, s14
 800ed30:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ed34:	d897      	bhi.n	800ec66 <forward_dense+0x19e>
 800ed36:	eb05 010e 	add.w	r1, r5, lr
 800ed3a:	465b      	mov	r3, fp
 800ed3c:	4662      	mov	r2, ip
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d075      	beq.n	800ee2e <forward_dense+0x366>
 800ed42:	ed91 7a00 	vldr	s14, [r1]
 800ed46:	2b01      	cmp	r3, #1
 800ed48:	edd2 7a00 	vldr	s15, [r2]
 800ed4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ed50:	d06d      	beq.n	800ee2e <forward_dense+0x366>
 800ed52:	ed91 7a01 	vldr	s14, [r1, #4]
 800ed56:	2b02      	cmp	r3, #2
 800ed58:	edd2 7a01 	vldr	s15, [r2, #4]
 800ed5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ed60:	d065      	beq.n	800ee2e <forward_dense+0x366>
 800ed62:	ed91 7a02 	vldr	s14, [r1, #8]
 800ed66:	2b03      	cmp	r3, #3
 800ed68:	edd2 7a02 	vldr	s15, [r2, #8]
 800ed6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ed70:	d05d      	beq.n	800ee2e <forward_dense+0x366>
 800ed72:	ed91 7a03 	vldr	s14, [r1, #12]
 800ed76:	2b04      	cmp	r3, #4
 800ed78:	edd2 7a03 	vldr	s15, [r2, #12]
 800ed7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ed80:	d055      	beq.n	800ee2e <forward_dense+0x366>
 800ed82:	ed91 7a04 	vldr	s14, [r1, #16]
 800ed86:	2b05      	cmp	r3, #5
 800ed88:	edd2 7a04 	vldr	s15, [r2, #16]
 800ed8c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ed90:	d04d      	beq.n	800ee2e <forward_dense+0x366>
 800ed92:	ed91 7a05 	vldr	s14, [r1, #20]
 800ed96:	2b06      	cmp	r3, #6
 800ed98:	edd2 7a05 	vldr	s15, [r2, #20]
 800ed9c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800eda0:	d045      	beq.n	800ee2e <forward_dense+0x366>
 800eda2:	ed91 7a06 	vldr	s14, [r1, #24]
 800eda6:	2b07      	cmp	r3, #7
 800eda8:	edd2 7a06 	vldr	s15, [r2, #24]
 800edac:	eee7 6a27 	vfma.f32	s13, s14, s15
 800edb0:	d03d      	beq.n	800ee2e <forward_dense+0x366>
 800edb2:	ed91 7a07 	vldr	s14, [r1, #28]
 800edb6:	2b08      	cmp	r3, #8
 800edb8:	edd2 7a07 	vldr	s15, [r2, #28]
 800edbc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800edc0:	d035      	beq.n	800ee2e <forward_dense+0x366>
 800edc2:	ed91 7a08 	vldr	s14, [r1, #32]
 800edc6:	2b09      	cmp	r3, #9
 800edc8:	edd2 7a08 	vldr	s15, [r2, #32]
 800edcc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800edd0:	d02d      	beq.n	800ee2e <forward_dense+0x366>
 800edd2:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800edd6:	2b0a      	cmp	r3, #10
 800edd8:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800eddc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ede0:	d025      	beq.n	800ee2e <forward_dense+0x366>
 800ede2:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800ede6:	2b0b      	cmp	r3, #11
 800ede8:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800edec:	eee7 6a27 	vfma.f32	s13, s14, s15
 800edf0:	d01d      	beq.n	800ee2e <forward_dense+0x366>
 800edf2:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800edf6:	2b0c      	cmp	r3, #12
 800edf8:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800edfc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ee00:	d015      	beq.n	800ee2e <forward_dense+0x366>
 800ee02:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800ee06:	2b0d      	cmp	r3, #13
 800ee08:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800ee0c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ee10:	d00d      	beq.n	800ee2e <forward_dense+0x366>
 800ee12:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800ee16:	2b0e      	cmp	r3, #14
 800ee18:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800ee1c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ee20:	d005      	beq.n	800ee2e <forward_dense+0x366>
 800ee22:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800ee26:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800ee2a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ee2e:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ee32:	444d      	add	r5, r9
 800ee34:	ece0 6a01 	vstmia	r0!, {s13}
 800ee38:	42b0      	cmp	r0, r6
 800ee3a:	f4bf aedb 	bcs.w	800ebf4 <forward_dense+0x12c>
 800ee3e:	2c00      	cmp	r4, #0
 800ee40:	f47f af02 	bne.w	800ec48 <forward_dense+0x180>
 800ee44:	f1b8 0f0f 	cmp.w	r8, #15
 800ee48:	eeb0 6a62 	vmov.f32	s12, s5
 800ee4c:	f63f af04 	bhi.w	800ec58 <forward_dense+0x190>
 800ee50:	4643      	mov	r3, r8
 800ee52:	4629      	mov	r1, r5
 800ee54:	463a      	mov	r2, r7
 800ee56:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800eecc <forward_dense+0x404>
 800ee5a:	e770      	b.n	800ed3e <forward_dense+0x276>
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	deff      	udf	#255	; 0xff
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	deff      	udf	#255	; 0xff
 800ee66:	2300      	movs	r3, #0
 800ee68:	685b      	ldr	r3, [r3, #4]
 800ee6a:	deff      	udf	#255	; 0xff
 800ee6c:	b1a4      	cbz	r4, 800ee98 <forward_dense+0x3d0>
 800ee6e:	f8d4 c000 	ldr.w	ip, [r4]
 800ee72:	463b      	mov	r3, r7
 800ee74:	4629      	mov	r1, r5
 800ee76:	9600      	str	r6, [sp, #0]
 800ee78:	4652      	mov	r2, sl
 800ee7a:	9803      	ldr	r0, [sp, #12]
 800ee7c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800ee80:	f7ff fd64 	bl	800e94c <ai_dict4_dot_array_f32>
 800ee84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee86:	3404      	adds	r4, #4
 800ee88:	444d      	add	r5, r9
 800ee8a:	f84b 3b04 	str.w	r3, [fp], #4
 800ee8e:	45c3      	cmp	fp, r8
 800ee90:	f4bf aead 	bcs.w	800ebee <forward_dense+0x126>
 800ee94:	2c00      	cmp	r4, #0
 800ee96:	d1ea      	bne.n	800ee6e <forward_dense+0x3a6>
 800ee98:	4634      	mov	r4, r6
 800ee9a:	4646      	mov	r6, r8
 800ee9c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800eea0:	463b      	mov	r3, r7
 800eea2:	4629      	mov	r1, r5
 800eea4:	9400      	str	r4, [sp, #0]
 800eea6:	4652      	mov	r2, sl
 800eea8:	4640      	mov	r0, r8
 800eeaa:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800eeae:	f7ff fd4d 	bl	800e94c <ai_dict4_dot_array_f32>
 800eeb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eeb4:	444d      	add	r5, r9
 800eeb6:	f84b 3b04 	str.w	r3, [fp], #4
 800eeba:	45b3      	cmp	fp, r6
 800eebc:	d3f0      	bcc.n	800eea0 <forward_dense+0x3d8>
 800eebe:	46a0      	mov	r8, r4
 800eec0:	e698      	b.n	800ebf4 <forward_dense+0x12c>
 800eec2:	9006      	str	r0, [sp, #24]
 800eec4:	e62a      	b.n	800eb1c <forward_dense+0x54>
 800eec6:	9306      	str	r3, [sp, #24]
 800eec8:	e628      	b.n	800eb1c <forward_dense+0x54>
 800eeca:	bf00      	nop
 800eecc:	00000000 	.word	0x00000000
 800eed0:	4634      	mov	r4, r6
 800eed2:	4646      	mov	r6, r8
 800eed4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800eed8:	463b      	mov	r3, r7
 800eeda:	4629      	mov	r1, r5
 800eedc:	9400      	str	r4, [sp, #0]
 800eede:	4652      	mov	r2, sl
 800eee0:	4640      	mov	r0, r8
 800eee2:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800eee6:	f7ff fb01 	bl	800e4ec <ai_dict8_dot_array_f32>
 800eeea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eeec:	444d      	add	r5, r9
 800eeee:	f84b 3b04 	str.w	r3, [fp], #4
 800eef2:	45b3      	cmp	fp, r6
 800eef4:	d3f0      	bcc.n	800eed8 <forward_dense+0x410>
 800eef6:	46a0      	mov	r8, r4
 800eef8:	e67c      	b.n	800ebf4 <forward_dense+0x12c>
 800eefa:	b011      	add	sp, #68	; 0x44
 800eefc:	ecbd 8b08 	vpop	{d8-d11}
 800ef00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef04:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800ef08:	e626      	b.n	800eb58 <forward_dense+0x90>
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	9306      	str	r3, [sp, #24]
 800ef0e:	e605      	b.n	800eb1c <forward_dense+0x54>
 800ef10:	9308      	str	r3, [sp, #32]
 800ef12:	e5f6      	b.n	800eb02 <forward_dense+0x3a>

0800ef14 <nl_func_relu_generic_array_f32>:
 800ef14:	b470      	push	{r4, r5, r6}
 800ef16:	edd3 6a02 	vldr	s13, [r3, #8]
 800ef1a:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800ef1e:	6985      	ldr	r5, [r0, #24]
 800ef20:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ef24:	4414      	add	r4, r2
 800ef26:	6989      	ldr	r1, [r1, #24]
 800ef28:	00a4      	lsls	r4, r4, #2
 800ef2a:	68aa      	ldr	r2, [r5, #8]
 800ef2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef30:	6888      	ldr	r0, [r1, #8]
 800ef32:	4422      	add	r2, r4
 800ef34:	ed93 7a00 	vldr	s14, [r3]
 800ef38:	4404      	add	r4, r0
 800ef3a:	ed93 6a01 	vldr	s12, [r3, #4]
 800ef3e:	d420      	bmi.n	800ef82 <nl_func_relu_generic_array_f32+0x6e>
 800ef40:	42a0      	cmp	r0, r4
 800ef42:	d83b      	bhi.n	800efbc <nl_func_relu_generic_array_f32+0xa8>
 800ef44:	1d23      	adds	r3, r4, #4
 800ef46:	3204      	adds	r2, #4
 800ef48:	e010      	b.n	800ef6c <nl_func_relu_generic_array_f32+0x58>
 800ef4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ef4e:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800ef52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef56:	d501      	bpl.n	800ef5c <nl_func_relu_generic_array_f32+0x48>
 800ef58:	ee65 7a86 	vmul.f32	s15, s11, s12
 800ef5c:	f1a3 0408 	sub.w	r4, r3, #8
 800ef60:	ed62 7a01 	vstmdb	r2!, {s15}
 800ef64:	4603      	mov	r3, r0
 800ef66:	6888      	ldr	r0, [r1, #8]
 800ef68:	4284      	cmp	r4, r0
 800ef6a:	d327      	bcc.n	800efbc <nl_func_relu_generic_array_f32+0xa8>
 800ef6c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ef70:	1f18      	subs	r0, r3, #4
 800ef72:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ef76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef7a:	d4e6      	bmi.n	800ef4a <nl_func_relu_generic_array_f32+0x36>
 800ef7c:	eef0 7a66 	vmov.f32	s15, s13
 800ef80:	e7ec      	b.n	800ef5c <nl_func_relu_generic_array_f32+0x48>
 800ef82:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ef86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef8a:	d019      	beq.n	800efc0 <nl_func_relu_generic_array_f32+0xac>
 800ef8c:	42a0      	cmp	r0, r4
 800ef8e:	d815      	bhi.n	800efbc <nl_func_relu_generic_array_f32+0xa8>
 800ef90:	1d23      	adds	r3, r4, #4
 800ef92:	3204      	adds	r2, #4
 800ef94:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ef98:	1f18      	subs	r0, r3, #4
 800ef9a:	f1a3 0508 	sub.w	r5, r3, #8
 800ef9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800efa2:	4603      	mov	r3, r0
 800efa4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800efa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efac:	ee66 6a86 	vmul.f32	s13, s13, s12
 800efb0:	d51c      	bpl.n	800efec <nl_func_relu_generic_array_f32+0xd8>
 800efb2:	ed62 6a01 	vstmdb	r2!, {s13}
 800efb6:	6888      	ldr	r0, [r1, #8]
 800efb8:	42a8      	cmp	r0, r5
 800efba:	d9eb      	bls.n	800ef94 <nl_func_relu_generic_array_f32+0x80>
 800efbc:	bc70      	pop	{r4, r5, r6}
 800efbe:	4770      	bx	lr
 800efc0:	42a0      	cmp	r0, r4
 800efc2:	d8fb      	bhi.n	800efbc <nl_func_relu_generic_array_f32+0xa8>
 800efc4:	1d23      	adds	r3, r4, #4
 800efc6:	3204      	adds	r2, #4
 800efc8:	2600      	movs	r6, #0
 800efca:	ed53 7a01 	vldr	s15, [r3, #-4]
 800efce:	1f18      	subs	r0, r3, #4
 800efd0:	f1a3 0508 	sub.w	r5, r3, #8
 800efd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800efd8:	4603      	mov	r3, r0
 800efda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efde:	db0b      	blt.n	800eff8 <nl_func_relu_generic_array_f32+0xe4>
 800efe0:	ed62 7a01 	vstmdb	r2!, {s15}
 800efe4:	6888      	ldr	r0, [r1, #8]
 800efe6:	42a8      	cmp	r0, r5
 800efe8:	d9ef      	bls.n	800efca <nl_func_relu_generic_array_f32+0xb6>
 800efea:	e7e7      	b.n	800efbc <nl_func_relu_generic_array_f32+0xa8>
 800efec:	ed62 7a01 	vstmdb	r2!, {s15}
 800eff0:	6888      	ldr	r0, [r1, #8]
 800eff2:	42a8      	cmp	r0, r5
 800eff4:	d9ce      	bls.n	800ef94 <nl_func_relu_generic_array_f32+0x80>
 800eff6:	e7e1      	b.n	800efbc <nl_func_relu_generic_array_f32+0xa8>
 800eff8:	f842 6d04 	str.w	r6, [r2, #-4]!
 800effc:	6888      	ldr	r0, [r1, #8]
 800effe:	42a8      	cmp	r0, r5
 800f000:	d9e3      	bls.n	800efca <nl_func_relu_generic_array_f32+0xb6>
 800f002:	e7db      	b.n	800efbc <nl_func_relu_generic_array_f32+0xa8>

0800f004 <forward_relu>:
 800f004:	6982      	ldr	r2, [r0, #24]
 800f006:	8813      	ldrh	r3, [r2, #0]
 800f008:	b333      	cbz	r3, 800f058 <forward_relu+0x54>
 800f00a:	6852      	ldr	r2, [r2, #4]
 800f00c:	6851      	ldr	r1, [r2, #4]
 800f00e:	b101      	cbz	r1, 800f012 <forward_relu+0xe>
 800f010:	6809      	ldr	r1, [r1, #0]
 800f012:	2b01      	cmp	r3, #1
 800f014:	d91d      	bls.n	800f052 <forward_relu+0x4e>
 800f016:	b4f0      	push	{r4, r5, r6, r7}
 800f018:	6917      	ldr	r7, [r2, #16]
 800f01a:	b107      	cbz	r7, 800f01e <forward_relu+0x1a>
 800f01c:	683f      	ldr	r7, [r7, #0]
 800f01e:	688c      	ldr	r4, [r1, #8]
 800f020:	69c3      	ldr	r3, [r0, #28]
 800f022:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800f026:	2b00      	cmp	r3, #0
 800f028:	d043      	beq.n	800f0b2 <forward_relu+0xae>
 800f02a:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800f02e:	2d01      	cmp	r5, #1
 800f030:	d014      	beq.n	800f05c <forward_relu+0x58>
 800f032:	2c00      	cmp	r4, #0
 800f034:	d06d      	beq.n	800f112 <forward_relu+0x10e>
 800f036:	68ce      	ldr	r6, [r1, #12]
 800f038:	2201      	movs	r2, #1
 800f03a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800f03e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f042:	42a6      	cmp	r6, r4
 800f044:	fb05 f202 	mul.w	r2, r5, r2
 800f048:	d1f9      	bne.n	800f03e <forward_relu+0x3a>
 800f04a:	4638      	mov	r0, r7
 800f04c:	bcf0      	pop	{r4, r5, r6, r7}
 800f04e:	f7ff bf61 	b.w	800ef14 <nl_func_relu_generic_array_f32>
 800f052:	2300      	movs	r3, #0
 800f054:	685b      	ldr	r3, [r3, #4]
 800f056:	deff      	udf	#255	; 0xff
 800f058:	685b      	ldr	r3, [r3, #4]
 800f05a:	deff      	udf	#255	; 0xff
 800f05c:	69ba      	ldr	r2, [r7, #24]
 800f05e:	698e      	ldr	r6, [r1, #24]
 800f060:	6890      	ldr	r0, [r2, #8]
 800f062:	ed93 7a00 	vldr	s14, [r3]
 800f066:	68b2      	ldr	r2, [r6, #8]
 800f068:	b184      	cbz	r4, 800f08c <forward_relu+0x88>
 800f06a:	68cf      	ldr	r7, [r1, #12]
 800f06c:	4629      	mov	r1, r5
 800f06e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800f072:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800f076:	42a7      	cmp	r7, r4
 800f078:	fb03 f101 	mul.w	r1, r3, r1
 800f07c:	d1f9      	bne.n	800f072 <forward_relu+0x6e>
 800f07e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f082:	440b      	add	r3, r1
 800f084:	009b      	lsls	r3, r3, #2
 800f086:	18d2      	adds	r2, r2, r3
 800f088:	4418      	add	r0, r3
 800f08a:	d238      	bcs.n	800f0fe <forward_relu+0xfa>
 800f08c:	1d13      	adds	r3, r2, #4
 800f08e:	2400      	movs	r4, #0
 800f090:	1d02      	adds	r2, r0, #4
 800f092:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f096:	1f19      	subs	r1, r3, #4
 800f098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a0:	d82f      	bhi.n	800f102 <forward_relu+0xfe>
 800f0a2:	ed62 7a01 	vstmdb	r2!, {s15}
 800f0a6:	3b08      	subs	r3, #8
 800f0a8:	68b0      	ldr	r0, [r6, #8]
 800f0aa:	4298      	cmp	r0, r3
 800f0ac:	d827      	bhi.n	800f0fe <forward_relu+0xfa>
 800f0ae:	460b      	mov	r3, r1
 800f0b0:	e7ef      	b.n	800f092 <forward_relu+0x8e>
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	698d      	ldr	r5, [r1, #24]
 800f0b6:	689a      	ldr	r2, [r3, #8]
 800f0b8:	68ab      	ldr	r3, [r5, #8]
 800f0ba:	b184      	cbz	r4, 800f0de <forward_relu+0xda>
 800f0bc:	68ce      	ldr	r6, [r1, #12]
 800f0be:	2101      	movs	r1, #1
 800f0c0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800f0c4:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 800f0c8:	42a6      	cmp	r6, r4
 800f0ca:	fb00 f101 	mul.w	r1, r0, r1
 800f0ce:	d1f9      	bne.n	800f0c4 <forward_relu+0xc0>
 800f0d0:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800f0d4:	4408      	add	r0, r1
 800f0d6:	0081      	lsls	r1, r0, #2
 800f0d8:	185b      	adds	r3, r3, r1
 800f0da:	440a      	add	r2, r1
 800f0dc:	d20f      	bcs.n	800f0fe <forward_relu+0xfa>
 800f0de:	3304      	adds	r3, #4
 800f0e0:	1d11      	adds	r1, r2, #4
 800f0e2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800f118 <forward_relu+0x114>
 800f0e6:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f0ea:	f1a3 0208 	sub.w	r2, r3, #8
 800f0ee:	3b04      	subs	r3, #4
 800f0f0:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800f0f4:	ed61 7a01 	vstmdb	r1!, {s15}
 800f0f8:	68a8      	ldr	r0, [r5, #8]
 800f0fa:	4290      	cmp	r0, r2
 800f0fc:	d9f3      	bls.n	800f0e6 <forward_relu+0xe2>
 800f0fe:	bcf0      	pop	{r4, r5, r6, r7}
 800f100:	4770      	bx	lr
 800f102:	f842 4d04 	str.w	r4, [r2, #-4]!
 800f106:	3b08      	subs	r3, #8
 800f108:	68b0      	ldr	r0, [r6, #8]
 800f10a:	4298      	cmp	r0, r3
 800f10c:	d8f7      	bhi.n	800f0fe <forward_relu+0xfa>
 800f10e:	460b      	mov	r3, r1
 800f110:	e7bf      	b.n	800f092 <forward_relu+0x8e>
 800f112:	2201      	movs	r2, #1
 800f114:	e799      	b.n	800f04a <forward_relu+0x46>
 800f116:	bf00      	nop
 800f118:	00000000 	.word	0x00000000

0800f11c <ai_check_custom_types>:
 800f11c:	4b13      	ldr	r3, [pc, #76]	; (800f16c <ai_check_custom_types+0x50>)
 800f11e:	b082      	sub	sp, #8
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	9301      	str	r3, [sp, #4]
 800f124:	b118      	cbz	r0, 800f12e <ai_check_custom_types+0x12>
 800f126:	7803      	ldrb	r3, [r0, #0]
 800f128:	2b03      	cmp	r3, #3
 800f12a:	d002      	beq.n	800f132 <ai_check_custom_types+0x16>
 800f12c:	2000      	movs	r0, #0
 800f12e:	b002      	add	sp, #8
 800f130:	4770      	bx	lr
 800f132:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f136:	4293      	cmp	r3, r2
 800f138:	d004      	beq.n	800f144 <ai_check_custom_types+0x28>
 800f13a:	2001      	movs	r0, #1
 800f13c:	f080 0001 	eor.w	r0, r0, #1
 800f140:	b002      	add	sp, #8
 800f142:	4770      	bx	lr
 800f144:	7842      	ldrb	r2, [r0, #1]
 800f146:	3001      	adds	r0, #1
 800f148:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d1f4      	bne.n	800f13a <ai_check_custom_types+0x1e>
 800f150:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800f154:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f158:	429a      	cmp	r2, r3
 800f15a:	d1ee      	bne.n	800f13a <ai_check_custom_types+0x1e>
 800f15c:	7842      	ldrb	r2, [r0, #1]
 800f15e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f162:	429a      	cmp	r2, r3
 800f164:	d1e9      	bne.n	800f13a <ai_check_custom_types+0x1e>
 800f166:	2000      	movs	r0, #0
 800f168:	e7e8      	b.n	800f13c <ai_check_custom_types+0x20>
 800f16a:	bf00      	nop
 800f16c:	0800f3e0 	.word	0x0800f3e0

0800f170 <ai_layers_init_all>:
 800f170:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800f172:	b16a      	cbz	r2, 800f190 <ai_layers_init_all+0x20>
 800f174:	6913      	ldr	r3, [r2, #16]
 800f176:	60d0      	str	r0, [r2, #12]
 800f178:	429a      	cmp	r2, r3
 800f17a:	f04f 0201 	mov.w	r2, #1
 800f17e:	d007      	beq.n	800f190 <ai_layers_init_all+0x20>
 800f180:	b133      	cbz	r3, 800f190 <ai_layers_init_all+0x20>
 800f182:	6919      	ldr	r1, [r3, #16]
 800f184:	3201      	adds	r2, #1
 800f186:	60d8      	str	r0, [r3, #12]
 800f188:	4299      	cmp	r1, r3
 800f18a:	bf18      	it	ne
 800f18c:	2900      	cmpne	r1, #0
 800f18e:	d101      	bne.n	800f194 <ai_layers_init_all+0x24>
 800f190:	4610      	mov	r0, r2
 800f192:	4770      	bx	lr
 800f194:	460b      	mov	r3, r1
 800f196:	e7f4      	b.n	800f182 <ai_layers_init_all+0x12>

0800f198 <ai_layers_post_init_all>:
 800f198:	b538      	push	{r3, r4, r5, lr}
 800f19a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800f19c:	b184      	cbz	r4, 800f1c0 <ai_layers_post_init_all+0x28>
 800f19e:	2500      	movs	r5, #0
 800f1a0:	6863      	ldr	r3, [r4, #4]
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	07db      	lsls	r3, r3, #31
 800f1a6:	d503      	bpl.n	800f1b0 <ai_layers_post_init_all+0x18>
 800f1a8:	6a23      	ldr	r3, [r4, #32]
 800f1aa:	b10b      	cbz	r3, 800f1b0 <ai_layers_post_init_all+0x18>
 800f1ac:	3501      	adds	r5, #1
 800f1ae:	4798      	blx	r3
 800f1b0:	6923      	ldr	r3, [r4, #16]
 800f1b2:	429c      	cmp	r4, r3
 800f1b4:	bf18      	it	ne
 800f1b6:	2b00      	cmpne	r3, #0
 800f1b8:	461c      	mov	r4, r3
 800f1ba:	d1f1      	bne.n	800f1a0 <ai_layers_post_init_all+0x8>
 800f1bc:	4628      	mov	r0, r5
 800f1be:	bd38      	pop	{r3, r4, r5, pc}
 800f1c0:	4625      	mov	r5, r4
 800f1c2:	e7fb      	b.n	800f1bc <ai_layers_post_init_all+0x24>

0800f1c4 <ai_layers_forward_all>:
 800f1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c8:	6d87      	ldr	r7, [r0, #88]	; 0x58
 800f1ca:	4604      	mov	r4, r0
 800f1cc:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800f1ce:	2f00      	cmp	r7, #0
 800f1d0:	d02b      	beq.n	800f22a <ai_layers_forward_all+0x66>
 800f1d2:	2d00      	cmp	r5, #0
 800f1d4:	d03d      	beq.n	800f252 <ai_layers_forward_all+0x8e>
 800f1d6:	2600      	movs	r6, #0
 800f1d8:	6545      	str	r5, [r0, #84]	; 0x54
 800f1da:	4629      	mov	r1, r5
 800f1dc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800f1de:	2001      	movs	r0, #1
 800f1e0:	46b0      	mov	r8, r6
 800f1e2:	47b8      	blx	r7
 800f1e4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800f1e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f1e8:	2002      	movs	r0, #2
 800f1ea:	47b8      	blx	r7
 800f1ec:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800f1ee:	696b      	ldr	r3, [r5, #20]
 800f1f0:	4628      	mov	r0, r5
 800f1f2:	4798      	blx	r3
 800f1f4:	692b      	ldr	r3, [r5, #16]
 800f1f6:	2003      	movs	r0, #3
 800f1f8:	429d      	cmp	r5, r3
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	d009      	beq.n	800f212 <ai_layers_forward_all+0x4e>
 800f1fe:	6563      	str	r3, [r4, #84]	; 0x54
 800f200:	3601      	adds	r6, #1
 800f202:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f204:	47b8      	blx	r7
 800f206:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800f208:	2900      	cmp	r1, #0
 800f20a:	d1ec      	bne.n	800f1e6 <ai_layers_forward_all+0x22>
 800f20c:	4630      	mov	r0, r6
 800f20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f212:	2100      	movs	r1, #0
 800f214:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 800f218:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f21a:	3601      	adds	r6, #1
 800f21c:	47b8      	blx	r7
 800f21e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800f220:	2900      	cmp	r1, #0
 800f222:	d1e0      	bne.n	800f1e6 <ai_layers_forward_all+0x22>
 800f224:	4630      	mov	r0, r6
 800f226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f22a:	b195      	cbz	r5, 800f252 <ai_layers_forward_all+0x8e>
 800f22c:	463e      	mov	r6, r7
 800f22e:	6545      	str	r5, [r0, #84]	; 0x54
 800f230:	696b      	ldr	r3, [r5, #20]
 800f232:	4628      	mov	r0, r5
 800f234:	4798      	blx	r3
 800f236:	692b      	ldr	r3, [r5, #16]
 800f238:	3601      	adds	r6, #1
 800f23a:	42ab      	cmp	r3, r5
 800f23c:	461d      	mov	r5, r3
 800f23e:	d003      	beq.n	800f248 <ai_layers_forward_all+0x84>
 800f240:	6563      	str	r3, [r4, #84]	; 0x54
 800f242:	2b00      	cmp	r3, #0
 800f244:	d1f4      	bne.n	800f230 <ai_layers_forward_all+0x6c>
 800f246:	e7e1      	b.n	800f20c <ai_layers_forward_all+0x48>
 800f248:	2300      	movs	r3, #0
 800f24a:	4630      	mov	r0, r6
 800f24c:	6563      	str	r3, [r4, #84]	; 0x54
 800f24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f252:	462e      	mov	r6, r5
 800f254:	4630      	mov	r0, r6
 800f256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f25a:	bf00      	nop

0800f25c <ai_array_to_buffer_fmt>:
 800f25c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800f260:	2b02      	cmp	r3, #2
 800f262:	d02e      	beq.n	800f2c2 <ai_array_to_buffer_fmt+0x66>
 800f264:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800f268:	4a1a      	ldr	r2, [pc, #104]	; (800f2d4 <ai_array_to_buffer_fmt+0x78>)
 800f26a:	4293      	cmp	r3, r2
 800f26c:	d00e      	beq.n	800f28c <ai_array_to_buffer_fmt+0x30>
 800f26e:	dd11      	ble.n	800f294 <ai_array_to_buffer_fmt+0x38>
 800f270:	4a19      	ldr	r2, [pc, #100]	; (800f2d8 <ai_array_to_buffer_fmt+0x7c>)
 800f272:	4293      	cmp	r3, r2
 800f274:	d00a      	beq.n	800f28c <ai_array_to_buffer_fmt+0x30>
 800f276:	dd18      	ble.n	800f2aa <ai_array_to_buffer_fmt+0x4e>
 800f278:	4a18      	ldr	r2, [pc, #96]	; (800f2dc <ai_array_to_buffer_fmt+0x80>)
 800f27a:	4293      	cmp	r3, r2
 800f27c:	d006      	beq.n	800f28c <ai_array_to_buffer_fmt+0x30>
 800f27e:	4a18      	ldr	r2, [pc, #96]	; (800f2e0 <ai_array_to_buffer_fmt+0x84>)
 800f280:	4293      	cmp	r3, r2
 800f282:	d003      	beq.n	800f28c <ai_array_to_buffer_fmt+0x30>
 800f284:	4a17      	ldr	r2, [pc, #92]	; (800f2e4 <ai_array_to_buffer_fmt+0x88>)
 800f286:	4293      	cmp	r3, r2
 800f288:	d000      	beq.n	800f28c <ai_array_to_buffer_fmt+0x30>
 800f28a:	2340      	movs	r3, #64	; 0x40
 800f28c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800f290:	4318      	orrs	r0, r3
 800f292:	4770      	bx	lr
 800f294:	4a14      	ldr	r2, [pc, #80]	; (800f2e8 <ai_array_to_buffer_fmt+0x8c>)
 800f296:	4293      	cmp	r3, r2
 800f298:	d0f8      	beq.n	800f28c <ai_array_to_buffer_fmt+0x30>
 800f29a:	dd06      	ble.n	800f2aa <ai_array_to_buffer_fmt+0x4e>
 800f29c:	4a13      	ldr	r2, [pc, #76]	; (800f2ec <ai_array_to_buffer_fmt+0x90>)
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	d0f4      	beq.n	800f28c <ai_array_to_buffer_fmt+0x30>
 800f2a2:	320f      	adds	r2, #15
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	d0f1      	beq.n	800f28c <ai_array_to_buffer_fmt+0x30>
 800f2a8:	e7ef      	b.n	800f28a <ai_array_to_buffer_fmt+0x2e>
 800f2aa:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	d0ec      	beq.n	800f28c <ai_array_to_buffer_fmt+0x30>
 800f2b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d1e7      	bne.n	800f28a <ai_array_to_buffer_fmt+0x2e>
 800f2ba:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800f2be:	4318      	orrs	r0, r3
 800f2c0:	4770      	bx	lr
 800f2c2:	4b0b      	ldr	r3, [pc, #44]	; (800f2f0 <ai_array_to_buffer_fmt+0x94>)
 800f2c4:	4003      	ands	r3, r0
 800f2c6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800f2ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f2ce:	4318      	orrs	r0, r3
 800f2d0:	4770      	bx	lr
 800f2d2:	bf00      	nop
 800f2d4:	00060440 	.word	0x00060440
 800f2d8:	00840447 	.word	0x00840447
 800f2dc:	0084084f 	.word	0x0084084f
 800f2e0:	01821040 	.word	0x01821040
 800f2e4:	00840840 	.word	0x00840840
 800f2e8:	00040447 	.word	0x00040447
 800f2ec:	00040840 	.word	0x00040840
 800f2f0:	00803fff 	.word	0x00803fff

0800f2f4 <ai_array_get_byte_size>:
 800f2f4:	b1e1      	cbz	r1, 800f330 <ai_array_get_byte_size+0x3c>
 800f2f6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800f2fa:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800f2fe:	b410      	push	{r4}
 800f300:	f3c0 3482 	ubfx	r4, r0, #14, #3
 800f304:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800f308:	4423      	add	r3, r4
 800f30a:	2804      	cmp	r0, #4
 800f30c:	fb01 f103 	mul.w	r1, r1, r3
 800f310:	f101 0107 	add.w	r1, r1, #7
 800f314:	f021 0107 	bic.w	r1, r1, #7
 800f318:	fa21 f102 	lsr.w	r1, r1, r2
 800f31c:	d00a      	beq.n	800f334 <ai_array_get_byte_size+0x40>
 800f31e:	2808      	cmp	r0, #8
 800f320:	d101      	bne.n	800f326 <ai_array_get_byte_size+0x32>
 800f322:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800f326:	3107      	adds	r1, #7
 800f328:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f32c:	08c8      	lsrs	r0, r1, #3
 800f32e:	4770      	bx	lr
 800f330:	4608      	mov	r0, r1
 800f332:	4770      	bx	lr
 800f334:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800f338:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f33c:	3107      	adds	r1, #7
 800f33e:	08c8      	lsrs	r0, r1, #3
 800f340:	4770      	bx	lr
 800f342:	bf00      	nop

0800f344 <__libc_init_array>:
 800f344:	b570      	push	{r4, r5, r6, lr}
 800f346:	4d0d      	ldr	r5, [pc, #52]	; (800f37c <__libc_init_array+0x38>)
 800f348:	4c0d      	ldr	r4, [pc, #52]	; (800f380 <__libc_init_array+0x3c>)
 800f34a:	1b64      	subs	r4, r4, r5
 800f34c:	10a4      	asrs	r4, r4, #2
 800f34e:	2600      	movs	r6, #0
 800f350:	42a6      	cmp	r6, r4
 800f352:	d109      	bne.n	800f368 <__libc_init_array+0x24>
 800f354:	4d0b      	ldr	r5, [pc, #44]	; (800f384 <__libc_init_array+0x40>)
 800f356:	4c0c      	ldr	r4, [pc, #48]	; (800f388 <__libc_init_array+0x44>)
 800f358:	f000 f82e 	bl	800f3b8 <_init>
 800f35c:	1b64      	subs	r4, r4, r5
 800f35e:	10a4      	asrs	r4, r4, #2
 800f360:	2600      	movs	r6, #0
 800f362:	42a6      	cmp	r6, r4
 800f364:	d105      	bne.n	800f372 <__libc_init_array+0x2e>
 800f366:	bd70      	pop	{r4, r5, r6, pc}
 800f368:	f855 3b04 	ldr.w	r3, [r5], #4
 800f36c:	4798      	blx	r3
 800f36e:	3601      	adds	r6, #1
 800f370:	e7ee      	b.n	800f350 <__libc_init_array+0xc>
 800f372:	f855 3b04 	ldr.w	r3, [r5], #4
 800f376:	4798      	blx	r3
 800f378:	3601      	adds	r6, #1
 800f37a:	e7f2      	b.n	800f362 <__libc_init_array+0x1e>
 800f37c:	0800fc84 	.word	0x0800fc84
 800f380:	0800fc84 	.word	0x0800fc84
 800f384:	0800fc84 	.word	0x0800fc84
 800f388:	0800fc88 	.word	0x0800fc88

0800f38c <memcpy>:
 800f38c:	440a      	add	r2, r1
 800f38e:	4291      	cmp	r1, r2
 800f390:	f100 33ff 	add.w	r3, r0, #4294967295
 800f394:	d100      	bne.n	800f398 <memcpy+0xc>
 800f396:	4770      	bx	lr
 800f398:	b510      	push	{r4, lr}
 800f39a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f39e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3a2:	4291      	cmp	r1, r2
 800f3a4:	d1f9      	bne.n	800f39a <memcpy+0xe>
 800f3a6:	bd10      	pop	{r4, pc}

0800f3a8 <memset>:
 800f3a8:	4402      	add	r2, r0
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	d100      	bne.n	800f3b2 <memset+0xa>
 800f3b0:	4770      	bx	lr
 800f3b2:	f803 1b01 	strb.w	r1, [r3], #1
 800f3b6:	e7f9      	b.n	800f3ac <memset+0x4>

0800f3b8 <_init>:
 800f3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ba:	bf00      	nop
 800f3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3be:	bc08      	pop	{r3}
 800f3c0:	469e      	mov	lr, r3
 800f3c2:	4770      	bx	lr

0800f3c4 <_fini>:
 800f3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c6:	bf00      	nop
 800f3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ca:	bc08      	pop	{r3}
 800f3cc:	469e      	mov	lr, r3
 800f3ce:	4770      	bx	lr
