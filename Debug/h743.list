
h743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1ec  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  0800d484  0800d484  0001d484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d634  0800d634  0001d634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d63c  0800d63c  0001d63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d640  0800d640  0001d640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000034  20000000  0800d644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000534c  20000034  0800d678  00020034  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20005380  0800d678  00025380  2**0
                  ALLOC
  9 .rxBuf        00001014  24000000  24000000  00030000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003556f  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000046e7  00000000  00000000  000555d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001620  00000000  00000000  00059cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000014b8  00000000  00000000  0005b2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003a1db  00000000  00000000  0005c790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001f9e5  00000000  00000000  0009696b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00177603  00000000  00000000  000b6350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0022d953  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005d14  00000000  00000000  0022d9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000034 	.word	0x20000034
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d46c 	.word	0x0800d46c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000038 	.word	0x20000038
 80002d4:	0800d46c 	.word	0x0800d46c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <initModelPredictiveControl>:
 * This function implements model predictive control (MPC)
 *
 */

int states[7] = {1,3,2,6,4,5,0};
void initModelPredictiveControl(){
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
	C1 = 10000*(1 - (0.75/(16130*0.0004)));
 80005d4:	4b59      	ldr	r3, [pc, #356]	; (800073c <initModelPredictiveControl+0x16c>)
 80005d6:	f242 2285 	movw	r2, #8837	; 0x2285
 80005da:	601a      	str	r2, [r3, #0]
	C2 = 10000*(1/(16130*0.0004));
 80005dc:	4b58      	ldr	r3, [pc, #352]	; (8000740 <initModelPredictiveControl+0x170>)
 80005de:	f240 620d 	movw	r2, #1549	; 0x60d
 80005e2:	601a      	str	r2, [r3, #0]

	for(i=0;i<6;i++){
 80005e4:	4b57      	ldr	r3, [pc, #348]	; (8000744 <initModelPredictiveControl+0x174>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	e09b      	b.n	8000724 <initModelPredictiveControl+0x154>
		Sa = states[i] & 0x01;
 80005ec:	4b55      	ldr	r3, [pc, #340]	; (8000744 <initModelPredictiveControl+0x174>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a55      	ldr	r2, [pc, #340]	; (8000748 <initModelPredictiveControl+0x178>)
 80005f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b53      	ldr	r3, [pc, #332]	; (800074c <initModelPredictiveControl+0x17c>)
 8000600:	701a      	strb	r2, [r3, #0]
		Sb = (states[i]>>1) & 0x01;
 8000602:	4b50      	ldr	r3, [pc, #320]	; (8000744 <initModelPredictiveControl+0x174>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a50      	ldr	r2, [pc, #320]	; (8000748 <initModelPredictiveControl+0x178>)
 8000608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800060c:	105b      	asrs	r3, r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b4e      	ldr	r3, [pc, #312]	; (8000750 <initModelPredictiveControl+0x180>)
 8000618:	701a      	strb	r2, [r3, #0]
		Sc = (states[i]>>2) & 0x01;
 800061a:	4b4a      	ldr	r3, [pc, #296]	; (8000744 <initModelPredictiveControl+0x174>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a4a      	ldr	r2, [pc, #296]	; (8000748 <initModelPredictiveControl+0x178>)
 8000620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000624:	109b      	asrs	r3, r3, #2
 8000626:	b2db      	uxtb	r3, r3
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b49      	ldr	r3, [pc, #292]	; (8000754 <initModelPredictiveControl+0x184>)
 8000630:	701a      	strb	r2, [r3, #0]

		Varray[i][0] = (V/100)*((2*Sa-Sb-Sc))/3;
 8000632:	4b49      	ldr	r3, [pc, #292]	; (8000758 <initModelPredictiveControl+0x188>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	4a49      	ldr	r2, [pc, #292]	; (800075c <initModelPredictiveControl+0x18c>)
 8000638:	fba2 2303 	umull	r2, r3, r2, r3
 800063c:	095b      	lsrs	r3, r3, #5
 800063e:	b29b      	uxth	r3, r3
 8000640:	4619      	mov	r1, r3
 8000642:	4b42      	ldr	r3, [pc, #264]	; (800074c <initModelPredictiveControl+0x17c>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	4a41      	ldr	r2, [pc, #260]	; (8000750 <initModelPredictiveControl+0x180>)
 800064a:	7812      	ldrb	r2, [r2, #0]
 800064c:	1a9b      	subs	r3, r3, r2
 800064e:	4a41      	ldr	r2, [pc, #260]	; (8000754 <initModelPredictiveControl+0x184>)
 8000650:	7812      	ldrb	r2, [r2, #0]
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	fb03 f301 	mul.w	r3, r3, r1
 8000658:	4a41      	ldr	r2, [pc, #260]	; (8000760 <initModelPredictiveControl+0x190>)
 800065a:	fb82 1203 	smull	r1, r2, r2, r3
 800065e:	17db      	asrs	r3, r3, #31
 8000660:	1ad1      	subs	r1, r2, r3
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <initModelPredictiveControl+0x174>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	ee07 1a90 	vmov	s15, r1
 800066a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800066e:	493d      	ldr	r1, [pc, #244]	; (8000764 <initModelPredictiveControl+0x194>)
 8000670:	4613      	mov	r3, r2
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	4413      	add	r3, r2
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	440b      	add	r3, r1
 800067a:	edc3 7a00 	vstr	s15, [r3]
		Varray[i][1] = (V/100)*((2*Sb-Sa-Sc))/3;
 800067e:	4b36      	ldr	r3, [pc, #216]	; (8000758 <initModelPredictiveControl+0x188>)
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	4a36      	ldr	r2, [pc, #216]	; (800075c <initModelPredictiveControl+0x18c>)
 8000684:	fba2 2303 	umull	r2, r3, r2, r3
 8000688:	095b      	lsrs	r3, r3, #5
 800068a:	b29b      	uxth	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	4b30      	ldr	r3, [pc, #192]	; (8000750 <initModelPredictiveControl+0x180>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	4a2d      	ldr	r2, [pc, #180]	; (800074c <initModelPredictiveControl+0x17c>)
 8000696:	7812      	ldrb	r2, [r2, #0]
 8000698:	1a9b      	subs	r3, r3, r2
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <initModelPredictiveControl+0x184>)
 800069c:	7812      	ldrb	r2, [r2, #0]
 800069e:	1a9b      	subs	r3, r3, r2
 80006a0:	fb03 f301 	mul.w	r3, r3, r1
 80006a4:	4a2e      	ldr	r2, [pc, #184]	; (8000760 <initModelPredictiveControl+0x190>)
 80006a6:	fb82 1203 	smull	r1, r2, r2, r3
 80006aa:	17db      	asrs	r3, r3, #31
 80006ac:	1ad1      	subs	r1, r2, r3
 80006ae:	4b25      	ldr	r3, [pc, #148]	; (8000744 <initModelPredictiveControl+0x174>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	ee07 1a90 	vmov	s15, r1
 80006b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ba:	492a      	ldr	r1, [pc, #168]	; (8000764 <initModelPredictiveControl+0x194>)
 80006bc:	4613      	mov	r3, r2
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	4413      	add	r3, r2
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	440b      	add	r3, r1
 80006c6:	3304      	adds	r3, #4
 80006c8:	edc3 7a00 	vstr	s15, [r3]
		Varray[i][2] = (V/100)*((2*Sc-Sb-Sa))/3;
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <initModelPredictiveControl+0x188>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	4a22      	ldr	r2, [pc, #136]	; (800075c <initModelPredictiveControl+0x18c>)
 80006d2:	fba2 2303 	umull	r2, r3, r2, r3
 80006d6:	095b      	lsrs	r3, r3, #5
 80006d8:	b29b      	uxth	r3, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <initModelPredictiveControl+0x184>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <initModelPredictiveControl+0x180>)
 80006e4:	7812      	ldrb	r2, [r2, #0]
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	4a18      	ldr	r2, [pc, #96]	; (800074c <initModelPredictiveControl+0x17c>)
 80006ea:	7812      	ldrb	r2, [r2, #0]
 80006ec:	1a9b      	subs	r3, r3, r2
 80006ee:	fb03 f301 	mul.w	r3, r3, r1
 80006f2:	4a1b      	ldr	r2, [pc, #108]	; (8000760 <initModelPredictiveControl+0x190>)
 80006f4:	fb82 1203 	smull	r1, r2, r2, r3
 80006f8:	17db      	asrs	r3, r3, #31
 80006fa:	1ad1      	subs	r1, r2, r3
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <initModelPredictiveControl+0x174>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	ee07 1a90 	vmov	s15, r1
 8000704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000708:	4916      	ldr	r1, [pc, #88]	; (8000764 <initModelPredictiveControl+0x194>)
 800070a:	4613      	mov	r3, r2
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4413      	add	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	440b      	add	r3, r1
 8000714:	3308      	adds	r3, #8
 8000716:	edc3 7a00 	vstr	s15, [r3]
	for(i=0;i<6;i++){
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <initModelPredictiveControl+0x174>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	3301      	adds	r3, #1
 8000720:	4a08      	ldr	r2, [pc, #32]	; (8000744 <initModelPredictiveControl+0x174>)
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <initModelPredictiveControl+0x174>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b05      	cmp	r3, #5
 800072a:	f77f af5f 	ble.w	80005ec <initModelPredictiveControl+0x1c>
	}
}
 800072e:	bf00      	nop
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	20000070 	.word	0x20000070
 8000740:	2000017c 	.word	0x2000017c
 8000744:	20000184 	.word	0x20000184
 8000748:	20000000 	.word	0x20000000
 800074c:	20000188 	.word	0x20000188
 8000750:	200000b6 	.word	0x200000b6
 8000754:	20000182 	.word	0x20000182
 8000758:	2000001e 	.word	0x2000001e
 800075c:	51eb851f 	.word	0x51eb851f
 8000760:	55555556 	.word	0x55555556
 8000764:	2000018c 	.word	0x2000018c

08000768 <modelPredictiveControl>:

int16_t lambda1 = 0;
float Vab[3];
void modelPredictiveControl(){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	computeSinCos();
 800076c:	f001 f8fe 	bl	800196c <computeSinCos>
	parkTransform(Ia,Ib,Ic,&Idq);
 8000770:	4baf      	ldr	r3, [pc, #700]	; (8000a30 <modelPredictiveControl+0x2c8>)
 8000772:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000776:	4baf      	ldr	r3, [pc, #700]	; (8000a34 <modelPredictiveControl+0x2cc>)
 8000778:	f9b3 1000 	ldrsh.w	r1, [r3]
 800077c:	4bae      	ldr	r3, [pc, #696]	; (8000a38 <modelPredictiveControl+0x2d0>)
 800077e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000782:	4bae      	ldr	r3, [pc, #696]	; (8000a3c <modelPredictiveControl+0x2d4>)
 8000784:	f001 f88a 	bl	800189c <parkTransform>
	clarkeTransform(Ia, Ib, Ic, &Ialbt);
 8000788:	4ba9      	ldr	r3, [pc, #676]	; (8000a30 <modelPredictiveControl+0x2c8>)
 800078a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800078e:	ee07 3a90 	vmov	s15, r3
 8000792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000796:	4ba7      	ldr	r3, [pc, #668]	; (8000a34 <modelPredictiveControl+0x2cc>)
 8000798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800079c:	ee07 3a10 	vmov	s14, r3
 80007a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80007a4:	4ba4      	ldr	r3, [pc, #656]	; (8000a38 <modelPredictiveControl+0x2d0>)
 80007a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007aa:	ee06 3a90 	vmov	s13, r3
 80007ae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80007b2:	48a3      	ldr	r0, [pc, #652]	; (8000a40 <modelPredictiveControl+0x2d8>)
 80007b4:	eeb0 1a66 	vmov.f32	s2, s13
 80007b8:	eef0 0a47 	vmov.f32	s1, s14
 80007bc:	eeb0 0a67 	vmov.f32	s0, s15
 80007c0:	f001 f932 	bl	8001a28 <clarkeTransform>
	clarkeTransform(Vab[0], Vab[1], Vab[2], &Valbt);
 80007c4:	4b9f      	ldr	r3, [pc, #636]	; (8000a44 <modelPredictiveControl+0x2dc>)
 80007c6:	edd3 7a00 	vldr	s15, [r3]
 80007ca:	4b9e      	ldr	r3, [pc, #632]	; (8000a44 <modelPredictiveControl+0x2dc>)
 80007cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80007d0:	4b9c      	ldr	r3, [pc, #624]	; (8000a44 <modelPredictiveControl+0x2dc>)
 80007d2:	edd3 6a02 	vldr	s13, [r3, #8]
 80007d6:	489c      	ldr	r0, [pc, #624]	; (8000a48 <modelPredictiveControl+0x2e0>)
 80007d8:	eeb0 1a66 	vmov.f32	s2, s13
 80007dc:	eef0 0a47 	vmov.f32	s1, s14
 80007e0:	eeb0 0a67 	vmov.f32	s0, s15
 80007e4:	f001 f920 	bl	8001a28 <clarkeTransform>

	IdTemp = Idq.d/1230;
 80007e8:	4b94      	ldr	r3, [pc, #592]	; (8000a3c <modelPredictiveControl+0x2d4>)
 80007ea:	ed93 7a00 	vldr	s14, [r3]
 80007ee:	eddf 6a97 	vldr	s13, [pc, #604]	; 8000a4c <modelPredictiveControl+0x2e4>
 80007f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007f6:	4b96      	ldr	r3, [pc, #600]	; (8000a50 <modelPredictiveControl+0x2e8>)
 80007f8:	edc3 7a00 	vstr	s15, [r3]
	IqTemp = Idq.q/1230;
 80007fc:	4b8f      	ldr	r3, [pc, #572]	; (8000a3c <modelPredictiveControl+0x2d4>)
 80007fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8000802:	eddf 6a92 	vldr	s13, [pc, #584]	; 8000a4c <modelPredictiveControl+0x2e4>
 8000806:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800080a:	4b92      	ldr	r3, [pc, #584]	; (8000a54 <modelPredictiveControl+0x2ec>)
 800080c:	edc3 7a00 	vstr	s15, [r3]

	cost = 100000;
 8000810:	4b91      	ldr	r3, [pc, #580]	; (8000a58 <modelPredictiveControl+0x2f0>)
 8000812:	4a92      	ldr	r2, [pc, #584]	; (8000a5c <modelPredictiveControl+0x2f4>)
 8000814:	601a      	str	r2, [r3, #0]


//	V = (Vbus/65);

	for(i=0;i<6;i++){
 8000816:	4b92      	ldr	r3, [pc, #584]	; (8000a60 <modelPredictiveControl+0x2f8>)
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	e1a2      	b.n	8000b64 <modelPredictiveControl+0x3fc>
		Va = Varray[i][0];
 800081e:	4b90      	ldr	r3, [pc, #576]	; (8000a60 <modelPredictiveControl+0x2f8>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	4990      	ldr	r1, [pc, #576]	; (8000a64 <modelPredictiveControl+0x2fc>)
 8000824:	4613      	mov	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	4413      	add	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	440b      	add	r3, r1
 800082e:	edd3 7a00 	vldr	s15, [r3]
 8000832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000836:	ee17 3a90 	vmov	r3, s15
 800083a:	b21a      	sxth	r2, r3
 800083c:	4b8a      	ldr	r3, [pc, #552]	; (8000a68 <modelPredictiveControl+0x300>)
 800083e:	801a      	strh	r2, [r3, #0]
		Vb = Varray[i][1];
 8000840:	4b87      	ldr	r3, [pc, #540]	; (8000a60 <modelPredictiveControl+0x2f8>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4987      	ldr	r1, [pc, #540]	; (8000a64 <modelPredictiveControl+0x2fc>)
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	440b      	add	r3, r1
 8000850:	3304      	adds	r3, #4
 8000852:	edd3 7a00 	vldr	s15, [r3]
 8000856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800085a:	ee17 3a90 	vmov	r3, s15
 800085e:	b21a      	sxth	r2, r3
 8000860:	4b82      	ldr	r3, [pc, #520]	; (8000a6c <modelPredictiveControl+0x304>)
 8000862:	801a      	strh	r2, [r3, #0]
		Vc = Varray[i][2];
 8000864:	4b7e      	ldr	r3, [pc, #504]	; (8000a60 <modelPredictiveControl+0x2f8>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	497e      	ldr	r1, [pc, #504]	; (8000a64 <modelPredictiveControl+0x2fc>)
 800086a:	4613      	mov	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	4413      	add	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	440b      	add	r3, r1
 8000874:	3308      	adds	r3, #8
 8000876:	edd3 7a00 	vldr	s15, [r3]
 800087a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800087e:	ee17 3a90 	vmov	r3, s15
 8000882:	b21a      	sxth	r2, r3
 8000884:	4b7a      	ldr	r3, [pc, #488]	; (8000a70 <modelPredictiveControl+0x308>)
 8000886:	801a      	strh	r2, [r3, #0]

		parkTransform(Va,Vb,Vc,&Vdq);
 8000888:	4b77      	ldr	r3, [pc, #476]	; (8000a68 <modelPredictiveControl+0x300>)
 800088a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800088e:	4b77      	ldr	r3, [pc, #476]	; (8000a6c <modelPredictiveControl+0x304>)
 8000890:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000894:	4b76      	ldr	r3, [pc, #472]	; (8000a70 <modelPredictiveControl+0x308>)
 8000896:	f9b3 2000 	ldrsh.w	r2, [r3]
 800089a:	4b76      	ldr	r3, [pc, #472]	; (8000a74 <modelPredictiveControl+0x30c>)
 800089c:	f000 fffe 	bl	800189c <parkTransform>

		costTemp = 0;
 80008a0:	4b75      	ldr	r3, [pc, #468]	; (8000a78 <modelPredictiveControl+0x310>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]

		for(j=0;j<1;j++){
 80008a6:	4b75      	ldr	r3, [pc, #468]	; (8000a7c <modelPredictiveControl+0x314>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	e115      	b.n	8000ada <modelPredictiveControl+0x372>
			IdPred = (int)((C1*IdTemp) + (wr*IqTemp/2) + (C2*Vdq.d));
 80008ae:	4b74      	ldr	r3, [pc, #464]	; (8000a80 <modelPredictiveControl+0x318>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	ee07 3a90 	vmov	s15, r3
 80008b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008ba:	4b65      	ldr	r3, [pc, #404]	; (8000a50 <modelPredictiveControl+0x2e8>)
 80008bc:	edd3 7a00 	vldr	s15, [r3]
 80008c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008c4:	4b6f      	ldr	r3, [pc, #444]	; (8000a84 <modelPredictiveControl+0x31c>)
 80008c6:	edd3 6a00 	vldr	s13, [r3]
 80008ca:	4b62      	ldr	r3, [pc, #392]	; (8000a54 <modelPredictiveControl+0x2ec>)
 80008cc:	edd3 7a00 	vldr	s15, [r3]
 80008d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80008d4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80008d8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80008dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008e0:	4b69      	ldr	r3, [pc, #420]	; (8000a88 <modelPredictiveControl+0x320>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	ee07 3a90 	vmov	s15, r3
 80008e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80008ec:	4b61      	ldr	r3, [pc, #388]	; (8000a74 <modelPredictiveControl+0x30c>)
 80008ee:	edd3 7a00 	vldr	s15, [r3]
 80008f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000902:	4b62      	ldr	r3, [pc, #392]	; (8000a8c <modelPredictiveControl+0x324>)
 8000904:	edc3 7a00 	vstr	s15, [r3]
			IqPred = (int)((C1*IqTemp) - (wr*IdTemp/2) + (C2*Vdq.q));
 8000908:	4b5d      	ldr	r3, [pc, #372]	; (8000a80 <modelPredictiveControl+0x318>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	ee07 3a90 	vmov	s15, r3
 8000910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000914:	4b4f      	ldr	r3, [pc, #316]	; (8000a54 <modelPredictiveControl+0x2ec>)
 8000916:	edd3 7a00 	vldr	s15, [r3]
 800091a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800091e:	4b59      	ldr	r3, [pc, #356]	; (8000a84 <modelPredictiveControl+0x31c>)
 8000920:	edd3 6a00 	vldr	s13, [r3]
 8000924:	4b4a      	ldr	r3, [pc, #296]	; (8000a50 <modelPredictiveControl+0x2e8>)
 8000926:	edd3 7a00 	vldr	s15, [r3]
 800092a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800092e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000932:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000936:	ee37 7a67 	vsub.f32	s14, s14, s15
 800093a:	4b53      	ldr	r3, [pc, #332]	; (8000a88 <modelPredictiveControl+0x320>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	ee07 3a90 	vmov	s15, r3
 8000942:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000946:	4b4b      	ldr	r3, [pc, #300]	; (8000a74 <modelPredictiveControl+0x30c>)
 8000948:	edd3 7a01 	vldr	s15, [r3, #4]
 800094c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000954:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800095c:	4b4c      	ldr	r3, [pc, #304]	; (8000a90 <modelPredictiveControl+0x328>)
 800095e:	edc3 7a00 	vstr	s15, [r3]

			costTemp = lambda1*sqr(mod(IdPred))/100000 + sqr(mod((IqRef - IqPred)))/10000;
 8000962:	4b4c      	ldr	r3, [pc, #304]	; (8000a94 <modelPredictiveControl+0x32c>)
 8000964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000968:	ee07 3a90 	vmov	s15, r3
 800096c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000970:	4b46      	ldr	r3, [pc, #280]	; (8000a8c <modelPredictiveControl+0x324>)
 8000972:	edd3 7a00 	vldr	s15, [r3]
 8000976:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800097a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800097e:	dd03      	ble.n	8000988 <modelPredictiveControl+0x220>
 8000980:	4b42      	ldr	r3, [pc, #264]	; (8000a8c <modelPredictiveControl+0x324>)
 8000982:	ed93 7a00 	vldr	s14, [r3]
 8000986:	e004      	b.n	8000992 <modelPredictiveControl+0x22a>
 8000988:	4b40      	ldr	r3, [pc, #256]	; (8000a8c <modelPredictiveControl+0x324>)
 800098a:	edd3 7a00 	vldr	s15, [r3]
 800098e:	eeb1 7a67 	vneg.f32	s14, s15
 8000992:	4b3e      	ldr	r3, [pc, #248]	; (8000a8c <modelPredictiveControl+0x324>)
 8000994:	edd3 7a00 	vldr	s15, [r3]
 8000998:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800099c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009a0:	dd03      	ble.n	80009aa <modelPredictiveControl+0x242>
 80009a2:	4b3a      	ldr	r3, [pc, #232]	; (8000a8c <modelPredictiveControl+0x324>)
 80009a4:	edd3 7a00 	vldr	s15, [r3]
 80009a8:	e004      	b.n	80009b4 <modelPredictiveControl+0x24c>
 80009aa:	4b38      	ldr	r3, [pc, #224]	; (8000a8c <modelPredictiveControl+0x324>)
 80009ac:	edd3 7a00 	vldr	s15, [r3]
 80009b0:	eef1 7a67 	vneg.f32	s15, s15
 80009b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009bc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000a98 <modelPredictiveControl+0x330>
 80009c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80009c4:	4b35      	ldr	r3, [pc, #212]	; (8000a9c <modelPredictiveControl+0x334>)
 80009c6:	ed93 7a00 	vldr	s14, [r3]
 80009ca:	4b31      	ldr	r3, [pc, #196]	; (8000a90 <modelPredictiveControl+0x328>)
 80009cc:	edd3 7a00 	vldr	s15, [r3]
 80009d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009dc:	dd08      	ble.n	80009f0 <modelPredictiveControl+0x288>
 80009de:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <modelPredictiveControl+0x334>)
 80009e0:	ed93 7a00 	vldr	s14, [r3]
 80009e4:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <modelPredictiveControl+0x328>)
 80009e6:	edd3 7a00 	vldr	s15, [r3]
 80009ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009ee:	e009      	b.n	8000a04 <modelPredictiveControl+0x29c>
 80009f0:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <modelPredictiveControl+0x334>)
 80009f2:	ed93 7a00 	vldr	s14, [r3]
 80009f6:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <modelPredictiveControl+0x328>)
 80009f8:	edd3 7a00 	vldr	s15, [r3]
 80009fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a00:	eeb1 7a67 	vneg.f32	s14, s15
 8000a04:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <modelPredictiveControl+0x334>)
 8000a06:	ed93 6a00 	vldr	s12, [r3]
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <modelPredictiveControl+0x328>)
 8000a0c:	edd3 7a00 	vldr	s15, [r3]
 8000a10:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000a14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a1c:	dd40      	ble.n	8000aa0 <modelPredictiveControl+0x338>
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <modelPredictiveControl+0x334>)
 8000a20:	ed93 6a00 	vldr	s12, [r3]
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <modelPredictiveControl+0x328>)
 8000a26:	edd3 7a00 	vldr	s15, [r3]
 8000a2a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000a2e:	e041      	b.n	8000ab4 <modelPredictiveControl+0x34c>
 8000a30:	200000ac 	.word	0x200000ac
 8000a34:	200001e0 	.word	0x200001e0
 8000a38:	2000020a 	.word	0x2000020a
 8000a3c:	20000250 	.word	0x20000250
 8000a40:	20000270 	.word	0x20000270
 8000a44:	2000023c 	.word	0x2000023c
 8000a48:	200001f0 	.word	0x200001f0
 8000a4c:	4499c000 	.word	0x4499c000
 8000a50:	20000228 	.word	0x20000228
 8000a54:	20000204 	.word	0x20000204
 8000a58:	20000154 	.word	0x20000154
 8000a5c:	000186a0 	.word	0x000186a0
 8000a60:	20000184 	.word	0x20000184
 8000a64:	2000018c 	.word	0x2000018c
 8000a68:	20000162 	.word	0x20000162
 8000a6c:	2000020e 	.word	0x2000020e
 8000a70:	200001e6 	.word	0x200001e6
 8000a74:	20000168 	.word	0x20000168
 8000a78:	200000b0 	.word	0x200000b0
 8000a7c:	2000007c 	.word	0x2000007c
 8000a80:	20000070 	.word	0x20000070
 8000a84:	20000224 	.word	0x20000224
 8000a88:	2000017c 	.word	0x2000017c
 8000a8c:	2000015c 	.word	0x2000015c
 8000a90:	20000238 	.word	0x20000238
 8000a94:	20000050 	.word	0x20000050
 8000a98:	47c35000 	.word	0x47c35000
 8000a9c:	20000174 	.word	0x20000174
 8000aa0:	4b3f      	ldr	r3, [pc, #252]	; (8000ba0 <modelPredictiveControl+0x438>)
 8000aa2:	ed93 6a00 	vldr	s12, [r3]
 8000aa6:	4b3f      	ldr	r3, [pc, #252]	; (8000ba4 <modelPredictiveControl+0x43c>)
 8000aa8:	edd3 7a00 	vldr	s15, [r3]
 8000aac:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000ab0:	eef1 7a67 	vneg.f32	s15, s15
 8000ab4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ab8:	ed9f 6a3b 	vldr	s12, [pc, #236]	; 8000ba8 <modelPredictiveControl+0x440>
 8000abc:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8000ac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ac8:	ee17 2a90 	vmov	r2, s15
 8000acc:	4b37      	ldr	r3, [pc, #220]	; (8000bac <modelPredictiveControl+0x444>)
 8000ace:	601a      	str	r2, [r3, #0]
		for(j=0;j<1;j++){
 8000ad0:	4b37      	ldr	r3, [pc, #220]	; (8000bb0 <modelPredictiveControl+0x448>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	4a36      	ldr	r2, [pc, #216]	; (8000bb0 <modelPredictiveControl+0x448>)
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <modelPredictiveControl+0x448>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f77f aee5 	ble.w	80008ae <modelPredictiveControl+0x146>
		}

		if(costTemp < cost){
 8000ae4:	4b31      	ldr	r3, [pc, #196]	; (8000bac <modelPredictiveControl+0x444>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b32      	ldr	r3, [pc, #200]	; (8000bb4 <modelPredictiveControl+0x44c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	da34      	bge.n	8000b5a <modelPredictiveControl+0x3f2>
			optimalVector = i;
 8000af0:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <modelPredictiveControl+0x450>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <modelPredictiveControl+0x454>)
 8000af8:	701a      	strb	r2, [r3, #0]
			cost = costTemp;
 8000afa:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <modelPredictiveControl+0x444>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a2d      	ldr	r2, [pc, #180]	; (8000bb4 <modelPredictiveControl+0x44c>)
 8000b00:	6013      	str	r3, [r2, #0]
			IqTx = IqPred*123/1000;
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <modelPredictiveControl+0x43c>)
 8000b04:	edd3 7a00 	vldr	s15, [r3]
 8000b08:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000bc0 <modelPredictiveControl+0x458>
 8000b0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b10:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8000bc4 <modelPredictiveControl+0x45c>
 8000b14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b18:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <modelPredictiveControl+0x460>)
 8000b1a:	edc3 7a00 	vstr	s15, [r3]
			Vab[0] = Va;
 8000b1e:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <modelPredictiveControl+0x464>)
 8000b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b24:	ee07 3a90 	vmov	s15, r3
 8000b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b2c:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <modelPredictiveControl+0x468>)
 8000b2e:	edc3 7a00 	vstr	s15, [r3]
			Vab[1] = Vb;
 8000b32:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <modelPredictiveControl+0x46c>)
 8000b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b38:	ee07 3a90 	vmov	s15, r3
 8000b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b40:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <modelPredictiveControl+0x468>)
 8000b42:	edc3 7a01 	vstr	s15, [r3, #4]
			Vab[2] = Vc;
 8000b46:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <modelPredictiveControl+0x470>)
 8000b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4c:	ee07 3a90 	vmov	s15, r3
 8000b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <modelPredictiveControl+0x468>)
 8000b56:	edc3 7a02 	vstr	s15, [r3, #8]
	for(i=0;i<6;i++){
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <modelPredictiveControl+0x450>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	4a15      	ldr	r2, [pc, #84]	; (8000bb8 <modelPredictiveControl+0x450>)
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <modelPredictiveControl+0x450>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b05      	cmp	r3, #5
 8000b6a:	f77f ae58 	ble.w	800081e <modelPredictiveControl+0xb6>
		}
	}


	wt = (optimalVector)*60;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <modelPredictiveControl+0x454>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	461a      	mov	r2, r3
 8000b76:	0112      	lsls	r2, r2, #4
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <modelPredictiveControl+0x474>)
 8000b80:	801a      	strh	r2, [r3, #0]
	if(wt >= 360){
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <modelPredictiveControl+0x474>)
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000b8a:	d306      	bcc.n	8000b9a <modelPredictiveControl+0x432>
		wt -= 360;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <modelPredictiveControl+0x474>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <modelPredictiveControl+0x474>)
 8000b98:	801a      	strh	r2, [r3, #0]
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000174 	.word	0x20000174
 8000ba4:	20000238 	.word	0x20000238
 8000ba8:	461c4000 	.word	0x461c4000
 8000bac:	200000b0 	.word	0x200000b0
 8000bb0:	2000007c 	.word	0x2000007c
 8000bb4:	20000154 	.word	0x20000154
 8000bb8:	20000184 	.word	0x20000184
 8000bbc:	2000024e 	.word	0x2000024e
 8000bc0:	42f60000 	.word	0x42f60000
 8000bc4:	447a0000 	.word	0x447a0000
 8000bc8:	200001e8 	.word	0x200001e8
 8000bcc:	20000162 	.word	0x20000162
 8000bd0:	2000023c 	.word	0x2000023c
 8000bd4:	2000020e 	.word	0x2000020e
 8000bd8:	200001e6 	.word	0x200001e6
 8000bdc:	20000068 	.word	0x20000068

08000be0 <SVPWM>:
uint16_t xxx = 0;
/**
 * This function computes SVPWM timings for TIM1
 *
 */
void SVPWM(){
 8000be0:	b598      	push	{r3, r4, r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	if(run == 1){
 8000be4:	4b8f      	ldr	r3, [pc, #572]	; (8000e24 <SVPWM+0x244>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	f040 81a1 	bne.w	8000f30 <SVPWM+0x350>
		n = ((uint8_t)(wt/60))+1;
 8000bee:	4b8e      	ldr	r3, [pc, #568]	; (8000e28 <SVPWM+0x248>)
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	4a8e      	ldr	r2, [pc, #568]	; (8000e2c <SVPWM+0x24c>)
 8000bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf8:	095b      	lsrs	r3, r3, #5
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	3301      	adds	r3, #1
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4b8b      	ldr	r3, [pc, #556]	; (8000e30 <SVPWM+0x250>)
 8000c04:	701a      	strb	r2, [r3, #0]

		T1 = (uint16_t)(V*(sinLowRes(n*60 - wt))/(1667));
 8000c06:	4b8b      	ldr	r3, [pc, #556]	; (8000e34 <SVPWM+0x254>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	461c      	mov	r4, r3
 8000c0c:	4b88      	ldr	r3, [pc, #544]	; (8000e30 <SVPWM+0x250>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	461a      	mov	r2, r3
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	4b82      	ldr	r3, [pc, #520]	; (8000e28 <SVPWM+0x248>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	b21b      	sxth	r3, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fdec 	bl	8001804 <sinLowRes>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	fb03 f304 	mul.w	r3, r3, r4
 8000c32:	4a81      	ldr	r2, [pc, #516]	; (8000e38 <SVPWM+0x258>)
 8000c34:	fb82 1203 	smull	r1, r2, r2, r3
 8000c38:	441a      	add	r2, r3
 8000c3a:	1292      	asrs	r2, r2, #10
 8000c3c:	17db      	asrs	r3, r3, #31
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b7d      	ldr	r3, [pc, #500]	; (8000e3c <SVPWM+0x25c>)
 8000c46:	601a      	str	r2, [r3, #0]
		T2 = (uint16_t)(V*(sinLowRes(wt - ((n-1)*60)))/(1667));
 8000c48:	4b7a      	ldr	r3, [pc, #488]	; (8000e34 <SVPWM+0x254>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	461c      	mov	r4, r3
 8000c4e:	4b78      	ldr	r3, [pc, #480]	; (8000e30 <SVPWM+0x250>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	011b      	lsls	r3, r3, #4
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	4b71      	ldr	r3, [pc, #452]	; (8000e28 <SVPWM+0x248>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	4413      	add	r3, r2
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fdca 	bl	8001804 <sinLowRes>
 8000c70:	4603      	mov	r3, r0
 8000c72:	fb03 f304 	mul.w	r3, r3, r4
 8000c76:	4a70      	ldr	r2, [pc, #448]	; (8000e38 <SVPWM+0x258>)
 8000c78:	fb82 1203 	smull	r1, r2, r2, r3
 8000c7c:	441a      	add	r2, r3
 8000c7e:	1292      	asrs	r2, r2, #10
 8000c80:	17db      	asrs	r3, r3, #31
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b6d      	ldr	r3, [pc, #436]	; (8000e40 <SVPWM+0x260>)
 8000c8a:	601a      	str	r2, [r3, #0]
		T0 = Ts - (T1+T2);
 8000c8c:	4b6d      	ldr	r3, [pc, #436]	; (8000e44 <SVPWM+0x264>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	4b6a      	ldr	r3, [pc, #424]	; (8000e3c <SVPWM+0x25c>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b6a      	ldr	r3, [pc, #424]	; (8000e40 <SVPWM+0x260>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	1acb      	subs	r3, r1, r3
 8000c9e:	4a6a      	ldr	r2, [pc, #424]	; (8000e48 <SVPWM+0x268>)
 8000ca0:	6013      	str	r3, [r2, #0]

		switch(n){
 8000ca2:	4b63      	ldr	r3, [pc, #396]	; (8000e30 <SVPWM+0x250>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	2b05      	cmp	r3, #5
 8000caa:	f200 812b 	bhi.w	8000f04 <SVPWM+0x324>
 8000cae:	a201      	add	r2, pc, #4	; (adr r2, 8000cb4 <SVPWM+0xd4>)
 8000cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb4:	08000ccd 	.word	0x08000ccd
 8000cb8:	08000d23 	.word	0x08000d23
 8000cbc:	08000d79 	.word	0x08000d79
 8000cc0:	08000dcf 	.word	0x08000dcf
 8000cc4:	08000e59 	.word	0x08000e59
 8000cc8:	08000eaf 	.word	0x08000eaf
			case 1:
				Ta = T1 + T2 + (T0/2);
 8000ccc:	4b5b      	ldr	r3, [pc, #364]	; (8000e3c <SVPWM+0x25c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b5b      	ldr	r3, [pc, #364]	; (8000e40 <SVPWM+0x260>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	4413      	add	r3, r2
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	4b5a      	ldr	r3, [pc, #360]	; (8000e48 <SVPWM+0x268>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	da00      	bge.n	8000ce6 <SVPWM+0x106>
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	105b      	asrs	r3, r3, #1
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	4413      	add	r3, r2
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	4b57      	ldr	r3, [pc, #348]	; (8000e4c <SVPWM+0x26c>)
 8000cf0:	801a      	strh	r2, [r3, #0]
				Tb = T2 + (T0/2);
 8000cf2:	4b55      	ldr	r3, [pc, #340]	; (8000e48 <SVPWM+0x268>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	da00      	bge.n	8000cfc <SVPWM+0x11c>
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	105b      	asrs	r3, r3, #1
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	4b4f      	ldr	r3, [pc, #316]	; (8000e40 <SVPWM+0x260>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	4413      	add	r3, r2
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	4b51      	ldr	r3, [pc, #324]	; (8000e50 <SVPWM+0x270>)
 8000d0c:	801a      	strh	r2, [r3, #0]
				Tc = (T0/2);
 8000d0e:	4b4e      	ldr	r3, [pc, #312]	; (8000e48 <SVPWM+0x268>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	da00      	bge.n	8000d18 <SVPWM+0x138>
 8000d16:	3301      	adds	r3, #1
 8000d18:	105b      	asrs	r3, r3, #1
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	4b4d      	ldr	r3, [pc, #308]	; (8000e54 <SVPWM+0x274>)
 8000d1e:	801a      	strh	r2, [r3, #0]
				break;
 8000d20:	e0f9      	b.n	8000f16 <SVPWM+0x336>
			case 2:
				Ta = T1 + (T0/2);
 8000d22:	4b49      	ldr	r3, [pc, #292]	; (8000e48 <SVPWM+0x268>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	da00      	bge.n	8000d2c <SVPWM+0x14c>
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	105b      	asrs	r3, r3, #1
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <SVPWM+0x25c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	4413      	add	r3, r2
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	4b44      	ldr	r3, [pc, #272]	; (8000e4c <SVPWM+0x26c>)
 8000d3c:	801a      	strh	r2, [r3, #0]
				Tb = T1 + T2 + (T0/2);
 8000d3e:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <SVPWM+0x25c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	4b3e      	ldr	r3, [pc, #248]	; (8000e40 <SVPWM+0x260>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	4b3e      	ldr	r3, [pc, #248]	; (8000e48 <SVPWM+0x268>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	da00      	bge.n	8000d58 <SVPWM+0x178>
 8000d56:	3301      	adds	r3, #1
 8000d58:	105b      	asrs	r3, r3, #1
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	4413      	add	r3, r2
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	4b3b      	ldr	r3, [pc, #236]	; (8000e50 <SVPWM+0x270>)
 8000d62:	801a      	strh	r2, [r3, #0]
				Tc = (T0/2);
 8000d64:	4b38      	ldr	r3, [pc, #224]	; (8000e48 <SVPWM+0x268>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	da00      	bge.n	8000d6e <SVPWM+0x18e>
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	105b      	asrs	r3, r3, #1
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	4b38      	ldr	r3, [pc, #224]	; (8000e54 <SVPWM+0x274>)
 8000d74:	801a      	strh	r2, [r3, #0]
				break;
 8000d76:	e0ce      	b.n	8000f16 <SVPWM+0x336>
			case 3:
				Ta = (T0/2);
 8000d78:	4b33      	ldr	r3, [pc, #204]	; (8000e48 <SVPWM+0x268>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	da00      	bge.n	8000d82 <SVPWM+0x1a2>
 8000d80:	3301      	adds	r3, #1
 8000d82:	105b      	asrs	r3, r3, #1
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	4b31      	ldr	r3, [pc, #196]	; (8000e4c <SVPWM+0x26c>)
 8000d88:	801a      	strh	r2, [r3, #0]
				Tb = T1 + T2 + (T0/2);
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <SVPWM+0x25c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <SVPWM+0x260>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	4413      	add	r3, r2
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <SVPWM+0x268>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	da00      	bge.n	8000da4 <SVPWM+0x1c4>
 8000da2:	3301      	adds	r3, #1
 8000da4:	105b      	asrs	r3, r3, #1
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	4413      	add	r3, r2
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <SVPWM+0x270>)
 8000dae:	801a      	strh	r2, [r3, #0]
				Tc = T2 + (T0/2);
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <SVPWM+0x268>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	da00      	bge.n	8000dba <SVPWM+0x1da>
 8000db8:	3301      	adds	r3, #1
 8000dba:	105b      	asrs	r3, r3, #1
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <SVPWM+0x260>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <SVPWM+0x274>)
 8000dca:	801a      	strh	r2, [r3, #0]
				break;
 8000dcc:	e0a3      	b.n	8000f16 <SVPWM+0x336>
			case 4:
				Ta = (T0/2);
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <SVPWM+0x268>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	da00      	bge.n	8000dd8 <SVPWM+0x1f8>
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	105b      	asrs	r3, r3, #1
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <SVPWM+0x26c>)
 8000dde:	801a      	strh	r2, [r3, #0]
				Tb = T1 + (T0/2);
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <SVPWM+0x268>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	da00      	bge.n	8000dea <SVPWM+0x20a>
 8000de8:	3301      	adds	r3, #1
 8000dea:	105b      	asrs	r3, r3, #1
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <SVPWM+0x25c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	4413      	add	r3, r2
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <SVPWM+0x270>)
 8000dfa:	801a      	strh	r2, [r3, #0]
				Tc = T1 + T2 + (T0/2);
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <SVPWM+0x25c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <SVPWM+0x260>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4413      	add	r3, r2
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <SVPWM+0x268>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	da00      	bge.n	8000e16 <SVPWM+0x236>
 8000e14:	3301      	adds	r3, #1
 8000e16:	105b      	asrs	r3, r3, #1
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	4413      	add	r3, r2
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <SVPWM+0x274>)
 8000e20:	801a      	strh	r2, [r3, #0]
				break;
 8000e22:	e078      	b.n	8000f16 <SVPWM+0x336>
 8000e24:	20000067 	.word	0x20000067
 8000e28:	20000068 	.word	0x20000068
 8000e2c:	88888889 	.word	0x88888889
 8000e30:	20000066 	.word	0x20000066
 8000e34:	2000001e 	.word	0x2000001e
 8000e38:	9d414457 	.word	0x9d414457
 8000e3c:	20000054 	.word	0x20000054
 8000e40:	20000058 	.word	0x20000058
 8000e44:	2000001c 	.word	0x2000001c
 8000e48:	2000005c 	.word	0x2000005c
 8000e4c:	20000060 	.word	0x20000060
 8000e50:	20000062 	.word	0x20000062
 8000e54:	20000064 	.word	0x20000064
			case 5:
				Ta = T2 + (T0/2);
 8000e58:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <SVPWM+0x368>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	da00      	bge.n	8000e62 <SVPWM+0x282>
 8000e60:	3301      	adds	r3, #1
 8000e62:	105b      	asrs	r3, r3, #1
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <SVPWM+0x36c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	4b37      	ldr	r3, [pc, #220]	; (8000f50 <SVPWM+0x370>)
 8000e72:	801a      	strh	r2, [r3, #0]
				Tb = (T0/2);
 8000e74:	4b34      	ldr	r3, [pc, #208]	; (8000f48 <SVPWM+0x368>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	da00      	bge.n	8000e7e <SVPWM+0x29e>
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	105b      	asrs	r3, r3, #1
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b34      	ldr	r3, [pc, #208]	; (8000f54 <SVPWM+0x374>)
 8000e84:	801a      	strh	r2, [r3, #0]
				Tc = T1 + T2 + (T0/2);
 8000e86:	4b34      	ldr	r3, [pc, #208]	; (8000f58 <SVPWM+0x378>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <SVPWM+0x36c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	4413      	add	r3, r2
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <SVPWM+0x368>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	da00      	bge.n	8000ea0 <SVPWM+0x2c0>
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	105b      	asrs	r3, r3, #1
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <SVPWM+0x37c>)
 8000eaa:	801a      	strh	r2, [r3, #0]
				break;
 8000eac:	e033      	b.n	8000f16 <SVPWM+0x336>
			case 6:
				Ta = T1 + T2 + (T0/2);
 8000eae:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <SVPWM+0x378>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <SVPWM+0x36c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	4413      	add	r3, r2
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <SVPWM+0x368>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	da00      	bge.n	8000ec8 <SVPWM+0x2e8>
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	105b      	asrs	r3, r3, #1
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	4413      	add	r3, r2
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <SVPWM+0x370>)
 8000ed2:	801a      	strh	r2, [r3, #0]
				Tb = (T0/2);
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <SVPWM+0x368>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da00      	bge.n	8000ede <SVPWM+0x2fe>
 8000edc:	3301      	adds	r3, #1
 8000ede:	105b      	asrs	r3, r3, #1
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <SVPWM+0x374>)
 8000ee4:	801a      	strh	r2, [r3, #0]
				Tc = T1 + (T0/2);
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <SVPWM+0x368>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	da00      	bge.n	8000ef0 <SVPWM+0x310>
 8000eee:	3301      	adds	r3, #1
 8000ef0:	105b      	asrs	r3, r3, #1
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <SVPWM+0x378>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4413      	add	r3, r2
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <SVPWM+0x37c>)
 8000f00:	801a      	strh	r2, [r3, #0]
				break;
 8000f02:	e008      	b.n	8000f16 <SVPWM+0x336>
			default:
				Ta = 0;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <SVPWM+0x370>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	801a      	strh	r2, [r3, #0]
				Tb = 0;
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <SVPWM+0x374>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	801a      	strh	r2, [r3, #0]
				Tc = 0;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <SVPWM+0x37c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	801a      	strh	r2, [r3, #0]
		}

		TIM1->CCR1 = Ta;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <SVPWM+0x370>)
 8000f18:	881a      	ldrh	r2, [r3, #0]
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <SVPWM+0x380>)
 8000f1c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = Tb;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <SVPWM+0x374>)
 8000f20:	881a      	ldrh	r2, [r3, #0]
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <SVPWM+0x380>)
 8000f24:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = Tc;
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <SVPWM+0x37c>)
 8000f28:	881a      	ldrh	r2, [r3, #0]
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <SVPWM+0x380>)
 8000f2c:	63da      	str	r2, [r3, #60]	; 0x3c
	} else {
		TIM1->CCR1 = 0;
		TIM1->CCR2 = 0;
		TIM1->CCR3 = 0;
	}
}
 8000f2e:	e008      	b.n	8000f42 <SVPWM+0x362>
		TIM1->CCR1 = 0;
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <SVPWM+0x380>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <SVPWM+0x380>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <SVPWM+0x380>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000f42:	bf00      	nop
 8000f44:	bd98      	pop	{r3, r4, r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000005c 	.word	0x2000005c
 8000f4c:	20000058 	.word	0x20000058
 8000f50:	20000060 	.word	0x20000060
 8000f54:	20000062 	.word	0x20000062
 8000f58:	20000054 	.word	0x20000054
 8000f5c:	20000064 	.word	0x20000064
 8000f60:	40010000 	.word	0x40010000

08000f64 <transferUART>:
 * This function transfers data over UART
 *
 */
int16_t arr[10000], idx;
uint32_t err,asdsda;
void transferUART(){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	if(startTx){
 8000f68:	4b5f      	ldr	r3, [pc, #380]	; (80010e8 <transferUART+0x184>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 80b9 	beq.w	80010e4 <transferUART+0x180>
			txData[0] = ((thetaElec + 30000)) & 0xff;
 8000f72:	4b5e      	ldr	r3, [pc, #376]	; (80010ec <transferUART+0x188>)
 8000f74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	3330      	adds	r3, #48	; 0x30
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b5c      	ldr	r3, [pc, #368]	; (80010f0 <transferUART+0x18c>)
 8000f80:	701a      	strb	r2, [r3, #0]
			txData[1] = ((thetaElec + 30000) >> 8) & 0xff;
 8000f82:	4b5a      	ldr	r3, [pc, #360]	; (80010ec <transferUART+0x188>)
 8000f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	f247 5330 	movw	r3, #30000	; 0x7530
 8000f8e:	4413      	add	r3, r2
 8000f90:	121b      	asrs	r3, r3, #8
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b56      	ldr	r3, [pc, #344]	; (80010f0 <transferUART+0x18c>)
 8000f96:	705a      	strb	r2, [r3, #1]

			txData[2] = ((uint16_t)(Valbt.alpha*100 + 30000)) & 0xff;
 8000f98:	4b56      	ldr	r3, [pc, #344]	; (80010f4 <transferUART+0x190>)
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80010f8 <transferUART+0x194>
 8000fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80010fc <transferUART+0x198>
 8000faa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb2:	ee17 3a90 	vmov	r3, s15
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b4d      	ldr	r3, [pc, #308]	; (80010f0 <transferUART+0x18c>)
 8000fbc:	709a      	strb	r2, [r3, #2]
			txData[3] = ((uint16_t)(Valbt.alpha*100 + 30000) >> 8) & 0xff;
 8000fbe:	4b4d      	ldr	r3, [pc, #308]	; (80010f4 <transferUART+0x190>)
 8000fc0:	edd3 7a00 	vldr	s15, [r3]
 8000fc4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80010f8 <transferUART+0x194>
 8000fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fcc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80010fc <transferUART+0x198>
 8000fd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fd8:	ee17 3a90 	vmov	r3, s15
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	0a1b      	lsrs	r3, r3, #8
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b42      	ldr	r3, [pc, #264]	; (80010f0 <transferUART+0x18c>)
 8000fe6:	70da      	strb	r2, [r3, #3]

			txData[4] = ((uint16_t)(Valbt.beta*100 + 30000)) & 0xff;
 8000fe8:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <transferUART+0x190>)
 8000fea:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fee:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80010f8 <transferUART+0x194>
 8000ff2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff6:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80010fc <transferUART+0x198>
 8000ffa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001002:	ee17 3a90 	vmov	r3, s15
 8001006:	b29b      	uxth	r3, r3
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b39      	ldr	r3, [pc, #228]	; (80010f0 <transferUART+0x18c>)
 800100c:	711a      	strb	r2, [r3, #4]
			txData[5] = (((uint16_t)(Valbt.beta*100 + 30000)) >> 8) & 0xff;
 800100e:	4b39      	ldr	r3, [pc, #228]	; (80010f4 <transferUART+0x190>)
 8001010:	edd3 7a01 	vldr	s15, [r3, #4]
 8001014:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80010f8 <transferUART+0x194>
 8001018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800101c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80010fc <transferUART+0x198>
 8001020:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001028:	ee17 3a90 	vmov	r3, s15
 800102c:	b29b      	uxth	r3, r3
 800102e:	0a1b      	lsrs	r3, r3, #8
 8001030:	b29b      	uxth	r3, r3
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <transferUART+0x18c>)
 8001036:	715a      	strb	r2, [r3, #5]

			txData[6] = ((uint16_t)(Ialbt.beta*100 + 30000)) & 0xff;
 8001038:	4b31      	ldr	r3, [pc, #196]	; (8001100 <transferUART+0x19c>)
 800103a:	edd3 7a01 	vldr	s15, [r3, #4]
 800103e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80010f8 <transferUART+0x194>
 8001042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001046:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80010fc <transferUART+0x198>
 800104a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800104e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001052:	ee17 3a90 	vmov	r3, s15
 8001056:	b29b      	uxth	r3, r3
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <transferUART+0x18c>)
 800105c:	719a      	strb	r2, [r3, #6]
			txData[7] = (((uint16_t)(Ialbt.beta*100 + 30000)) >> 8) & 0xff;
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <transferUART+0x19c>)
 8001060:	edd3 7a01 	vldr	s15, [r3, #4]
 8001064:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80010f8 <transferUART+0x194>
 8001068:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80010fc <transferUART+0x198>
 8001070:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001078:	ee17 3a90 	vmov	r3, s15
 800107c:	b29b      	uxth	r3, r3
 800107e:	0a1b      	lsrs	r3, r3, #8
 8001080:	b29b      	uxth	r3, r3
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <transferUART+0x18c>)
 8001086:	71da      	strb	r2, [r3, #7]

			txData[8] = ((uint16_t)(Ialbt.beta*100 + 30000)) & 0xff;
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <transferUART+0x19c>)
 800108a:	edd3 7a01 	vldr	s15, [r3, #4]
 800108e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80010f8 <transferUART+0x194>
 8001092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001096:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80010fc <transferUART+0x198>
 800109a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800109e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a2:	ee17 3a90 	vmov	r3, s15
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <transferUART+0x18c>)
 80010ac:	721a      	strb	r2, [r3, #8]
			txData[9] = (((uint16_t)(Ialbt.beta*100 + 30000)) >> 8) & 0xff;
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <transferUART+0x19c>)
 80010b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80010b4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80010f8 <transferUART+0x194>
 80010b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010bc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80010fc <transferUART+0x198>
 80010c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c8:	ee17 3a90 	vmov	r3, s15
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	0a1b      	lsrs	r3, r3, #8
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <transferUART+0x18c>)
 80010d6:	725a      	strb	r2, [r3, #9]

			HAL_UART_Transmit(&huart3, txData,10,10);
 80010d8:	230a      	movs	r3, #10
 80010da:	220a      	movs	r2, #10
 80010dc:	4904      	ldr	r1, [pc, #16]	; (80010f0 <transferUART+0x18c>)
 80010de:	4809      	ldr	r0, [pc, #36]	; (8001104 <transferUART+0x1a0>)
 80010e0:	f00a fe2c 	bl	800bd3c <HAL_UART_Transmit>
//			startTx = 0;
//			testEnd = 0;
//			err = 0;
//		}
	}
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200050a2 	.word	0x200050a2
 80010ec:	20000080 	.word	0x20000080
 80010f0:	20005098 	.word	0x20005098
 80010f4:	200001f0 	.word	0x200001f0
 80010f8:	42c80000 	.word	0x42c80000
 80010fc:	46ea6000 	.word	0x46ea6000
 8001100:	20000270 	.word	0x20000270
 8001104:	200000bc 	.word	0x200000bc

08001108 <receiveUART>:

/**
 * This function initializes UART DMA receive
 *
 */
void receiveUART(){
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart3, comCode, 3);
 800110c:	2203      	movs	r2, #3
 800110e:	4903      	ldr	r1, [pc, #12]	; (800111c <receiveUART+0x14>)
 8001110:	4803      	ldr	r0, [pc, #12]	; (8001120 <receiveUART+0x18>)
 8001112:	f00a fea9 	bl	800be68 <HAL_UART_Receive_DMA>
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	24001000 	.word	0x24001000
 8001120:	200000bc 	.word	0x200000bc

08001124 <handleRxCommands>:
/**
 * This function is a handler for received data
 *
 */

void handleRxCommands(){
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0

	if(comCode[0] == 101){
 8001128:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <handleRxCommands+0x104>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b65      	cmp	r3, #101	; 0x65
 800112e:	d103      	bne.n	8001138 <handleRxCommands+0x14>
		startTx = 1;
 8001130:	4b3e      	ldr	r3, [pc, #248]	; (800122c <handleRxCommands+0x108>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
	} else if(comCode[0] == 109){
		speedReq = comCode[1] + 256*comCode[2];
	} else if(comCode[0] == 110){
		HAL_NVIC_SystemReset();
	}
}
 8001136:	e075      	b.n	8001224 <handleRxCommands+0x100>
	} else if(comCode[0] == 102){
 8001138:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <handleRxCommands+0x104>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b66      	cmp	r3, #102	; 0x66
 800113e:	d103      	bne.n	8001148 <handleRxCommands+0x24>
		startTx = 0;
 8001140:	4b3a      	ldr	r3, [pc, #232]	; (800122c <handleRxCommands+0x108>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
}
 8001146:	e06d      	b.n	8001224 <handleRxCommands+0x100>
	} else if(comCode[0] == 103){
 8001148:	4b37      	ldr	r3, [pc, #220]	; (8001228 <handleRxCommands+0x104>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b67      	cmp	r3, #103	; 0x67
 800114e:	d102      	bne.n	8001156 <handleRxCommands+0x32>
		stopMotor();
 8001150:	f000 f8c6 	bl	80012e0 <stopMotor>
}
 8001154:	e066      	b.n	8001224 <handleRxCommands+0x100>
	} else if(comCode[0] == 104){
 8001156:	4b34      	ldr	r3, [pc, #208]	; (8001228 <handleRxCommands+0x104>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b68      	cmp	r3, #104	; 0x68
 800115c:	d102      	bne.n	8001164 <handleRxCommands+0x40>
		startMotor();
 800115e:	f000 f8a7 	bl	80012b0 <startMotor>
}
 8001162:	e05f      	b.n	8001224 <handleRxCommands+0x100>
	} else if(comCode[0] == 105){
 8001164:	4b30      	ldr	r3, [pc, #192]	; (8001228 <handleRxCommands+0x104>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b69      	cmp	r3, #105	; 0x69
 800116a:	d10d      	bne.n	8001188 <handleRxCommands+0x64>
		sigma = comCode[1] + 256*comCode[2];
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <handleRxCommands+0x104>)
 800116e:	785b      	ldrb	r3, [r3, #1]
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <handleRxCommands+0x104>)
 8001174:	789b      	ldrb	r3, [r3, #2]
 8001176:	b29b      	uxth	r3, r3
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b29b      	uxth	r3, r3
 800117c:	4413      	add	r3, r2
 800117e:	b29b      	uxth	r3, r3
 8001180:	b21a      	sxth	r2, r3
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <handleRxCommands+0x10c>)
 8001184:	801a      	strh	r2, [r3, #0]
}
 8001186:	e04d      	b.n	8001224 <handleRxCommands+0x100>
	} else if(comCode[0] == 106){
 8001188:	4b27      	ldr	r3, [pc, #156]	; (8001228 <handleRxCommands+0x104>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b6a      	cmp	r3, #106	; 0x6a
 800118e:	d10d      	bne.n	80011ac <handleRxCommands+0x88>
		delta = comCode[1] + 256*comCode[2];
 8001190:	4b25      	ldr	r3, [pc, #148]	; (8001228 <handleRxCommands+0x104>)
 8001192:	785b      	ldrb	r3, [r3, #1]
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b24      	ldr	r3, [pc, #144]	; (8001228 <handleRxCommands+0x104>)
 8001198:	789b      	ldrb	r3, [r3, #2]
 800119a:	b29b      	uxth	r3, r3
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b29b      	uxth	r3, r3
 80011a0:	4413      	add	r3, r2
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	4b23      	ldr	r3, [pc, #140]	; (8001234 <handleRxCommands+0x110>)
 80011a8:	801a      	strh	r2, [r3, #0]
}
 80011aa:	e03b      	b.n	8001224 <handleRxCommands+0x100>
	} else if(comCode[0] == 107){
 80011ac:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <handleRxCommands+0x104>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b6b      	cmp	r3, #107	; 0x6b
 80011b2:	d10d      	bne.n	80011d0 <handleRxCommands+0xac>
		Kp = comCode[1] + 256*comCode[2];
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <handleRxCommands+0x104>)
 80011b6:	785b      	ldrb	r3, [r3, #1]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <handleRxCommands+0x104>)
 80011bc:	789b      	ldrb	r3, [r3, #2]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	4413      	add	r3, r2
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <handleRxCommands+0x114>)
 80011cc:	801a      	strh	r2, [r3, #0]
}
 80011ce:	e029      	b.n	8001224 <handleRxCommands+0x100>
	} else if(comCode[0] == 108){
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <handleRxCommands+0x104>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b6c      	cmp	r3, #108	; 0x6c
 80011d6:	d10d      	bne.n	80011f4 <handleRxCommands+0xd0>
		Ki = comCode[1] + 256*comCode[2];
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <handleRxCommands+0x104>)
 80011da:	785b      	ldrb	r3, [r3, #1]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <handleRxCommands+0x104>)
 80011e0:	789b      	ldrb	r3, [r3, #2]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	4413      	add	r3, r2
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <handleRxCommands+0x118>)
 80011f0:	801a      	strh	r2, [r3, #0]
}
 80011f2:	e017      	b.n	8001224 <handleRxCommands+0x100>
	} else if(comCode[0] == 109){
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <handleRxCommands+0x104>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b6d      	cmp	r3, #109	; 0x6d
 80011fa:	d10d      	bne.n	8001218 <handleRxCommands+0xf4>
		speedReq = comCode[1] + 256*comCode[2];
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <handleRxCommands+0x104>)
 80011fe:	785b      	ldrb	r3, [r3, #1]
 8001200:	b29a      	uxth	r2, r3
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <handleRxCommands+0x104>)
 8001204:	789b      	ldrb	r3, [r3, #2]
 8001206:	b29b      	uxth	r3, r3
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b29b      	uxth	r3, r3
 800120c:	4413      	add	r3, r2
 800120e:	b29b      	uxth	r3, r3
 8001210:	b21a      	sxth	r2, r3
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <handleRxCommands+0x11c>)
 8001214:	801a      	strh	r2, [r3, #0]
}
 8001216:	e005      	b.n	8001224 <handleRxCommands+0x100>
	} else if(comCode[0] == 110){
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <handleRxCommands+0x104>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b6e      	cmp	r3, #110	; 0x6e
 800121e:	d101      	bne.n	8001224 <handleRxCommands+0x100>
		HAL_NVIC_SystemReset();
 8001220:	f003 fb47 	bl	80048b2 <HAL_NVIC_SystemReset>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	24001000 	.word	0x24001000
 800122c:	200050a2 	.word	0x200050a2
 8001230:	200001e2 	.word	0x200001e2
 8001234:	2000020c 	.word	0x2000020c
 8001238:	20000220 	.word	0x20000220
 800123c:	2000014c 	.word	0x2000014c
 8001240:	20000022 	.word	0x20000022

08001244 <initalPositionSet>:
 * This function controls initial position of motor
 *
 */
uint16_t cnts = 0;
uint16_t executionCount = 101;
void initalPositionSet(){
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	if(cnts < 1000){
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <initalPositionSet+0x4c>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001250:	d203      	bcs.n	800125a <initalPositionSet+0x16>
		wt = 30;
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <initalPositionSet+0x50>)
 8001254:	221e      	movs	r2, #30
 8001256:	801a      	strh	r2, [r3, #0]
		thetaElec = 0;
		TIM3->CNT = 0;
		speed = 0;
		wr = 0;
	}
}
 8001258:	e015      	b.n	8001286 <initalPositionSet+0x42>
		wt = 0;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <initalPositionSet+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	801a      	strh	r2, [r3, #0]
		thetaElecTemp = 0;
 8001260:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <initalPositionSet+0x54>)
 8001262:	2200      	movs	r2, #0
 8001264:	801a      	strh	r2, [r3, #0]
		thetaMech = 0;
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <initalPositionSet+0x58>)
 8001268:	2200      	movs	r2, #0
 800126a:	801a      	strh	r2, [r3, #0]
		thetaElec = 0;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <initalPositionSet+0x5c>)
 800126e:	2200      	movs	r2, #0
 8001270:	801a      	strh	r2, [r3, #0]
		TIM3->CNT = 0;
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <initalPositionSet+0x60>)
 8001274:	2200      	movs	r2, #0
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
		speed = 0;
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <initalPositionSet+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	801a      	strh	r2, [r3, #0]
		wr = 0;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <initalPositionSet+0x68>)
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	2000006a 	.word	0x2000006a
 8001294:	20000068 	.word	0x20000068
 8001298:	20000152 	.word	0x20000152
 800129c:	20000180 	.word	0x20000180
 80012a0:	20000080 	.word	0x20000080
 80012a4:	40000400 	.word	0x40000400
 80012a8:	20000214 	.word	0x20000214
 80012ac:	20000224 	.word	0x20000224

080012b0 <startMotor>:

/**
 * This function controls starting of motor with Blue button
 *
 */
void startMotor(){
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
	run = 1;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <startMotor+0x24>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
	Iterm = 0;
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <startMotor+0x28>)
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
	sum = 0;
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <startMotor+0x2c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	801a      	strh	r2, [r3, #0]
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000067 	.word	0x20000067
 80012d8:	2000006c 	.word	0x2000006c
 80012dc:	20000158 	.word	0x20000158

080012e0 <stopMotor>:

/**
 * This function controls stopping of motor with Blue button
 *
 */
void stopMotor(){
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
	run = 0;
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <stopMotor+0x14>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	20000067 	.word	0x20000067

080012f8 <executeAll>:
/**
 * This function controls the execution and ADC measurement
 *
 */
uint16_t ex;
void executeAll(){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80012fc:	2101      	movs	r1, #1
 80012fe:	4823      	ldr	r0, [pc, #140]	; (800138c <executeAll+0x94>)
 8001300:	f005 fe05 	bl	8006f0e <HAL_GPIO_TogglePin>
	measureADC();
 8001304:	f000 f972 	bl	80015ec <measureADC>

	if(run){
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <executeAll+0x98>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d02f      	beq.n	8001370 <executeAll+0x78>
		if(cnts < 2000){
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <executeAll+0x9c>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001318:	d20c      	bcs.n	8001334 <executeAll+0x3c>
			V = 300;
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <executeAll+0xa0>)
 800131c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001320:	801a      	strh	r2, [r3, #0]
			initalPositionSet();
 8001322:	f7ff ff8f 	bl	8001244 <initalPositionSet>
			cnts++;
 8001326:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <executeAll+0x9c>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	b29a      	uxth	r2, r3
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <executeAll+0x9c>)
 8001330:	801a      	strh	r2, [r3, #0]
 8001332:	e01a      	b.n	800136a <executeAll+0x72>
		} else if(cnts >= 2000 && cnts < 3000){
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <executeAll+0x9c>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800133c:	d30f      	bcc.n	800135e <executeAll+0x66>
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <executeAll+0x9c>)
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001346:	4293      	cmp	r3, r2
 8001348:	d809      	bhi.n	800135e <executeAll+0x66>
			cnts++;
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <executeAll+0x9c>)
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	b29a      	uxth	r2, r3
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <executeAll+0x9c>)
 8001354:	801a      	strh	r2, [r3, #0]
			V = 0;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <executeAll+0xa0>)
 8001358:	2200      	movs	r2, #0
 800135a:	801a      	strh	r2, [r3, #0]
 800135c:	e005      	b.n	800136a <executeAll+0x72>
		} else {
			V = 700;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <executeAll+0xa0>)
 8001360:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001364:	801a      	strh	r2, [r3, #0]
//			testSVPWM();
			modelPredictiveControl();
 8001366:	f7ff f9ff 	bl	8000768 <modelPredictiveControl>
//			} else {
//				ex++;
//			}
		}

		transferUART();
 800136a:	f7ff fdfb 	bl	8000f64 <transferUART>
 800136e:	e005      	b.n	800137c <executeAll+0x84>
	} else {
		V = 0;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <executeAll+0xa0>)
 8001372:	2200      	movs	r2, #0
 8001374:	801a      	strh	r2, [r3, #0]
		cnts = 0;
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <executeAll+0x9c>)
 8001378:	2200      	movs	r2, #0
 800137a:	801a      	strh	r2, [r3, #0]
	}

	SVPWM();
 800137c:	f7ff fc30 	bl	8000be0 <SVPWM>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001380:	2101      	movs	r1, #1
 8001382:	4802      	ldr	r0, [pc, #8]	; (800138c <executeAll+0x94>)
 8001384:	f005 fdc3 	bl	8006f0e <HAL_GPIO_TogglePin>
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	58020400 	.word	0x58020400
 8001390:	20000067 	.word	0x20000067
 8001394:	2000006a 	.word	0x2000006a
 8001398:	2000001e 	.word	0x2000001e

0800139c <computePositionWithEncoder>:
/**
 * This function computes rotor position
 *
 */
uint16_t x = 1;
void computePositionWithEncoder(){
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
//	rtU.y[1] = ((float)Ib)/1230;
//	rtU.y[2] = ((float)Ic)/1230;
//
//	untitled0_step();

	thetaElec = 90 + 360*TIM3->CNT/300;
 80013a0:	4b81      	ldr	r3, [pc, #516]	; (80015a8 <computePositionWithEncoder+0x20c>)
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
 80013ac:	4a7f      	ldr	r2, [pc, #508]	; (80015ac <computePositionWithEncoder+0x210>)
 80013ae:	fba2 2303 	umull	r2, r3, r2, r3
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	335a      	adds	r3, #90	; 0x5a
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	4b7c      	ldr	r3, [pc, #496]	; (80015b0 <computePositionWithEncoder+0x214>)
 80013be:	801a      	strh	r2, [r3, #0]


	if(thetaElec >= 360){
 80013c0:	4b7b      	ldr	r3, [pc, #492]	; (80015b0 <computePositionWithEncoder+0x214>)
 80013c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80013ca:	db09      	blt.n	80013e0 <computePositionWithEncoder+0x44>
		thetaElec -= 360;
 80013cc:	4b78      	ldr	r3, [pc, #480]	; (80015b0 <computePositionWithEncoder+0x214>)
 80013ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80013d8:	b29b      	uxth	r3, r3
 80013da:	b21a      	sxth	r2, r3
 80013dc:	4b74      	ldr	r3, [pc, #464]	; (80015b0 <computePositionWithEncoder+0x214>)
 80013de:	801a      	strh	r2, [r3, #0]
	}

	if(thetaElec != thetaElecOld){
 80013e0:	4b73      	ldr	r3, [pc, #460]	; (80015b0 <computePositionWithEncoder+0x214>)
 80013e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013e6:	4b73      	ldr	r3, [pc, #460]	; (80015b4 <computePositionWithEncoder+0x218>)
 80013e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	f000 80d2 	beq.w	8001596 <computePositionWithEncoder+0x1fa>
		dTheta = thetaElec - thetaElecOld;
 80013f2:	4b6f      	ldr	r3, [pc, #444]	; (80015b0 <computePositionWithEncoder+0x214>)
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	4b6e      	ldr	r3, [pc, #440]	; (80015b4 <computePositionWithEncoder+0x218>)
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	b29b      	uxth	r3, r3
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	b29b      	uxth	r3, r3
 8001406:	b21a      	sxth	r2, r3
 8001408:	4b6b      	ldr	r3, [pc, #428]	; (80015b8 <computePositionWithEncoder+0x21c>)
 800140a:	801a      	strh	r2, [r3, #0]
		if(dTheta > 300){
 800140c:	4b6a      	ldr	r3, [pc, #424]	; (80015b8 <computePositionWithEncoder+0x21c>)
 800140e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001412:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001416:	dd0a      	ble.n	800142e <computePositionWithEncoder+0x92>
			dTheta -= 360;
 8001418:	4b67      	ldr	r3, [pc, #412]	; (80015b8 <computePositionWithEncoder+0x21c>)
 800141a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141e:	b29b      	uxth	r3, r3
 8001420:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001424:	b29b      	uxth	r3, r3
 8001426:	b21a      	sxth	r2, r3
 8001428:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <computePositionWithEncoder+0x21c>)
 800142a:	801a      	strh	r2, [r3, #0]
 800142c:	e00f      	b.n	800144e <computePositionWithEncoder+0xb2>
		} else if (dTheta < -300){
 800142e:	4b62      	ldr	r3, [pc, #392]	; (80015b8 <computePositionWithEncoder+0x21c>)
 8001430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001434:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8001438:	da09      	bge.n	800144e <computePositionWithEncoder+0xb2>
			dTheta += 360;
 800143a:	4b5f      	ldr	r3, [pc, #380]	; (80015b8 <computePositionWithEncoder+0x21c>)
 800143c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001440:	b29b      	uxth	r3, r3
 8001442:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001446:	b29b      	uxth	r3, r3
 8001448:	b21a      	sxth	r2, r3
 800144a:	4b5b      	ldr	r3, [pc, #364]	; (80015b8 <computePositionWithEncoder+0x21c>)
 800144c:	801a      	strh	r2, [r3, #0]
		}

		thetaElecOld = thetaElec;
 800144e:	4b58      	ldr	r3, [pc, #352]	; (80015b0 <computePositionWithEncoder+0x214>)
 8001450:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001454:	4b57      	ldr	r3, [pc, #348]	; (80015b4 <computePositionWithEncoder+0x218>)
 8001456:	801a      	strh	r2, [r3, #0]

		speedTemp = dTheta*672/x;
 8001458:	4b57      	ldr	r3, [pc, #348]	; (80015b8 <computePositionWithEncoder+0x21c>)
 800145a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145e:	461a      	mov	r2, r3
 8001460:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8001464:	fb03 f302 	mul.w	r3, r3, r2
 8001468:	4a54      	ldr	r2, [pc, #336]	; (80015bc <computePositionWithEncoder+0x220>)
 800146a:	8812      	ldrh	r2, [r2, #0]
 800146c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001470:	b21a      	sxth	r2, r3
 8001472:	4b53      	ldr	r3, [pc, #332]	; (80015c0 <computePositionWithEncoder+0x224>)
 8001474:	801a      	strh	r2, [r3, #0]

		x = 1;
 8001476:	4b51      	ldr	r3, [pc, #324]	; (80015bc <computePositionWithEncoder+0x220>)
 8001478:	2201      	movs	r2, #1
 800147a:	801a      	strh	r2, [r3, #0]

		if(k>9){
 800147c:	4b51      	ldr	r3, [pc, #324]	; (80015c4 <computePositionWithEncoder+0x228>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	2b09      	cmp	r3, #9
 8001482:	d92c      	bls.n	80014de <computePositionWithEncoder+0x142>
			sum += (speedTemp - speedArr[e]);
 8001484:	4b4e      	ldr	r3, [pc, #312]	; (80015c0 <computePositionWithEncoder+0x224>)
 8001486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b4e      	ldr	r3, [pc, #312]	; (80015c8 <computePositionWithEncoder+0x22c>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	4b4e      	ldr	r3, [pc, #312]	; (80015cc <computePositionWithEncoder+0x230>)
 8001494:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8001498:	b29b      	uxth	r3, r3
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	b29a      	uxth	r2, r3
 800149e:	4b4c      	ldr	r3, [pc, #304]	; (80015d0 <computePositionWithEncoder+0x234>)
 80014a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	4413      	add	r3, r2
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	4b48      	ldr	r3, [pc, #288]	; (80015d0 <computePositionWithEncoder+0x234>)
 80014ae:	801a      	strh	r2, [r3, #0]
			speedArr[e] = speedTemp;
 80014b0:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <computePositionWithEncoder+0x22c>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b42      	ldr	r3, [pc, #264]	; (80015c0 <computePositionWithEncoder+0x224>)
 80014b8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80014bc:	4b43      	ldr	r3, [pc, #268]	; (80015cc <computePositionWithEncoder+0x230>)
 80014be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			e++;
 80014c2:	4b41      	ldr	r3, [pc, #260]	; (80015c8 <computePositionWithEncoder+0x22c>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b3f      	ldr	r3, [pc, #252]	; (80015c8 <computePositionWithEncoder+0x22c>)
 80014cc:	801a      	strh	r2, [r3, #0]

			if(e>9){
 80014ce:	4b3e      	ldr	r3, [pc, #248]	; (80015c8 <computePositionWithEncoder+0x22c>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	2b09      	cmp	r3, #9
 80014d4:	d91f      	bls.n	8001516 <computePositionWithEncoder+0x17a>
				e = 0;
 80014d6:	4b3c      	ldr	r3, [pc, #240]	; (80015c8 <computePositionWithEncoder+0x22c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	801a      	strh	r2, [r3, #0]
 80014dc:	e01b      	b.n	8001516 <computePositionWithEncoder+0x17a>
			}
		} else {
			sum += speedTemp;
 80014de:	4b3c      	ldr	r3, [pc, #240]	; (80015d0 <computePositionWithEncoder+0x234>)
 80014e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	4b36      	ldr	r3, [pc, #216]	; (80015c0 <computePositionWithEncoder+0x224>)
 80014e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	4413      	add	r3, r2
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <computePositionWithEncoder+0x234>)
 80014f6:	801a      	strh	r2, [r3, #0]
			speedArr[k] = speedTemp;
 80014f8:	4b32      	ldr	r3, [pc, #200]	; (80015c4 <computePositionWithEncoder+0x228>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b30      	ldr	r3, [pc, #192]	; (80015c0 <computePositionWithEncoder+0x224>)
 8001500:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001504:	4b31      	ldr	r3, [pc, #196]	; (80015cc <computePositionWithEncoder+0x230>)
 8001506:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			k++;
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <computePositionWithEncoder+0x228>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	b29a      	uxth	r2, r3
 8001512:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <computePositionWithEncoder+0x228>)
 8001514:	801a      	strh	r2, [r3, #0]
		}

		speed = (19*speed + sum/10)/20;
 8001516:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <computePositionWithEncoder+0x238>)
 8001518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151c:	461a      	mov	r2, r3
 800151e:	4613      	mov	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4413      	add	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	441a      	add	r2, r3
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <computePositionWithEncoder+0x234>)
 800152a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152e:	492a      	ldr	r1, [pc, #168]	; (80015d8 <computePositionWithEncoder+0x23c>)
 8001530:	fb81 0103 	smull	r0, r1, r1, r3
 8001534:	1089      	asrs	r1, r1, #2
 8001536:	17db      	asrs	r3, r3, #31
 8001538:	1acb      	subs	r3, r1, r3
 800153a:	b21b      	sxth	r3, r3
 800153c:	4413      	add	r3, r2
 800153e:	4a26      	ldr	r2, [pc, #152]	; (80015d8 <computePositionWithEncoder+0x23c>)
 8001540:	fb82 1203 	smull	r1, r2, r2, r3
 8001544:	10d2      	asrs	r2, r2, #3
 8001546:	17db      	asrs	r3, r3, #31
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	b21a      	sxth	r2, r3
 800154c:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <computePositionWithEncoder+0x238>)
 800154e:	801a      	strh	r2, [r3, #0]
//		speed = (95*speed + 5*speedTemp)/100;

		wr = (float)speed*1047/10000;
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <computePositionWithEncoder+0x238>)
 8001552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80015dc <computePositionWithEncoder+0x240>
 8001562:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001566:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80015e0 <computePositionWithEncoder+0x244>
 800156a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156e:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <computePositionWithEncoder+0x248>)
 8001570:	edc3 7a00 	vstr	s15, [r3]

		if(speedPIrate>9){
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <computePositionWithEncoder+0x24c>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	2b09      	cmp	r3, #9
 800157a:	d905      	bls.n	8001588 <computePositionWithEncoder+0x1ec>
			SpeedPIController();
 800157c:	f000 fa90 	bl	8001aa0 <SpeedPIController>
			speedPIrate = 0;
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <computePositionWithEncoder+0x24c>)
 8001582:	2200      	movs	r2, #0
 8001584:	801a      	strh	r2, [r3, #0]
		}

	} else {
		x++;
	}
}
 8001586:	e00c      	b.n	80015a2 <computePositionWithEncoder+0x206>
			speedPIrate++;
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <computePositionWithEncoder+0x24c>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	3301      	adds	r3, #1
 800158e:	b29a      	uxth	r2, r3
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <computePositionWithEncoder+0x24c>)
 8001592:	801a      	strh	r2, [r3, #0]
}
 8001594:	e005      	b.n	80015a2 <computePositionWithEncoder+0x206>
		x++;
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <computePositionWithEncoder+0x220>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	3301      	adds	r3, #1
 800159c:	b29a      	uxth	r2, r3
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <computePositionWithEncoder+0x220>)
 80015a0:	801a      	strh	r2, [r3, #0]
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40000400 	.word	0x40000400
 80015ac:	1b4e81b5 	.word	0x1b4e81b5
 80015b0:	20000080 	.word	0x20000080
 80015b4:	20000074 	.word	0x20000074
 80015b8:	200000b8 	.word	0x200000b8
 80015bc:	20000020 	.word	0x20000020
 80015c0:	200000b4 	.word	0x200000b4
 80015c4:	20000164 	.word	0x20000164
 80015c8:	20000248 	.word	0x20000248
 80015cc:	20000084 	.word	0x20000084
 80015d0:	20000158 	.word	0x20000158
 80015d4:	20000214 	.word	0x20000214
 80015d8:	66666667 	.word	0x66666667
 80015dc:	4482e000 	.word	0x4482e000
 80015e0:	461c4000 	.word	0x461c4000
 80015e4:	20000224 	.word	0x20000224
 80015e8:	20000082 	.word	0x20000082

080015ec <measureADC>:

/**
 * This function computes 2 phase currents and 2 BEMFs
 *
 */
void measureADC(){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc3, Icd, 1);
 80015f0:	2201      	movs	r2, #1
 80015f2:	492a      	ldr	r1, [pc, #168]	; (800169c <measureADC+0xb0>)
 80015f4:	482a      	ldr	r0, [pc, #168]	; (80016a0 <measureADC+0xb4>)
 80015f6:	f001 ffed 	bl	80035d4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc1, Iab, 2);
 80015fa:	2202      	movs	r2, #2
 80015fc:	4929      	ldr	r1, [pc, #164]	; (80016a4 <measureADC+0xb8>)
 80015fe:	482a      	ldr	r0, [pc, #168]	; (80016a8 <measureADC+0xbc>)
 8001600:	f001 ffe8 	bl	80035d4 <HAL_ADC_Start_DMA>

	// Compute abc currents
	Ia = -(((int16_t)Iab[0])-1935);
 8001604:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <measureADC+0xb8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	b29a      	uxth	r2, r3
 800160a:	f240 738f 	movw	r3, #1935	; 0x78f
 800160e:	1a9b      	subs	r3, r3, r2
 8001610:	b29b      	uxth	r3, r3
 8001612:	b21a      	sxth	r2, r3
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <measureADC+0xc0>)
 8001616:	801a      	strh	r2, [r3, #0]
	Ib = -((int16_t)Iab[1]-1935);
 8001618:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <measureADC+0xb8>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	b29a      	uxth	r2, r3
 800161e:	f240 738f 	movw	r3, #1935	; 0x78f
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	b29b      	uxth	r3, r3
 8001626:	b21a      	sxth	r2, r3
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <measureADC+0xc4>)
 800162a:	801a      	strh	r2, [r3, #0]
	Ic = -((int16_t)Icd[0]-1930);
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <measureADC+0xb0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	b29a      	uxth	r2, r3
 8001632:	f240 738a 	movw	r3, #1930	; 0x78a
 8001636:	1a9b      	subs	r3, r3, r2
 8001638:	b29b      	uxth	r3, r3
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <measureADC+0xc8>)
 800163e:	801a      	strh	r2, [r3, #0]

//	Vbus = ((int16_t)Icd[1]) + 1;

	if(startOCwatch && (Ia > 1000 || Ia < -1000
 8001640:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <measureADC+0xcc>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d025      	beq.n	8001694 <measureADC+0xa8>
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <measureADC+0xc0>)
 800164a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001652:	dc1d      	bgt.n	8001690 <measureADC+0xa4>
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <measureADC+0xc0>)
 8001656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800165e:	db17      	blt.n	8001690 <measureADC+0xa4>
	  || Ib > 1000 || Ib < -1000
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <measureADC+0xc4>)
 8001662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800166a:	dc11      	bgt.n	8001690 <measureADC+0xa4>
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <measureADC+0xc4>)
 800166e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001672:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001676:	db0b      	blt.n	8001690 <measureADC+0xa4>
	  || Ic > 1000 || Ic < -1000)){
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <measureADC+0xc8>)
 800167a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001682:	dc05      	bgt.n	8001690 <measureADC+0xa4>
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <measureADC+0xc8>)
 8001686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800168e:	da01      	bge.n	8001694 <measureADC+0xa8>
		stopMotor();
 8001690:	f7ff fe26 	bl	80012e0 <stopMotor>
	}

	// Compute rotor position
	computePositionWithEncoder();
 8001694:	f7ff fe82 	bl	800139c <computePositionWithEncoder>
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	24001010 	.word	0x24001010
 80016a0:	20005254 	.word	0x20005254
 80016a4:	24001004 	.word	0x24001004
 80016a8:	200051f0 	.word	0x200051f0
 80016ac:	200000ac 	.word	0x200000ac
 80016b0:	200001e0 	.word	0x200001e0
 80016b4:	2000020a 	.word	0x2000020a
 80016b8:	20000172 	.word	0x20000172

080016bc <limitTheta>:
 * This function limits the range of theta between 0 and 360 degrees
 *
 * @param short theta
 * @return short angle between 0 to 360 degrees
 */
short limitTheta(short theta){
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	80fb      	strh	r3, [r7, #6]
	if(theta < 0){
 80016c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	da1c      	bge.n	8001708 <limitTheta+0x4c>
		return ((360+theta) - 360*(1+(theta/360)));
 80016ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d2:	4a1c      	ldr	r2, [pc, #112]	; (8001744 <limitTheta+0x88>)
 80016d4:	fb82 1203 	smull	r1, r2, r2, r3
 80016d8:	441a      	add	r2, r3
 80016da:	1212      	asrs	r2, r2, #8
 80016dc:	17db      	asrs	r3, r3, #31
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	3301      	adds	r3, #1
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	0052      	lsls	r2, r2, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	461a      	mov	r2, r3
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	425b      	negs	r3, r3
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	4413      	add	r3, r2
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001702:	b29b      	uxth	r3, r3
 8001704:	b21b      	sxth	r3, r3
 8001706:	e017      	b.n	8001738 <limitTheta+0x7c>
	} else {
		return (theta - 360*(theta/360));
 8001708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800170c:	4a0d      	ldr	r2, [pc, #52]	; (8001744 <limitTheta+0x88>)
 800170e:	fb82 1203 	smull	r1, r2, r2, r3
 8001712:	441a      	add	r2, r3
 8001714:	1212      	asrs	r2, r2, #8
 8001716:	17db      	asrs	r3, r3, #31
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	b21b      	sxth	r3, r3
 800171c:	b29b      	uxth	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	0052      	lsls	r2, r2, #1
 8001722:	4413      	add	r3, r2
 8001724:	461a      	mov	r2, r3
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	425b      	negs	r3, r3
 800172e:	b29a      	uxth	r2, r3
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	4413      	add	r3, r2
 8001734:	b29b      	uxth	r3, r3
 8001736:	b21b      	sxth	r3, r3
	}
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	b60b60b7 	.word	0xb60b60b7

08001748 <sin2>:
 * This function computes sin(thetaElec) using LUT
 *
 * @param short thetaElec in degrees
 * @return short sin(x) range -512 to +512
 */
short sin2(short thetaElec){
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	80fb      	strh	r3, [r7, #6]
  thetaElec = limitTheta(thetaElec);
 8001752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ffb0 	bl	80016bc <limitTheta>
 800175c:	4603      	mov	r3, r0
 800175e:	80fb      	strh	r3, [r7, #6]

  if(thetaElec <= 90){
 8001760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001764:	2b5a      	cmp	r3, #90	; 0x5a
 8001766:	dc06      	bgt.n	8001776 <sin2+0x2e>
    return sinTable[thetaElec];
 8001768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176c:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <sin2+0x94>)
 800176e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001772:	b21b      	sxth	r3, r3
 8001774:	e02d      	b.n	80017d2 <sin2+0x8a>
  } else if(thetaElec > 90 && thetaElec <=180){
 8001776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800177a:	2b5a      	cmp	r3, #90	; 0x5a
 800177c:	dd0c      	ble.n	8001798 <sin2+0x50>
 800177e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001782:	2bb4      	cmp	r3, #180	; 0xb4
 8001784:	dc08      	bgt.n	8001798 <sin2+0x50>
    return sinTable[180 - thetaElec];
 8001786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178a:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800178e:	4a13      	ldr	r2, [pc, #76]	; (80017dc <sin2+0x94>)
 8001790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001794:	b21b      	sxth	r3, r3
 8001796:	e01c      	b.n	80017d2 <sin2+0x8a>
  } else if(thetaElec > 180 && thetaElec <= 270){
 8001798:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179c:	2bb4      	cmp	r3, #180	; 0xb4
 800179e:	dd0e      	ble.n	80017be <sin2+0x76>
 80017a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80017a8:	dc09      	bgt.n	80017be <sin2+0x76>
    return -sinTable[thetaElec - 180];
 80017aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ae:	3bb4      	subs	r3, #180	; 0xb4
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <sin2+0x94>)
 80017b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017b6:	425b      	negs	r3, r3
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	b21b      	sxth	r3, r3
 80017bc:	e009      	b.n	80017d2 <sin2+0x8a>
  } else {
    return -sinTable[360 - thetaElec];
 80017be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c2:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <sin2+0x94>)
 80017c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017cc:	425b      	negs	r3, r3
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	b21b      	sxth	r3, r3
  }
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	0800d484 	.word	0x0800d484

080017e0 <cos2>:
 * This function computes cos(theta) using LUT
 *
 * @param short theta in degrees
 * @return short cos(x) range -512 to +512
 */
short cos2(short theta){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	80fb      	strh	r3, [r7, #6]
  return sin2(theta+90);
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	335a      	adds	r3, #90	; 0x5a
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ffa8 	bl	8001748 <sin2>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <sinLowRes>:
 * This function computes sin(thetaElec) using LUT
 *
 * @param short thetaElec in degrees
 * @return short sin(x) range -512 to +512
 */
short sinLowRes(short thetaElec){
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
  thetaElec = limitTheta(thetaElec);
 800180e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff52 	bl	80016bc <limitTheta>
 8001818:	4603      	mov	r3, r0
 800181a:	80fb      	strh	r3, [r7, #6]

  if(thetaElec <= 90){
 800181c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001820:	2b5a      	cmp	r3, #90	; 0x5a
 8001822:	dc06      	bgt.n	8001832 <sinLowRes+0x2e>
    return sinTableLowRes[thetaElec];
 8001824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001828:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <sinLowRes+0x94>)
 800182a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800182e:	b21b      	sxth	r3, r3
 8001830:	e02d      	b.n	800188e <sinLowRes+0x8a>
  } else if(thetaElec > 90 && thetaElec <=180){
 8001832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001836:	2b5a      	cmp	r3, #90	; 0x5a
 8001838:	dd0c      	ble.n	8001854 <sinLowRes+0x50>
 800183a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183e:	2bb4      	cmp	r3, #180	; 0xb4
 8001840:	dc08      	bgt.n	8001854 <sinLowRes+0x50>
    return sinTableLowRes[180 - thetaElec];
 8001842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001846:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800184a:	4a13      	ldr	r2, [pc, #76]	; (8001898 <sinLowRes+0x94>)
 800184c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001850:	b21b      	sxth	r3, r3
 8001852:	e01c      	b.n	800188e <sinLowRes+0x8a>
  } else if(thetaElec > 180 && thetaElec <= 270){
 8001854:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001858:	2bb4      	cmp	r3, #180	; 0xb4
 800185a:	dd0e      	ble.n	800187a <sinLowRes+0x76>
 800185c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001860:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001864:	dc09      	bgt.n	800187a <sinLowRes+0x76>
    return -sinTableLowRes[thetaElec - 180];
 8001866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186a:	3bb4      	subs	r3, #180	; 0xb4
 800186c:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <sinLowRes+0x94>)
 800186e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001872:	425b      	negs	r3, r3
 8001874:	b29b      	uxth	r3, r3
 8001876:	b21b      	sxth	r3, r3
 8001878:	e009      	b.n	800188e <sinLowRes+0x8a>
  } else {
    return -sinTableLowRes[360 - thetaElec];
 800187a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800187e:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <sinLowRes+0x94>)
 8001884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001888:	425b      	negs	r3, r3
 800188a:	b29b      	uxth	r3, r3
 800188c:	b21b      	sxth	r3, r3
  }
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	0800d53c 	.word	0x0800d53c

0800189c <parkTransform>:

/**
 * This function computes Park transform
 *
 */
void parkTransform(short a, short b, short c, struct directQuad *Xdq){
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	4603      	mov	r3, r0
 80018a6:	81fb      	strh	r3, [r7, #14]
 80018a8:	460b      	mov	r3, r1
 80018aa:	81bb      	strh	r3, [r7, #12]
 80018ac:	4613      	mov	r3, r2
 80018ae:	817b      	strh	r3, [r7, #10]
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <parkTransform+0xb4>)
 80018b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b6:	461a      	mov	r2, r3
 80018b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018bc:	fb03 f202 	mul.w	r2, r3, r2
 80018c0:	4b24      	ldr	r3, [pc, #144]	; (8001954 <parkTransform+0xb8>)
 80018c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c6:	4619      	mov	r1, r3
 80018c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018cc:	fb03 f301 	mul.w	r3, r3, r1
 80018d0:	441a      	add	r2, r3
 80018d2:	4b21      	ldr	r3, [pc, #132]	; (8001958 <parkTransform+0xbc>)
 80018d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d8:	4619      	mov	r1, r3
 80018da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018de:	fb03 f301 	mul.w	r3, r3, r1
 80018e2:	4413      	add	r3, r2
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ec:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800195c <parkTransform+0xc0>
 80018f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	edc3 7a00 	vstr	s15, [r3]
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <parkTransform+0xc4>)
 80018fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001900:	461a      	mov	r2, r3
 8001902:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001906:	fb03 f202 	mul.w	r2, r3, r2
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <parkTransform+0xc8>)
 800190c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001910:	4619      	mov	r1, r3
 8001912:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001916:	fb03 f301 	mul.w	r3, r3, r1
 800191a:	441a      	add	r2, r3
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <parkTransform+0xcc>)
 800191e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001922:	4619      	mov	r1, r3
 8001924:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001928:	fb03 f301 	mul.w	r3, r3, r1
 800192c:	4413      	add	r3, r2
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001936:	eddf 6a09 	vldr	s13, [pc, #36]	; 800195c <parkTransform+0xc0>
 800193a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	200001e4 	.word	0x200001e4
 8001954:	20000178 	.word	0x20000178
 8001958:	20000234 	.word	0x20000234
 800195c:	44400000 	.word	0x44400000
 8001960:	20000210 	.word	0x20000210
 8001964:	20000076 	.word	0x20000076
 8001968:	20000150 	.word	0x20000150

0800196c <computeSinCos>:

/**
 * This function computes sine & cosine values for given thetaElec to be used in park transform
 *
 */
void computeSinCos(){
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	sin000 = sin2(thetaElec);
 8001970:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <computeSinCos+0xa0>)
 8001972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fee6 	bl	8001748 <sin2>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <computeSinCos+0xa4>)
 8001982:	801a      	strh	r2, [r3, #0]
	cos000 = cos2(thetaElec);
 8001984:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <computeSinCos+0xa0>)
 8001986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff28 	bl	80017e0 <cos2>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <computeSinCos+0xa8>)
 8001996:	801a      	strh	r2, [r3, #0]
	sin120 = sin2(thetaElec+120);
 8001998:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <computeSinCos+0xa0>)
 800199a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	3378      	adds	r3, #120	; 0x78
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fece 	bl	8001748 <sin2>
 80019ac:	4603      	mov	r3, r0
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <computeSinCos+0xac>)
 80019b2:	801a      	strh	r2, [r3, #0]
	sin240 = sin2(thetaElec+240);
 80019b4:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <computeSinCos+0xa0>)
 80019b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	33f0      	adds	r3, #240	; 0xf0
 80019be:	b29b      	uxth	r3, r3
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fec0 	bl	8001748 <sin2>
 80019c8:	4603      	mov	r3, r0
 80019ca:	461a      	mov	r2, r3
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <computeSinCos+0xb0>)
 80019ce:	801a      	strh	r2, [r3, #0]
	cos120 = cos2(thetaElec+120);
 80019d0:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <computeSinCos+0xa0>)
 80019d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	3378      	adds	r3, #120	; 0x78
 80019da:	b29b      	uxth	r3, r3
 80019dc:	b21b      	sxth	r3, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fefe 	bl	80017e0 <cos2>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <computeSinCos+0xb4>)
 80019ea:	801a      	strh	r2, [r3, #0]
	cos240 = cos2(thetaElec+240);
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <computeSinCos+0xa0>)
 80019ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	33f0      	adds	r3, #240	; 0xf0
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fef0 	bl	80017e0 <cos2>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <computeSinCos+0xb8>)
 8001a06:	801a      	strh	r2, [r3, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000080 	.word	0x20000080
 8001a10:	200001e4 	.word	0x200001e4
 8001a14:	20000210 	.word	0x20000210
 8001a18:	20000234 	.word	0x20000234
 8001a1c:	20000178 	.word	0x20000178
 8001a20:	20000150 	.word	0x20000150
 8001a24:	20000076 	.word	0x20000076

08001a28 <clarkeTransform>:

/**
 * This function computes Clarke transform
 *
 */
void clarkeTransform(float a, float b, float c, struct alphaBeta *Xalbt){
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a32:	edc7 0a02 	vstr	s1, [r7, #8]
 8001a36:	ed87 1a01 	vstr	s2, [r7, #4]
 8001a3a:	6038      	str	r0, [r7, #0]
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001a3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a40:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a44:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001a48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a4c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001a50:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a54:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a58:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8001a5c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	edc3 7a00 	vstr	s15, [r3]
	Xalbt->beta = (b-c)*250/433;
 8001a6a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a76:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001a98 <clarkeTransform+0x70>
 8001a7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a7e:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001a9c <clarkeTransform+0x74>
 8001a82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	437a0000 	.word	0x437a0000
 8001a9c:	43d88000 	.word	0x43d88000

08001aa0 <SpeedPIController>:
 *
 */

float Iterm = 0;
int16_t speedReq = 1500;
void SpeedPIController(){
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
	float Kp = 2;
 8001aa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aaa:	607b      	str	r3, [r7, #4]
	float Ki = 0.1;
 8001aac:	4b40      	ldr	r3, [pc, #256]	; (8001bb0 <SpeedPIController+0x110>)
 8001aae:	603b      	str	r3, [r7, #0]
	error = speedReq - speed;
 8001ab0:	4b40      	ldr	r3, [pc, #256]	; (8001bb4 <SpeedPIController+0x114>)
 8001ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	4b3f      	ldr	r3, [pc, #252]	; (8001bb8 <SpeedPIController+0x118>)
 8001aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	b21a      	sxth	r2, r3
 8001ac6:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <SpeedPIController+0x11c>)
 8001ac8:	801a      	strh	r2, [r3, #0]
	Kterm = (float)(error)*Kp;
 8001aca:	4b3c      	ldr	r3, [pc, #240]	; (8001bbc <SpeedPIController+0x11c>)
 8001acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad0:	ee07 3a90 	vmov	s15, r3
 8001ad4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae0:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <SpeedPIController+0x120>)
 8001ae2:	edc3 7a00 	vstr	s15, [r3]
	Iterm += (float)(error)*Ki;
 8001ae6:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <SpeedPIController+0x11c>)
 8001ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aec:	ee07 3a90 	vmov	s15, r3
 8001af0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af4:	edd7 7a00 	vldr	s15, [r7]
 8001af8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001afc:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <SpeedPIController+0x124>)
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b06:	4b2f      	ldr	r3, [pc, #188]	; (8001bc4 <SpeedPIController+0x124>)
 8001b08:	edc3 7a00 	vstr	s15, [r3]

	if(Iterm > 3250){
 8001b0c:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <SpeedPIController+0x124>)
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001bc8 <SpeedPIController+0x128>
 8001b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1e:	dd03      	ble.n	8001b28 <SpeedPIController+0x88>
		Iterm = 3250;
 8001b20:	4b28      	ldr	r3, [pc, #160]	; (8001bc4 <SpeedPIController+0x124>)
 8001b22:	4a2a      	ldr	r2, [pc, #168]	; (8001bcc <SpeedPIController+0x12c>)
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	e00c      	b.n	8001b42 <SpeedPIController+0xa2>
	} else if(Iterm < -3250){
 8001b28:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <SpeedPIController+0x124>)
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001bd0 <SpeedPIController+0x130>
 8001b32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3a:	d502      	bpl.n	8001b42 <SpeedPIController+0xa2>
		Iterm = -3250;
 8001b3c:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <SpeedPIController+0x124>)
 8001b3e:	4a25      	ldr	r2, [pc, #148]	; (8001bd4 <SpeedPIController+0x134>)
 8001b40:	601a      	str	r2, [r3, #0]
	}

	IqRef = (int16_t)(Kterm+Iterm);
 8001b42:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <SpeedPIController+0x120>)
 8001b44:	ed93 7a00 	vldr	s14, [r3]
 8001b48:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <SpeedPIController+0x124>)
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b56:	ee17 3a90 	vmov	r3, s15
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	ee07 3a90 	vmov	s15, r3
 8001b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <SpeedPIController+0x138>)
 8001b66:	edc3 7a00 	vstr	s15, [r3]

	if(IqRef > 4500){
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <SpeedPIController+0x138>)
 8001b6c:	edd3 7a00 	vldr	s15, [r3]
 8001b70:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001bdc <SpeedPIController+0x13c>
 8001b74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7c:	dd03      	ble.n	8001b86 <SpeedPIController+0xe6>
		IqRef = 4500;
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <SpeedPIController+0x138>)
 8001b80:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <SpeedPIController+0x140>)
 8001b82:	601a      	str	r2, [r3, #0]
	} else if(IqRef < -4500){
		IqRef = -4500;
	}
}
 8001b84:	e00d      	b.n	8001ba2 <SpeedPIController+0x102>
	} else if(IqRef < -4500){
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <SpeedPIController+0x138>)
 8001b88:	edd3 7a00 	vldr	s15, [r3]
 8001b8c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001be4 <SpeedPIController+0x144>
 8001b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b98:	d400      	bmi.n	8001b9c <SpeedPIController+0xfc>
}
 8001b9a:	e002      	b.n	8001ba2 <SpeedPIController+0x102>
		IqRef = -4500;
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <SpeedPIController+0x138>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <SpeedPIController+0x148>)
 8001ba0:	601a      	str	r2, [r3, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	3dcccccd 	.word	0x3dcccccd
 8001bb4:	20000022 	.word	0x20000022
 8001bb8:	20000214 	.word	0x20000214
 8001bbc:	20000212 	.word	0x20000212
 8001bc0:	200001ec 	.word	0x200001ec
 8001bc4:	2000006c 	.word	0x2000006c
 8001bc8:	454b2000 	.word	0x454b2000
 8001bcc:	454b2000 	.word	0x454b2000
 8001bd0:	c54b2000 	.word	0xc54b2000
 8001bd4:	c54b2000 	.word	0xc54b2000
 8001bd8:	20000174 	.word	0x20000174
 8001bdc:	458ca000 	.word	0x458ca000
 8001be0:	458ca000 	.word	0x458ca000
 8001be4:	c58ca000 	.word	0xc58ca000
 8001be8:	c58ca000 	.word	0xc58ca000

08001bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001bf2:	f000 fcdb 	bl	80025ac <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bf6:	4b59      	ldr	r3, [pc, #356]	; (8001d5c <main+0x170>)
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d11b      	bne.n	8001c3a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c02:	f3bf 8f4f 	dsb	sy
}
 8001c06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c08:	f3bf 8f6f 	isb	sy
}
 8001c0c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001c0e:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <main+0x170>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001c16:	f3bf 8f4f 	dsb	sy
}
 8001c1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c1c:	f3bf 8f6f 	isb	sy
}
 8001c20:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001c22:	4b4e      	ldr	r3, [pc, #312]	; (8001d5c <main+0x170>)
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	4a4d      	ldr	r2, [pc, #308]	; (8001d5c <main+0x170>)
 8001c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c2c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c2e:	f3bf 8f4f 	dsb	sy
}
 8001c32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c34:	f3bf 8f6f 	isb	sy
}
 8001c38:	e000      	b.n	8001c3c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001c3a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001c3c:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <main+0x170>)
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d138      	bne.n	8001cba <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001c48:	4b44      	ldr	r3, [pc, #272]	; (8001d5c <main+0x170>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001c50:	f3bf 8f4f 	dsb	sy
}
 8001c54:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001c56:	4b41      	ldr	r3, [pc, #260]	; (8001d5c <main+0x170>)
 8001c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c5c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	0b5b      	lsrs	r3, r3, #13
 8001c62:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c66:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	08db      	lsrs	r3, r3, #3
 8001c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c70:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	015a      	lsls	r2, r3, #5
 8001c76:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001c7a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c80:	4936      	ldr	r1, [pc, #216]	; (8001d5c <main+0x170>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	1e5a      	subs	r2, r3, #1
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1ef      	bne.n	8001c72 <main+0x86>
    } while(sets-- != 0U);
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1e5a      	subs	r2, r3, #1
 8001c96:	60ba      	str	r2, [r7, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1e5      	bne.n	8001c68 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c9c:	f3bf 8f4f 	dsb	sy
}
 8001ca0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001ca2:	4b2e      	ldr	r3, [pc, #184]	; (8001d5c <main+0x170>)
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	4a2d      	ldr	r2, [pc, #180]	; (8001d5c <main+0x170>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cae:	f3bf 8f4f 	dsb	sy
}
 8001cb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb4:	f3bf 8f6f 	isb	sy
}
 8001cb8:	e000      	b.n	8001cbc <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001cba:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cbc:	f001 f83e 	bl	8002d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc0:	f000 f858 	bl	8001d74 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001cc4:	f000 f8de 	bl	8001e84 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cc8:	f000 fbbc 	bl	8002444 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ccc:	f000 fb92 	bl	80023f4 <MX_DMA_Init>
  MX_TIM1_Init();
 8001cd0:	f000 fa18 	bl	8002104 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001cd4:	f000 f926 	bl	8001f24 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001cd8:	f000 f9ae 	bl	8002038 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8001cdc:	f000 fb3c 	bl	8002358 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001ce0:	f000 fae4 	bl	80022ac <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001ce4:	f000 f8fa 	bl	8001edc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  untitled0_initialize();
 8001ce8:	f000 fff6 	bl	8002cd8 <untitled0_initialize>
//  Subsystem_initialize();

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001cec:	213c      	movs	r1, #60	; 0x3c
 8001cee:	481c      	ldr	r0, [pc, #112]	; (8001d60 <main+0x174>)
 8001cf0:	f008 fe8a 	bl	800aa08 <HAL_TIM_Encoder_Start>

	initModelPredictiveControl();
 8001cf4:	f7fe fc6c 	bl	80005d0 <initModelPredictiveControl>


	// Calibrate ADCs
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001cf8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4819      	ldr	r0, [pc, #100]	; (8001d64 <main+0x178>)
 8001d00:	f002 fb7c 	bl	80043fc <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001d04:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4817      	ldr	r0, [pc, #92]	; (8001d68 <main+0x17c>)
 8001d0c:	f002 fb76 	bl	80043fc <HAL_ADCEx_Calibration_Start>

	// Enable MOSFET drivers
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
 8001d10:	2201      	movs	r2, #1
 8001d12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d16:	4815      	ldr	r0, [pc, #84]	; (8001d6c <main+0x180>)
 8001d18:	f005 f8e0 	bl	8006edc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d22:	4812      	ldr	r0, [pc, #72]	; (8001d6c <main+0x180>)
 8001d24:	f005 f8da 	bl	8006edc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2e:	480f      	ldr	r0, [pc, #60]	; (8001d6c <main+0x180>)
 8001d30:	f005 f8d4 	bl	8006edc <HAL_GPIO_WritePin>

	//	 Start timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8001d34:	210c      	movs	r1, #12
 8001d36:	480e      	ldr	r0, [pc, #56]	; (8001d70 <main+0x184>)
 8001d38:	f008 fc66 	bl	800a608 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	480c      	ldr	r0, [pc, #48]	; (8001d70 <main+0x184>)
 8001d40:	f008 fb54 	bl	800a3ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001d44:	2104      	movs	r1, #4
 8001d46:	480a      	ldr	r0, [pc, #40]	; (8001d70 <main+0x184>)
 8001d48:	f008 fb50 	bl	800a3ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001d4c:	2108      	movs	r1, #8
 8001d4e:	4808      	ldr	r0, [pc, #32]	; (8001d70 <main+0x184>)
 8001d50:	f008 fb4c 	bl	800a3ec <HAL_TIM_PWM_Start>

	receiveUART();
 8001d54:	f7ff f9d8 	bl	8001108 <receiveUART>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <main+0x16c>
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00
 8001d60:	200051a4 	.word	0x200051a4
 8001d64:	200051f0 	.word	0x200051f0
 8001d68:	20005254 	.word	0x20005254
 8001d6c:	58020800 	.word	0x58020800
 8001d70:	20005330 	.word	0x20005330

08001d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b09c      	sub	sp, #112	; 0x70
 8001d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7e:	224c      	movs	r2, #76	; 0x4c
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f00b fb6a 	bl	800d45c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f00b fb64 	bl	800d45c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001d94:	2002      	movs	r0, #2
 8001d96:	f005 f8f9 	bl	8006f8c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	4b36      	ldr	r3, [pc, #216]	; (8001e78 <SystemClock_Config+0x104>)
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	4a35      	ldr	r2, [pc, #212]	; (8001e78 <SystemClock_Config+0x104>)
 8001da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001da8:	6193      	str	r3, [r2, #24]
 8001daa:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <SystemClock_Config+0x104>)
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	4b31      	ldr	r3, [pc, #196]	; (8001e7c <SystemClock_Config+0x108>)
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	4a30      	ldr	r2, [pc, #192]	; (8001e7c <SystemClock_Config+0x108>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001dc0:	4b2e      	ldr	r3, [pc, #184]	; (8001e7c <SystemClock_Config+0x108>)
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	603b      	str	r3, [r7, #0]
 8001dca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001dcc:	bf00      	nop
 8001dce:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <SystemClock_Config+0x104>)
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dda:	d1f8      	bne.n	8001dce <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001ddc:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <SystemClock_Config+0x10c>)
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	f023 0303 	bic.w	r3, r3, #3
 8001de4:	4a26      	ldr	r2, [pc, #152]	; (8001e80 <SystemClock_Config+0x10c>)
 8001de6:	f043 0302 	orr.w	r3, r3, #2
 8001dea:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001dec:	2303      	movs	r3, #3
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001df0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001df6:	2301      	movs	r3, #1
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dfa:	2340      	movs	r3, #64	; 0x40
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e02:	2302      	movs	r3, #2
 8001e04:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e06:	2301      	movs	r3, #1
 8001e08:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001e0a:	2378      	movs	r3, #120	; 0x78
 8001e0c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e12:	2304      	movs	r3, #4
 8001e14:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e16:	2302      	movs	r3, #2
 8001e18:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001e1a:	230c      	movs	r3, #12
 8001e1c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f005 f8e8 	bl	8007000 <HAL_RCC_OscConfig>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001e36:	f000 fbe7 	bl	8002608 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e3a:	233f      	movs	r3, #63	; 0x3f
 8001e3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001e46:	2308      	movs	r3, #8
 8001e48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001e4a:	2340      	movs	r3, #64	; 0x40
 8001e4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001e4e:	2340      	movs	r3, #64	; 0x40
 8001e50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e56:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001e58:	2340      	movs	r3, #64	; 0x40
 8001e5a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2104      	movs	r1, #4
 8001e60:	4618      	mov	r0, r3
 8001e62:	f005 fcf9 	bl	8007858 <HAL_RCC_ClockConfig>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001e6c:	f000 fbcc 	bl	8002608 <Error_Handler>
  }
}
 8001e70:	bf00      	nop
 8001e72:	3770      	adds	r7, #112	; 0x70
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	58024800 	.word	0x58024800
 8001e7c:	58000400 	.word	0x58000400
 8001e80:	58024400 	.word	0x58024400

08001e84 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b0b0      	sub	sp, #192	; 0xc0
 8001e88:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	22bc      	movs	r2, #188	; 0xbc
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f00b fae3 	bl	800d45c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e96:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e9a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8001ea0:	2313      	movs	r3, #19
 8001ea2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001eac:	2302      	movs	r3, #2
 8001eae:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001eb0:	23c0      	movs	r3, #192	; 0xc0
 8001eb2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001eb4:	2320      	movs	r3, #32
 8001eb6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f006 f853 	bl	8007f70 <HAL_RCCEx_PeriphCLKConfig>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8001ed0:	f000 fb9a 	bl	8002608 <Error_Handler>
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	37c0      	adds	r7, #192	; 0xc0
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* TIM1_BRK_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2018      	movs	r0, #24
 8001ee6:	f002 fcbc 	bl	8004862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001eea:	2018      	movs	r0, #24
 8001eec:	f002 fcd3 	bl	8004896 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	2028      	movs	r0, #40	; 0x28
 8001ef6:	f002 fcb4 	bl	8004862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001efa:	2028      	movs	r0, #40	; 0x28
 8001efc:	f002 fccb 	bl	8004896 <HAL_NVIC_EnableIRQ>
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2100      	movs	r1, #0
 8001f04:	201b      	movs	r0, #27
 8001f06:	f002 fcac 	bl	8004862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f0a:	201b      	movs	r0, #27
 8001f0c:	f002 fcc3 	bl	8004896 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2100      	movs	r1, #0
 8001f14:	200c      	movs	r0, #12
 8001f16:	f002 fca4 	bl	8004862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001f1a:	200c      	movs	r0, #12
 8001f1c:	f002 fcbb 	bl	8004896 <HAL_NVIC_EnableIRQ>
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001f2a:	f107 031c 	add.w	r3, r7, #28
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f36:	463b      	mov	r3, r7
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
 8001f44:	615a      	str	r2, [r3, #20]
 8001f46:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f48:	4b37      	ldr	r3, [pc, #220]	; (8002028 <MX_ADC1_Init+0x104>)
 8001f4a:	4a38      	ldr	r2, [pc, #224]	; (800202c <MX_ADC1_Init+0x108>)
 8001f4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001f4e:	4b36      	ldr	r3, [pc, #216]	; (8002028 <MX_ADC1_Init+0x104>)
 8001f50:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f56:	4b34      	ldr	r3, [pc, #208]	; (8002028 <MX_ADC1_Init+0x104>)
 8001f58:	2208      	movs	r2, #8
 8001f5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f5c:	4b32      	ldr	r3, [pc, #200]	; (8002028 <MX_ADC1_Init+0x104>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f62:	4b31      	ldr	r3, [pc, #196]	; (8002028 <MX_ADC1_Init+0x104>)
 8001f64:	2204      	movs	r2, #4
 8001f66:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f68:	4b2f      	ldr	r3, [pc, #188]	; (8002028 <MX_ADC1_Init+0x104>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f6e:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <MX_ADC1_Init+0x104>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8001f74:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <MX_ADC1_Init+0x104>)
 8001f76:	2202      	movs	r2, #2
 8001f78:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f7a:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <MX_ADC1_Init+0x104>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f80:	4b29      	ldr	r3, [pc, #164]	; (8002028 <MX_ADC1_Init+0x104>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f86:	4b28      	ldr	r3, [pc, #160]	; (8002028 <MX_ADC1_Init+0x104>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001f8c:	4b26      	ldr	r3, [pc, #152]	; (8002028 <MX_ADC1_Init+0x104>)
 8001f8e:	2203      	movs	r2, #3
 8001f90:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001f92:	4b25      	ldr	r3, [pc, #148]	; (8002028 <MX_ADC1_Init+0x104>)
 8001f94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f98:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001f9a:	4b23      	ldr	r3, [pc, #140]	; (8002028 <MX_ADC1_Init+0x104>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001fa0:	4b21      	ldr	r3, [pc, #132]	; (8002028 <MX_ADC1_Init+0x104>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fa8:	481f      	ldr	r0, [pc, #124]	; (8002028 <MX_ADC1_Init+0x104>)
 8001faa:	f001 f973 	bl	8003294 <HAL_ADC_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001fb4:	f000 fb28 	bl	8002608 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4819      	ldr	r0, [pc, #100]	; (8002028 <MX_ADC1_Init+0x104>)
 8001fc4:	f002 fa7e 	bl	80044c4 <HAL_ADCEx_MultiModeConfigChannel>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001fce:	f000 fb1b 	bl	8002608 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <MX_ADC1_Init+0x10c>)
 8001fd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fd6:	2306      	movs	r3, #6
 8001fd8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001fde:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001fe2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ff0:	463b      	mov	r3, r7
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480c      	ldr	r0, [pc, #48]	; (8002028 <MX_ADC1_Init+0x104>)
 8001ff6:	f001 fbcf 	bl	8003798 <HAL_ADC_ConfigChannel>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8002000:	f000 fb02 	bl	8002608 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <MX_ADC1_Init+0x110>)
 8002006:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002008:	230c      	movs	r3, #12
 800200a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800200c:	463b      	mov	r3, r7
 800200e:	4619      	mov	r1, r3
 8002010:	4805      	ldr	r0, [pc, #20]	; (8002028 <MX_ADC1_Init+0x104>)
 8002012:	f001 fbc1 	bl	8003798 <HAL_ADC_ConfigChannel>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 800201c:	f000 faf4 	bl	8002608 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002020:	bf00      	nop
 8002022:	3728      	adds	r7, #40	; 0x28
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	200051f0 	.word	0x200051f0
 800202c:	40022000 	.word	0x40022000
 8002030:	2e300800 	.word	0x2e300800
 8002034:	2a000400 	.word	0x2a000400

08002038 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
 800204c:	615a      	str	r2, [r3, #20]
 800204e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8002050:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <MX_ADC3_Init+0xc0>)
 8002052:	4a2a      	ldr	r2, [pc, #168]	; (80020fc <MX_ADC3_Init+0xc4>)
 8002054:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002056:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <MX_ADC3_Init+0xc0>)
 8002058:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800205c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800205e:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <MX_ADC3_Init+0xc0>)
 8002060:	2208      	movs	r2, #8
 8002062:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002064:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <MX_ADC3_Init+0xc0>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800206a:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <MX_ADC3_Init+0xc0>)
 800206c:	2204      	movs	r2, #4
 800206e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002070:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <MX_ADC3_Init+0xc0>)
 8002072:	2200      	movs	r2, #0
 8002074:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <MX_ADC3_Init+0xc0>)
 8002078:	2200      	movs	r2, #0
 800207a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800207c:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <MX_ADC3_Init+0xc0>)
 800207e:	2201      	movs	r2, #1
 8002080:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <MX_ADC3_Init+0xc0>)
 8002084:	2200      	movs	r2, #0
 8002086:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002088:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <MX_ADC3_Init+0xc0>)
 800208a:	2200      	movs	r2, #0
 800208c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <MX_ADC3_Init+0xc0>)
 8002090:	2200      	movs	r2, #0
 8002092:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8002094:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <MX_ADC3_Init+0xc0>)
 8002096:	2203      	movs	r2, #3
 8002098:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <MX_ADC3_Init+0xc0>)
 800209c:	2200      	movs	r2, #0
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80020a0:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <MX_ADC3_Init+0xc0>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80020a6:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <MX_ADC3_Init+0xc0>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80020ae:	4812      	ldr	r0, [pc, #72]	; (80020f8 <MX_ADC3_Init+0xc0>)
 80020b0:	f001 f8f0 	bl	8003294 <HAL_ADC_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80020ba:	f000 faa5 	bl	8002608 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <MX_ADC3_Init+0xc8>)
 80020c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020c2:	2306      	movs	r3, #6
 80020c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80020ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020d0:	2304      	movs	r3, #4
 80020d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	4619      	mov	r1, r3
 80020e0:	4805      	ldr	r0, [pc, #20]	; (80020f8 <MX_ADC3_Init+0xc0>)
 80020e2:	f001 fb59 	bl	8003798 <HAL_ADC_ConfigChannel>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 80020ec:	f000 fa8c 	bl	8002608 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80020f0:	bf00      	nop
 80020f2:	3720      	adds	r7, #32
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20005254 	.word	0x20005254
 80020fc:	58026000 	.word	0x58026000
 8002100:	08600004 	.word	0x08600004

08002104 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b09a      	sub	sp, #104	; 0x68
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800210a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002118:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002124:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
 8002134:	615a      	str	r2, [r3, #20]
 8002136:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	222c      	movs	r2, #44	; 0x2c
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f00b f98c 	bl	800d45c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002144:	4b57      	ldr	r3, [pc, #348]	; (80022a4 <MX_TIM1_Init+0x1a0>)
 8002146:	4a58      	ldr	r2, [pc, #352]	; (80022a8 <MX_TIM1_Init+0x1a4>)
 8002148:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 103;
 800214a:	4b56      	ldr	r3, [pc, #344]	; (80022a4 <MX_TIM1_Init+0x1a0>)
 800214c:	2267      	movs	r2, #103	; 0x67
 800214e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002150:	4b54      	ldr	r3, [pc, #336]	; (80022a4 <MX_TIM1_Init+0x1a0>)
 8002152:	2220      	movs	r2, #32
 8002154:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 72;
 8002156:	4b53      	ldr	r3, [pc, #332]	; (80022a4 <MX_TIM1_Init+0x1a0>)
 8002158:	2248      	movs	r2, #72	; 0x48
 800215a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800215c:	4b51      	ldr	r3, [pc, #324]	; (80022a4 <MX_TIM1_Init+0x1a0>)
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002162:	4b50      	ldr	r3, [pc, #320]	; (80022a4 <MX_TIM1_Init+0x1a0>)
 8002164:	2200      	movs	r2, #0
 8002166:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002168:	4b4e      	ldr	r3, [pc, #312]	; (80022a4 <MX_TIM1_Init+0x1a0>)
 800216a:	2280      	movs	r2, #128	; 0x80
 800216c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800216e:	484d      	ldr	r0, [pc, #308]	; (80022a4 <MX_TIM1_Init+0x1a0>)
 8002170:	f008 f884 	bl	800a27c <HAL_TIM_Base_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800217a:	f000 fa45 	bl	8002608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800217e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002182:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002184:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002188:	4619      	mov	r1, r3
 800218a:	4846      	ldr	r0, [pc, #280]	; (80022a4 <MX_TIM1_Init+0x1a0>)
 800218c:	f008 fefe 	bl	800af8c <HAL_TIM_ConfigClockSource>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002196:	f000 fa37 	bl	8002608 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800219a:	4842      	ldr	r0, [pc, #264]	; (80022a4 <MX_TIM1_Init+0x1a0>)
 800219c:	f008 f8c5 	bl	800a32a <HAL_TIM_PWM_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80021a6:	f000 fa2f 	bl	8002608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021ba:	4619      	mov	r1, r3
 80021bc:	4839      	ldr	r0, [pc, #228]	; (80022a4 <MX_TIM1_Init+0x1a0>)
 80021be:	f009 fc43 	bl	800ba48 <HAL_TIMEx_MasterConfigSynchronization>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80021c8:	f000 fa1e 	bl	8002608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021cc:	2360      	movs	r3, #96	; 0x60
 80021ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021d4:	2300      	movs	r3, #0
 80021d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021d8:	2300      	movs	r3, #0
 80021da:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021e0:	2300      	movs	r3, #0
 80021e2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021e4:	2300      	movs	r3, #0
 80021e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021ec:	2200      	movs	r2, #0
 80021ee:	4619      	mov	r1, r3
 80021f0:	482c      	ldr	r0, [pc, #176]	; (80022a4 <MX_TIM1_Init+0x1a0>)
 80021f2:	f008 fdb7 	bl	800ad64 <HAL_TIM_PWM_ConfigChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80021fc:	f000 fa04 	bl	8002608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002200:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002204:	2204      	movs	r2, #4
 8002206:	4619      	mov	r1, r3
 8002208:	4826      	ldr	r0, [pc, #152]	; (80022a4 <MX_TIM1_Init+0x1a0>)
 800220a:	f008 fdab 	bl	800ad64 <HAL_TIM_PWM_ConfigChannel>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8002214:	f000 f9f8 	bl	8002608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002218:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800221c:	2208      	movs	r2, #8
 800221e:	4619      	mov	r1, r3
 8002220:	4820      	ldr	r0, [pc, #128]	; (80022a4 <MX_TIM1_Init+0x1a0>)
 8002222:	f008 fd9f 	bl	800ad64 <HAL_TIM_PWM_ConfigChannel>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800222c:	f000 f9ec 	bl	8002608 <Error_Handler>
  }
  sConfigOC.Pulse = 72;
 8002230:	2348      	movs	r3, #72	; 0x48
 8002232:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002234:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002238:	220c      	movs	r2, #12
 800223a:	4619      	mov	r1, r3
 800223c:	4819      	ldr	r0, [pc, #100]	; (80022a4 <MX_TIM1_Init+0x1a0>)
 800223e:	f008 fd91 	bl	800ad64 <HAL_TIM_PWM_ConfigChannel>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8002248:	f000 f9de 	bl	8002608 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800224c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002250:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8002252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002256:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8002258:	f44f 7380 	mov.w	r3, #256	; 0x100
 800225c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002266:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800226a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8002270:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002274:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_LOW;
 8002276:	2300      	movs	r3, #0
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	4619      	mov	r1, r3
 8002286:	4807      	ldr	r0, [pc, #28]	; (80022a4 <MX_TIM1_Init+0x1a0>)
 8002288:	f009 fc6c 	bl	800bb64 <HAL_TIMEx_ConfigBreakDeadTime>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8002292:	f000 f9b9 	bl	8002608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002296:	4803      	ldr	r0, [pc, #12]	; (80022a4 <MX_TIM1_Init+0x1a0>)
 8002298:	f000 fb4c 	bl	8002934 <HAL_TIM_MspPostInit>

}
 800229c:	bf00      	nop
 800229e:	3768      	adds	r7, #104	; 0x68
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20005330 	.word	0x20005330
 80022a8:	40010000 	.word	0x40010000

080022ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08c      	sub	sp, #48	; 0x30
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	2224      	movs	r2, #36	; 0x24
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f00b f8ce 	bl	800d45c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c0:	463b      	mov	r3, r7
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022ca:	4b21      	ldr	r3, [pc, #132]	; (8002350 <MX_TIM3_Init+0xa4>)
 80022cc:	4a21      	ldr	r2, [pc, #132]	; (8002354 <MX_TIM3_Init+0xa8>)
 80022ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022d0:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <MX_TIM3_Init+0xa4>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d6:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <MX_TIM3_Init+0xa4>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 299;
 80022dc:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <MX_TIM3_Init+0xa4>)
 80022de:	f240 122b 	movw	r2, #299	; 0x12b
 80022e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e4:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <MX_TIM3_Init+0xa4>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <MX_TIM3_Init+0xa4>)
 80022ec:	2280      	movs	r2, #128	; 0x80
 80022ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80022f0:	2301      	movs	r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80022f4:	2302      	movs	r3, #2
 80022f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022f8:	2301      	movs	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002304:	2302      	movs	r3, #2
 8002306:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002308:	2301      	movs	r3, #1
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800230c:	2300      	movs	r3, #0
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	4619      	mov	r1, r3
 800231a:	480d      	ldr	r0, [pc, #52]	; (8002350 <MX_TIM3_Init+0xa4>)
 800231c:	f008 face 	bl	800a8bc <HAL_TIM_Encoder_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002326:	f000 f96f 	bl	8002608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002332:	463b      	mov	r3, r7
 8002334:	4619      	mov	r1, r3
 8002336:	4806      	ldr	r0, [pc, #24]	; (8002350 <MX_TIM3_Init+0xa4>)
 8002338:	f009 fb86 	bl	800ba48 <HAL_TIMEx_MasterConfigSynchronization>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002342:	f000 f961 	bl	8002608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002346:	bf00      	nop
 8002348:	3730      	adds	r7, #48	; 0x30
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200051a4 	.word	0x200051a4
 8002354:	40000400 	.word	0x40000400

08002358 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800235c:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 800235e:	4a23      	ldr	r2, [pc, #140]	; (80023ec <MX_USART3_UART_Init+0x94>)
 8002360:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 4000000;
 8002362:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 8002364:	4a22      	ldr	r2, [pc, #136]	; (80023f0 <MX_USART3_UART_Init+0x98>)
 8002366:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002368:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800236e:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 8002370:	2200      	movs	r2, #0
 8002372:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002374:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 8002376:	2200      	movs	r2, #0
 8002378:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800237a:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 800237c:	220c      	movs	r2, #12
 800237e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 8002382:	2200      	movs	r2, #0
 8002384:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 8002388:	2200      	movs	r2, #0
 800238a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 800238e:	2200      	movs	r2, #0
 8002390:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 8002394:	2200      	movs	r2, #0
 8002396:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 800239a:	2200      	movs	r2, #0
 800239c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800239e:	4812      	ldr	r0, [pc, #72]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 80023a0:	f009 fc7c 	bl	800bc9c <HAL_UART_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80023aa:	f000 f92d 	bl	8002608 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023ae:	2100      	movs	r1, #0
 80023b0:	480d      	ldr	r0, [pc, #52]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 80023b2:	f00a ff65 	bl	800d280 <HAL_UARTEx_SetTxFifoThreshold>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80023bc:	f000 f924 	bl	8002608 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023c0:	2100      	movs	r1, #0
 80023c2:	4809      	ldr	r0, [pc, #36]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 80023c4:	f00a ff9a 	bl	800d2fc <HAL_UARTEx_SetRxFifoThreshold>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80023ce:	f000 f91b 	bl	8002608 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <MX_USART3_UART_Init+0x90>)
 80023d4:	f00a ff1b 	bl	800d20e <HAL_UARTEx_DisableFifoMode>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80023de:	f000 f913 	bl	8002608 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200000bc 	.word	0x200000bc
 80023ec:	40004800 	.word	0x40004800
 80023f0:	003d0900 	.word	0x003d0900

080023f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023fa:	4b11      	ldr	r3, [pc, #68]	; (8002440 <MX_DMA_Init+0x4c>)
 80023fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002400:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <MX_DMA_Init+0x4c>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <MX_DMA_Init+0x4c>)
 800240c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002418:	2200      	movs	r2, #0
 800241a:	2100      	movs	r1, #0
 800241c:	200b      	movs	r0, #11
 800241e:	f002 fa20 	bl	8004862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002422:	200b      	movs	r0, #11
 8002424:	f002 fa37 	bl	8004896 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002428:	2200      	movs	r2, #0
 800242a:	2100      	movs	r1, #0
 800242c:	200d      	movs	r0, #13
 800242e:	f002 fa18 	bl	8004862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002432:	200d      	movs	r0, #13
 8002434:	f002 fa2f 	bl	8004896 <HAL_NVIC_EnableIRQ>

}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	58024400 	.word	0x58024400

08002444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08c      	sub	sp, #48	; 0x30
 8002448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244a:	f107 031c 	add.w	r3, r7, #28
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
 8002458:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800245a:	4b51      	ldr	r3, [pc, #324]	; (80025a0 <MX_GPIO_Init+0x15c>)
 800245c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002460:	4a4f      	ldr	r2, [pc, #316]	; (80025a0 <MX_GPIO_Init+0x15c>)
 8002462:	f043 0310 	orr.w	r3, r3, #16
 8002466:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800246a:	4b4d      	ldr	r3, [pc, #308]	; (80025a0 <MX_GPIO_Init+0x15c>)
 800246c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002478:	4b49      	ldr	r3, [pc, #292]	; (80025a0 <MX_GPIO_Init+0x15c>)
 800247a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800247e:	4a48      	ldr	r2, [pc, #288]	; (80025a0 <MX_GPIO_Init+0x15c>)
 8002480:	f043 0304 	orr.w	r3, r3, #4
 8002484:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002488:	4b45      	ldr	r3, [pc, #276]	; (80025a0 <MX_GPIO_Init+0x15c>)
 800248a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002496:	4b42      	ldr	r3, [pc, #264]	; (80025a0 <MX_GPIO_Init+0x15c>)
 8002498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800249c:	4a40      	ldr	r2, [pc, #256]	; (80025a0 <MX_GPIO_Init+0x15c>)
 800249e:	f043 0320 	orr.w	r3, r3, #32
 80024a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024a6:	4b3e      	ldr	r3, [pc, #248]	; (80025a0 <MX_GPIO_Init+0x15c>)
 80024a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024b4:	4b3a      	ldr	r3, [pc, #232]	; (80025a0 <MX_GPIO_Init+0x15c>)
 80024b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ba:	4a39      	ldr	r2, [pc, #228]	; (80025a0 <MX_GPIO_Init+0x15c>)
 80024bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c4:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <MX_GPIO_Init+0x15c>)
 80024c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d2:	4b33      	ldr	r3, [pc, #204]	; (80025a0 <MX_GPIO_Init+0x15c>)
 80024d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d8:	4a31      	ldr	r2, [pc, #196]	; (80025a0 <MX_GPIO_Init+0x15c>)
 80024da:	f043 0302 	orr.w	r3, r3, #2
 80024de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024e2:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <MX_GPIO_Init+0x15c>)
 80024e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024f0:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <MX_GPIO_Init+0x15c>)
 80024f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f6:	4a2a      	ldr	r2, [pc, #168]	; (80025a0 <MX_GPIO_Init+0x15c>)
 80024f8:	f043 0308 	orr.w	r3, r3, #8
 80024fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002500:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <MX_GPIO_Init+0x15c>)
 8002502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800250e:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <MX_GPIO_Init+0x15c>)
 8002510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002514:	4a22      	ldr	r2, [pc, #136]	; (80025a0 <MX_GPIO_Init+0x15c>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800251e:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <MX_GPIO_Init+0x15c>)
 8002520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800252c:	2200      	movs	r2, #0
 800252e:	2101      	movs	r1, #1
 8002530:	481c      	ldr	r0, [pc, #112]	; (80025a4 <MX_GPIO_Init+0x160>)
 8002532:	f004 fcd3 	bl	8006edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8002536:	2200      	movs	r2, #0
 8002538:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800253c:	481a      	ldr	r0, [pc, #104]	; (80025a8 <MX_GPIO_Init+0x164>)
 800253e:	f004 fccd 	bl	8006edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002548:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800254c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002552:	f107 031c 	add.w	r3, r7, #28
 8002556:	4619      	mov	r1, r3
 8002558:	4813      	ldr	r0, [pc, #76]	; (80025a8 <MX_GPIO_Init+0x164>)
 800255a:	f004 fb0f 	bl	8006b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800255e:	2301      	movs	r3, #1
 8002560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002562:	2301      	movs	r3, #1
 8002564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256a:	2300      	movs	r3, #0
 800256c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256e:	f107 031c 	add.w	r3, r7, #28
 8002572:	4619      	mov	r1, r3
 8002574:	480b      	ldr	r0, [pc, #44]	; (80025a4 <MX_GPIO_Init+0x160>)
 8002576:	f004 fb01 	bl	8006b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800257a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800257e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002580:	2301      	movs	r3, #1
 8002582:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	2300      	movs	r3, #0
 800258a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800258c:	f107 031c 	add.w	r3, r7, #28
 8002590:	4619      	mov	r1, r3
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <MX_GPIO_Init+0x164>)
 8002594:	f004 faf2 	bl	8006b7c <HAL_GPIO_Init>

}
 8002598:	bf00      	nop
 800259a:	3730      	adds	r7, #48	; 0x30
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	58024400 	.word	0x58024400
 80025a4:	58020400 	.word	0x58020400
 80025a8:	58020800 	.word	0x58020800

080025ac <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80025b2:	463b      	mov	r3, r7
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80025be:	f002 f989 	bl	80048d4 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80025c2:	2301      	movs	r3, #1
 80025c4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24001000;
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <MPU_Config+0x58>)
 80025cc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64B;
 80025ce:	2305      	movs	r3, #5
 80025d0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80025da:	2303      	movs	r3, #3
 80025dc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80025de:	2301      	movs	r3, #1
 80025e0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80025e2:	2301      	movs	r3, #1
 80025e4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80025ea:	2301      	movs	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80025ee:	463b      	mov	r3, r7
 80025f0:	4618      	mov	r0, r3
 80025f2:	f002 f9a7 	bl	8004944 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80025f6:	2004      	movs	r0, #4
 80025f8:	f002 f984 	bl	8004904 <HAL_MPU_Enable>

}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	24001000 	.word	0x24001000

08002608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800260c:	b672      	cpsid	i
}
 800260e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002610:	e7fe      	b.n	8002610 <Error_Handler+0x8>
	...

08002614 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261a:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <HAL_MspInit+0x30>)
 800261c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002620:	4a08      	ldr	r2, [pc, #32]	; (8002644 <HAL_MspInit+0x30>)
 8002622:	f043 0302 	orr.w	r3, r3, #2
 8002626:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_MspInit+0x30>)
 800262c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	58024400 	.word	0x58024400

08002648 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08c      	sub	sp, #48	; 0x30
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 031c 	add.w	r3, r7, #28
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a60      	ldr	r2, [pc, #384]	; (80027e8 <HAL_ADC_MspInit+0x1a0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d15a      	bne.n	8002720 <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800266a:	4b60      	ldr	r3, [pc, #384]	; (80027ec <HAL_ADC_MspInit+0x1a4>)
 800266c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002670:	4a5e      	ldr	r2, [pc, #376]	; (80027ec <HAL_ADC_MspInit+0x1a4>)
 8002672:	f043 0320 	orr.w	r3, r3, #32
 8002676:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800267a:	4b5c      	ldr	r3, [pc, #368]	; (80027ec <HAL_ADC_MspInit+0x1a4>)
 800267c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002688:	4b58      	ldr	r3, [pc, #352]	; (80027ec <HAL_ADC_MspInit+0x1a4>)
 800268a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268e:	4a57      	ldr	r2, [pc, #348]	; (80027ec <HAL_ADC_MspInit+0x1a4>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002698:	4b54      	ldr	r3, [pc, #336]	; (80027ec <HAL_ADC_MspInit+0x1a4>)
 800269a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PC1     ------> ADC1_INP11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026a6:	2303      	movs	r3, #3
 80026a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026aa:	2303      	movs	r3, #3
 80026ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b2:	f107 031c 	add.w	r3, r7, #28
 80026b6:	4619      	mov	r1, r3
 80026b8:	484d      	ldr	r0, [pc, #308]	; (80027f0 <HAL_ADC_MspInit+0x1a8>)
 80026ba:	f004 fa5f 	bl	8006b7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80026be:	4b4d      	ldr	r3, [pc, #308]	; (80027f4 <HAL_ADC_MspInit+0x1ac>)
 80026c0:	4a4d      	ldr	r2, [pc, #308]	; (80027f8 <HAL_ADC_MspInit+0x1b0>)
 80026c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80026c4:	4b4b      	ldr	r3, [pc, #300]	; (80027f4 <HAL_ADC_MspInit+0x1ac>)
 80026c6:	2209      	movs	r2, #9
 80026c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ca:	4b4a      	ldr	r3, [pc, #296]	; (80027f4 <HAL_ADC_MspInit+0x1ac>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d0:	4b48      	ldr	r3, [pc, #288]	; (80027f4 <HAL_ADC_MspInit+0x1ac>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026d6:	4b47      	ldr	r3, [pc, #284]	; (80027f4 <HAL_ADC_MspInit+0x1ac>)
 80026d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026de:	4b45      	ldr	r3, [pc, #276]	; (80027f4 <HAL_ADC_MspInit+0x1ac>)
 80026e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026e6:	4b43      	ldr	r3, [pc, #268]	; (80027f4 <HAL_ADC_MspInit+0x1ac>)
 80026e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026ee:	4b41      	ldr	r3, [pc, #260]	; (80027f4 <HAL_ADC_MspInit+0x1ac>)
 80026f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026f6:	4b3f      	ldr	r3, [pc, #252]	; (80027f4 <HAL_ADC_MspInit+0x1ac>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026fc:	4b3d      	ldr	r3, [pc, #244]	; (80027f4 <HAL_ADC_MspInit+0x1ac>)
 80026fe:	2200      	movs	r2, #0
 8002700:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002702:	483c      	ldr	r0, [pc, #240]	; (80027f4 <HAL_ADC_MspInit+0x1ac>)
 8002704:	f002 f962 	bl	80049cc <HAL_DMA_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 800270e:	f7ff ff7b 	bl	8002608 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a37      	ldr	r2, [pc, #220]	; (80027f4 <HAL_ADC_MspInit+0x1ac>)
 8002716:	64da      	str	r2, [r3, #76]	; 0x4c
 8002718:	4a36      	ldr	r2, [pc, #216]	; (80027f4 <HAL_ADC_MspInit+0x1ac>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800271e:	e05f      	b.n	80027e0 <HAL_ADC_MspInit+0x198>
  else if(hadc->Instance==ADC3)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a35      	ldr	r2, [pc, #212]	; (80027fc <HAL_ADC_MspInit+0x1b4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d15a      	bne.n	80027e0 <HAL_ADC_MspInit+0x198>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800272a:	4b30      	ldr	r3, [pc, #192]	; (80027ec <HAL_ADC_MspInit+0x1a4>)
 800272c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002730:	4a2e      	ldr	r2, [pc, #184]	; (80027ec <HAL_ADC_MspInit+0x1a4>)
 8002732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800273a:	4b2c      	ldr	r3, [pc, #176]	; (80027ec <HAL_ADC_MspInit+0x1a4>)
 800273c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002748:	4b28      	ldr	r3, [pc, #160]	; (80027ec <HAL_ADC_MspInit+0x1a4>)
 800274a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800274e:	4a27      	ldr	r2, [pc, #156]	; (80027ec <HAL_ADC_MspInit+0x1a4>)
 8002750:	f043 0320 	orr.w	r3, r3, #32
 8002754:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002758:	4b24      	ldr	r3, [pc, #144]	; (80027ec <HAL_ADC_MspInit+0x1a4>)
 800275a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800276a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800276c:	2303      	movs	r3, #3
 800276e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002774:	f107 031c 	add.w	r3, r7, #28
 8002778:	4619      	mov	r1, r3
 800277a:	4821      	ldr	r0, [pc, #132]	; (8002800 <HAL_ADC_MspInit+0x1b8>)
 800277c:	f004 f9fe 	bl	8006b7c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Stream2;
 8002780:	4b20      	ldr	r3, [pc, #128]	; (8002804 <HAL_ADC_MspInit+0x1bc>)
 8002782:	4a21      	ldr	r2, [pc, #132]	; (8002808 <HAL_ADC_MspInit+0x1c0>)
 8002784:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002786:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <HAL_ADC_MspInit+0x1bc>)
 8002788:	2273      	movs	r2, #115	; 0x73
 800278a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_ADC_MspInit+0x1bc>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002792:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <HAL_ADC_MspInit+0x1bc>)
 8002794:	2200      	movs	r2, #0
 8002796:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002798:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <HAL_ADC_MspInit+0x1bc>)
 800279a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800279e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027a0:	4b18      	ldr	r3, [pc, #96]	; (8002804 <HAL_ADC_MspInit+0x1bc>)
 80027a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027a6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027a8:	4b16      	ldr	r3, [pc, #88]	; (8002804 <HAL_ADC_MspInit+0x1bc>)
 80027aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027ae:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <HAL_ADC_MspInit+0x1bc>)
 80027b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027b6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_ADC_MspInit+0x1bc>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_ADC_MspInit+0x1bc>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80027c4:	480f      	ldr	r0, [pc, #60]	; (8002804 <HAL_ADC_MspInit+0x1bc>)
 80027c6:	f002 f901 	bl	80049cc <HAL_DMA_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_ADC_MspInit+0x18c>
      Error_Handler();
 80027d0:	f7ff ff1a 	bl	8002608 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a0b      	ldr	r2, [pc, #44]	; (8002804 <HAL_ADC_MspInit+0x1bc>)
 80027d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <HAL_ADC_MspInit+0x1bc>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6393      	str	r3, [r2, #56]	; 0x38
}
 80027e0:	bf00      	nop
 80027e2:	3730      	adds	r7, #48	; 0x30
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40022000 	.word	0x40022000
 80027ec:	58024400 	.word	0x58024400
 80027f0:	58020800 	.word	0x58020800
 80027f4:	200052b8 	.word	0x200052b8
 80027f8:	40020010 	.word	0x40020010
 80027fc:	58026000 	.word	0x58026000
 8002800:	58021400 	.word	0x58021400
 8002804:	2000512c 	.word	0x2000512c
 8002808:	40020040 	.word	0x40020040

0800280c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	; 0x28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1a      	ldr	r2, [pc, #104]	; (8002894 <HAL_TIM_Base_MspInit+0x88>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d12d      	bne.n	800288a <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800282e:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <HAL_TIM_Base_MspInit+0x8c>)
 8002830:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002834:	4a18      	ldr	r2, [pc, #96]	; (8002898 <HAL_TIM_Base_MspInit+0x8c>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800283e:	4b16      	ldr	r3, [pc, #88]	; (8002898 <HAL_TIM_Base_MspInit+0x8c>)
 8002840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_TIM_Base_MspInit+0x8c>)
 800284e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002852:	4a11      	ldr	r2, [pc, #68]	; (8002898 <HAL_TIM_Base_MspInit+0x8c>)
 8002854:	f043 0310 	orr.w	r3, r3, #16
 8002858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <HAL_TIM_Base_MspInit+0x8c>)
 800285e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE6     ------> TIM1_BKIN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800286a:	2340      	movs	r3, #64	; 0x40
 800286c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800286e:	2312      	movs	r3, #18
 8002870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002872:	2301      	movs	r3, #1
 8002874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002876:	2300      	movs	r3, #0
 8002878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800287a:	2301      	movs	r3, #1
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800287e:	f107 0314 	add.w	r3, r7, #20
 8002882:	4619      	mov	r1, r3
 8002884:	4805      	ldr	r0, [pc, #20]	; (800289c <HAL_TIM_Base_MspInit+0x90>)
 8002886:	f004 f979 	bl	8006b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800288a:	bf00      	nop
 800288c:	3728      	adds	r7, #40	; 0x28
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40010000 	.word	0x40010000
 8002898:	58024400 	.word	0x58024400
 800289c:	58021000 	.word	0x58021000

080028a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1a      	ldr	r2, [pc, #104]	; (8002928 <HAL_TIM_Encoder_MspInit+0x88>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d12d      	bne.n	800291e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028c2:	4b1a      	ldr	r3, [pc, #104]	; (800292c <HAL_TIM_Encoder_MspInit+0x8c>)
 80028c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028c8:	4a18      	ldr	r2, [pc, #96]	; (800292c <HAL_TIM_Encoder_MspInit+0x8c>)
 80028ca:	f043 0302 	orr.w	r3, r3, #2
 80028ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028d2:	4b16      	ldr	r3, [pc, #88]	; (800292c <HAL_TIM_Encoder_MspInit+0x8c>)
 80028d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <HAL_TIM_Encoder_MspInit+0x8c>)
 80028e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028e6:	4a11      	ldr	r2, [pc, #68]	; (800292c <HAL_TIM_Encoder_MspInit+0x8c>)
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028f0:	4b0e      	ldr	r3, [pc, #56]	; (800292c <HAL_TIM_Encoder_MspInit+0x8c>)
 80028f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028fe:	23c0      	movs	r3, #192	; 0xc0
 8002900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800290e:	2302      	movs	r3, #2
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002912:	f107 0314 	add.w	r3, r7, #20
 8002916:	4619      	mov	r1, r3
 8002918:	4805      	ldr	r0, [pc, #20]	; (8002930 <HAL_TIM_Encoder_MspInit+0x90>)
 800291a:	f004 f92f 	bl	8006b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800291e:	bf00      	nop
 8002920:	3728      	adds	r7, #40	; 0x28
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40000400 	.word	0x40000400
 800292c:	58024400 	.word	0x58024400
 8002930:	58020800 	.word	0x58020800

08002934 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 030c 	add.w	r3, r7, #12
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <HAL_TIM_MspPostInit+0x6c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d11f      	bne.n	8002996 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002956:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <HAL_TIM_MspPostInit+0x70>)
 8002958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800295c:	4a11      	ldr	r2, [pc, #68]	; (80029a4 <HAL_TIM_MspPostInit+0x70>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002966:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <HAL_TIM_MspPostInit+0x70>)
 8002968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002974:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002978:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002986:	2301      	movs	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298a:	f107 030c 	add.w	r3, r7, #12
 800298e:	4619      	mov	r1, r3
 8002990:	4805      	ldr	r0, [pc, #20]	; (80029a8 <HAL_TIM_MspPostInit+0x74>)
 8002992:	f004 f8f3 	bl	8006b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002996:	bf00      	nop
 8002998:	3720      	adds	r7, #32
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40010000 	.word	0x40010000
 80029a4:	58024400 	.word	0x58024400
 80029a8:	58020000 	.word	0x58020000

080029ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b0b8      	sub	sp, #224	; 0xe0
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029c4:	f107 0310 	add.w	r3, r7, #16
 80029c8:	22bc      	movs	r2, #188	; 0xbc
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f00a fd45 	bl	800d45c <memset>
  if(huart->Instance==USART3)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a3c      	ldr	r2, [pc, #240]	; (8002ac8 <HAL_UART_MspInit+0x11c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d170      	bne.n	8002abe <HAL_UART_MspInit+0x112>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80029dc:	2302      	movs	r3, #2
 80029de:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 80029e0:	2303      	movs	r3, #3
 80029e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029e6:	f107 0310 	add.w	r3, r7, #16
 80029ea:	4618      	mov	r0, r3
 80029ec:	f005 fac0 	bl	8007f70 <HAL_RCCEx_PeriphCLKConfig>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80029f6:	f7ff fe07 	bl	8002608 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80029fa:	4b34      	ldr	r3, [pc, #208]	; (8002acc <HAL_UART_MspInit+0x120>)
 80029fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a00:	4a32      	ldr	r2, [pc, #200]	; (8002acc <HAL_UART_MspInit+0x120>)
 8002a02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a0a:	4b30      	ldr	r3, [pc, #192]	; (8002acc <HAL_UART_MspInit+0x120>)
 8002a0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a18:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <HAL_UART_MspInit+0x120>)
 8002a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a1e:	4a2b      	ldr	r2, [pc, #172]	; (8002acc <HAL_UART_MspInit+0x120>)
 8002a20:	f043 0308 	orr.w	r3, r3, #8
 8002a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a28:	4b28      	ldr	r3, [pc, #160]	; (8002acc <HAL_UART_MspInit+0x120>)
 8002a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a50:	2307      	movs	r3, #7
 8002a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a56:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	481c      	ldr	r0, [pc, #112]	; (8002ad0 <HAL_UART_MspInit+0x124>)
 8002a5e:	f004 f88d 	bl	8006b7c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002a62:	4b1c      	ldr	r3, [pc, #112]	; (8002ad4 <HAL_UART_MspInit+0x128>)
 8002a64:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <HAL_UART_MspInit+0x12c>)
 8002a66:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002a68:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <HAL_UART_MspInit+0x128>)
 8002a6a:	222d      	movs	r2, #45	; 0x2d
 8002a6c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a6e:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_UART_MspInit+0x128>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <HAL_UART_MspInit+0x128>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a7a:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <HAL_UART_MspInit+0x128>)
 8002a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a80:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a82:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <HAL_UART_MspInit+0x128>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_UART_MspInit+0x128>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002a8e:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <HAL_UART_MspInit+0x128>)
 8002a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a94:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a96:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <HAL_UART_MspInit+0x128>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <HAL_UART_MspInit+0x128>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002aa2:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <HAL_UART_MspInit+0x128>)
 8002aa4:	f001 ff92 	bl	80049cc <HAL_DMA_Init>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8002aae:	f7ff fdab 	bl	8002608 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a07      	ldr	r2, [pc, #28]	; (8002ad4 <HAL_UART_MspInit+0x128>)
 8002ab6:	67da      	str	r2, [r3, #124]	; 0x7c
 8002ab8:	4a06      	ldr	r2, [pc, #24]	; (8002ad4 <HAL_UART_MspInit+0x128>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002abe:	bf00      	nop
 8002ac0:	37e0      	adds	r7, #224	; 0xe0
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40004800 	.word	0x40004800
 8002acc:	58024400 	.word	0x58024400
 8002ad0:	58020c00 	.word	0x58020c00
 8002ad4:	200050b4 	.word	0x200050b4
 8002ad8:	40020028 	.word	0x40020028

08002adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ae0:	e7fe      	b.n	8002ae0 <NMI_Handler+0x4>

08002ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ae6:	e7fe      	b.n	8002ae6 <HardFault_Handler+0x4>

08002ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aec:	e7fe      	b.n	8002aec <MemManage_Handler+0x4>

08002aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002af2:	e7fe      	b.n	8002af2 <BusFault_Handler+0x4>

08002af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002af8:	e7fe      	b.n	8002af8 <UsageFault_Handler+0x4>

08002afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b28:	f000 f97a 	bl	8002e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <DMA1_Stream0_IRQHandler+0x10>)
 8002b36:	f002 fd0f 	bl	8005558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200052b8 	.word	0x200052b8

08002b44 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
	handleRxCommands();
 8002b48:	f7fe faec 	bl	8001124 <handleRxCommands>
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002b4c:	4802      	ldr	r0, [pc, #8]	; (8002b58 <DMA1_Stream1_IRQHandler+0x14>)
 8002b4e:	f002 fd03 	bl	8005558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	200050b4 	.word	0x200050b4

08002b5c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002b60:	4802      	ldr	r0, [pc, #8]	; (8002b6c <DMA1_Stream2_IRQHandler+0x10>)
 8002b62:	f002 fcf9 	bl	8005558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	2000512c 	.word	0x2000512c

08002b70 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */
  stopMotor();
 8002b74:	f7fe fbb4 	bl	80012e0 <stopMotor>
  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b78:	4802      	ldr	r0, [pc, #8]	; (8002b84 <TIM1_BRK_IRQHandler+0x14>)
 8002b7a:	f007 ffd3 	bl	800ab24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20005330 	.word	0x20005330

08002b88 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	executeAll();
 8002b8c:	f7fe fbb4 	bl	80012f8 <executeAll>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b90:	4802      	ldr	r0, [pc, #8]	; (8002b9c <TIM1_CC_IRQHandler+0x14>)
 8002b92:	f007 ffc7 	bl	800ab24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20005330 	.word	0x20005330

08002ba0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  run = !run;
 8002ba4:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <EXTI15_10_IRQHandler+0x24>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <EXTI15_10_IRQHandler+0x24>)
 8002bb6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002bb8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002bbc:	f004 f9c1 	bl	8006f42 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000067 	.word	0x20000067

08002bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002bcc:	4b37      	ldr	r3, [pc, #220]	; (8002cac <SystemInit+0xe4>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd2:	4a36      	ldr	r2, [pc, #216]	; (8002cac <SystemInit+0xe4>)
 8002bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002bdc:	4b34      	ldr	r3, [pc, #208]	; (8002cb0 <SystemInit+0xe8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	2b06      	cmp	r3, #6
 8002be6:	d807      	bhi.n	8002bf8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002be8:	4b31      	ldr	r3, [pc, #196]	; (8002cb0 <SystemInit+0xe8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 030f 	bic.w	r3, r3, #15
 8002bf0:	4a2f      	ldr	r2, [pc, #188]	; (8002cb0 <SystemInit+0xe8>)
 8002bf2:	f043 0307 	orr.w	r3, r3, #7
 8002bf6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002bf8:	4b2e      	ldr	r3, [pc, #184]	; (8002cb4 <SystemInit+0xec>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a2d      	ldr	r2, [pc, #180]	; (8002cb4 <SystemInit+0xec>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c04:	4b2b      	ldr	r3, [pc, #172]	; (8002cb4 <SystemInit+0xec>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002c0a:	4b2a      	ldr	r3, [pc, #168]	; (8002cb4 <SystemInit+0xec>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	4929      	ldr	r1, [pc, #164]	; (8002cb4 <SystemInit+0xec>)
 8002c10:	4b29      	ldr	r3, [pc, #164]	; (8002cb8 <SystemInit+0xf0>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c16:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <SystemInit+0xe8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c22:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <SystemInit+0xe8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 030f 	bic.w	r3, r3, #15
 8002c2a:	4a21      	ldr	r2, [pc, #132]	; (8002cb0 <SystemInit+0xe8>)
 8002c2c:	f043 0307 	orr.w	r3, r3, #7
 8002c30:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002c32:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <SystemInit+0xec>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002c38:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <SystemInit+0xec>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <SystemInit+0xec>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002c44:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <SystemInit+0xec>)
 8002c46:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <SystemInit+0xf4>)
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002c4a:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <SystemInit+0xec>)
 8002c4c:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <SystemInit+0xf8>)
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002c50:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <SystemInit+0xec>)
 8002c52:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <SystemInit+0xfc>)
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002c56:	4b17      	ldr	r3, [pc, #92]	; (8002cb4 <SystemInit+0xec>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002c5c:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <SystemInit+0xec>)
 8002c5e:	4a19      	ldr	r2, [pc, #100]	; (8002cc4 <SystemInit+0xfc>)
 8002c60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002c62:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <SystemInit+0xec>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002c68:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <SystemInit+0xec>)
 8002c6a:	4a16      	ldr	r2, [pc, #88]	; (8002cc4 <SystemInit+0xfc>)
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002c6e:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <SystemInit+0xec>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c74:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <SystemInit+0xec>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a0e      	ldr	r2, [pc, #56]	; (8002cb4 <SystemInit+0xec>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <SystemInit+0xec>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <SystemInit+0x100>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <SystemInit+0x104>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c92:	d202      	bcs.n	8002c9a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002c94:	4b0e      	ldr	r3, [pc, #56]	; (8002cd0 <SystemInit+0x108>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002c9a:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <SystemInit+0x10c>)
 8002c9c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002ca0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002ca2:	bf00      	nop
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000ed00 	.word	0xe000ed00
 8002cb0:	52002000 	.word	0x52002000
 8002cb4:	58024400 	.word	0x58024400
 8002cb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8002cbc:	02020200 	.word	0x02020200
 8002cc0:	01ff0000 	.word	0x01ff0000
 8002cc4:	01010280 	.word	0x01010280
 8002cc8:	5c001000 	.word	0x5c001000
 8002ccc:	ffff0000 	.word	0xffff0000
 8002cd0:	51008108 	.word	0x51008108
 8002cd4:	52004000 	.word	0x52004000

08002cd8 <untitled0_initialize>:
  rtDW.Delay10_DSTATE[2] = rtb_Delay9_idx_2;
}

/* Model initialize function */
void untitled0_initialize(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002cec:	f7ff ff6c 	bl	8002bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cf0:	480c      	ldr	r0, [pc, #48]	; (8002d24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cf2:	490d      	ldr	r1, [pc, #52]	; (8002d28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cf4:	4a0d      	ldr	r2, [pc, #52]	; (8002d2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf8:	e002      	b.n	8002d00 <LoopCopyDataInit>

08002cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cfe:	3304      	adds	r3, #4

08002d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d04:	d3f9      	bcc.n	8002cfa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d06:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d08:	4c0a      	ldr	r4, [pc, #40]	; (8002d34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d0c:	e001      	b.n	8002d12 <LoopFillZerobss>

08002d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d10:	3204      	adds	r2, #4

08002d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d14:	d3fb      	bcc.n	8002d0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d16:	f00a fb7d 	bl	800d414 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d1a:	f7fe ff67 	bl	8001bec <main>
  bx  lr
 8002d1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d28:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8002d2c:	0800d644 	.word	0x0800d644
  ldr r2, =_sbss
 8002d30:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8002d34:	20005380 	.word	0x20005380

08002d38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d38:	e7fe      	b.n	8002d38 <ADC3_IRQHandler>
	...

08002d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d42:	2003      	movs	r0, #3
 8002d44:	f001 fd82 	bl	800484c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d48:	f004 ff3c 	bl	8007bc4 <HAL_RCC_GetSysClockFreq>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <HAL_Init+0x68>)
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	0a1b      	lsrs	r3, r3, #8
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	4913      	ldr	r1, [pc, #76]	; (8002da8 <HAL_Init+0x6c>)
 8002d5a:	5ccb      	ldrb	r3, [r1, r3]
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
 8002d64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d66:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <HAL_Init+0x68>)
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	4a0e      	ldr	r2, [pc, #56]	; (8002da8 <HAL_Init+0x6c>)
 8002d70:	5cd3      	ldrb	r3, [r2, r3]
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7c:	4a0b      	ldr	r2, [pc, #44]	; (8002dac <HAL_Init+0x70>)
 8002d7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d80:	4a0b      	ldr	r2, [pc, #44]	; (8002db0 <HAL_Init+0x74>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d86:	2000      	movs	r0, #0
 8002d88:	f000 f814 	bl	8002db4 <HAL_InitTick>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e002      	b.n	8002d9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d96:	f7ff fc3d 	bl	8002614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	58024400 	.word	0x58024400
 8002da8:	0800d5f4 	.word	0x0800d5f4
 8002dac:	20000028 	.word	0x20000028
 8002db0:	20000024 	.word	0x20000024

08002db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002dbc:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HAL_InitTick+0x60>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e021      	b.n	8002e0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002dc8:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <HAL_InitTick+0x64>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <HAL_InitTick+0x60>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	4618      	mov	r0, r3
 8002de0:	f001 fd6b 	bl	80048ba <HAL_SYSTICK_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e00e      	b.n	8002e0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b0f      	cmp	r3, #15
 8002df2:	d80a      	bhi.n	8002e0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df4:	2200      	movs	r2, #0
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	f001 fd31 	bl	8004862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e00:	4a06      	ldr	r2, [pc, #24]	; (8002e1c <HAL_InitTick+0x68>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e000      	b.n	8002e0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20000030 	.word	0x20000030
 8002e18:	20000024 	.word	0x20000024
 8002e1c:	2000002c 	.word	0x2000002c

08002e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_IncTick+0x20>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <HAL_IncTick+0x24>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <HAL_IncTick+0x24>)
 8002e32:	6013      	str	r3, [r2, #0]
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20000030 	.word	0x20000030
 8002e44:	2000537c 	.word	0x2000537c

08002e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e4c:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <HAL_GetTick+0x14>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	2000537c 	.word	0x2000537c

08002e60 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <HAL_GetREVID+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	0c1b      	lsrs	r3, r3, #16
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	5c001000 	.word	0x5c001000

08002e78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	609a      	str	r2, [r3, #8]
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	3360      	adds	r3, #96	; 0x60
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002f14:	bf00      	nop
 8002f16:	371c      	adds	r7, #28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f40:	431a      	orrs	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	611a      	str	r2, [r3, #16]
}
 8002f46:	bf00      	nop
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b087      	sub	sp, #28
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3360      	adds	r3, #96	; 0x60
 8002f62:	461a      	mov	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	601a      	str	r2, [r3, #0]
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	371c      	adds	r7, #28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b087      	sub	sp, #28
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3330      	adds	r3, #48	; 0x30
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	4413      	add	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	211f      	movs	r1, #31
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	401a      	ands	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	0e9b      	lsrs	r3, r3, #26
 8002fe6:	f003 011f 	and.w	r1, r3, #31
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ffa:	bf00      	nop
 8002ffc:	371c      	adds	r7, #28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f023 0203 	bic.w	r2, r3, #3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	60da      	str	r2, [r3, #12]
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	3314      	adds	r3, #20
 800303c:	461a      	mov	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	0e5b      	lsrs	r3, r3, #25
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	4413      	add	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	0d1b      	lsrs	r3, r3, #20
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	2107      	movs	r1, #7
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	401a      	ands	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	0d1b      	lsrs	r3, r3, #20
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	fa01 f303 	lsl.w	r3, r1, r3
 8003070:	431a      	orrs	r2, r3
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003076:	bf00      	nop
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800309c:	43db      	mvns	r3, r3
 800309e:	401a      	ands	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f003 0318 	and.w	r3, r3, #24
 80030a6:	4908      	ldr	r1, [pc, #32]	; (80030c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80030a8:	40d9      	lsrs	r1, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	400b      	ands	r3, r1
 80030ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030b2:	431a      	orrs	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80030ba:	bf00      	nop
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	000fffff 	.word	0x000fffff

080030cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 031f 	and.w	r3, r3, #31
}
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	4b04      	ldr	r3, [pc, #16]	; (8003108 <LL_ADC_DisableDeepPowerDown+0x20>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6093      	str	r3, [r2, #8]
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	5fffffc0 	.word	0x5fffffc0

0800310c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800311c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003120:	d101      	bne.n	8003126 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <LL_ADC_EnableInternalRegulator+0x24>)
 8003142:	4013      	ands	r3, r2
 8003144:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	6fffffc0 	.word	0x6fffffc0

0800315c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003170:	d101      	bne.n	8003176 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <LL_ADC_Enable+0x24>)
 8003192:	4013      	ands	r3, r2
 8003194:	f043 0201 	orr.w	r2, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	7fffffc0 	.word	0x7fffffc0

080031ac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <LL_ADC_Disable+0x24>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	f043 0202 	orr.w	r2, r3, #2
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	7fffffc0 	.word	0x7fffffc0

080031d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <LL_ADC_IsEnabled+0x18>
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <LL_ADC_IsEnabled+0x1a>
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b02      	cmp	r3, #2
 800320c:	d101      	bne.n	8003212 <LL_ADC_IsDisableOngoing+0x18>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <LL_ADC_IsDisableOngoing+0x1a>
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <LL_ADC_REG_StartConversion+0x24>)
 800322e:	4013      	ands	r3, r2
 8003230:	f043 0204 	orr.w	r2, r3, #4
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	7fffffc0 	.word	0x7fffffc0

08003248 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b04      	cmp	r3, #4
 800325a:	d101      	bne.n	8003260 <LL_ADC_REG_IsConversionOngoing+0x18>
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b08      	cmp	r3, #8
 8003280:	d101      	bne.n	8003286 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e18e      	b.n	80035cc <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff f9c3 	bl	8002648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff19 	bl	800310c <LL_ADC_IsDeepPowerDownEnabled>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d004      	beq.n	80032ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff feff 	bl	80030e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff ff34 	bl	800315c <LL_ADC_IsInternalRegulatorEnabled>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d114      	bne.n	8003324 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff ff18 	bl	8003134 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003304:	4b9a      	ldr	r3, [pc, #616]	; (8003570 <HAL_ADC_Init+0x2dc>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	099b      	lsrs	r3, r3, #6
 800330a:	4a9a      	ldr	r2, [pc, #616]	; (8003574 <HAL_ADC_Init+0x2e0>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	099b      	lsrs	r3, r3, #6
 8003312:	3301      	adds	r3, #1
 8003314:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003316:	e002      	b.n	800331e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	3b01      	subs	r3, #1
 800331c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f9      	bne.n	8003318 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff ff17 	bl	800315c <LL_ADC_IsInternalRegulatorEnabled>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10d      	bne.n	8003350 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003338:	f043 0210 	orr.w	r2, r3, #16
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003344:	f043 0201 	orr.w	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff ff77 	bl	8003248 <LL_ADC_REG_IsConversionOngoing>
 800335a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b00      	cmp	r3, #0
 8003366:	f040 8128 	bne.w	80035ba <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b00      	cmp	r3, #0
 800336e:	f040 8124 	bne.w	80035ba <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003376:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800337a:	f043 0202 	orr.w	r2, r3, #2
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ff24 	bl	80031d4 <LL_ADC_IsEnabled>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d136      	bne.n	8003400 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a78      	ldr	r2, [pc, #480]	; (8003578 <HAL_ADC_Init+0x2e4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d004      	beq.n	80033a6 <HAL_ADC_Init+0x112>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a76      	ldr	r2, [pc, #472]	; (800357c <HAL_ADC_Init+0x2e8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10e      	bne.n	80033c4 <HAL_ADC_Init+0x130>
 80033a6:	4874      	ldr	r0, [pc, #464]	; (8003578 <HAL_ADC_Init+0x2e4>)
 80033a8:	f7ff ff14 	bl	80031d4 <LL_ADC_IsEnabled>
 80033ac:	4604      	mov	r4, r0
 80033ae:	4873      	ldr	r0, [pc, #460]	; (800357c <HAL_ADC_Init+0x2e8>)
 80033b0:	f7ff ff10 	bl	80031d4 <LL_ADC_IsEnabled>
 80033b4:	4603      	mov	r3, r0
 80033b6:	4323      	orrs	r3, r4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	bf0c      	ite	eq
 80033bc:	2301      	moveq	r3, #1
 80033be:	2300      	movne	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	e008      	b.n	80033d6 <HAL_ADC_Init+0x142>
 80033c4:	486e      	ldr	r0, [pc, #440]	; (8003580 <HAL_ADC_Init+0x2ec>)
 80033c6:	f7ff ff05 	bl	80031d4 <LL_ADC_IsEnabled>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf0c      	ite	eq
 80033d0:	2301      	moveq	r3, #1
 80033d2:	2300      	movne	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d012      	beq.n	8003400 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a66      	ldr	r2, [pc, #408]	; (8003578 <HAL_ADC_Init+0x2e4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d004      	beq.n	80033ee <HAL_ADC_Init+0x15a>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a64      	ldr	r2, [pc, #400]	; (800357c <HAL_ADC_Init+0x2e8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d101      	bne.n	80033f2 <HAL_ADC_Init+0x15e>
 80033ee:	4a65      	ldr	r2, [pc, #404]	; (8003584 <HAL_ADC_Init+0x2f0>)
 80033f0:	e000      	b.n	80033f4 <HAL_ADC_Init+0x160>
 80033f2:	4a65      	ldr	r2, [pc, #404]	; (8003588 <HAL_ADC_Init+0x2f4>)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4619      	mov	r1, r3
 80033fa:	4610      	mov	r0, r2
 80033fc:	f7ff fd3c 	bl	8002e78 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003400:	f7ff fd2e 	bl	8002e60 <HAL_GetREVID>
 8003404:	4603      	mov	r3, r0
 8003406:	f241 0203 	movw	r2, #4099	; 0x1003
 800340a:	4293      	cmp	r3, r2
 800340c:	d914      	bls.n	8003438 <HAL_ADC_Init+0x1a4>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b10      	cmp	r3, #16
 8003414:	d110      	bne.n	8003438 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	7d5b      	ldrb	r3, [r3, #21]
 800341a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003420:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003426:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	7f1b      	ldrb	r3, [r3, #28]
 800342c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800342e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003430:	f043 030c 	orr.w	r3, r3, #12
 8003434:	61bb      	str	r3, [r7, #24]
 8003436:	e00d      	b.n	8003454 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	7d5b      	ldrb	r3, [r3, #21]
 800343c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003442:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003448:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	7f1b      	ldrb	r3, [r3, #28]
 800344e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	7f1b      	ldrb	r3, [r3, #28]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d106      	bne.n	800346a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	3b01      	subs	r3, #1
 8003462:	045b      	lsls	r3, r3, #17
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	4b3f      	ldr	r3, [pc, #252]	; (800358c <HAL_ADC_Init+0x2f8>)
 800348e:	4013      	ands	r3, r2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	69b9      	ldr	r1, [r7, #24]
 8003496:	430b      	orrs	r3, r1
 8003498:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fed2 	bl	8003248 <LL_ADC_REG_IsConversionOngoing>
 80034a4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff fedf 	bl	800326e <LL_ADC_INJ_IsConversionOngoing>
 80034b0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d14a      	bne.n	800354e <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d147      	bne.n	800354e <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	7d1b      	ldrb	r3, [r3, #20]
 80034c2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <HAL_ADC_Init+0x2fc>)
 80034d4:	4013      	ands	r3, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	69b9      	ldr	r1, [r7, #24]
 80034dc:	430b      	orrs	r3, r1
 80034de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d11b      	bne.n	8003522 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	4b27      	ldr	r3, [pc, #156]	; (8003594 <HAL_ADC_Init+0x300>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034fe:	3a01      	subs	r2, #1
 8003500:	0411      	lsls	r1, r2, #16
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003506:	4311      	orrs	r1, r2
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800350c:	4311      	orrs	r1, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003512:	430a      	orrs	r2, r1
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	611a      	str	r2, [r3, #16]
 8003520:	e007      	b.n	8003532 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0201 	bic.w	r2, r2, #1
 8003530:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fdf3 	bl	8004134 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d120      	bne.n	8003598 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	f023 010f 	bic.w	r1, r3, #15
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	1e5a      	subs	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
 800356e:	e01b      	b.n	80035a8 <HAL_ADC_Init+0x314>
 8003570:	20000024 	.word	0x20000024
 8003574:	053e2d63 	.word	0x053e2d63
 8003578:	40022000 	.word	0x40022000
 800357c:	40022100 	.word	0x40022100
 8003580:	58026000 	.word	0x58026000
 8003584:	40022300 	.word	0x40022300
 8003588:	58026300 	.word	0x58026300
 800358c:	fff0c003 	.word	0xfff0c003
 8003590:	ffffbffc 	.word	0xffffbffc
 8003594:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 020f 	bic.w	r2, r2, #15
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ac:	f023 0303 	bic.w	r3, r3, #3
 80035b0:	f043 0201 	orr.w	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54
 80035b8:	e007      	b.n	80035ca <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035be:	f043 0210 	orr.w	r2, r3, #16
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80035ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3724      	adds	r7, #36	; 0x24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd90      	pop	{r4, r7, pc}

080035d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a55      	ldr	r2, [pc, #340]	; (800373c <HAL_ADC_Start_DMA+0x168>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d004      	beq.n	80035f4 <HAL_ADC_Start_DMA+0x20>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a54      	ldr	r2, [pc, #336]	; (8003740 <HAL_ADC_Start_DMA+0x16c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d101      	bne.n	80035f8 <HAL_ADC_Start_DMA+0x24>
 80035f4:	4b53      	ldr	r3, [pc, #332]	; (8003744 <HAL_ADC_Start_DMA+0x170>)
 80035f6:	e000      	b.n	80035fa <HAL_ADC_Start_DMA+0x26>
 80035f8:	4b53      	ldr	r3, [pc, #332]	; (8003748 <HAL_ADC_Start_DMA+0x174>)
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff fd66 	bl	80030cc <LL_ADC_GetMultimode>
 8003600:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fe1e 	bl	8003248 <LL_ADC_REG_IsConversionOngoing>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	f040 808c 	bne.w	800372c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_ADC_Start_DMA+0x4e>
 800361e:	2302      	movs	r3, #2
 8003620:	e087      	b.n	8003732 <HAL_ADC_Start_DMA+0x15e>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	2b05      	cmp	r3, #5
 8003634:	d002      	beq.n	800363c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	2b09      	cmp	r3, #9
 800363a:	d170      	bne.n	800371e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 fbfb 	bl	8003e38 <ADC_Enable>
 8003642:	4603      	mov	r3, r0
 8003644:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d163      	bne.n	8003714 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003650:	4b3e      	ldr	r3, [pc, #248]	; (800374c <HAL_ADC_Start_DMA+0x178>)
 8003652:	4013      	ands	r3, r2
 8003654:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a37      	ldr	r2, [pc, #220]	; (8003740 <HAL_ADC_Start_DMA+0x16c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d002      	beq.n	800366c <HAL_ADC_Start_DMA+0x98>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	e000      	b.n	800366e <HAL_ADC_Start_DMA+0x9a>
 800366c:	4b33      	ldr	r3, [pc, #204]	; (800373c <HAL_ADC_Start_DMA+0x168>)
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	4293      	cmp	r3, r2
 8003674:	d002      	beq.n	800367c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d105      	bne.n	8003688 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003680:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d006      	beq.n	80036a2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	f023 0206 	bic.w	r2, r3, #6
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	659a      	str	r2, [r3, #88]	; 0x58
 80036a0:	e002      	b.n	80036a8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ac:	4a28      	ldr	r2, [pc, #160]	; (8003750 <HAL_ADC_Start_DMA+0x17c>)
 80036ae:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b4:	4a27      	ldr	r2, [pc, #156]	; (8003754 <HAL_ADC_Start_DMA+0x180>)
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036bc:	4a26      	ldr	r2, [pc, #152]	; (8003758 <HAL_ADC_Start_DMA+0x184>)
 80036be:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	221c      	movs	r2, #28
 80036c6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0210 	orr.w	r2, r2, #16
 80036de:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	4619      	mov	r1, r3
 80036ea:	4610      	mov	r0, r2
 80036ec:	f7ff fc8b 	bl	8003006 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3340      	adds	r3, #64	; 0x40
 80036fa:	4619      	mov	r1, r3
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f001 fcc0 	bl	8005084 <HAL_DMA_Start_IT>
 8003704:	4603      	mov	r3, r0
 8003706:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fd87 	bl	8003220 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003712:	e00d      	b.n	8003730 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800371c:	e008      	b.n	8003730 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800372a:	e001      	b.n	8003730 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800372c:	2302      	movs	r3, #2
 800372e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003730:	7dfb      	ldrb	r3, [r7, #23]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40022000 	.word	0x40022000
 8003740:	40022100 	.word	0x40022100
 8003744:	40022300 	.word	0x40022300
 8003748:	58026300 	.word	0x58026300
 800374c:	fffff0fe 	.word	0xfffff0fe
 8003750:	0800400b 	.word	0x0800400b
 8003754:	080040e3 	.word	0x080040e3
 8003758:	080040ff 	.word	0x080040ff

0800375c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003798:	b590      	push	{r4, r7, lr}
 800379a:	b0a1      	sub	sp, #132	; 0x84
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4a9d      	ldr	r2, [pc, #628]	; (8003a28 <HAL_ADC_ConfigChannel+0x290>)
 80037b2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x2a>
 80037be:	2302      	movs	r3, #2
 80037c0:	e321      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x66e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff fd3a 	bl	8003248 <LL_ADC_REG_IsConversionOngoing>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f040 8306 	bne.w	8003de8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d108      	bne.n	80037fa <HAL_ADC_ConfigChannel+0x62>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	0e9b      	lsrs	r3, r3, #26
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	2201      	movs	r2, #1
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	e016      	b.n	8003828 <HAL_ADC_ConfigChannel+0x90>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800380a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800380c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003812:	2320      	movs	r3, #32
 8003814:	e003      	b.n	800381e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003816:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003818:	fab3 f383 	clz	r3, r3
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f003 031f 	and.w	r3, r3, #31
 8003822:	2201      	movs	r2, #1
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	69d1      	ldr	r1, [r2, #28]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	430b      	orrs	r3, r1
 8003834:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	f7ff fbb3 	bl	8002fae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff fcfb 	bl	8003248 <LL_ADC_REG_IsConversionOngoing>
 8003852:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff fd08 	bl	800326e <LL_ADC_INJ_IsConversionOngoing>
 800385e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003862:	2b00      	cmp	r3, #0
 8003864:	f040 80b3 	bne.w	80039ce <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800386a:	2b00      	cmp	r3, #0
 800386c:	f040 80af 	bne.w	80039ce <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6819      	ldr	r1, [r3, #0]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	461a      	mov	r2, r3
 800387e:	f7ff fbd5 	bl	800302c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003882:	4b6a      	ldr	r3, [pc, #424]	; (8003a2c <HAL_ADC_ConfigChannel+0x294>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800388a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800388e:	d10b      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x110>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	695a      	ldr	r2, [r3, #20]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	089b      	lsrs	r3, r3, #2
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	e01d      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x14c>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x136>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	089b      	lsrs	r3, r3, #2
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	e00a      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x14c>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	089b      	lsrs	r3, r3, #2
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d027      	beq.n	800393e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6919      	ldr	r1, [r3, #16]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038fc:	f7ff faf0 	bl	8002ee0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	6919      	ldr	r1, [r3, #16]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	7e5b      	ldrb	r3, [r3, #25]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d102      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x17e>
 8003910:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003914:	e000      	b.n	8003918 <HAL_ADC_ConfigChannel+0x180>
 8003916:	2300      	movs	r3, #0
 8003918:	461a      	mov	r2, r3
 800391a:	f7ff fb1a 	bl	8002f52 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6919      	ldr	r1, [r3, #16]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	7e1b      	ldrb	r3, [r3, #24]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d102      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x19c>
 800392e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003932:	e000      	b.n	8003936 <HAL_ADC_ConfigChannel+0x19e>
 8003934:	2300      	movs	r3, #0
 8003936:	461a      	mov	r2, r3
 8003938:	f7ff faf2 	bl	8002f20 <LL_ADC_SetDataRightShift>
 800393c:	e047      	b.n	80039ce <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003944:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	069b      	lsls	r3, r3, #26
 800394e:	429a      	cmp	r2, r3
 8003950:	d107      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003960:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003968:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	069b      	lsls	r3, r3, #26
 8003972:	429a      	cmp	r2, r3
 8003974:	d107      	bne.n	8003986 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003984:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800398c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	069b      	lsls	r3, r3, #26
 8003996:	429a      	cmp	r2, r3
 8003998:	d107      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80039a8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	069b      	lsls	r3, r3, #26
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d107      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80039cc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff fbfe 	bl	80031d4 <LL_ADC_IsEnabled>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f040 820d 	bne.w	8003dfa <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	6819      	ldr	r1, [r3, #0]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	461a      	mov	r2, r3
 80039ee:	f7ff fb49 	bl	8003084 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	4a0c      	ldr	r2, [pc, #48]	; (8003a28 <HAL_ADC_ConfigChannel+0x290>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	f040 8133 	bne.w	8003c64 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d110      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x298>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	0e9b      	lsrs	r3, r3, #26
 8003a14:	3301      	adds	r3, #1
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	2b09      	cmp	r3, #9
 8003a1c:	bf94      	ite	ls
 8003a1e:	2301      	movls	r3, #1
 8003a20:	2300      	movhi	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	e01e      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x2cc>
 8003a26:	bf00      	nop
 8003a28:	47ff0000 	.word	0x47ff0000
 8003a2c:	5c001000 	.word	0x5c001000
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a40:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003a48:	2320      	movs	r3, #32
 8003a4a:	e003      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a4e:	fab3 f383 	clz	r3, r3
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	3301      	adds	r3, #1
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	2b09      	cmp	r3, #9
 8003a5c:	bf94      	ite	ls
 8003a5e:	2301      	movls	r3, #1
 8003a60:	2300      	movhi	r3, #0
 8003a62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d079      	beq.n	8003b5c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d107      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x2ec>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	0e9b      	lsrs	r3, r3, #26
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	069b      	lsls	r3, r3, #26
 8003a7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a82:	e015      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x318>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a8c:	fa93 f3a3 	rbit	r3, r3
 8003a90:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a94:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003a9c:	2320      	movs	r3, #32
 8003a9e:	e003      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa2:	fab3 f383 	clz	r3, r3
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	069b      	lsls	r3, r3, #26
 8003aac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d109      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x338>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	0e9b      	lsrs	r3, r3, #26
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f003 031f 	and.w	r3, r3, #31
 8003ac8:	2101      	movs	r1, #1
 8003aca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ace:	e017      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x368>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad8:	fa93 f3a3 	rbit	r3, r3
 8003adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003ae8:	2320      	movs	r3, #32
 8003aea:	e003      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aee:	fab3 f383 	clz	r3, r3
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	3301      	adds	r3, #1
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	2101      	movs	r1, #1
 8003afc:	fa01 f303 	lsl.w	r3, r1, r3
 8003b00:	ea42 0103 	orr.w	r1, r2, r3
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x38e>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	0e9b      	lsrs	r3, r3, #26
 8003b16:	3301      	adds	r3, #1
 8003b18:	f003 021f 	and.w	r2, r3, #31
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	4413      	add	r3, r2
 8003b22:	051b      	lsls	r3, r3, #20
 8003b24:	e018      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x3c0>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2e:	fa93 f3a3 	rbit	r3, r3
 8003b32:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003b3e:	2320      	movs	r3, #32
 8003b40:	e003      	b.n	8003b4a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b44:	fab3 f383 	clz	r3, r3
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	f003 021f 	and.w	r2, r3, #31
 8003b50:	4613      	mov	r3, r2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4413      	add	r3, r2
 8003b56:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	e07e      	b.n	8003c5a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d107      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x3e0>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	0e9b      	lsrs	r3, r3, #26
 8003b6e:	3301      	adds	r3, #1
 8003b70:	069b      	lsls	r3, r3, #26
 8003b72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b76:	e015      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x40c>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b80:	fa93 f3a3 	rbit	r3, r3
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003b90:	2320      	movs	r3, #32
 8003b92:	e003      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	069b      	lsls	r3, r3, #26
 8003ba0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x42c>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	0e9b      	lsrs	r3, r3, #26
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc2:	e017      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x45c>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	fa93 f3a3 	rbit	r3, r3
 8003bd0:	61bb      	str	r3, [r7, #24]
  return result;
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003bdc:	2320      	movs	r3, #32
 8003bde:	e003      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	3301      	adds	r3, #1
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	2101      	movs	r1, #1
 8003bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf4:	ea42 0103 	orr.w	r1, r2, r3
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10d      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x488>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0e9b      	lsrs	r3, r3, #26
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	f003 021f 	and.w	r2, r3, #31
 8003c10:	4613      	mov	r3, r2
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	4413      	add	r3, r2
 8003c16:	3b1e      	subs	r3, #30
 8003c18:	051b      	lsls	r3, r3, #20
 8003c1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c1e:	e01b      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x4c0>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	fa93 f3a3 	rbit	r3, r3
 8003c2c:	60fb      	str	r3, [r7, #12]
  return result;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003c38:	2320      	movs	r3, #32
 8003c3a:	e003      	b.n	8003c44 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	fab3 f383 	clz	r3, r3
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	3301      	adds	r3, #1
 8003c46:	f003 021f 	and.w	r2, r3, #31
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	4413      	add	r3, r2
 8003c50:	3b1e      	subs	r3, #30
 8003c52:	051b      	lsls	r3, r3, #20
 8003c54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	6892      	ldr	r2, [r2, #8]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f7ff f9e4 	bl	800302c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f280 80c6 	bge.w	8003dfa <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a67      	ldr	r2, [pc, #412]	; (8003e10 <HAL_ADC_ConfigChannel+0x678>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d004      	beq.n	8003c82 <HAL_ADC_ConfigChannel+0x4ea>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a65      	ldr	r2, [pc, #404]	; (8003e14 <HAL_ADC_ConfigChannel+0x67c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d101      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x4ee>
 8003c82:	4b65      	ldr	r3, [pc, #404]	; (8003e18 <HAL_ADC_ConfigChannel+0x680>)
 8003c84:	e000      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x4f0>
 8003c86:	4b65      	ldr	r3, [pc, #404]	; (8003e1c <HAL_ADC_ConfigChannel+0x684>)
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff f91b 	bl	8002ec4 <LL_ADC_GetCommonPathInternalCh>
 8003c8e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a5e      	ldr	r2, [pc, #376]	; (8003e10 <HAL_ADC_ConfigChannel+0x678>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d004      	beq.n	8003ca4 <HAL_ADC_ConfigChannel+0x50c>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a5d      	ldr	r2, [pc, #372]	; (8003e14 <HAL_ADC_ConfigChannel+0x67c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d10e      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x52a>
 8003ca4:	485a      	ldr	r0, [pc, #360]	; (8003e10 <HAL_ADC_ConfigChannel+0x678>)
 8003ca6:	f7ff fa95 	bl	80031d4 <LL_ADC_IsEnabled>
 8003caa:	4604      	mov	r4, r0
 8003cac:	4859      	ldr	r0, [pc, #356]	; (8003e14 <HAL_ADC_ConfigChannel+0x67c>)
 8003cae:	f7ff fa91 	bl	80031d4 <LL_ADC_IsEnabled>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4323      	orrs	r3, r4
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	bf0c      	ite	eq
 8003cba:	2301      	moveq	r3, #1
 8003cbc:	2300      	movne	r3, #0
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	e008      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x53c>
 8003cc2:	4857      	ldr	r0, [pc, #348]	; (8003e20 <HAL_ADC_ConfigChannel+0x688>)
 8003cc4:	f7ff fa86 	bl	80031d4 <LL_ADC_IsEnabled>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bf0c      	ite	eq
 8003cce:	2301      	moveq	r3, #1
 8003cd0:	2300      	movne	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d07d      	beq.n	8003dd4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a51      	ldr	r2, [pc, #324]	; (8003e24 <HAL_ADC_ConfigChannel+0x68c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d130      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x5ac>
 8003ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d12b      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a4b      	ldr	r2, [pc, #300]	; (8003e20 <HAL_ADC_ConfigChannel+0x688>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	f040 8081 	bne.w	8003dfa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a44      	ldr	r2, [pc, #272]	; (8003e10 <HAL_ADC_ConfigChannel+0x678>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d004      	beq.n	8003d0c <HAL_ADC_ConfigChannel+0x574>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a43      	ldr	r2, [pc, #268]	; (8003e14 <HAL_ADC_ConfigChannel+0x67c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d101      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x578>
 8003d0c:	4a42      	ldr	r2, [pc, #264]	; (8003e18 <HAL_ADC_ConfigChannel+0x680>)
 8003d0e:	e000      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x57a>
 8003d10:	4a42      	ldr	r2, [pc, #264]	; (8003e1c <HAL_ADC_ConfigChannel+0x684>)
 8003d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	f7ff f8bf 	bl	8002e9e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d20:	4b41      	ldr	r3, [pc, #260]	; (8003e28 <HAL_ADC_ConfigChannel+0x690>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	099b      	lsrs	r3, r3, #6
 8003d26:	4a41      	ldr	r2, [pc, #260]	; (8003e2c <HAL_ADC_ConfigChannel+0x694>)
 8003d28:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	3301      	adds	r3, #1
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003d34:	e002      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f9      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d42:	e05a      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a39      	ldr	r2, [pc, #228]	; (8003e30 <HAL_ADC_ConfigChannel+0x698>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d11e      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x5f4>
 8003d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d119      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a30      	ldr	r2, [pc, #192]	; (8003e20 <HAL_ADC_ConfigChannel+0x688>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d14b      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a2a      	ldr	r2, [pc, #168]	; (8003e10 <HAL_ADC_ConfigChannel+0x678>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_ADC_ConfigChannel+0x5de>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a28      	ldr	r2, [pc, #160]	; (8003e14 <HAL_ADC_ConfigChannel+0x67c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d101      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x5e2>
 8003d76:	4a28      	ldr	r2, [pc, #160]	; (8003e18 <HAL_ADC_ConfigChannel+0x680>)
 8003d78:	e000      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x5e4>
 8003d7a:	4a28      	ldr	r2, [pc, #160]	; (8003e1c <HAL_ADC_ConfigChannel+0x684>)
 8003d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d82:	4619      	mov	r1, r3
 8003d84:	4610      	mov	r0, r2
 8003d86:	f7ff f88a 	bl	8002e9e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d8a:	e036      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a28      	ldr	r2, [pc, #160]	; (8003e34 <HAL_ADC_ConfigChannel+0x69c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d131      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x662>
 8003d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d12c      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1e      	ldr	r2, [pc, #120]	; (8003e20 <HAL_ADC_ConfigChannel+0x688>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d127      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <HAL_ADC_ConfigChannel+0x678>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d004      	beq.n	8003dbe <HAL_ADC_ConfigChannel+0x626>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a16      	ldr	r2, [pc, #88]	; (8003e14 <HAL_ADC_ConfigChannel+0x67c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d101      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x62a>
 8003dbe:	4a16      	ldr	r2, [pc, #88]	; (8003e18 <HAL_ADC_ConfigChannel+0x680>)
 8003dc0:	e000      	b.n	8003dc4 <HAL_ADC_ConfigChannel+0x62c>
 8003dc2:	4a16      	ldr	r2, [pc, #88]	; (8003e1c <HAL_ADC_ConfigChannel+0x684>)
 8003dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4610      	mov	r0, r2
 8003dce:	f7ff f866 	bl	8002e9e <LL_ADC_SetCommonPathInternalCh>
 8003dd2:	e012      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	f043 0220 	orr.w	r2, r3, #32
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003de6:	e008      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dec:	f043 0220 	orr.w	r2, r3, #32
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e02:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3784      	adds	r7, #132	; 0x84
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd90      	pop	{r4, r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40022000 	.word	0x40022000
 8003e14:	40022100 	.word	0x40022100
 8003e18:	40022300 	.word	0x40022300
 8003e1c:	58026300 	.word	0x58026300
 8003e20:	58026000 	.word	0x58026000
 8003e24:	cb840000 	.word	0xcb840000
 8003e28:	20000024 	.word	0x20000024
 8003e2c:	053e2d63 	.word	0x053e2d63
 8003e30:	c7520000 	.word	0xc7520000
 8003e34:	cfb80000 	.word	0xcfb80000

08003e38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff f9c5 	bl	80031d4 <LL_ADC_IsEnabled>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d16e      	bne.n	8003f2e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	4b38      	ldr	r3, [pc, #224]	; (8003f38 <ADC_Enable+0x100>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00d      	beq.n	8003e7a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e62:	f043 0210 	orr.w	r2, r3, #16
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6e:	f043 0201 	orr.w	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e05a      	b.n	8003f30 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff f980 	bl	8003184 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003e84:	f7fe ffe0 	bl	8002e48 <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a2b      	ldr	r2, [pc, #172]	; (8003f3c <ADC_Enable+0x104>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <ADC_Enable+0x66>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a29      	ldr	r2, [pc, #164]	; (8003f40 <ADC_Enable+0x108>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d101      	bne.n	8003ea2 <ADC_Enable+0x6a>
 8003e9e:	4b29      	ldr	r3, [pc, #164]	; (8003f44 <ADC_Enable+0x10c>)
 8003ea0:	e000      	b.n	8003ea4 <ADC_Enable+0x6c>
 8003ea2:	4b29      	ldr	r3, [pc, #164]	; (8003f48 <ADC_Enable+0x110>)
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff f911 	bl	80030cc <LL_ADC_GetMultimode>
 8003eaa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a23      	ldr	r2, [pc, #140]	; (8003f40 <ADC_Enable+0x108>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d002      	beq.n	8003ebc <ADC_Enable+0x84>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	e000      	b.n	8003ebe <ADC_Enable+0x86>
 8003ebc:	4b1f      	ldr	r3, [pc, #124]	; (8003f3c <ADC_Enable+0x104>)
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d02c      	beq.n	8003f20 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d130      	bne.n	8003f2e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ecc:	e028      	b.n	8003f20 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff f97e 	bl	80031d4 <LL_ADC_IsEnabled>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d104      	bne.n	8003ee8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff f94e 	bl	8003184 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ee8:	f7fe ffae 	bl	8002e48 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d914      	bls.n	8003f20 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d00d      	beq.n	8003f20 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	f043 0210 	orr.w	r2, r3, #16
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f14:	f043 0201 	orr.w	r2, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e007      	b.n	8003f30 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d1cf      	bne.n	8003ece <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	8000003f 	.word	0x8000003f
 8003f3c:	40022000 	.word	0x40022000
 8003f40:	40022100 	.word	0x40022100
 8003f44:	40022300 	.word	0x40022300
 8003f48:	58026300 	.word	0x58026300

08003f4c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff f94e 	bl	80031fa <LL_ADC_IsDisableOngoing>
 8003f5e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff f935 	bl	80031d4 <LL_ADC_IsEnabled>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d047      	beq.n	8004000 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d144      	bne.n	8004000 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 030d 	and.w	r3, r3, #13
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d10c      	bne.n	8003f9e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff f90f 	bl	80031ac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2203      	movs	r2, #3
 8003f94:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f96:	f7fe ff57 	bl	8002e48 <HAL_GetTick>
 8003f9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f9c:	e029      	b.n	8003ff2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa2:	f043 0210 	orr.w	r2, r3, #16
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fae:	f043 0201 	orr.w	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e023      	b.n	8004002 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003fba:	f7fe ff45 	bl	8002e48 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d914      	bls.n	8003ff2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00d      	beq.n	8003ff2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fda:	f043 0210 	orr.w	r2, r3, #16
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe6:	f043 0201 	orr.w	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e007      	b.n	8004002 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1dc      	bne.n	8003fba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004020:	2b00      	cmp	r3, #0
 8004022:	d14b      	bne.n	80040bc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004028:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d021      	beq.n	8004082 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f7fe ffa0 	bl	8002f88 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d032      	beq.n	80040b4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d12b      	bne.n	80040b4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004060:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d11f      	bne.n	80040b4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004078:	f043 0201 	orr.w	r2, r3, #1
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	655a      	str	r2, [r3, #84]	; 0x54
 8004080:	e018      	b.n	80040b4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d111      	bne.n	80040b4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d105      	bne.n	80040b4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ac:	f043 0201 	orr.w	r2, r3, #1
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f7ff fb51 	bl	800375c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80040ba:	e00e      	b.n	80040da <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f7ff fb5b 	bl	8003784 <HAL_ADC_ErrorCallback>
}
 80040ce:	e004      	b.n	80040da <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	4798      	blx	r3
}
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f7ff fb3d 	bl	8003770 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040f6:	bf00      	nop
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004110:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411c:	f043 0204 	orr.w	r2, r3, #4
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f7ff fb2d 	bl	8003784 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800412a:	bf00      	nop
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a79      	ldr	r2, [pc, #484]	; (8004328 <ADC_ConfigureBoostMode+0x1f4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d004      	beq.n	8004150 <ADC_ConfigureBoostMode+0x1c>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a78      	ldr	r2, [pc, #480]	; (800432c <ADC_ConfigureBoostMode+0x1f8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d109      	bne.n	8004164 <ADC_ConfigureBoostMode+0x30>
 8004150:	4b77      	ldr	r3, [pc, #476]	; (8004330 <ADC_ConfigureBoostMode+0x1fc>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf14      	ite	ne
 800415c:	2301      	movne	r3, #1
 800415e:	2300      	moveq	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	e008      	b.n	8004176 <ADC_ConfigureBoostMode+0x42>
 8004164:	4b73      	ldr	r3, [pc, #460]	; (8004334 <ADC_ConfigureBoostMode+0x200>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf14      	ite	ne
 8004170:	2301      	movne	r3, #1
 8004172:	2300      	moveq	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01c      	beq.n	80041b4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800417a:	f003 fe9d 	bl	8007eb8 <HAL_RCC_GetHCLKFreq>
 800417e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004188:	d010      	beq.n	80041ac <ADC_ConfigureBoostMode+0x78>
 800418a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800418e:	d871      	bhi.n	8004274 <ADC_ConfigureBoostMode+0x140>
 8004190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004194:	d002      	beq.n	800419c <ADC_ConfigureBoostMode+0x68>
 8004196:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800419a:	d16b      	bne.n	8004274 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	60fb      	str	r3, [r7, #12]
        break;
 80041aa:	e066      	b.n	800427a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	089b      	lsrs	r3, r3, #2
 80041b0:	60fb      	str	r3, [r7, #12]
        break;
 80041b2:	e062      	b.n	800427a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80041b4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80041b8:	f004 fe1a 	bl	8008df0 <HAL_RCCEx_GetPeriphCLKFreq>
 80041bc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80041c6:	d051      	beq.n	800426c <ADC_ConfigureBoostMode+0x138>
 80041c8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80041cc:	d854      	bhi.n	8004278 <ADC_ConfigureBoostMode+0x144>
 80041ce:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80041d2:	d047      	beq.n	8004264 <ADC_ConfigureBoostMode+0x130>
 80041d4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80041d8:	d84e      	bhi.n	8004278 <ADC_ConfigureBoostMode+0x144>
 80041da:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80041de:	d03d      	beq.n	800425c <ADC_ConfigureBoostMode+0x128>
 80041e0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80041e4:	d848      	bhi.n	8004278 <ADC_ConfigureBoostMode+0x144>
 80041e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041ea:	d033      	beq.n	8004254 <ADC_ConfigureBoostMode+0x120>
 80041ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041f0:	d842      	bhi.n	8004278 <ADC_ConfigureBoostMode+0x144>
 80041f2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80041f6:	d029      	beq.n	800424c <ADC_ConfigureBoostMode+0x118>
 80041f8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80041fc:	d83c      	bhi.n	8004278 <ADC_ConfigureBoostMode+0x144>
 80041fe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004202:	d01a      	beq.n	800423a <ADC_ConfigureBoostMode+0x106>
 8004204:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004208:	d836      	bhi.n	8004278 <ADC_ConfigureBoostMode+0x144>
 800420a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800420e:	d014      	beq.n	800423a <ADC_ConfigureBoostMode+0x106>
 8004210:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004214:	d830      	bhi.n	8004278 <ADC_ConfigureBoostMode+0x144>
 8004216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800421a:	d00e      	beq.n	800423a <ADC_ConfigureBoostMode+0x106>
 800421c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004220:	d82a      	bhi.n	8004278 <ADC_ConfigureBoostMode+0x144>
 8004222:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004226:	d008      	beq.n	800423a <ADC_ConfigureBoostMode+0x106>
 8004228:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800422c:	d824      	bhi.n	8004278 <ADC_ConfigureBoostMode+0x144>
 800422e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004232:	d002      	beq.n	800423a <ADC_ConfigureBoostMode+0x106>
 8004234:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004238:	d11e      	bne.n	8004278 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	0c9b      	lsrs	r3, r3, #18
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	fbb2 f3f3 	udiv	r3, r2, r3
 8004248:	60fb      	str	r3, [r7, #12]
        break;
 800424a:	e016      	b.n	800427a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	091b      	lsrs	r3, r3, #4
 8004250:	60fb      	str	r3, [r7, #12]
        break;
 8004252:	e012      	b.n	800427a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	60fb      	str	r3, [r7, #12]
        break;
 800425a:	e00e      	b.n	800427a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	099b      	lsrs	r3, r3, #6
 8004260:	60fb      	str	r3, [r7, #12]
        break;
 8004262:	e00a      	b.n	800427a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	09db      	lsrs	r3, r3, #7
 8004268:	60fb      	str	r3, [r7, #12]
        break;
 800426a:	e006      	b.n	800427a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	0a1b      	lsrs	r3, r3, #8
 8004270:	60fb      	str	r3, [r7, #12]
        break;
 8004272:	e002      	b.n	800427a <ADC_ConfigureBoostMode+0x146>
        break;
 8004274:	bf00      	nop
 8004276:	e000      	b.n	800427a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004278:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800427a:	f7fe fdf1 	bl	8002e60 <HAL_GetREVID>
 800427e:	4603      	mov	r3, r0
 8004280:	f241 0203 	movw	r2, #4099	; 0x1003
 8004284:	4293      	cmp	r3, r2
 8004286:	d815      	bhi.n	80042b4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4a2b      	ldr	r2, [pc, #172]	; (8004338 <ADC_ConfigureBoostMode+0x204>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d908      	bls.n	80042a2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800429e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80042a0:	e03e      	b.n	8004320 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042b0:	609a      	str	r2, [r3, #8]
}
 80042b2:	e035      	b.n	8004320 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	085b      	lsrs	r3, r3, #1
 80042b8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4a1f      	ldr	r2, [pc, #124]	; (800433c <ADC_ConfigureBoostMode+0x208>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d808      	bhi.n	80042d4 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80042d0:	609a      	str	r2, [r3, #8]
}
 80042d2:	e025      	b.n	8004320 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a1a      	ldr	r2, [pc, #104]	; (8004340 <ADC_ConfigureBoostMode+0x20c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d80a      	bhi.n	80042f2 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ee:	609a      	str	r2, [r3, #8]
}
 80042f0:	e016      	b.n	8004320 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4a13      	ldr	r2, [pc, #76]	; (8004344 <ADC_ConfigureBoostMode+0x210>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d80a      	bhi.n	8004310 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800430c:	609a      	str	r2, [r3, #8]
}
 800430e:	e007      	b.n	8004320 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800431e:	609a      	str	r2, [r3, #8]
}
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40022000 	.word	0x40022000
 800432c:	40022100 	.word	0x40022100
 8004330:	40022300 	.word	0x40022300
 8004334:	58026300 	.word	0x58026300
 8004338:	01312d00 	.word	0x01312d00
 800433c:	005f5e10 	.word	0x005f5e10
 8004340:	00bebc20 	.word	0x00bebc20
 8004344:	017d7840 	.word	0x017d7840

08004348 <LL_ADC_IsEnabled>:
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <LL_ADC_IsEnabled+0x18>
 800435c:	2301      	movs	r3, #1
 800435e:	e000      	b.n	8004362 <LL_ADC_IsEnabled+0x1a>
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
	...

08004370 <LL_ADC_StartCalibration>:
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <LL_ADC_StartCalibration+0x38>)
 8004382:	4013      	ands	r3, r2
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004390:	430a      	orrs	r2, r1
 8004392:	4313      	orrs	r3, r2
 8004394:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	3ffeffc0 	.word	0x3ffeffc0

080043ac <LL_ADC_IsCalibrationOnGoing>:
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043c0:	d101      	bne.n	80043c6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <LL_ADC_REG_IsConversionOngoing>:
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d101      	bne.n	80043ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004408:	2300      	movs	r3, #0
 800440a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_ADCEx_Calibration_Start+0x1e>
 8004416:	2302      	movs	r3, #2
 8004418:	e04c      	b.n	80044b4 <HAL_ADCEx_Calibration_Start+0xb8>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f7ff fd92 	bl	8003f4c <ADC_Disable>
 8004428:	4603      	mov	r3, r0
 800442a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800442c:	7dfb      	ldrb	r3, [r7, #23]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d135      	bne.n	800449e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004436:	4b21      	ldr	r3, [pc, #132]	; (80044bc <HAL_ADCEx_Calibration_Start+0xc0>)
 8004438:	4013      	ands	r3, r2
 800443a:	f043 0202 	orr.w	r2, r3, #2
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff ff90 	bl	8004370 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004450:	e014      	b.n	800447c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	3301      	adds	r3, #1
 8004456:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4a19      	ldr	r2, [pc, #100]	; (80044c0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d30d      	bcc.n	800447c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004464:	f023 0312 	bic.w	r3, r3, #18
 8004468:	f043 0210 	orr.w	r2, r3, #16
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e01b      	b.n	80044b4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff ff93 	bl	80043ac <LL_ADC_IsCalibrationOnGoing>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e2      	bne.n	8004452 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004490:	f023 0303 	bic.w	r3, r3, #3
 8004494:	f043 0201 	orr.w	r2, r3, #1
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	655a      	str	r2, [r3, #84]	; 0x54
 800449c:	e005      	b.n	80044aa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a2:	f043 0210 	orr.w	r2, r3, #16
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	ffffeefd 	.word	0xffffeefd
 80044c0:	25c3f800 	.word	0x25c3f800

080044c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80044c4:	b590      	push	{r4, r7, lr}
 80044c6:	b09f      	sub	sp, #124	; 0x7c
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80044de:	2302      	movs	r3, #2
 80044e0:	e0be      	b.n	8004660 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80044ea:	2300      	movs	r3, #0
 80044ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80044ee:	2300      	movs	r3, #0
 80044f0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a5c      	ldr	r2, [pc, #368]	; (8004668 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d102      	bne.n	8004502 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80044fc:	4b5b      	ldr	r3, [pc, #364]	; (800466c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80044fe:	60bb      	str	r3, [r7, #8]
 8004500:	e001      	b.n	8004506 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004502:	2300      	movs	r3, #0
 8004504:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10b      	bne.n	8004524 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004510:	f043 0220 	orr.w	r2, r3, #32
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e09d      	b.n	8004660 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff ff54 	bl	80043d4 <LL_ADC_REG_IsConversionOngoing>
 800452c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff ff4e 	bl	80043d4 <LL_ADC_REG_IsConversionOngoing>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d17f      	bne.n	800463e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800453e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004540:	2b00      	cmp	r3, #0
 8004542:	d17c      	bne.n	800463e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a47      	ldr	r2, [pc, #284]	; (8004668 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a46      	ldr	r2, [pc, #280]	; (800466c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d101      	bne.n	800455c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004558:	4b45      	ldr	r3, [pc, #276]	; (8004670 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800455a:	e000      	b.n	800455e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800455c:	4b45      	ldr	r3, [pc, #276]	; (8004674 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800455e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d039      	beq.n	80045dc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	431a      	orrs	r2, r3
 8004576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004578:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a3a      	ldr	r2, [pc, #232]	; (8004668 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d004      	beq.n	800458e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a38      	ldr	r2, [pc, #224]	; (800466c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d10e      	bne.n	80045ac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800458e:	4836      	ldr	r0, [pc, #216]	; (8004668 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004590:	f7ff feda 	bl	8004348 <LL_ADC_IsEnabled>
 8004594:	4604      	mov	r4, r0
 8004596:	4835      	ldr	r0, [pc, #212]	; (800466c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004598:	f7ff fed6 	bl	8004348 <LL_ADC_IsEnabled>
 800459c:	4603      	mov	r3, r0
 800459e:	4323      	orrs	r3, r4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bf0c      	ite	eq
 80045a4:	2301      	moveq	r3, #1
 80045a6:	2300      	movne	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	e008      	b.n	80045be <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80045ac:	4832      	ldr	r0, [pc, #200]	; (8004678 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80045ae:	f7ff fecb 	bl	8004348 <LL_ADC_IsEnabled>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	bf0c      	ite	eq
 80045b8:	2301      	moveq	r3, #1
 80045ba:	2300      	movne	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d047      	beq.n	8004652 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80045c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	4b2d      	ldr	r3, [pc, #180]	; (800467c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	6811      	ldr	r1, [r2, #0]
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	6892      	ldr	r2, [r2, #8]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	431a      	orrs	r2, r3
 80045d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045da:	e03a      	b.n	8004652 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80045dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d004      	beq.n	80045fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a1d      	ldr	r2, [pc, #116]	; (800466c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d10e      	bne.n	800461a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80045fc:	481a      	ldr	r0, [pc, #104]	; (8004668 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80045fe:	f7ff fea3 	bl	8004348 <LL_ADC_IsEnabled>
 8004602:	4604      	mov	r4, r0
 8004604:	4819      	ldr	r0, [pc, #100]	; (800466c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004606:	f7ff fe9f 	bl	8004348 <LL_ADC_IsEnabled>
 800460a:	4603      	mov	r3, r0
 800460c:	4323      	orrs	r3, r4
 800460e:	2b00      	cmp	r3, #0
 8004610:	bf0c      	ite	eq
 8004612:	2301      	moveq	r3, #1
 8004614:	2300      	movne	r3, #0
 8004616:	b2db      	uxtb	r3, r3
 8004618:	e008      	b.n	800462c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800461a:	4817      	ldr	r0, [pc, #92]	; (8004678 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800461c:	f7ff fe94 	bl	8004348 <LL_ADC_IsEnabled>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	bf0c      	ite	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	2300      	movne	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d010      	beq.n	8004652 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	4b11      	ldr	r3, [pc, #68]	; (800467c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004636:	4013      	ands	r3, r2
 8004638:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800463a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800463c:	e009      	b.n	8004652 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004642:	f043 0220 	orr.w	r2, r3, #32
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004650:	e000      	b.n	8004654 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004652:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800465c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004660:	4618      	mov	r0, r3
 8004662:	377c      	adds	r7, #124	; 0x7c
 8004664:	46bd      	mov	sp, r7
 8004666:	bd90      	pop	{r4, r7, pc}
 8004668:	40022000 	.word	0x40022000
 800466c:	40022100 	.word	0x40022100
 8004670:	40022300 	.word	0x40022300
 8004674:	58026300 	.word	0x58026300
 8004678:	58026000 	.word	0x58026000
 800467c:	fffff0e0 	.word	0xfffff0e0

08004680 <__NVIC_SetPriorityGrouping>:
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <__NVIC_SetPriorityGrouping+0x40>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800469c:	4013      	ands	r3, r2
 800469e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80046a8:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <__NVIC_SetPriorityGrouping+0x44>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046ae:	4a04      	ldr	r2, [pc, #16]	; (80046c0 <__NVIC_SetPriorityGrouping+0x40>)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	60d3      	str	r3, [r2, #12]
}
 80046b4:	bf00      	nop
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	e000ed00 	.word	0xe000ed00
 80046c4:	05fa0000 	.word	0x05fa0000

080046c8 <__NVIC_GetPriorityGrouping>:
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046cc:	4b04      	ldr	r3, [pc, #16]	; (80046e0 <__NVIC_GetPriorityGrouping+0x18>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	0a1b      	lsrs	r3, r3, #8
 80046d2:	f003 0307 	and.w	r3, r3, #7
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	e000ed00 	.word	0xe000ed00

080046e4 <__NVIC_EnableIRQ>:
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4603      	mov	r3, r0
 80046ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	db0b      	blt.n	800470e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	f003 021f 	and.w	r2, r3, #31
 80046fc:	4907      	ldr	r1, [pc, #28]	; (800471c <__NVIC_EnableIRQ+0x38>)
 80046fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	2001      	movs	r0, #1
 8004706:	fa00 f202 	lsl.w	r2, r0, r2
 800470a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	e000e100 	.word	0xe000e100

08004720 <__NVIC_SetPriority>:
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	6039      	str	r1, [r7, #0]
 800472a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800472c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004730:	2b00      	cmp	r3, #0
 8004732:	db0a      	blt.n	800474a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	b2da      	uxtb	r2, r3
 8004738:	490c      	ldr	r1, [pc, #48]	; (800476c <__NVIC_SetPriority+0x4c>)
 800473a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800473e:	0112      	lsls	r2, r2, #4
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	440b      	add	r3, r1
 8004744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004748:	e00a      	b.n	8004760 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	b2da      	uxtb	r2, r3
 800474e:	4908      	ldr	r1, [pc, #32]	; (8004770 <__NVIC_SetPriority+0x50>)
 8004750:	88fb      	ldrh	r3, [r7, #6]
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	3b04      	subs	r3, #4
 8004758:	0112      	lsls	r2, r2, #4
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	440b      	add	r3, r1
 800475e:	761a      	strb	r2, [r3, #24]
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	e000e100 	.word	0xe000e100
 8004770:	e000ed00 	.word	0xe000ed00

08004774 <NVIC_EncodePriority>:
{
 8004774:	b480      	push	{r7}
 8004776:	b089      	sub	sp, #36	; 0x24
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f1c3 0307 	rsb	r3, r3, #7
 800478e:	2b04      	cmp	r3, #4
 8004790:	bf28      	it	cs
 8004792:	2304      	movcs	r3, #4
 8004794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	3304      	adds	r3, #4
 800479a:	2b06      	cmp	r3, #6
 800479c:	d902      	bls.n	80047a4 <NVIC_EncodePriority+0x30>
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	3b03      	subs	r3, #3
 80047a2:	e000      	b.n	80047a6 <NVIC_EncodePriority+0x32>
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a8:	f04f 32ff 	mov.w	r2, #4294967295
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43da      	mvns	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	401a      	ands	r2, r3
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047bc:	f04f 31ff 	mov.w	r1, #4294967295
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	fa01 f303 	lsl.w	r3, r1, r3
 80047c6:	43d9      	mvns	r1, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047cc:	4313      	orrs	r3, r2
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3724      	adds	r7, #36	; 0x24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
	...

080047dc <__NVIC_SystemReset>:
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80047e0:	f3bf 8f4f 	dsb	sy
}
 80047e4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <__NVIC_SystemReset+0x24>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80047ee:	4904      	ldr	r1, [pc, #16]	; (8004800 <__NVIC_SystemReset+0x24>)
 80047f0:	4b04      	ldr	r3, [pc, #16]	; (8004804 <__NVIC_SystemReset+0x28>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80047f6:	f3bf 8f4f 	dsb	sy
}
 80047fa:	bf00      	nop
    __NOP();
 80047fc:	bf00      	nop
 80047fe:	e7fd      	b.n	80047fc <__NVIC_SystemReset+0x20>
 8004800:	e000ed00 	.word	0xe000ed00
 8004804:	05fa0004 	.word	0x05fa0004

08004808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3b01      	subs	r3, #1
 8004814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004818:	d301      	bcc.n	800481e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800481a:	2301      	movs	r3, #1
 800481c:	e00f      	b.n	800483e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800481e:	4a0a      	ldr	r2, [pc, #40]	; (8004848 <SysTick_Config+0x40>)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3b01      	subs	r3, #1
 8004824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004826:	210f      	movs	r1, #15
 8004828:	f04f 30ff 	mov.w	r0, #4294967295
 800482c:	f7ff ff78 	bl	8004720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <SysTick_Config+0x40>)
 8004832:	2200      	movs	r2, #0
 8004834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004836:	4b04      	ldr	r3, [pc, #16]	; (8004848 <SysTick_Config+0x40>)
 8004838:	2207      	movs	r2, #7
 800483a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	e000e010 	.word	0xe000e010

0800484c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff ff13 	bl	8004680 <__NVIC_SetPriorityGrouping>
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b086      	sub	sp, #24
 8004866:	af00      	add	r7, sp, #0
 8004868:	4603      	mov	r3, r0
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	607a      	str	r2, [r7, #4]
 800486e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004870:	f7ff ff2a 	bl	80046c8 <__NVIC_GetPriorityGrouping>
 8004874:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	6978      	ldr	r0, [r7, #20]
 800487c:	f7ff ff7a 	bl	8004774 <NVIC_EncodePriority>
 8004880:	4602      	mov	r2, r0
 8004882:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004886:	4611      	mov	r1, r2
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff ff49 	bl	8004720 <__NVIC_SetPriority>
}
 800488e:	bf00      	nop
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	4603      	mov	r3, r0
 800489e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff ff1d 	bl	80046e4 <__NVIC_EnableIRQ>
}
 80048aa:	bf00      	nop
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80048b6:	f7ff ff91 	bl	80047dc <__NVIC_SystemReset>

080048ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff ffa0 	bl	8004808 <SysTick_Config>
 80048c8:	4603      	mov	r3, r0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
	...

080048d4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80048d8:	f3bf 8f5f 	dmb	sy
}
 80048dc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80048de:	4b07      	ldr	r3, [pc, #28]	; (80048fc <HAL_MPU_Disable+0x28>)
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	4a06      	ldr	r2, [pc, #24]	; (80048fc <HAL_MPU_Disable+0x28>)
 80048e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048e8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80048ea:	4b05      	ldr	r3, [pc, #20]	; (8004900 <HAL_MPU_Disable+0x2c>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	605a      	str	r2, [r3, #4]
}
 80048f0:	bf00      	nop
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	e000ed00 	.word	0xe000ed00
 8004900:	e000ed90 	.word	0xe000ed90

08004904 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800490c:	4a0b      	ldr	r2, [pc, #44]	; (800493c <HAL_MPU_Enable+0x38>)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004916:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <HAL_MPU_Enable+0x3c>)
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	4a09      	ldr	r2, [pc, #36]	; (8004940 <HAL_MPU_Enable+0x3c>)
 800491c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004920:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004922:	f3bf 8f4f 	dsb	sy
}
 8004926:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004928:	f3bf 8f6f 	isb	sy
}
 800492c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	e000ed90 	.word	0xe000ed90
 8004940:	e000ed00 	.word	0xe000ed00

08004944 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	785a      	ldrb	r2, [r3, #1]
 8004950:	4b1d      	ldr	r3, [pc, #116]	; (80049c8 <HAL_MPU_ConfigRegion+0x84>)
 8004952:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d029      	beq.n	80049b0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800495c:	4a1a      	ldr	r2, [pc, #104]	; (80049c8 <HAL_MPU_ConfigRegion+0x84>)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	7b1b      	ldrb	r3, [r3, #12]
 8004968:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	7adb      	ldrb	r3, [r3, #11]
 800496e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004970:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	7a9b      	ldrb	r3, [r3, #10]
 8004976:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004978:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	7b5b      	ldrb	r3, [r3, #13]
 800497e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004980:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	7b9b      	ldrb	r3, [r3, #14]
 8004986:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004988:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	7bdb      	ldrb	r3, [r3, #15]
 800498e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004990:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	7a5b      	ldrb	r3, [r3, #9]
 8004996:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004998:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	7a1b      	ldrb	r3, [r3, #8]
 800499e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80049a0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	7812      	ldrb	r2, [r2, #0]
 80049a6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80049a8:	4a07      	ldr	r2, [pc, #28]	; (80049c8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80049aa:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80049ac:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80049ae:	e005      	b.n	80049bc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80049b0:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <HAL_MPU_ConfigRegion+0x84>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80049b6:	4b04      	ldr	r3, [pc, #16]	; (80049c8 <HAL_MPU_ConfigRegion+0x84>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	611a      	str	r2, [r3, #16]
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	e000ed90 	.word	0xe000ed90

080049cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80049d4:	f7fe fa38 	bl	8002e48 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e316      	b.n	8005012 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a66      	ldr	r2, [pc, #408]	; (8004b84 <HAL_DMA_Init+0x1b8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d04a      	beq.n	8004a84 <HAL_DMA_Init+0xb8>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a65      	ldr	r2, [pc, #404]	; (8004b88 <HAL_DMA_Init+0x1bc>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d045      	beq.n	8004a84 <HAL_DMA_Init+0xb8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a63      	ldr	r2, [pc, #396]	; (8004b8c <HAL_DMA_Init+0x1c0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d040      	beq.n	8004a84 <HAL_DMA_Init+0xb8>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a62      	ldr	r2, [pc, #392]	; (8004b90 <HAL_DMA_Init+0x1c4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d03b      	beq.n	8004a84 <HAL_DMA_Init+0xb8>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a60      	ldr	r2, [pc, #384]	; (8004b94 <HAL_DMA_Init+0x1c8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d036      	beq.n	8004a84 <HAL_DMA_Init+0xb8>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a5f      	ldr	r2, [pc, #380]	; (8004b98 <HAL_DMA_Init+0x1cc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d031      	beq.n	8004a84 <HAL_DMA_Init+0xb8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a5d      	ldr	r2, [pc, #372]	; (8004b9c <HAL_DMA_Init+0x1d0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d02c      	beq.n	8004a84 <HAL_DMA_Init+0xb8>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a5c      	ldr	r2, [pc, #368]	; (8004ba0 <HAL_DMA_Init+0x1d4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d027      	beq.n	8004a84 <HAL_DMA_Init+0xb8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a5a      	ldr	r2, [pc, #360]	; (8004ba4 <HAL_DMA_Init+0x1d8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d022      	beq.n	8004a84 <HAL_DMA_Init+0xb8>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a59      	ldr	r2, [pc, #356]	; (8004ba8 <HAL_DMA_Init+0x1dc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d01d      	beq.n	8004a84 <HAL_DMA_Init+0xb8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a57      	ldr	r2, [pc, #348]	; (8004bac <HAL_DMA_Init+0x1e0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d018      	beq.n	8004a84 <HAL_DMA_Init+0xb8>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a56      	ldr	r2, [pc, #344]	; (8004bb0 <HAL_DMA_Init+0x1e4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d013      	beq.n	8004a84 <HAL_DMA_Init+0xb8>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a54      	ldr	r2, [pc, #336]	; (8004bb4 <HAL_DMA_Init+0x1e8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00e      	beq.n	8004a84 <HAL_DMA_Init+0xb8>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a53      	ldr	r2, [pc, #332]	; (8004bb8 <HAL_DMA_Init+0x1ec>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d009      	beq.n	8004a84 <HAL_DMA_Init+0xb8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a51      	ldr	r2, [pc, #324]	; (8004bbc <HAL_DMA_Init+0x1f0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d004      	beq.n	8004a84 <HAL_DMA_Init+0xb8>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a50      	ldr	r2, [pc, #320]	; (8004bc0 <HAL_DMA_Init+0x1f4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d101      	bne.n	8004a88 <HAL_DMA_Init+0xbc>
 8004a84:	2301      	movs	r3, #1
 8004a86:	e000      	b.n	8004a8a <HAL_DMA_Init+0xbe>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 813b 	beq.w	8004d06 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a37      	ldr	r2, [pc, #220]	; (8004b84 <HAL_DMA_Init+0x1b8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d04a      	beq.n	8004b40 <HAL_DMA_Init+0x174>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a36      	ldr	r2, [pc, #216]	; (8004b88 <HAL_DMA_Init+0x1bc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d045      	beq.n	8004b40 <HAL_DMA_Init+0x174>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a34      	ldr	r2, [pc, #208]	; (8004b8c <HAL_DMA_Init+0x1c0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d040      	beq.n	8004b40 <HAL_DMA_Init+0x174>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a33      	ldr	r2, [pc, #204]	; (8004b90 <HAL_DMA_Init+0x1c4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d03b      	beq.n	8004b40 <HAL_DMA_Init+0x174>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a31      	ldr	r2, [pc, #196]	; (8004b94 <HAL_DMA_Init+0x1c8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d036      	beq.n	8004b40 <HAL_DMA_Init+0x174>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a30      	ldr	r2, [pc, #192]	; (8004b98 <HAL_DMA_Init+0x1cc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d031      	beq.n	8004b40 <HAL_DMA_Init+0x174>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a2e      	ldr	r2, [pc, #184]	; (8004b9c <HAL_DMA_Init+0x1d0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d02c      	beq.n	8004b40 <HAL_DMA_Init+0x174>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a2d      	ldr	r2, [pc, #180]	; (8004ba0 <HAL_DMA_Init+0x1d4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d027      	beq.n	8004b40 <HAL_DMA_Init+0x174>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a2b      	ldr	r2, [pc, #172]	; (8004ba4 <HAL_DMA_Init+0x1d8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d022      	beq.n	8004b40 <HAL_DMA_Init+0x174>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a2a      	ldr	r2, [pc, #168]	; (8004ba8 <HAL_DMA_Init+0x1dc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d01d      	beq.n	8004b40 <HAL_DMA_Init+0x174>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a28      	ldr	r2, [pc, #160]	; (8004bac <HAL_DMA_Init+0x1e0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d018      	beq.n	8004b40 <HAL_DMA_Init+0x174>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a27      	ldr	r2, [pc, #156]	; (8004bb0 <HAL_DMA_Init+0x1e4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d013      	beq.n	8004b40 <HAL_DMA_Init+0x174>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a25      	ldr	r2, [pc, #148]	; (8004bb4 <HAL_DMA_Init+0x1e8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00e      	beq.n	8004b40 <HAL_DMA_Init+0x174>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a24      	ldr	r2, [pc, #144]	; (8004bb8 <HAL_DMA_Init+0x1ec>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d009      	beq.n	8004b40 <HAL_DMA_Init+0x174>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a22      	ldr	r2, [pc, #136]	; (8004bbc <HAL_DMA_Init+0x1f0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d004      	beq.n	8004b40 <HAL_DMA_Init+0x174>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a21      	ldr	r2, [pc, #132]	; (8004bc0 <HAL_DMA_Init+0x1f4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d108      	bne.n	8004b52 <HAL_DMA_Init+0x186>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0201 	bic.w	r2, r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	e007      	b.n	8004b62 <HAL_DMA_Init+0x196>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0201 	bic.w	r2, r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b62:	e02f      	b.n	8004bc4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b64:	f7fe f970 	bl	8002e48 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b05      	cmp	r3, #5
 8004b70:	d928      	bls.n	8004bc4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e246      	b.n	8005012 <HAL_DMA_Init+0x646>
 8004b84:	40020010 	.word	0x40020010
 8004b88:	40020028 	.word	0x40020028
 8004b8c:	40020040 	.word	0x40020040
 8004b90:	40020058 	.word	0x40020058
 8004b94:	40020070 	.word	0x40020070
 8004b98:	40020088 	.word	0x40020088
 8004b9c:	400200a0 	.word	0x400200a0
 8004ba0:	400200b8 	.word	0x400200b8
 8004ba4:	40020410 	.word	0x40020410
 8004ba8:	40020428 	.word	0x40020428
 8004bac:	40020440 	.word	0x40020440
 8004bb0:	40020458 	.word	0x40020458
 8004bb4:	40020470 	.word	0x40020470
 8004bb8:	40020488 	.word	0x40020488
 8004bbc:	400204a0 	.word	0x400204a0
 8004bc0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1c8      	bne.n	8004b64 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	4b83      	ldr	r3, [pc, #524]	; (8004dec <HAL_DMA_Init+0x420>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004bea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bf6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c02:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d107      	bne.n	8004c28 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	4313      	orrs	r3, r2
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004c28:	4b71      	ldr	r3, [pc, #452]	; (8004df0 <HAL_DMA_Init+0x424>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	4b71      	ldr	r3, [pc, #452]	; (8004df4 <HAL_DMA_Init+0x428>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c34:	d328      	bcc.n	8004c88 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b28      	cmp	r3, #40	; 0x28
 8004c3c:	d903      	bls.n	8004c46 <HAL_DMA_Init+0x27a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b2e      	cmp	r3, #46	; 0x2e
 8004c44:	d917      	bls.n	8004c76 <HAL_DMA_Init+0x2aa>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b3e      	cmp	r3, #62	; 0x3e
 8004c4c:	d903      	bls.n	8004c56 <HAL_DMA_Init+0x28a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b42      	cmp	r3, #66	; 0x42
 8004c54:	d90f      	bls.n	8004c76 <HAL_DMA_Init+0x2aa>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b46      	cmp	r3, #70	; 0x46
 8004c5c:	d903      	bls.n	8004c66 <HAL_DMA_Init+0x29a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b48      	cmp	r3, #72	; 0x48
 8004c64:	d907      	bls.n	8004c76 <HAL_DMA_Init+0x2aa>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b4e      	cmp	r3, #78	; 0x4e
 8004c6c:	d905      	bls.n	8004c7a <HAL_DMA_Init+0x2ae>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b52      	cmp	r3, #82	; 0x52
 8004c74:	d801      	bhi.n	8004c7a <HAL_DMA_Init+0x2ae>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <HAL_DMA_Init+0x2b0>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c86:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f023 0307 	bic.w	r3, r3, #7
 8004c9e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d117      	bne.n	8004ce2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f001 fdcf 	bl	8006868 <DMA_CheckFifoParam>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d008      	beq.n	8004ce2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2240      	movs	r2, #64	; 0x40
 8004cd4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e197      	b.n	8005012 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f001 fd0a 	bl	8006704 <DMA_CalcBaseAndBitshift>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf8:	f003 031f 	and.w	r3, r3, #31
 8004cfc:	223f      	movs	r2, #63	; 0x3f
 8004cfe:	409a      	lsls	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	609a      	str	r2, [r3, #8]
 8004d04:	e0cd      	b.n	8004ea2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a3b      	ldr	r2, [pc, #236]	; (8004df8 <HAL_DMA_Init+0x42c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d022      	beq.n	8004d56 <HAL_DMA_Init+0x38a>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a39      	ldr	r2, [pc, #228]	; (8004dfc <HAL_DMA_Init+0x430>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d01d      	beq.n	8004d56 <HAL_DMA_Init+0x38a>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a38      	ldr	r2, [pc, #224]	; (8004e00 <HAL_DMA_Init+0x434>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d018      	beq.n	8004d56 <HAL_DMA_Init+0x38a>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a36      	ldr	r2, [pc, #216]	; (8004e04 <HAL_DMA_Init+0x438>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d013      	beq.n	8004d56 <HAL_DMA_Init+0x38a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a35      	ldr	r2, [pc, #212]	; (8004e08 <HAL_DMA_Init+0x43c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00e      	beq.n	8004d56 <HAL_DMA_Init+0x38a>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a33      	ldr	r2, [pc, #204]	; (8004e0c <HAL_DMA_Init+0x440>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d009      	beq.n	8004d56 <HAL_DMA_Init+0x38a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a32      	ldr	r2, [pc, #200]	; (8004e10 <HAL_DMA_Init+0x444>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d004      	beq.n	8004d56 <HAL_DMA_Init+0x38a>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a30      	ldr	r2, [pc, #192]	; (8004e14 <HAL_DMA_Init+0x448>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d101      	bne.n	8004d5a <HAL_DMA_Init+0x38e>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <HAL_DMA_Init+0x390>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8097 	beq.w	8004e90 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a24      	ldr	r2, [pc, #144]	; (8004df8 <HAL_DMA_Init+0x42c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d021      	beq.n	8004db0 <HAL_DMA_Init+0x3e4>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a22      	ldr	r2, [pc, #136]	; (8004dfc <HAL_DMA_Init+0x430>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01c      	beq.n	8004db0 <HAL_DMA_Init+0x3e4>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a21      	ldr	r2, [pc, #132]	; (8004e00 <HAL_DMA_Init+0x434>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d017      	beq.n	8004db0 <HAL_DMA_Init+0x3e4>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <HAL_DMA_Init+0x438>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d012      	beq.n	8004db0 <HAL_DMA_Init+0x3e4>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1e      	ldr	r2, [pc, #120]	; (8004e08 <HAL_DMA_Init+0x43c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00d      	beq.n	8004db0 <HAL_DMA_Init+0x3e4>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1c      	ldr	r2, [pc, #112]	; (8004e0c <HAL_DMA_Init+0x440>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d008      	beq.n	8004db0 <HAL_DMA_Init+0x3e4>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <HAL_DMA_Init+0x444>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d003      	beq.n	8004db0 <HAL_DMA_Init+0x3e4>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a19      	ldr	r2, [pc, #100]	; (8004e14 <HAL_DMA_Init+0x448>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2202      	movs	r2, #2
 8004db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4b12      	ldr	r3, [pc, #72]	; (8004e18 <HAL_DMA_Init+0x44c>)
 8004dce:	4013      	ands	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b40      	cmp	r3, #64	; 0x40
 8004dd8:	d020      	beq.n	8004e1c <HAL_DMA_Init+0x450>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	2b80      	cmp	r3, #128	; 0x80
 8004de0:	d102      	bne.n	8004de8 <HAL_DMA_Init+0x41c>
 8004de2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004de6:	e01a      	b.n	8004e1e <HAL_DMA_Init+0x452>
 8004de8:	2300      	movs	r3, #0
 8004dea:	e018      	b.n	8004e1e <HAL_DMA_Init+0x452>
 8004dec:	fe10803f 	.word	0xfe10803f
 8004df0:	5c001000 	.word	0x5c001000
 8004df4:	ffff0000 	.word	0xffff0000
 8004df8:	58025408 	.word	0x58025408
 8004dfc:	5802541c 	.word	0x5802541c
 8004e00:	58025430 	.word	0x58025430
 8004e04:	58025444 	.word	0x58025444
 8004e08:	58025458 	.word	0x58025458
 8004e0c:	5802546c 	.word	0x5802546c
 8004e10:	58025480 	.word	0x58025480
 8004e14:	58025494 	.word	0x58025494
 8004e18:	fffe000f 	.word	0xfffe000f
 8004e1c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	68d2      	ldr	r2, [r2, #12]
 8004e22:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e4c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	461a      	mov	r2, r3
 8004e62:	4b6e      	ldr	r3, [pc, #440]	; (800501c <HAL_DMA_Init+0x650>)
 8004e64:	4413      	add	r3, r2
 8004e66:	4a6e      	ldr	r2, [pc, #440]	; (8005020 <HAL_DMA_Init+0x654>)
 8004e68:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6c:	091b      	lsrs	r3, r3, #4
 8004e6e:	009a      	lsls	r2, r3, #2
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f001 fc45 	bl	8006704 <DMA_CalcBaseAndBitshift>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e82:	f003 031f 	and.w	r3, r3, #31
 8004e86:	2201      	movs	r2, #1
 8004e88:	409a      	lsls	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	e008      	b.n	8004ea2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2240      	movs	r2, #64	; 0x40
 8004e94:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2203      	movs	r2, #3
 8004e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e0b7      	b.n	8005012 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a5f      	ldr	r2, [pc, #380]	; (8005024 <HAL_DMA_Init+0x658>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d072      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a5d      	ldr	r2, [pc, #372]	; (8005028 <HAL_DMA_Init+0x65c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d06d      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a5c      	ldr	r2, [pc, #368]	; (800502c <HAL_DMA_Init+0x660>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d068      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a5a      	ldr	r2, [pc, #360]	; (8005030 <HAL_DMA_Init+0x664>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d063      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a59      	ldr	r2, [pc, #356]	; (8005034 <HAL_DMA_Init+0x668>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d05e      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a57      	ldr	r2, [pc, #348]	; (8005038 <HAL_DMA_Init+0x66c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d059      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a56      	ldr	r2, [pc, #344]	; (800503c <HAL_DMA_Init+0x670>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d054      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a54      	ldr	r2, [pc, #336]	; (8005040 <HAL_DMA_Init+0x674>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d04f      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a53      	ldr	r2, [pc, #332]	; (8005044 <HAL_DMA_Init+0x678>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d04a      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a51      	ldr	r2, [pc, #324]	; (8005048 <HAL_DMA_Init+0x67c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d045      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a50      	ldr	r2, [pc, #320]	; (800504c <HAL_DMA_Init+0x680>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d040      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a4e      	ldr	r2, [pc, #312]	; (8005050 <HAL_DMA_Init+0x684>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d03b      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a4d      	ldr	r2, [pc, #308]	; (8005054 <HAL_DMA_Init+0x688>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d036      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a4b      	ldr	r2, [pc, #300]	; (8005058 <HAL_DMA_Init+0x68c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d031      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a4a      	ldr	r2, [pc, #296]	; (800505c <HAL_DMA_Init+0x690>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d02c      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a48      	ldr	r2, [pc, #288]	; (8005060 <HAL_DMA_Init+0x694>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d027      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a47      	ldr	r2, [pc, #284]	; (8005064 <HAL_DMA_Init+0x698>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d022      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a45      	ldr	r2, [pc, #276]	; (8005068 <HAL_DMA_Init+0x69c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d01d      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a44      	ldr	r2, [pc, #272]	; (800506c <HAL_DMA_Init+0x6a0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d018      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a42      	ldr	r2, [pc, #264]	; (8005070 <HAL_DMA_Init+0x6a4>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a41      	ldr	r2, [pc, #260]	; (8005074 <HAL_DMA_Init+0x6a8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00e      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a3f      	ldr	r2, [pc, #252]	; (8005078 <HAL_DMA_Init+0x6ac>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d009      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a3e      	ldr	r2, [pc, #248]	; (800507c <HAL_DMA_Init+0x6b0>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d004      	beq.n	8004f92 <HAL_DMA_Init+0x5c6>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a3c      	ldr	r2, [pc, #240]	; (8005080 <HAL_DMA_Init+0x6b4>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d101      	bne.n	8004f96 <HAL_DMA_Init+0x5ca>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <HAL_DMA_Init+0x5cc>
 8004f96:	2300      	movs	r3, #0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d032      	beq.n	8005002 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f001 fcdf 	bl	8006960 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	2b80      	cmp	r3, #128	; 0x80
 8004fa8:	d102      	bne.n	8004fb0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004fc4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d010      	beq.n	8004ff0 <HAL_DMA_Init+0x624>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d80c      	bhi.n	8004ff0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f001 fd5c 	bl	8006a94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004fec:	605a      	str	r2, [r3, #4]
 8004fee:	e008      	b.n	8005002 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	a7fdabf8 	.word	0xa7fdabf8
 8005020:	cccccccd 	.word	0xcccccccd
 8005024:	40020010 	.word	0x40020010
 8005028:	40020028 	.word	0x40020028
 800502c:	40020040 	.word	0x40020040
 8005030:	40020058 	.word	0x40020058
 8005034:	40020070 	.word	0x40020070
 8005038:	40020088 	.word	0x40020088
 800503c:	400200a0 	.word	0x400200a0
 8005040:	400200b8 	.word	0x400200b8
 8005044:	40020410 	.word	0x40020410
 8005048:	40020428 	.word	0x40020428
 800504c:	40020440 	.word	0x40020440
 8005050:	40020458 	.word	0x40020458
 8005054:	40020470 	.word	0x40020470
 8005058:	40020488 	.word	0x40020488
 800505c:	400204a0 	.word	0x400204a0
 8005060:	400204b8 	.word	0x400204b8
 8005064:	58025408 	.word	0x58025408
 8005068:	5802541c 	.word	0x5802541c
 800506c:	58025430 	.word	0x58025430
 8005070:	58025444 	.word	0x58025444
 8005074:	58025458 	.word	0x58025458
 8005078:	5802546c 	.word	0x5802546c
 800507c:	58025480 	.word	0x58025480
 8005080:	58025494 	.word	0x58025494

08005084 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e226      	b.n	80054ee <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d101      	bne.n	80050ae <HAL_DMA_Start_IT+0x2a>
 80050aa:	2302      	movs	r3, #2
 80050ac:	e21f      	b.n	80054ee <HAL_DMA_Start_IT+0x46a>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b01      	cmp	r3, #1
 80050c0:	f040 820a 	bne.w	80054d8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a68      	ldr	r2, [pc, #416]	; (8005278 <HAL_DMA_Start_IT+0x1f4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d04a      	beq.n	8005172 <HAL_DMA_Start_IT+0xee>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a66      	ldr	r2, [pc, #408]	; (800527c <HAL_DMA_Start_IT+0x1f8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d045      	beq.n	8005172 <HAL_DMA_Start_IT+0xee>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a65      	ldr	r2, [pc, #404]	; (8005280 <HAL_DMA_Start_IT+0x1fc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d040      	beq.n	8005172 <HAL_DMA_Start_IT+0xee>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a63      	ldr	r2, [pc, #396]	; (8005284 <HAL_DMA_Start_IT+0x200>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d03b      	beq.n	8005172 <HAL_DMA_Start_IT+0xee>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a62      	ldr	r2, [pc, #392]	; (8005288 <HAL_DMA_Start_IT+0x204>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d036      	beq.n	8005172 <HAL_DMA_Start_IT+0xee>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a60      	ldr	r2, [pc, #384]	; (800528c <HAL_DMA_Start_IT+0x208>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d031      	beq.n	8005172 <HAL_DMA_Start_IT+0xee>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a5f      	ldr	r2, [pc, #380]	; (8005290 <HAL_DMA_Start_IT+0x20c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d02c      	beq.n	8005172 <HAL_DMA_Start_IT+0xee>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a5d      	ldr	r2, [pc, #372]	; (8005294 <HAL_DMA_Start_IT+0x210>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d027      	beq.n	8005172 <HAL_DMA_Start_IT+0xee>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a5c      	ldr	r2, [pc, #368]	; (8005298 <HAL_DMA_Start_IT+0x214>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d022      	beq.n	8005172 <HAL_DMA_Start_IT+0xee>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a5a      	ldr	r2, [pc, #360]	; (800529c <HAL_DMA_Start_IT+0x218>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d01d      	beq.n	8005172 <HAL_DMA_Start_IT+0xee>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a59      	ldr	r2, [pc, #356]	; (80052a0 <HAL_DMA_Start_IT+0x21c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d018      	beq.n	8005172 <HAL_DMA_Start_IT+0xee>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a57      	ldr	r2, [pc, #348]	; (80052a4 <HAL_DMA_Start_IT+0x220>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <HAL_DMA_Start_IT+0xee>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a56      	ldr	r2, [pc, #344]	; (80052a8 <HAL_DMA_Start_IT+0x224>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00e      	beq.n	8005172 <HAL_DMA_Start_IT+0xee>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a54      	ldr	r2, [pc, #336]	; (80052ac <HAL_DMA_Start_IT+0x228>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d009      	beq.n	8005172 <HAL_DMA_Start_IT+0xee>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a53      	ldr	r2, [pc, #332]	; (80052b0 <HAL_DMA_Start_IT+0x22c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <HAL_DMA_Start_IT+0xee>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a51      	ldr	r2, [pc, #324]	; (80052b4 <HAL_DMA_Start_IT+0x230>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d108      	bne.n	8005184 <HAL_DMA_Start_IT+0x100>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0201 	bic.w	r2, r2, #1
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	e007      	b.n	8005194 <HAL_DMA_Start_IT+0x110>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0201 	bic.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	68b9      	ldr	r1, [r7, #8]
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f001 f906 	bl	80063ac <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a34      	ldr	r2, [pc, #208]	; (8005278 <HAL_DMA_Start_IT+0x1f4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d04a      	beq.n	8005240 <HAL_DMA_Start_IT+0x1bc>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a33      	ldr	r2, [pc, #204]	; (800527c <HAL_DMA_Start_IT+0x1f8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d045      	beq.n	8005240 <HAL_DMA_Start_IT+0x1bc>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a31      	ldr	r2, [pc, #196]	; (8005280 <HAL_DMA_Start_IT+0x1fc>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d040      	beq.n	8005240 <HAL_DMA_Start_IT+0x1bc>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a30      	ldr	r2, [pc, #192]	; (8005284 <HAL_DMA_Start_IT+0x200>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d03b      	beq.n	8005240 <HAL_DMA_Start_IT+0x1bc>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a2e      	ldr	r2, [pc, #184]	; (8005288 <HAL_DMA_Start_IT+0x204>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d036      	beq.n	8005240 <HAL_DMA_Start_IT+0x1bc>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a2d      	ldr	r2, [pc, #180]	; (800528c <HAL_DMA_Start_IT+0x208>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d031      	beq.n	8005240 <HAL_DMA_Start_IT+0x1bc>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a2b      	ldr	r2, [pc, #172]	; (8005290 <HAL_DMA_Start_IT+0x20c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d02c      	beq.n	8005240 <HAL_DMA_Start_IT+0x1bc>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a2a      	ldr	r2, [pc, #168]	; (8005294 <HAL_DMA_Start_IT+0x210>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d027      	beq.n	8005240 <HAL_DMA_Start_IT+0x1bc>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a28      	ldr	r2, [pc, #160]	; (8005298 <HAL_DMA_Start_IT+0x214>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d022      	beq.n	8005240 <HAL_DMA_Start_IT+0x1bc>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a27      	ldr	r2, [pc, #156]	; (800529c <HAL_DMA_Start_IT+0x218>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d01d      	beq.n	8005240 <HAL_DMA_Start_IT+0x1bc>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a25      	ldr	r2, [pc, #148]	; (80052a0 <HAL_DMA_Start_IT+0x21c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d018      	beq.n	8005240 <HAL_DMA_Start_IT+0x1bc>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a24      	ldr	r2, [pc, #144]	; (80052a4 <HAL_DMA_Start_IT+0x220>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d013      	beq.n	8005240 <HAL_DMA_Start_IT+0x1bc>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a22      	ldr	r2, [pc, #136]	; (80052a8 <HAL_DMA_Start_IT+0x224>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00e      	beq.n	8005240 <HAL_DMA_Start_IT+0x1bc>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a21      	ldr	r2, [pc, #132]	; (80052ac <HAL_DMA_Start_IT+0x228>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d009      	beq.n	8005240 <HAL_DMA_Start_IT+0x1bc>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1f      	ldr	r2, [pc, #124]	; (80052b0 <HAL_DMA_Start_IT+0x22c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d004      	beq.n	8005240 <HAL_DMA_Start_IT+0x1bc>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1e      	ldr	r2, [pc, #120]	; (80052b4 <HAL_DMA_Start_IT+0x230>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d101      	bne.n	8005244 <HAL_DMA_Start_IT+0x1c0>
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <HAL_DMA_Start_IT+0x1c2>
 8005244:	2300      	movs	r3, #0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d036      	beq.n	80052b8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f023 021e 	bic.w	r2, r3, #30
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f042 0216 	orr.w	r2, r2, #22
 800525c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	2b00      	cmp	r3, #0
 8005264:	d03e      	beq.n	80052e4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0208 	orr.w	r2, r2, #8
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	e035      	b.n	80052e4 <HAL_DMA_Start_IT+0x260>
 8005278:	40020010 	.word	0x40020010
 800527c:	40020028 	.word	0x40020028
 8005280:	40020040 	.word	0x40020040
 8005284:	40020058 	.word	0x40020058
 8005288:	40020070 	.word	0x40020070
 800528c:	40020088 	.word	0x40020088
 8005290:	400200a0 	.word	0x400200a0
 8005294:	400200b8 	.word	0x400200b8
 8005298:	40020410 	.word	0x40020410
 800529c:	40020428 	.word	0x40020428
 80052a0:	40020440 	.word	0x40020440
 80052a4:	40020458 	.word	0x40020458
 80052a8:	40020470 	.word	0x40020470
 80052ac:	40020488 	.word	0x40020488
 80052b0:	400204a0 	.word	0x400204a0
 80052b4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f023 020e 	bic.w	r2, r3, #14
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 020a 	orr.w	r2, r2, #10
 80052ca:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d007      	beq.n	80052e4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0204 	orr.w	r2, r2, #4
 80052e2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a83      	ldr	r2, [pc, #524]	; (80054f8 <HAL_DMA_Start_IT+0x474>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d072      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a82      	ldr	r2, [pc, #520]	; (80054fc <HAL_DMA_Start_IT+0x478>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d06d      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a80      	ldr	r2, [pc, #512]	; (8005500 <HAL_DMA_Start_IT+0x47c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d068      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a7f      	ldr	r2, [pc, #508]	; (8005504 <HAL_DMA_Start_IT+0x480>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d063      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a7d      	ldr	r2, [pc, #500]	; (8005508 <HAL_DMA_Start_IT+0x484>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d05e      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a7c      	ldr	r2, [pc, #496]	; (800550c <HAL_DMA_Start_IT+0x488>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d059      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a7a      	ldr	r2, [pc, #488]	; (8005510 <HAL_DMA_Start_IT+0x48c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d054      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a79      	ldr	r2, [pc, #484]	; (8005514 <HAL_DMA_Start_IT+0x490>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d04f      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a77      	ldr	r2, [pc, #476]	; (8005518 <HAL_DMA_Start_IT+0x494>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d04a      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a76      	ldr	r2, [pc, #472]	; (800551c <HAL_DMA_Start_IT+0x498>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d045      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a74      	ldr	r2, [pc, #464]	; (8005520 <HAL_DMA_Start_IT+0x49c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d040      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a73      	ldr	r2, [pc, #460]	; (8005524 <HAL_DMA_Start_IT+0x4a0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d03b      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a71      	ldr	r2, [pc, #452]	; (8005528 <HAL_DMA_Start_IT+0x4a4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d036      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a70      	ldr	r2, [pc, #448]	; (800552c <HAL_DMA_Start_IT+0x4a8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d031      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a6e      	ldr	r2, [pc, #440]	; (8005530 <HAL_DMA_Start_IT+0x4ac>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d02c      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a6d      	ldr	r2, [pc, #436]	; (8005534 <HAL_DMA_Start_IT+0x4b0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d027      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a6b      	ldr	r2, [pc, #428]	; (8005538 <HAL_DMA_Start_IT+0x4b4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d022      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a6a      	ldr	r2, [pc, #424]	; (800553c <HAL_DMA_Start_IT+0x4b8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d01d      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a68      	ldr	r2, [pc, #416]	; (8005540 <HAL_DMA_Start_IT+0x4bc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d018      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a67      	ldr	r2, [pc, #412]	; (8005544 <HAL_DMA_Start_IT+0x4c0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d013      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a65      	ldr	r2, [pc, #404]	; (8005548 <HAL_DMA_Start_IT+0x4c4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00e      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a64      	ldr	r2, [pc, #400]	; (800554c <HAL_DMA_Start_IT+0x4c8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d009      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a62      	ldr	r2, [pc, #392]	; (8005550 <HAL_DMA_Start_IT+0x4cc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d004      	beq.n	80053d4 <HAL_DMA_Start_IT+0x350>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a61      	ldr	r2, [pc, #388]	; (8005554 <HAL_DMA_Start_IT+0x4d0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d101      	bne.n	80053d8 <HAL_DMA_Start_IT+0x354>
 80053d4:	2301      	movs	r3, #1
 80053d6:	e000      	b.n	80053da <HAL_DMA_Start_IT+0x356>
 80053d8:	2300      	movs	r3, #0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d01a      	beq.n	8005414 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d007      	beq.n	80053fc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053fa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d007      	beq.n	8005414 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800540e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005412:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a37      	ldr	r2, [pc, #220]	; (80054f8 <HAL_DMA_Start_IT+0x474>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d04a      	beq.n	80054b4 <HAL_DMA_Start_IT+0x430>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a36      	ldr	r2, [pc, #216]	; (80054fc <HAL_DMA_Start_IT+0x478>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d045      	beq.n	80054b4 <HAL_DMA_Start_IT+0x430>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a34      	ldr	r2, [pc, #208]	; (8005500 <HAL_DMA_Start_IT+0x47c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d040      	beq.n	80054b4 <HAL_DMA_Start_IT+0x430>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a33      	ldr	r2, [pc, #204]	; (8005504 <HAL_DMA_Start_IT+0x480>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d03b      	beq.n	80054b4 <HAL_DMA_Start_IT+0x430>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a31      	ldr	r2, [pc, #196]	; (8005508 <HAL_DMA_Start_IT+0x484>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d036      	beq.n	80054b4 <HAL_DMA_Start_IT+0x430>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a30      	ldr	r2, [pc, #192]	; (800550c <HAL_DMA_Start_IT+0x488>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d031      	beq.n	80054b4 <HAL_DMA_Start_IT+0x430>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a2e      	ldr	r2, [pc, #184]	; (8005510 <HAL_DMA_Start_IT+0x48c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d02c      	beq.n	80054b4 <HAL_DMA_Start_IT+0x430>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a2d      	ldr	r2, [pc, #180]	; (8005514 <HAL_DMA_Start_IT+0x490>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d027      	beq.n	80054b4 <HAL_DMA_Start_IT+0x430>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a2b      	ldr	r2, [pc, #172]	; (8005518 <HAL_DMA_Start_IT+0x494>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d022      	beq.n	80054b4 <HAL_DMA_Start_IT+0x430>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a2a      	ldr	r2, [pc, #168]	; (800551c <HAL_DMA_Start_IT+0x498>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d01d      	beq.n	80054b4 <HAL_DMA_Start_IT+0x430>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a28      	ldr	r2, [pc, #160]	; (8005520 <HAL_DMA_Start_IT+0x49c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d018      	beq.n	80054b4 <HAL_DMA_Start_IT+0x430>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a27      	ldr	r2, [pc, #156]	; (8005524 <HAL_DMA_Start_IT+0x4a0>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d013      	beq.n	80054b4 <HAL_DMA_Start_IT+0x430>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a25      	ldr	r2, [pc, #148]	; (8005528 <HAL_DMA_Start_IT+0x4a4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00e      	beq.n	80054b4 <HAL_DMA_Start_IT+0x430>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a24      	ldr	r2, [pc, #144]	; (800552c <HAL_DMA_Start_IT+0x4a8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d009      	beq.n	80054b4 <HAL_DMA_Start_IT+0x430>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a22      	ldr	r2, [pc, #136]	; (8005530 <HAL_DMA_Start_IT+0x4ac>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d004      	beq.n	80054b4 <HAL_DMA_Start_IT+0x430>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a21      	ldr	r2, [pc, #132]	; (8005534 <HAL_DMA_Start_IT+0x4b0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d108      	bne.n	80054c6 <HAL_DMA_Start_IT+0x442>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0201 	orr.w	r2, r2, #1
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	e012      	b.n	80054ec <HAL_DMA_Start_IT+0x468>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0201 	orr.w	r2, r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	e009      	b.n	80054ec <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40020010 	.word	0x40020010
 80054fc:	40020028 	.word	0x40020028
 8005500:	40020040 	.word	0x40020040
 8005504:	40020058 	.word	0x40020058
 8005508:	40020070 	.word	0x40020070
 800550c:	40020088 	.word	0x40020088
 8005510:	400200a0 	.word	0x400200a0
 8005514:	400200b8 	.word	0x400200b8
 8005518:	40020410 	.word	0x40020410
 800551c:	40020428 	.word	0x40020428
 8005520:	40020440 	.word	0x40020440
 8005524:	40020458 	.word	0x40020458
 8005528:	40020470 	.word	0x40020470
 800552c:	40020488 	.word	0x40020488
 8005530:	400204a0 	.word	0x400204a0
 8005534:	400204b8 	.word	0x400204b8
 8005538:	58025408 	.word	0x58025408
 800553c:	5802541c 	.word	0x5802541c
 8005540:	58025430 	.word	0x58025430
 8005544:	58025444 	.word	0x58025444
 8005548:	58025458 	.word	0x58025458
 800554c:	5802546c 	.word	0x5802546c
 8005550:	58025480 	.word	0x58025480
 8005554:	58025494 	.word	0x58025494

08005558 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08a      	sub	sp, #40	; 0x28
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005564:	4b67      	ldr	r3, [pc, #412]	; (8005704 <HAL_DMA_IRQHandler+0x1ac>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a67      	ldr	r2, [pc, #412]	; (8005708 <HAL_DMA_IRQHandler+0x1b0>)
 800556a:	fba2 2303 	umull	r2, r3, r2, r3
 800556e:	0a9b      	lsrs	r3, r3, #10
 8005570:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005576:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a5f      	ldr	r2, [pc, #380]	; (800570c <HAL_DMA_IRQHandler+0x1b4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d04a      	beq.n	800562a <HAL_DMA_IRQHandler+0xd2>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a5d      	ldr	r2, [pc, #372]	; (8005710 <HAL_DMA_IRQHandler+0x1b8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d045      	beq.n	800562a <HAL_DMA_IRQHandler+0xd2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a5c      	ldr	r2, [pc, #368]	; (8005714 <HAL_DMA_IRQHandler+0x1bc>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d040      	beq.n	800562a <HAL_DMA_IRQHandler+0xd2>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a5a      	ldr	r2, [pc, #360]	; (8005718 <HAL_DMA_IRQHandler+0x1c0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d03b      	beq.n	800562a <HAL_DMA_IRQHandler+0xd2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a59      	ldr	r2, [pc, #356]	; (800571c <HAL_DMA_IRQHandler+0x1c4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d036      	beq.n	800562a <HAL_DMA_IRQHandler+0xd2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a57      	ldr	r2, [pc, #348]	; (8005720 <HAL_DMA_IRQHandler+0x1c8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d031      	beq.n	800562a <HAL_DMA_IRQHandler+0xd2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a56      	ldr	r2, [pc, #344]	; (8005724 <HAL_DMA_IRQHandler+0x1cc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d02c      	beq.n	800562a <HAL_DMA_IRQHandler+0xd2>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a54      	ldr	r2, [pc, #336]	; (8005728 <HAL_DMA_IRQHandler+0x1d0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d027      	beq.n	800562a <HAL_DMA_IRQHandler+0xd2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a53      	ldr	r2, [pc, #332]	; (800572c <HAL_DMA_IRQHandler+0x1d4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d022      	beq.n	800562a <HAL_DMA_IRQHandler+0xd2>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a51      	ldr	r2, [pc, #324]	; (8005730 <HAL_DMA_IRQHandler+0x1d8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01d      	beq.n	800562a <HAL_DMA_IRQHandler+0xd2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a50      	ldr	r2, [pc, #320]	; (8005734 <HAL_DMA_IRQHandler+0x1dc>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d018      	beq.n	800562a <HAL_DMA_IRQHandler+0xd2>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a4e      	ldr	r2, [pc, #312]	; (8005738 <HAL_DMA_IRQHandler+0x1e0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d013      	beq.n	800562a <HAL_DMA_IRQHandler+0xd2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a4d      	ldr	r2, [pc, #308]	; (800573c <HAL_DMA_IRQHandler+0x1e4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00e      	beq.n	800562a <HAL_DMA_IRQHandler+0xd2>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a4b      	ldr	r2, [pc, #300]	; (8005740 <HAL_DMA_IRQHandler+0x1e8>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d009      	beq.n	800562a <HAL_DMA_IRQHandler+0xd2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a4a      	ldr	r2, [pc, #296]	; (8005744 <HAL_DMA_IRQHandler+0x1ec>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <HAL_DMA_IRQHandler+0xd2>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a48      	ldr	r2, [pc, #288]	; (8005748 <HAL_DMA_IRQHandler+0x1f0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d101      	bne.n	800562e <HAL_DMA_IRQHandler+0xd6>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <HAL_DMA_IRQHandler+0xd8>
 800562e:	2300      	movs	r3, #0
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 842b 	beq.w	8005e8c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563a:	f003 031f 	and.w	r3, r3, #31
 800563e:	2208      	movs	r2, #8
 8005640:	409a      	lsls	r2, r3
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	4013      	ands	r3, r2
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 80a2 	beq.w	8005790 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a2e      	ldr	r2, [pc, #184]	; (800570c <HAL_DMA_IRQHandler+0x1b4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d04a      	beq.n	80056ec <HAL_DMA_IRQHandler+0x194>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a2d      	ldr	r2, [pc, #180]	; (8005710 <HAL_DMA_IRQHandler+0x1b8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d045      	beq.n	80056ec <HAL_DMA_IRQHandler+0x194>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a2b      	ldr	r2, [pc, #172]	; (8005714 <HAL_DMA_IRQHandler+0x1bc>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d040      	beq.n	80056ec <HAL_DMA_IRQHandler+0x194>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a2a      	ldr	r2, [pc, #168]	; (8005718 <HAL_DMA_IRQHandler+0x1c0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d03b      	beq.n	80056ec <HAL_DMA_IRQHandler+0x194>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a28      	ldr	r2, [pc, #160]	; (800571c <HAL_DMA_IRQHandler+0x1c4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d036      	beq.n	80056ec <HAL_DMA_IRQHandler+0x194>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a27      	ldr	r2, [pc, #156]	; (8005720 <HAL_DMA_IRQHandler+0x1c8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d031      	beq.n	80056ec <HAL_DMA_IRQHandler+0x194>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a25      	ldr	r2, [pc, #148]	; (8005724 <HAL_DMA_IRQHandler+0x1cc>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d02c      	beq.n	80056ec <HAL_DMA_IRQHandler+0x194>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a24      	ldr	r2, [pc, #144]	; (8005728 <HAL_DMA_IRQHandler+0x1d0>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d027      	beq.n	80056ec <HAL_DMA_IRQHandler+0x194>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a22      	ldr	r2, [pc, #136]	; (800572c <HAL_DMA_IRQHandler+0x1d4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d022      	beq.n	80056ec <HAL_DMA_IRQHandler+0x194>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a21      	ldr	r2, [pc, #132]	; (8005730 <HAL_DMA_IRQHandler+0x1d8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d01d      	beq.n	80056ec <HAL_DMA_IRQHandler+0x194>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1f      	ldr	r2, [pc, #124]	; (8005734 <HAL_DMA_IRQHandler+0x1dc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d018      	beq.n	80056ec <HAL_DMA_IRQHandler+0x194>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1e      	ldr	r2, [pc, #120]	; (8005738 <HAL_DMA_IRQHandler+0x1e0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d013      	beq.n	80056ec <HAL_DMA_IRQHandler+0x194>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1c      	ldr	r2, [pc, #112]	; (800573c <HAL_DMA_IRQHandler+0x1e4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00e      	beq.n	80056ec <HAL_DMA_IRQHandler+0x194>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1b      	ldr	r2, [pc, #108]	; (8005740 <HAL_DMA_IRQHandler+0x1e8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d009      	beq.n	80056ec <HAL_DMA_IRQHandler+0x194>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a19      	ldr	r2, [pc, #100]	; (8005744 <HAL_DMA_IRQHandler+0x1ec>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d004      	beq.n	80056ec <HAL_DMA_IRQHandler+0x194>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a18      	ldr	r2, [pc, #96]	; (8005748 <HAL_DMA_IRQHandler+0x1f0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d12f      	bne.n	800574c <HAL_DMA_IRQHandler+0x1f4>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0304 	and.w	r3, r3, #4
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bf14      	ite	ne
 80056fa:	2301      	movne	r3, #1
 80056fc:	2300      	moveq	r3, #0
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	e02e      	b.n	8005760 <HAL_DMA_IRQHandler+0x208>
 8005702:	bf00      	nop
 8005704:	20000024 	.word	0x20000024
 8005708:	1b4e81b5 	.word	0x1b4e81b5
 800570c:	40020010 	.word	0x40020010
 8005710:	40020028 	.word	0x40020028
 8005714:	40020040 	.word	0x40020040
 8005718:	40020058 	.word	0x40020058
 800571c:	40020070 	.word	0x40020070
 8005720:	40020088 	.word	0x40020088
 8005724:	400200a0 	.word	0x400200a0
 8005728:	400200b8 	.word	0x400200b8
 800572c:	40020410 	.word	0x40020410
 8005730:	40020428 	.word	0x40020428
 8005734:	40020440 	.word	0x40020440
 8005738:	40020458 	.word	0x40020458
 800573c:	40020470 	.word	0x40020470
 8005740:	40020488 	.word	0x40020488
 8005744:	400204a0 	.word	0x400204a0
 8005748:	400204b8 	.word	0x400204b8
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	bf14      	ite	ne
 800575a:	2301      	movne	r3, #1
 800575c:	2300      	moveq	r3, #0
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d015      	beq.n	8005790 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0204 	bic.w	r2, r2, #4
 8005772:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	2208      	movs	r2, #8
 800577e:	409a      	lsls	r2, r3
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005788:	f043 0201 	orr.w	r2, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005794:	f003 031f 	and.w	r3, r3, #31
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	fa22 f303 	lsr.w	r3, r2, r3
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d06e      	beq.n	8005884 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a69      	ldr	r2, [pc, #420]	; (8005950 <HAL_DMA_IRQHandler+0x3f8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d04a      	beq.n	8005846 <HAL_DMA_IRQHandler+0x2ee>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a67      	ldr	r2, [pc, #412]	; (8005954 <HAL_DMA_IRQHandler+0x3fc>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d045      	beq.n	8005846 <HAL_DMA_IRQHandler+0x2ee>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a66      	ldr	r2, [pc, #408]	; (8005958 <HAL_DMA_IRQHandler+0x400>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d040      	beq.n	8005846 <HAL_DMA_IRQHandler+0x2ee>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a64      	ldr	r2, [pc, #400]	; (800595c <HAL_DMA_IRQHandler+0x404>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d03b      	beq.n	8005846 <HAL_DMA_IRQHandler+0x2ee>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a63      	ldr	r2, [pc, #396]	; (8005960 <HAL_DMA_IRQHandler+0x408>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d036      	beq.n	8005846 <HAL_DMA_IRQHandler+0x2ee>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a61      	ldr	r2, [pc, #388]	; (8005964 <HAL_DMA_IRQHandler+0x40c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d031      	beq.n	8005846 <HAL_DMA_IRQHandler+0x2ee>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a60      	ldr	r2, [pc, #384]	; (8005968 <HAL_DMA_IRQHandler+0x410>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d02c      	beq.n	8005846 <HAL_DMA_IRQHandler+0x2ee>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a5e      	ldr	r2, [pc, #376]	; (800596c <HAL_DMA_IRQHandler+0x414>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d027      	beq.n	8005846 <HAL_DMA_IRQHandler+0x2ee>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a5d      	ldr	r2, [pc, #372]	; (8005970 <HAL_DMA_IRQHandler+0x418>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d022      	beq.n	8005846 <HAL_DMA_IRQHandler+0x2ee>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a5b      	ldr	r2, [pc, #364]	; (8005974 <HAL_DMA_IRQHandler+0x41c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d01d      	beq.n	8005846 <HAL_DMA_IRQHandler+0x2ee>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a5a      	ldr	r2, [pc, #360]	; (8005978 <HAL_DMA_IRQHandler+0x420>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d018      	beq.n	8005846 <HAL_DMA_IRQHandler+0x2ee>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a58      	ldr	r2, [pc, #352]	; (800597c <HAL_DMA_IRQHandler+0x424>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d013      	beq.n	8005846 <HAL_DMA_IRQHandler+0x2ee>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a57      	ldr	r2, [pc, #348]	; (8005980 <HAL_DMA_IRQHandler+0x428>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00e      	beq.n	8005846 <HAL_DMA_IRQHandler+0x2ee>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a55      	ldr	r2, [pc, #340]	; (8005984 <HAL_DMA_IRQHandler+0x42c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d009      	beq.n	8005846 <HAL_DMA_IRQHandler+0x2ee>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a54      	ldr	r2, [pc, #336]	; (8005988 <HAL_DMA_IRQHandler+0x430>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d004      	beq.n	8005846 <HAL_DMA_IRQHandler+0x2ee>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a52      	ldr	r2, [pc, #328]	; (800598c <HAL_DMA_IRQHandler+0x434>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d10a      	bne.n	800585c <HAL_DMA_IRQHandler+0x304>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005850:	2b00      	cmp	r3, #0
 8005852:	bf14      	ite	ne
 8005854:	2301      	movne	r3, #1
 8005856:	2300      	moveq	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	e003      	b.n	8005864 <HAL_DMA_IRQHandler+0x30c>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2300      	movs	r3, #0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00d      	beq.n	8005884 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800586c:	f003 031f 	and.w	r3, r3, #31
 8005870:	2201      	movs	r2, #1
 8005872:	409a      	lsls	r2, r3
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587c:	f043 0202 	orr.w	r2, r3, #2
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005888:	f003 031f 	and.w	r3, r3, #31
 800588c:	2204      	movs	r2, #4
 800588e:	409a      	lsls	r2, r3
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	4013      	ands	r3, r2
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 808f 	beq.w	80059b8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a2c      	ldr	r2, [pc, #176]	; (8005950 <HAL_DMA_IRQHandler+0x3f8>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d04a      	beq.n	800593a <HAL_DMA_IRQHandler+0x3e2>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a2a      	ldr	r2, [pc, #168]	; (8005954 <HAL_DMA_IRQHandler+0x3fc>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d045      	beq.n	800593a <HAL_DMA_IRQHandler+0x3e2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a29      	ldr	r2, [pc, #164]	; (8005958 <HAL_DMA_IRQHandler+0x400>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d040      	beq.n	800593a <HAL_DMA_IRQHandler+0x3e2>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a27      	ldr	r2, [pc, #156]	; (800595c <HAL_DMA_IRQHandler+0x404>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d03b      	beq.n	800593a <HAL_DMA_IRQHandler+0x3e2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a26      	ldr	r2, [pc, #152]	; (8005960 <HAL_DMA_IRQHandler+0x408>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d036      	beq.n	800593a <HAL_DMA_IRQHandler+0x3e2>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a24      	ldr	r2, [pc, #144]	; (8005964 <HAL_DMA_IRQHandler+0x40c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d031      	beq.n	800593a <HAL_DMA_IRQHandler+0x3e2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a23      	ldr	r2, [pc, #140]	; (8005968 <HAL_DMA_IRQHandler+0x410>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d02c      	beq.n	800593a <HAL_DMA_IRQHandler+0x3e2>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a21      	ldr	r2, [pc, #132]	; (800596c <HAL_DMA_IRQHandler+0x414>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d027      	beq.n	800593a <HAL_DMA_IRQHandler+0x3e2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a20      	ldr	r2, [pc, #128]	; (8005970 <HAL_DMA_IRQHandler+0x418>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d022      	beq.n	800593a <HAL_DMA_IRQHandler+0x3e2>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1e      	ldr	r2, [pc, #120]	; (8005974 <HAL_DMA_IRQHandler+0x41c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01d      	beq.n	800593a <HAL_DMA_IRQHandler+0x3e2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a1d      	ldr	r2, [pc, #116]	; (8005978 <HAL_DMA_IRQHandler+0x420>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d018      	beq.n	800593a <HAL_DMA_IRQHandler+0x3e2>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1b      	ldr	r2, [pc, #108]	; (800597c <HAL_DMA_IRQHandler+0x424>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <HAL_DMA_IRQHandler+0x3e2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a1a      	ldr	r2, [pc, #104]	; (8005980 <HAL_DMA_IRQHandler+0x428>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00e      	beq.n	800593a <HAL_DMA_IRQHandler+0x3e2>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a18      	ldr	r2, [pc, #96]	; (8005984 <HAL_DMA_IRQHandler+0x42c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d009      	beq.n	800593a <HAL_DMA_IRQHandler+0x3e2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a17      	ldr	r2, [pc, #92]	; (8005988 <HAL_DMA_IRQHandler+0x430>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <HAL_DMA_IRQHandler+0x3e2>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a15      	ldr	r2, [pc, #84]	; (800598c <HAL_DMA_IRQHandler+0x434>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d12a      	bne.n	8005990 <HAL_DMA_IRQHandler+0x438>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	bf14      	ite	ne
 8005948:	2301      	movne	r3, #1
 800594a:	2300      	moveq	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	e023      	b.n	8005998 <HAL_DMA_IRQHandler+0x440>
 8005950:	40020010 	.word	0x40020010
 8005954:	40020028 	.word	0x40020028
 8005958:	40020040 	.word	0x40020040
 800595c:	40020058 	.word	0x40020058
 8005960:	40020070 	.word	0x40020070
 8005964:	40020088 	.word	0x40020088
 8005968:	400200a0 	.word	0x400200a0
 800596c:	400200b8 	.word	0x400200b8
 8005970:	40020410 	.word	0x40020410
 8005974:	40020428 	.word	0x40020428
 8005978:	40020440 	.word	0x40020440
 800597c:	40020458 	.word	0x40020458
 8005980:	40020470 	.word	0x40020470
 8005984:	40020488 	.word	0x40020488
 8005988:	400204a0 	.word	0x400204a0
 800598c:	400204b8 	.word	0x400204b8
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2300      	movs	r3, #0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00d      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a0:	f003 031f 	and.w	r3, r3, #31
 80059a4:	2204      	movs	r2, #4
 80059a6:	409a      	lsls	r2, r3
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b0:	f043 0204 	orr.w	r2, r3, #4
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059bc:	f003 031f 	and.w	r3, r3, #31
 80059c0:	2210      	movs	r2, #16
 80059c2:	409a      	lsls	r2, r3
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	4013      	ands	r3, r2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80a6 	beq.w	8005b1a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a85      	ldr	r2, [pc, #532]	; (8005be8 <HAL_DMA_IRQHandler+0x690>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d04a      	beq.n	8005a6e <HAL_DMA_IRQHandler+0x516>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a83      	ldr	r2, [pc, #524]	; (8005bec <HAL_DMA_IRQHandler+0x694>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d045      	beq.n	8005a6e <HAL_DMA_IRQHandler+0x516>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a82      	ldr	r2, [pc, #520]	; (8005bf0 <HAL_DMA_IRQHandler+0x698>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d040      	beq.n	8005a6e <HAL_DMA_IRQHandler+0x516>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a80      	ldr	r2, [pc, #512]	; (8005bf4 <HAL_DMA_IRQHandler+0x69c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d03b      	beq.n	8005a6e <HAL_DMA_IRQHandler+0x516>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a7f      	ldr	r2, [pc, #508]	; (8005bf8 <HAL_DMA_IRQHandler+0x6a0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d036      	beq.n	8005a6e <HAL_DMA_IRQHandler+0x516>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a7d      	ldr	r2, [pc, #500]	; (8005bfc <HAL_DMA_IRQHandler+0x6a4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d031      	beq.n	8005a6e <HAL_DMA_IRQHandler+0x516>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a7c      	ldr	r2, [pc, #496]	; (8005c00 <HAL_DMA_IRQHandler+0x6a8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d02c      	beq.n	8005a6e <HAL_DMA_IRQHandler+0x516>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a7a      	ldr	r2, [pc, #488]	; (8005c04 <HAL_DMA_IRQHandler+0x6ac>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d027      	beq.n	8005a6e <HAL_DMA_IRQHandler+0x516>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a79      	ldr	r2, [pc, #484]	; (8005c08 <HAL_DMA_IRQHandler+0x6b0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d022      	beq.n	8005a6e <HAL_DMA_IRQHandler+0x516>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a77      	ldr	r2, [pc, #476]	; (8005c0c <HAL_DMA_IRQHandler+0x6b4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d01d      	beq.n	8005a6e <HAL_DMA_IRQHandler+0x516>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a76      	ldr	r2, [pc, #472]	; (8005c10 <HAL_DMA_IRQHandler+0x6b8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d018      	beq.n	8005a6e <HAL_DMA_IRQHandler+0x516>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a74      	ldr	r2, [pc, #464]	; (8005c14 <HAL_DMA_IRQHandler+0x6bc>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d013      	beq.n	8005a6e <HAL_DMA_IRQHandler+0x516>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a73      	ldr	r2, [pc, #460]	; (8005c18 <HAL_DMA_IRQHandler+0x6c0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d00e      	beq.n	8005a6e <HAL_DMA_IRQHandler+0x516>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a71      	ldr	r2, [pc, #452]	; (8005c1c <HAL_DMA_IRQHandler+0x6c4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d009      	beq.n	8005a6e <HAL_DMA_IRQHandler+0x516>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a70      	ldr	r2, [pc, #448]	; (8005c20 <HAL_DMA_IRQHandler+0x6c8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d004      	beq.n	8005a6e <HAL_DMA_IRQHandler+0x516>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a6e      	ldr	r2, [pc, #440]	; (8005c24 <HAL_DMA_IRQHandler+0x6cc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d10a      	bne.n	8005a84 <HAL_DMA_IRQHandler+0x52c>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0308 	and.w	r3, r3, #8
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	bf14      	ite	ne
 8005a7c:	2301      	movne	r3, #1
 8005a7e:	2300      	moveq	r3, #0
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	e009      	b.n	8005a98 <HAL_DMA_IRQHandler+0x540>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	bf14      	ite	ne
 8005a92:	2301      	movne	r3, #1
 8005a94:	2300      	moveq	r3, #0
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d03e      	beq.n	8005b1a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa0:	f003 031f 	and.w	r3, r3, #31
 8005aa4:	2210      	movs	r2, #16
 8005aa6:	409a      	lsls	r2, r3
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d018      	beq.n	8005aec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d108      	bne.n	8005ada <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d024      	beq.n	8005b1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	4798      	blx	r3
 8005ad8:	e01f      	b.n	8005b1a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d01b      	beq.n	8005b1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	4798      	blx	r3
 8005aea:	e016      	b.n	8005b1a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d107      	bne.n	8005b0a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0208 	bic.w	r2, r2, #8
 8005b08:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1e:	f003 031f 	and.w	r3, r3, #31
 8005b22:	2220      	movs	r2, #32
 8005b24:	409a      	lsls	r2, r3
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 8110 	beq.w	8005d50 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a2c      	ldr	r2, [pc, #176]	; (8005be8 <HAL_DMA_IRQHandler+0x690>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d04a      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x678>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a2b      	ldr	r2, [pc, #172]	; (8005bec <HAL_DMA_IRQHandler+0x694>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d045      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x678>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a29      	ldr	r2, [pc, #164]	; (8005bf0 <HAL_DMA_IRQHandler+0x698>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d040      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x678>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a28      	ldr	r2, [pc, #160]	; (8005bf4 <HAL_DMA_IRQHandler+0x69c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d03b      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x678>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a26      	ldr	r2, [pc, #152]	; (8005bf8 <HAL_DMA_IRQHandler+0x6a0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d036      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x678>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a25      	ldr	r2, [pc, #148]	; (8005bfc <HAL_DMA_IRQHandler+0x6a4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d031      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x678>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a23      	ldr	r2, [pc, #140]	; (8005c00 <HAL_DMA_IRQHandler+0x6a8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d02c      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x678>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a22      	ldr	r2, [pc, #136]	; (8005c04 <HAL_DMA_IRQHandler+0x6ac>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d027      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x678>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a20      	ldr	r2, [pc, #128]	; (8005c08 <HAL_DMA_IRQHandler+0x6b0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d022      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x678>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a1f      	ldr	r2, [pc, #124]	; (8005c0c <HAL_DMA_IRQHandler+0x6b4>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d01d      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x678>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a1d      	ldr	r2, [pc, #116]	; (8005c10 <HAL_DMA_IRQHandler+0x6b8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d018      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x678>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a1c      	ldr	r2, [pc, #112]	; (8005c14 <HAL_DMA_IRQHandler+0x6bc>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d013      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x678>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a1a      	ldr	r2, [pc, #104]	; (8005c18 <HAL_DMA_IRQHandler+0x6c0>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d00e      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x678>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a19      	ldr	r2, [pc, #100]	; (8005c1c <HAL_DMA_IRQHandler+0x6c4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d009      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x678>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a17      	ldr	r2, [pc, #92]	; (8005c20 <HAL_DMA_IRQHandler+0x6c8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d004      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x678>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a16      	ldr	r2, [pc, #88]	; (8005c24 <HAL_DMA_IRQHandler+0x6cc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d12b      	bne.n	8005c28 <HAL_DMA_IRQHandler+0x6d0>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0310 	and.w	r3, r3, #16
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	bf14      	ite	ne
 8005bde:	2301      	movne	r3, #1
 8005be0:	2300      	moveq	r3, #0
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	e02a      	b.n	8005c3c <HAL_DMA_IRQHandler+0x6e4>
 8005be6:	bf00      	nop
 8005be8:	40020010 	.word	0x40020010
 8005bec:	40020028 	.word	0x40020028
 8005bf0:	40020040 	.word	0x40020040
 8005bf4:	40020058 	.word	0x40020058
 8005bf8:	40020070 	.word	0x40020070
 8005bfc:	40020088 	.word	0x40020088
 8005c00:	400200a0 	.word	0x400200a0
 8005c04:	400200b8 	.word	0x400200b8
 8005c08:	40020410 	.word	0x40020410
 8005c0c:	40020428 	.word	0x40020428
 8005c10:	40020440 	.word	0x40020440
 8005c14:	40020458 	.word	0x40020458
 8005c18:	40020470 	.word	0x40020470
 8005c1c:	40020488 	.word	0x40020488
 8005c20:	400204a0 	.word	0x400204a0
 8005c24:	400204b8 	.word	0x400204b8
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	bf14      	ite	ne
 8005c36:	2301      	movne	r3, #1
 8005c38:	2300      	moveq	r3, #0
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 8087 	beq.w	8005d50 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c46:	f003 031f 	and.w	r3, r3, #31
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	409a      	lsls	r2, r3
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d139      	bne.n	8005cd2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0216 	bic.w	r2, r2, #22
 8005c6c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	695a      	ldr	r2, [r3, #20]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c7c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d103      	bne.n	8005c8e <HAL_DMA_IRQHandler+0x736>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d007      	beq.n	8005c9e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0208 	bic.w	r2, r2, #8
 8005c9c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca2:	f003 031f 	and.w	r3, r3, #31
 8005ca6:	223f      	movs	r2, #63	; 0x3f
 8005ca8:	409a      	lsls	r2, r3
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 834a 	beq.w	800635c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	4798      	blx	r3
          }
          return;
 8005cd0:	e344      	b.n	800635c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d018      	beq.n	8005d12 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d108      	bne.n	8005d00 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d02c      	beq.n	8005d50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	4798      	blx	r3
 8005cfe:	e027      	b.n	8005d50 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d023      	beq.n	8005d50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	4798      	blx	r3
 8005d10:	e01e      	b.n	8005d50 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10f      	bne.n	8005d40 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 0210 	bic.w	r2, r2, #16
 8005d2e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 8306 	beq.w	8006366 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 8088 	beq.w	8005e78 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2204      	movs	r2, #4
 8005d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a7a      	ldr	r2, [pc, #488]	; (8005f60 <HAL_DMA_IRQHandler+0xa08>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d04a      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x8b8>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a79      	ldr	r2, [pc, #484]	; (8005f64 <HAL_DMA_IRQHandler+0xa0c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d045      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x8b8>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a77      	ldr	r2, [pc, #476]	; (8005f68 <HAL_DMA_IRQHandler+0xa10>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d040      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x8b8>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a76      	ldr	r2, [pc, #472]	; (8005f6c <HAL_DMA_IRQHandler+0xa14>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d03b      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x8b8>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a74      	ldr	r2, [pc, #464]	; (8005f70 <HAL_DMA_IRQHandler+0xa18>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d036      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x8b8>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a73      	ldr	r2, [pc, #460]	; (8005f74 <HAL_DMA_IRQHandler+0xa1c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d031      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x8b8>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a71      	ldr	r2, [pc, #452]	; (8005f78 <HAL_DMA_IRQHandler+0xa20>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d02c      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x8b8>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a70      	ldr	r2, [pc, #448]	; (8005f7c <HAL_DMA_IRQHandler+0xa24>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d027      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x8b8>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a6e      	ldr	r2, [pc, #440]	; (8005f80 <HAL_DMA_IRQHandler+0xa28>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d022      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x8b8>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a6d      	ldr	r2, [pc, #436]	; (8005f84 <HAL_DMA_IRQHandler+0xa2c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d01d      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x8b8>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a6b      	ldr	r2, [pc, #428]	; (8005f88 <HAL_DMA_IRQHandler+0xa30>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d018      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x8b8>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a6a      	ldr	r2, [pc, #424]	; (8005f8c <HAL_DMA_IRQHandler+0xa34>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d013      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x8b8>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a68      	ldr	r2, [pc, #416]	; (8005f90 <HAL_DMA_IRQHandler+0xa38>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00e      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x8b8>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a67      	ldr	r2, [pc, #412]	; (8005f94 <HAL_DMA_IRQHandler+0xa3c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d009      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x8b8>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a65      	ldr	r2, [pc, #404]	; (8005f98 <HAL_DMA_IRQHandler+0xa40>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d004      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x8b8>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a64      	ldr	r2, [pc, #400]	; (8005f9c <HAL_DMA_IRQHandler+0xa44>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d108      	bne.n	8005e22 <HAL_DMA_IRQHandler+0x8ca>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0201 	bic.w	r2, r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	e007      	b.n	8005e32 <HAL_DMA_IRQHandler+0x8da>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0201 	bic.w	r2, r2, #1
 8005e30:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3301      	adds	r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d307      	bcc.n	8005e4e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1f2      	bne.n	8005e32 <HAL_DMA_IRQHandler+0x8da>
 8005e4c:	e000      	b.n	8005e50 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005e4e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d004      	beq.n	8005e68 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2203      	movs	r2, #3
 8005e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005e66:	e003      	b.n	8005e70 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 8272 	beq.w	8006366 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	4798      	blx	r3
 8005e8a:	e26c      	b.n	8006366 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a43      	ldr	r2, [pc, #268]	; (8005fa0 <HAL_DMA_IRQHandler+0xa48>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d022      	beq.n	8005edc <HAL_DMA_IRQHandler+0x984>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a42      	ldr	r2, [pc, #264]	; (8005fa4 <HAL_DMA_IRQHandler+0xa4c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d01d      	beq.n	8005edc <HAL_DMA_IRQHandler+0x984>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a40      	ldr	r2, [pc, #256]	; (8005fa8 <HAL_DMA_IRQHandler+0xa50>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d018      	beq.n	8005edc <HAL_DMA_IRQHandler+0x984>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a3f      	ldr	r2, [pc, #252]	; (8005fac <HAL_DMA_IRQHandler+0xa54>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d013      	beq.n	8005edc <HAL_DMA_IRQHandler+0x984>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a3d      	ldr	r2, [pc, #244]	; (8005fb0 <HAL_DMA_IRQHandler+0xa58>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00e      	beq.n	8005edc <HAL_DMA_IRQHandler+0x984>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a3c      	ldr	r2, [pc, #240]	; (8005fb4 <HAL_DMA_IRQHandler+0xa5c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d009      	beq.n	8005edc <HAL_DMA_IRQHandler+0x984>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a3a      	ldr	r2, [pc, #232]	; (8005fb8 <HAL_DMA_IRQHandler+0xa60>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d004      	beq.n	8005edc <HAL_DMA_IRQHandler+0x984>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a39      	ldr	r2, [pc, #228]	; (8005fbc <HAL_DMA_IRQHandler+0xa64>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d101      	bne.n	8005ee0 <HAL_DMA_IRQHandler+0x988>
 8005edc:	2301      	movs	r3, #1
 8005ede:	e000      	b.n	8005ee2 <HAL_DMA_IRQHandler+0x98a>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 823f 	beq.w	8006366 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	2204      	movs	r2, #4
 8005efa:	409a      	lsls	r2, r3
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	4013      	ands	r3, r2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 80cd 	beq.w	80060a0 <HAL_DMA_IRQHandler+0xb48>
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80c7 	beq.w	80060a0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f16:	f003 031f 	and.w	r3, r3, #31
 8005f1a:	2204      	movs	r2, #4
 8005f1c:	409a      	lsls	r2, r3
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d049      	beq.n	8005fc0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d109      	bne.n	8005f4a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 8210 	beq.w	8006360 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f48:	e20a      	b.n	8006360 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 8206 	beq.w	8006360 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f5c:	e200      	b.n	8006360 <HAL_DMA_IRQHandler+0xe08>
 8005f5e:	bf00      	nop
 8005f60:	40020010 	.word	0x40020010
 8005f64:	40020028 	.word	0x40020028
 8005f68:	40020040 	.word	0x40020040
 8005f6c:	40020058 	.word	0x40020058
 8005f70:	40020070 	.word	0x40020070
 8005f74:	40020088 	.word	0x40020088
 8005f78:	400200a0 	.word	0x400200a0
 8005f7c:	400200b8 	.word	0x400200b8
 8005f80:	40020410 	.word	0x40020410
 8005f84:	40020428 	.word	0x40020428
 8005f88:	40020440 	.word	0x40020440
 8005f8c:	40020458 	.word	0x40020458
 8005f90:	40020470 	.word	0x40020470
 8005f94:	40020488 	.word	0x40020488
 8005f98:	400204a0 	.word	0x400204a0
 8005f9c:	400204b8 	.word	0x400204b8
 8005fa0:	58025408 	.word	0x58025408
 8005fa4:	5802541c 	.word	0x5802541c
 8005fa8:	58025430 	.word	0x58025430
 8005fac:	58025444 	.word	0x58025444
 8005fb0:	58025458 	.word	0x58025458
 8005fb4:	5802546c 	.word	0x5802546c
 8005fb8:	58025480 	.word	0x58025480
 8005fbc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d160      	bne.n	800608c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a8c      	ldr	r2, [pc, #560]	; (8006200 <HAL_DMA_IRQHandler+0xca8>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d04a      	beq.n	800606a <HAL_DMA_IRQHandler+0xb12>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a8a      	ldr	r2, [pc, #552]	; (8006204 <HAL_DMA_IRQHandler+0xcac>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d045      	beq.n	800606a <HAL_DMA_IRQHandler+0xb12>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a89      	ldr	r2, [pc, #548]	; (8006208 <HAL_DMA_IRQHandler+0xcb0>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d040      	beq.n	800606a <HAL_DMA_IRQHandler+0xb12>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a87      	ldr	r2, [pc, #540]	; (800620c <HAL_DMA_IRQHandler+0xcb4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d03b      	beq.n	800606a <HAL_DMA_IRQHandler+0xb12>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a86      	ldr	r2, [pc, #536]	; (8006210 <HAL_DMA_IRQHandler+0xcb8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d036      	beq.n	800606a <HAL_DMA_IRQHandler+0xb12>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a84      	ldr	r2, [pc, #528]	; (8006214 <HAL_DMA_IRQHandler+0xcbc>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d031      	beq.n	800606a <HAL_DMA_IRQHandler+0xb12>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a83      	ldr	r2, [pc, #524]	; (8006218 <HAL_DMA_IRQHandler+0xcc0>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d02c      	beq.n	800606a <HAL_DMA_IRQHandler+0xb12>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a81      	ldr	r2, [pc, #516]	; (800621c <HAL_DMA_IRQHandler+0xcc4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d027      	beq.n	800606a <HAL_DMA_IRQHandler+0xb12>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a80      	ldr	r2, [pc, #512]	; (8006220 <HAL_DMA_IRQHandler+0xcc8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d022      	beq.n	800606a <HAL_DMA_IRQHandler+0xb12>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a7e      	ldr	r2, [pc, #504]	; (8006224 <HAL_DMA_IRQHandler+0xccc>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d01d      	beq.n	800606a <HAL_DMA_IRQHandler+0xb12>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a7d      	ldr	r2, [pc, #500]	; (8006228 <HAL_DMA_IRQHandler+0xcd0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d018      	beq.n	800606a <HAL_DMA_IRQHandler+0xb12>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a7b      	ldr	r2, [pc, #492]	; (800622c <HAL_DMA_IRQHandler+0xcd4>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d013      	beq.n	800606a <HAL_DMA_IRQHandler+0xb12>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a7a      	ldr	r2, [pc, #488]	; (8006230 <HAL_DMA_IRQHandler+0xcd8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00e      	beq.n	800606a <HAL_DMA_IRQHandler+0xb12>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a78      	ldr	r2, [pc, #480]	; (8006234 <HAL_DMA_IRQHandler+0xcdc>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d009      	beq.n	800606a <HAL_DMA_IRQHandler+0xb12>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a77      	ldr	r2, [pc, #476]	; (8006238 <HAL_DMA_IRQHandler+0xce0>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d004      	beq.n	800606a <HAL_DMA_IRQHandler+0xb12>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a75      	ldr	r2, [pc, #468]	; (800623c <HAL_DMA_IRQHandler+0xce4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d108      	bne.n	800607c <HAL_DMA_IRQHandler+0xb24>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0208 	bic.w	r2, r2, #8
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	e007      	b.n	800608c <HAL_DMA_IRQHandler+0xb34>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0204 	bic.w	r2, r2, #4
 800608a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 8165 	beq.w	8006360 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800609e:	e15f      	b.n	8006360 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a4:	f003 031f 	and.w	r3, r3, #31
 80060a8:	2202      	movs	r2, #2
 80060aa:	409a      	lsls	r2, r3
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	4013      	ands	r3, r2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 80c5 	beq.w	8006240 <HAL_DMA_IRQHandler+0xce8>
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 80bf 	beq.w	8006240 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c6:	f003 031f 	and.w	r3, r3, #31
 80060ca:	2202      	movs	r2, #2
 80060cc:	409a      	lsls	r2, r3
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d018      	beq.n	800610e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d109      	bne.n	80060fa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 813a 	beq.w	8006364 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060f8:	e134      	b.n	8006364 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 8130 	beq.w	8006364 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800610c:	e12a      	b.n	8006364 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b00      	cmp	r3, #0
 8006116:	d168      	bne.n	80061ea <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a38      	ldr	r2, [pc, #224]	; (8006200 <HAL_DMA_IRQHandler+0xca8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d04a      	beq.n	80061b8 <HAL_DMA_IRQHandler+0xc60>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a37      	ldr	r2, [pc, #220]	; (8006204 <HAL_DMA_IRQHandler+0xcac>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d045      	beq.n	80061b8 <HAL_DMA_IRQHandler+0xc60>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a35      	ldr	r2, [pc, #212]	; (8006208 <HAL_DMA_IRQHandler+0xcb0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d040      	beq.n	80061b8 <HAL_DMA_IRQHandler+0xc60>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a34      	ldr	r2, [pc, #208]	; (800620c <HAL_DMA_IRQHandler+0xcb4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d03b      	beq.n	80061b8 <HAL_DMA_IRQHandler+0xc60>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a32      	ldr	r2, [pc, #200]	; (8006210 <HAL_DMA_IRQHandler+0xcb8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d036      	beq.n	80061b8 <HAL_DMA_IRQHandler+0xc60>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a31      	ldr	r2, [pc, #196]	; (8006214 <HAL_DMA_IRQHandler+0xcbc>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d031      	beq.n	80061b8 <HAL_DMA_IRQHandler+0xc60>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a2f      	ldr	r2, [pc, #188]	; (8006218 <HAL_DMA_IRQHandler+0xcc0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d02c      	beq.n	80061b8 <HAL_DMA_IRQHandler+0xc60>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a2e      	ldr	r2, [pc, #184]	; (800621c <HAL_DMA_IRQHandler+0xcc4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d027      	beq.n	80061b8 <HAL_DMA_IRQHandler+0xc60>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a2c      	ldr	r2, [pc, #176]	; (8006220 <HAL_DMA_IRQHandler+0xcc8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d022      	beq.n	80061b8 <HAL_DMA_IRQHandler+0xc60>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a2b      	ldr	r2, [pc, #172]	; (8006224 <HAL_DMA_IRQHandler+0xccc>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d01d      	beq.n	80061b8 <HAL_DMA_IRQHandler+0xc60>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a29      	ldr	r2, [pc, #164]	; (8006228 <HAL_DMA_IRQHandler+0xcd0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d018      	beq.n	80061b8 <HAL_DMA_IRQHandler+0xc60>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a28      	ldr	r2, [pc, #160]	; (800622c <HAL_DMA_IRQHandler+0xcd4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d013      	beq.n	80061b8 <HAL_DMA_IRQHandler+0xc60>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a26      	ldr	r2, [pc, #152]	; (8006230 <HAL_DMA_IRQHandler+0xcd8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d00e      	beq.n	80061b8 <HAL_DMA_IRQHandler+0xc60>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a25      	ldr	r2, [pc, #148]	; (8006234 <HAL_DMA_IRQHandler+0xcdc>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d009      	beq.n	80061b8 <HAL_DMA_IRQHandler+0xc60>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a23      	ldr	r2, [pc, #140]	; (8006238 <HAL_DMA_IRQHandler+0xce0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d004      	beq.n	80061b8 <HAL_DMA_IRQHandler+0xc60>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a22      	ldr	r2, [pc, #136]	; (800623c <HAL_DMA_IRQHandler+0xce4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d108      	bne.n	80061ca <HAL_DMA_IRQHandler+0xc72>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0214 	bic.w	r2, r2, #20
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	e007      	b.n	80061da <HAL_DMA_IRQHandler+0xc82>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 020a 	bic.w	r2, r2, #10
 80061d8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 80b8 	beq.w	8006364 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061fc:	e0b2      	b.n	8006364 <HAL_DMA_IRQHandler+0xe0c>
 80061fe:	bf00      	nop
 8006200:	40020010 	.word	0x40020010
 8006204:	40020028 	.word	0x40020028
 8006208:	40020040 	.word	0x40020040
 800620c:	40020058 	.word	0x40020058
 8006210:	40020070 	.word	0x40020070
 8006214:	40020088 	.word	0x40020088
 8006218:	400200a0 	.word	0x400200a0
 800621c:	400200b8 	.word	0x400200b8
 8006220:	40020410 	.word	0x40020410
 8006224:	40020428 	.word	0x40020428
 8006228:	40020440 	.word	0x40020440
 800622c:	40020458 	.word	0x40020458
 8006230:	40020470 	.word	0x40020470
 8006234:	40020488 	.word	0x40020488
 8006238:	400204a0 	.word	0x400204a0
 800623c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006244:	f003 031f 	and.w	r3, r3, #31
 8006248:	2208      	movs	r2, #8
 800624a:	409a      	lsls	r2, r3
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	4013      	ands	r3, r2
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 8088 	beq.w	8006366 <HAL_DMA_IRQHandler+0xe0e>
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 8082 	beq.w	8006366 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a41      	ldr	r2, [pc, #260]	; (800636c <HAL_DMA_IRQHandler+0xe14>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d04a      	beq.n	8006302 <HAL_DMA_IRQHandler+0xdaa>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a3f      	ldr	r2, [pc, #252]	; (8006370 <HAL_DMA_IRQHandler+0xe18>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d045      	beq.n	8006302 <HAL_DMA_IRQHandler+0xdaa>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a3e      	ldr	r2, [pc, #248]	; (8006374 <HAL_DMA_IRQHandler+0xe1c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d040      	beq.n	8006302 <HAL_DMA_IRQHandler+0xdaa>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a3c      	ldr	r2, [pc, #240]	; (8006378 <HAL_DMA_IRQHandler+0xe20>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d03b      	beq.n	8006302 <HAL_DMA_IRQHandler+0xdaa>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a3b      	ldr	r2, [pc, #236]	; (800637c <HAL_DMA_IRQHandler+0xe24>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d036      	beq.n	8006302 <HAL_DMA_IRQHandler+0xdaa>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a39      	ldr	r2, [pc, #228]	; (8006380 <HAL_DMA_IRQHandler+0xe28>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d031      	beq.n	8006302 <HAL_DMA_IRQHandler+0xdaa>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a38      	ldr	r2, [pc, #224]	; (8006384 <HAL_DMA_IRQHandler+0xe2c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d02c      	beq.n	8006302 <HAL_DMA_IRQHandler+0xdaa>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a36      	ldr	r2, [pc, #216]	; (8006388 <HAL_DMA_IRQHandler+0xe30>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d027      	beq.n	8006302 <HAL_DMA_IRQHandler+0xdaa>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a35      	ldr	r2, [pc, #212]	; (800638c <HAL_DMA_IRQHandler+0xe34>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d022      	beq.n	8006302 <HAL_DMA_IRQHandler+0xdaa>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a33      	ldr	r2, [pc, #204]	; (8006390 <HAL_DMA_IRQHandler+0xe38>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d01d      	beq.n	8006302 <HAL_DMA_IRQHandler+0xdaa>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a32      	ldr	r2, [pc, #200]	; (8006394 <HAL_DMA_IRQHandler+0xe3c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d018      	beq.n	8006302 <HAL_DMA_IRQHandler+0xdaa>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a30      	ldr	r2, [pc, #192]	; (8006398 <HAL_DMA_IRQHandler+0xe40>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d013      	beq.n	8006302 <HAL_DMA_IRQHandler+0xdaa>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a2f      	ldr	r2, [pc, #188]	; (800639c <HAL_DMA_IRQHandler+0xe44>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00e      	beq.n	8006302 <HAL_DMA_IRQHandler+0xdaa>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a2d      	ldr	r2, [pc, #180]	; (80063a0 <HAL_DMA_IRQHandler+0xe48>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d009      	beq.n	8006302 <HAL_DMA_IRQHandler+0xdaa>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a2c      	ldr	r2, [pc, #176]	; (80063a4 <HAL_DMA_IRQHandler+0xe4c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d004      	beq.n	8006302 <HAL_DMA_IRQHandler+0xdaa>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a2a      	ldr	r2, [pc, #168]	; (80063a8 <HAL_DMA_IRQHandler+0xe50>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d108      	bne.n	8006314 <HAL_DMA_IRQHandler+0xdbc>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 021c 	bic.w	r2, r2, #28
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	e007      	b.n	8006324 <HAL_DMA_IRQHandler+0xdcc>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 020e 	bic.w	r2, r2, #14
 8006322:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006328:	f003 031f 	and.w	r3, r3, #31
 800632c:	2201      	movs	r2, #1
 800632e:	409a      	lsls	r2, r3
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800634e:	2b00      	cmp	r3, #0
 8006350:	d009      	beq.n	8006366 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	4798      	blx	r3
 800635a:	e004      	b.n	8006366 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800635c:	bf00      	nop
 800635e:	e002      	b.n	8006366 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006360:	bf00      	nop
 8006362:	e000      	b.n	8006366 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006364:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006366:	3728      	adds	r7, #40	; 0x28
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	40020010 	.word	0x40020010
 8006370:	40020028 	.word	0x40020028
 8006374:	40020040 	.word	0x40020040
 8006378:	40020058 	.word	0x40020058
 800637c:	40020070 	.word	0x40020070
 8006380:	40020088 	.word	0x40020088
 8006384:	400200a0 	.word	0x400200a0
 8006388:	400200b8 	.word	0x400200b8
 800638c:	40020410 	.word	0x40020410
 8006390:	40020428 	.word	0x40020428
 8006394:	40020440 	.word	0x40020440
 8006398:	40020458 	.word	0x40020458
 800639c:	40020470 	.word	0x40020470
 80063a0:	40020488 	.word	0x40020488
 80063a4:	400204a0 	.word	0x400204a0
 80063a8:	400204b8 	.word	0x400204b8

080063ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063be:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a84      	ldr	r2, [pc, #528]	; (80065dc <DMA_SetConfig+0x230>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d072      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a82      	ldr	r2, [pc, #520]	; (80065e0 <DMA_SetConfig+0x234>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d06d      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a81      	ldr	r2, [pc, #516]	; (80065e4 <DMA_SetConfig+0x238>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d068      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a7f      	ldr	r2, [pc, #508]	; (80065e8 <DMA_SetConfig+0x23c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d063      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a7e      	ldr	r2, [pc, #504]	; (80065ec <DMA_SetConfig+0x240>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d05e      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a7c      	ldr	r2, [pc, #496]	; (80065f0 <DMA_SetConfig+0x244>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d059      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a7b      	ldr	r2, [pc, #492]	; (80065f4 <DMA_SetConfig+0x248>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d054      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a79      	ldr	r2, [pc, #484]	; (80065f8 <DMA_SetConfig+0x24c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d04f      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a78      	ldr	r2, [pc, #480]	; (80065fc <DMA_SetConfig+0x250>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d04a      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a76      	ldr	r2, [pc, #472]	; (8006600 <DMA_SetConfig+0x254>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d045      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a75      	ldr	r2, [pc, #468]	; (8006604 <DMA_SetConfig+0x258>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d040      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a73      	ldr	r2, [pc, #460]	; (8006608 <DMA_SetConfig+0x25c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d03b      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a72      	ldr	r2, [pc, #456]	; (800660c <DMA_SetConfig+0x260>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d036      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a70      	ldr	r2, [pc, #448]	; (8006610 <DMA_SetConfig+0x264>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d031      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a6f      	ldr	r2, [pc, #444]	; (8006614 <DMA_SetConfig+0x268>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d02c      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a6d      	ldr	r2, [pc, #436]	; (8006618 <DMA_SetConfig+0x26c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d027      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a6c      	ldr	r2, [pc, #432]	; (800661c <DMA_SetConfig+0x270>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d022      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a6a      	ldr	r2, [pc, #424]	; (8006620 <DMA_SetConfig+0x274>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d01d      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a69      	ldr	r2, [pc, #420]	; (8006624 <DMA_SetConfig+0x278>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d018      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a67      	ldr	r2, [pc, #412]	; (8006628 <DMA_SetConfig+0x27c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a66      	ldr	r2, [pc, #408]	; (800662c <DMA_SetConfig+0x280>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00e      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a64      	ldr	r2, [pc, #400]	; (8006630 <DMA_SetConfig+0x284>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d009      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a63      	ldr	r2, [pc, #396]	; (8006634 <DMA_SetConfig+0x288>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <DMA_SetConfig+0x10a>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a61      	ldr	r2, [pc, #388]	; (8006638 <DMA_SetConfig+0x28c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d101      	bne.n	80064ba <DMA_SetConfig+0x10e>
 80064b6:	2301      	movs	r3, #1
 80064b8:	e000      	b.n	80064bc <DMA_SetConfig+0x110>
 80064ba:	2300      	movs	r3, #0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00d      	beq.n	80064dc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80064c8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d004      	beq.n	80064dc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80064da:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a3e      	ldr	r2, [pc, #248]	; (80065dc <DMA_SetConfig+0x230>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d04a      	beq.n	800657c <DMA_SetConfig+0x1d0>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a3d      	ldr	r2, [pc, #244]	; (80065e0 <DMA_SetConfig+0x234>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d045      	beq.n	800657c <DMA_SetConfig+0x1d0>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a3b      	ldr	r2, [pc, #236]	; (80065e4 <DMA_SetConfig+0x238>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d040      	beq.n	800657c <DMA_SetConfig+0x1d0>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a3a      	ldr	r2, [pc, #232]	; (80065e8 <DMA_SetConfig+0x23c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d03b      	beq.n	800657c <DMA_SetConfig+0x1d0>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a38      	ldr	r2, [pc, #224]	; (80065ec <DMA_SetConfig+0x240>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d036      	beq.n	800657c <DMA_SetConfig+0x1d0>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a37      	ldr	r2, [pc, #220]	; (80065f0 <DMA_SetConfig+0x244>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d031      	beq.n	800657c <DMA_SetConfig+0x1d0>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a35      	ldr	r2, [pc, #212]	; (80065f4 <DMA_SetConfig+0x248>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d02c      	beq.n	800657c <DMA_SetConfig+0x1d0>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a34      	ldr	r2, [pc, #208]	; (80065f8 <DMA_SetConfig+0x24c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d027      	beq.n	800657c <DMA_SetConfig+0x1d0>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a32      	ldr	r2, [pc, #200]	; (80065fc <DMA_SetConfig+0x250>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d022      	beq.n	800657c <DMA_SetConfig+0x1d0>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a31      	ldr	r2, [pc, #196]	; (8006600 <DMA_SetConfig+0x254>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d01d      	beq.n	800657c <DMA_SetConfig+0x1d0>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a2f      	ldr	r2, [pc, #188]	; (8006604 <DMA_SetConfig+0x258>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d018      	beq.n	800657c <DMA_SetConfig+0x1d0>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a2e      	ldr	r2, [pc, #184]	; (8006608 <DMA_SetConfig+0x25c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d013      	beq.n	800657c <DMA_SetConfig+0x1d0>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a2c      	ldr	r2, [pc, #176]	; (800660c <DMA_SetConfig+0x260>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00e      	beq.n	800657c <DMA_SetConfig+0x1d0>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a2b      	ldr	r2, [pc, #172]	; (8006610 <DMA_SetConfig+0x264>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d009      	beq.n	800657c <DMA_SetConfig+0x1d0>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a29      	ldr	r2, [pc, #164]	; (8006614 <DMA_SetConfig+0x268>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d004      	beq.n	800657c <DMA_SetConfig+0x1d0>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a28      	ldr	r2, [pc, #160]	; (8006618 <DMA_SetConfig+0x26c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d101      	bne.n	8006580 <DMA_SetConfig+0x1d4>
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <DMA_SetConfig+0x1d6>
 8006580:	2300      	movs	r3, #0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d05a      	beq.n	800663c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	223f      	movs	r2, #63	; 0x3f
 8006590:	409a      	lsls	r2, r3
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065a4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	2b40      	cmp	r3, #64	; 0x40
 80065b4:	d108      	bne.n	80065c8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80065c6:	e087      	b.n	80066d8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	60da      	str	r2, [r3, #12]
}
 80065d8:	e07e      	b.n	80066d8 <DMA_SetConfig+0x32c>
 80065da:	bf00      	nop
 80065dc:	40020010 	.word	0x40020010
 80065e0:	40020028 	.word	0x40020028
 80065e4:	40020040 	.word	0x40020040
 80065e8:	40020058 	.word	0x40020058
 80065ec:	40020070 	.word	0x40020070
 80065f0:	40020088 	.word	0x40020088
 80065f4:	400200a0 	.word	0x400200a0
 80065f8:	400200b8 	.word	0x400200b8
 80065fc:	40020410 	.word	0x40020410
 8006600:	40020428 	.word	0x40020428
 8006604:	40020440 	.word	0x40020440
 8006608:	40020458 	.word	0x40020458
 800660c:	40020470 	.word	0x40020470
 8006610:	40020488 	.word	0x40020488
 8006614:	400204a0 	.word	0x400204a0
 8006618:	400204b8 	.word	0x400204b8
 800661c:	58025408 	.word	0x58025408
 8006620:	5802541c 	.word	0x5802541c
 8006624:	58025430 	.word	0x58025430
 8006628:	58025444 	.word	0x58025444
 800662c:	58025458 	.word	0x58025458
 8006630:	5802546c 	.word	0x5802546c
 8006634:	58025480 	.word	0x58025480
 8006638:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a28      	ldr	r2, [pc, #160]	; (80066e4 <DMA_SetConfig+0x338>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d022      	beq.n	800668c <DMA_SetConfig+0x2e0>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a27      	ldr	r2, [pc, #156]	; (80066e8 <DMA_SetConfig+0x33c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d01d      	beq.n	800668c <DMA_SetConfig+0x2e0>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a25      	ldr	r2, [pc, #148]	; (80066ec <DMA_SetConfig+0x340>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d018      	beq.n	800668c <DMA_SetConfig+0x2e0>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a24      	ldr	r2, [pc, #144]	; (80066f0 <DMA_SetConfig+0x344>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d013      	beq.n	800668c <DMA_SetConfig+0x2e0>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a22      	ldr	r2, [pc, #136]	; (80066f4 <DMA_SetConfig+0x348>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00e      	beq.n	800668c <DMA_SetConfig+0x2e0>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a21      	ldr	r2, [pc, #132]	; (80066f8 <DMA_SetConfig+0x34c>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d009      	beq.n	800668c <DMA_SetConfig+0x2e0>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a1f      	ldr	r2, [pc, #124]	; (80066fc <DMA_SetConfig+0x350>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d004      	beq.n	800668c <DMA_SetConfig+0x2e0>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a1e      	ldr	r2, [pc, #120]	; (8006700 <DMA_SetConfig+0x354>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d101      	bne.n	8006690 <DMA_SetConfig+0x2e4>
 800668c:	2301      	movs	r3, #1
 800668e:	e000      	b.n	8006692 <DMA_SetConfig+0x2e6>
 8006690:	2300      	movs	r3, #0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d020      	beq.n	80066d8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800669a:	f003 031f 	and.w	r3, r3, #31
 800669e:	2201      	movs	r2, #1
 80066a0:	409a      	lsls	r2, r3
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	2b40      	cmp	r3, #64	; 0x40
 80066b4:	d108      	bne.n	80066c8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	60da      	str	r2, [r3, #12]
}
 80066c6:	e007      	b.n	80066d8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	60da      	str	r2, [r3, #12]
}
 80066d8:	bf00      	nop
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	58025408 	.word	0x58025408
 80066e8:	5802541c 	.word	0x5802541c
 80066ec:	58025430 	.word	0x58025430
 80066f0:	58025444 	.word	0x58025444
 80066f4:	58025458 	.word	0x58025458
 80066f8:	5802546c 	.word	0x5802546c
 80066fc:	58025480 	.word	0x58025480
 8006700:	58025494 	.word	0x58025494

08006704 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a42      	ldr	r2, [pc, #264]	; (800681c <DMA_CalcBaseAndBitshift+0x118>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d04a      	beq.n	80067ac <DMA_CalcBaseAndBitshift+0xa8>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a41      	ldr	r2, [pc, #260]	; (8006820 <DMA_CalcBaseAndBitshift+0x11c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d045      	beq.n	80067ac <DMA_CalcBaseAndBitshift+0xa8>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a3f      	ldr	r2, [pc, #252]	; (8006824 <DMA_CalcBaseAndBitshift+0x120>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d040      	beq.n	80067ac <DMA_CalcBaseAndBitshift+0xa8>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a3e      	ldr	r2, [pc, #248]	; (8006828 <DMA_CalcBaseAndBitshift+0x124>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d03b      	beq.n	80067ac <DMA_CalcBaseAndBitshift+0xa8>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a3c      	ldr	r2, [pc, #240]	; (800682c <DMA_CalcBaseAndBitshift+0x128>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d036      	beq.n	80067ac <DMA_CalcBaseAndBitshift+0xa8>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a3b      	ldr	r2, [pc, #236]	; (8006830 <DMA_CalcBaseAndBitshift+0x12c>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d031      	beq.n	80067ac <DMA_CalcBaseAndBitshift+0xa8>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a39      	ldr	r2, [pc, #228]	; (8006834 <DMA_CalcBaseAndBitshift+0x130>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d02c      	beq.n	80067ac <DMA_CalcBaseAndBitshift+0xa8>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a38      	ldr	r2, [pc, #224]	; (8006838 <DMA_CalcBaseAndBitshift+0x134>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d027      	beq.n	80067ac <DMA_CalcBaseAndBitshift+0xa8>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a36      	ldr	r2, [pc, #216]	; (800683c <DMA_CalcBaseAndBitshift+0x138>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d022      	beq.n	80067ac <DMA_CalcBaseAndBitshift+0xa8>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a35      	ldr	r2, [pc, #212]	; (8006840 <DMA_CalcBaseAndBitshift+0x13c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d01d      	beq.n	80067ac <DMA_CalcBaseAndBitshift+0xa8>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a33      	ldr	r2, [pc, #204]	; (8006844 <DMA_CalcBaseAndBitshift+0x140>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d018      	beq.n	80067ac <DMA_CalcBaseAndBitshift+0xa8>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a32      	ldr	r2, [pc, #200]	; (8006848 <DMA_CalcBaseAndBitshift+0x144>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d013      	beq.n	80067ac <DMA_CalcBaseAndBitshift+0xa8>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a30      	ldr	r2, [pc, #192]	; (800684c <DMA_CalcBaseAndBitshift+0x148>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d00e      	beq.n	80067ac <DMA_CalcBaseAndBitshift+0xa8>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a2f      	ldr	r2, [pc, #188]	; (8006850 <DMA_CalcBaseAndBitshift+0x14c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d009      	beq.n	80067ac <DMA_CalcBaseAndBitshift+0xa8>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a2d      	ldr	r2, [pc, #180]	; (8006854 <DMA_CalcBaseAndBitshift+0x150>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d004      	beq.n	80067ac <DMA_CalcBaseAndBitshift+0xa8>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a2c      	ldr	r2, [pc, #176]	; (8006858 <DMA_CalcBaseAndBitshift+0x154>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d101      	bne.n	80067b0 <DMA_CalcBaseAndBitshift+0xac>
 80067ac:	2301      	movs	r3, #1
 80067ae:	e000      	b.n	80067b2 <DMA_CalcBaseAndBitshift+0xae>
 80067b0:	2300      	movs	r3, #0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d024      	beq.n	8006800 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	3b10      	subs	r3, #16
 80067be:	4a27      	ldr	r2, [pc, #156]	; (800685c <DMA_CalcBaseAndBitshift+0x158>)
 80067c0:	fba2 2303 	umull	r2, r3, r2, r3
 80067c4:	091b      	lsrs	r3, r3, #4
 80067c6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	4a24      	ldr	r2, [pc, #144]	; (8006860 <DMA_CalcBaseAndBitshift+0x15c>)
 80067d0:	5cd3      	ldrb	r3, [r2, r3]
 80067d2:	461a      	mov	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b03      	cmp	r3, #3
 80067dc:	d908      	bls.n	80067f0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	4b1f      	ldr	r3, [pc, #124]	; (8006864 <DMA_CalcBaseAndBitshift+0x160>)
 80067e6:	4013      	ands	r3, r2
 80067e8:	1d1a      	adds	r2, r3, #4
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	659a      	str	r2, [r3, #88]	; 0x58
 80067ee:	e00d      	b.n	800680c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	461a      	mov	r2, r3
 80067f6:	4b1b      	ldr	r3, [pc, #108]	; (8006864 <DMA_CalcBaseAndBitshift+0x160>)
 80067f8:	4013      	ands	r3, r2
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	6593      	str	r3, [r2, #88]	; 0x58
 80067fe:	e005      	b.n	800680c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	40020010 	.word	0x40020010
 8006820:	40020028 	.word	0x40020028
 8006824:	40020040 	.word	0x40020040
 8006828:	40020058 	.word	0x40020058
 800682c:	40020070 	.word	0x40020070
 8006830:	40020088 	.word	0x40020088
 8006834:	400200a0 	.word	0x400200a0
 8006838:	400200b8 	.word	0x400200b8
 800683c:	40020410 	.word	0x40020410
 8006840:	40020428 	.word	0x40020428
 8006844:	40020440 	.word	0x40020440
 8006848:	40020458 	.word	0x40020458
 800684c:	40020470 	.word	0x40020470
 8006850:	40020488 	.word	0x40020488
 8006854:	400204a0 	.word	0x400204a0
 8006858:	400204b8 	.word	0x400204b8
 800685c:	aaaaaaab 	.word	0xaaaaaaab
 8006860:	0800d604 	.word	0x0800d604
 8006864:	fffffc00 	.word	0xfffffc00

08006868 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d120      	bne.n	80068be <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006880:	2b03      	cmp	r3, #3
 8006882:	d858      	bhi.n	8006936 <DMA_CheckFifoParam+0xce>
 8006884:	a201      	add	r2, pc, #4	; (adr r2, 800688c <DMA_CheckFifoParam+0x24>)
 8006886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688a:	bf00      	nop
 800688c:	0800689d 	.word	0x0800689d
 8006890:	080068af 	.word	0x080068af
 8006894:	0800689d 	.word	0x0800689d
 8006898:	08006937 	.word	0x08006937
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d048      	beq.n	800693a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068ac:	e045      	b.n	800693a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068b6:	d142      	bne.n	800693e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068bc:	e03f      	b.n	800693e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068c6:	d123      	bne.n	8006910 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d838      	bhi.n	8006942 <DMA_CheckFifoParam+0xda>
 80068d0:	a201      	add	r2, pc, #4	; (adr r2, 80068d8 <DMA_CheckFifoParam+0x70>)
 80068d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d6:	bf00      	nop
 80068d8:	080068e9 	.word	0x080068e9
 80068dc:	080068ef 	.word	0x080068ef
 80068e0:	080068e9 	.word	0x080068e9
 80068e4:	08006901 	.word	0x08006901
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	73fb      	strb	r3, [r7, #15]
        break;
 80068ec:	e030      	b.n	8006950 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d025      	beq.n	8006946 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068fe:	e022      	b.n	8006946 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006908:	d11f      	bne.n	800694a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800690e:	e01c      	b.n	800694a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006914:	2b02      	cmp	r3, #2
 8006916:	d902      	bls.n	800691e <DMA_CheckFifoParam+0xb6>
 8006918:	2b03      	cmp	r3, #3
 800691a:	d003      	beq.n	8006924 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800691c:	e018      	b.n	8006950 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	73fb      	strb	r3, [r7, #15]
        break;
 8006922:	e015      	b.n	8006950 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00e      	beq.n	800694e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	73fb      	strb	r3, [r7, #15]
    break;
 8006934:	e00b      	b.n	800694e <DMA_CheckFifoParam+0xe6>
        break;
 8006936:	bf00      	nop
 8006938:	e00a      	b.n	8006950 <DMA_CheckFifoParam+0xe8>
        break;
 800693a:	bf00      	nop
 800693c:	e008      	b.n	8006950 <DMA_CheckFifoParam+0xe8>
        break;
 800693e:	bf00      	nop
 8006940:	e006      	b.n	8006950 <DMA_CheckFifoParam+0xe8>
        break;
 8006942:	bf00      	nop
 8006944:	e004      	b.n	8006950 <DMA_CheckFifoParam+0xe8>
        break;
 8006946:	bf00      	nop
 8006948:	e002      	b.n	8006950 <DMA_CheckFifoParam+0xe8>
        break;
 800694a:	bf00      	nop
 800694c:	e000      	b.n	8006950 <DMA_CheckFifoParam+0xe8>
    break;
 800694e:	bf00      	nop
    }
  }

  return status;
 8006950:	7bfb      	ldrb	r3, [r7, #15]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop

08006960 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a38      	ldr	r2, [pc, #224]	; (8006a54 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d022      	beq.n	80069be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a36      	ldr	r2, [pc, #216]	; (8006a58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d01d      	beq.n	80069be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a35      	ldr	r2, [pc, #212]	; (8006a5c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d018      	beq.n	80069be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a33      	ldr	r2, [pc, #204]	; (8006a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d013      	beq.n	80069be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a32      	ldr	r2, [pc, #200]	; (8006a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d00e      	beq.n	80069be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a30      	ldr	r2, [pc, #192]	; (8006a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d009      	beq.n	80069be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a2f      	ldr	r2, [pc, #188]	; (8006a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d004      	beq.n	80069be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a2d      	ldr	r2, [pc, #180]	; (8006a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d101      	bne.n	80069c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80069be:	2301      	movs	r3, #1
 80069c0:	e000      	b.n	80069c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80069c2:	2300      	movs	r3, #0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d01a      	beq.n	80069fe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	3b08      	subs	r3, #8
 80069d0:	4a28      	ldr	r2, [pc, #160]	; (8006a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80069d2:	fba2 2303 	umull	r2, r3, r2, r3
 80069d6:	091b      	lsrs	r3, r3, #4
 80069d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	4b26      	ldr	r3, [pc, #152]	; (8006a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	461a      	mov	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a24      	ldr	r2, [pc, #144]	; (8006a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80069ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f003 031f 	and.w	r3, r3, #31
 80069f4:	2201      	movs	r2, #1
 80069f6:	409a      	lsls	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80069fc:	e024      	b.n	8006a48 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	3b10      	subs	r3, #16
 8006a06:	4a1e      	ldr	r2, [pc, #120]	; (8006a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006a08:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0c:	091b      	lsrs	r3, r3, #4
 8006a0e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4a1c      	ldr	r2, [pc, #112]	; (8006a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d806      	bhi.n	8006a26 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	4a1b      	ldr	r2, [pc, #108]	; (8006a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d902      	bls.n	8006a26 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	3308      	adds	r3, #8
 8006a24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4b18      	ldr	r3, [pc, #96]	; (8006a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	461a      	mov	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a16      	ldr	r2, [pc, #88]	; (8006a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006a38:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f003 031f 	and.w	r3, r3, #31
 8006a40:	2201      	movs	r2, #1
 8006a42:	409a      	lsls	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006a48:	bf00      	nop
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	58025408 	.word	0x58025408
 8006a58:	5802541c 	.word	0x5802541c
 8006a5c:	58025430 	.word	0x58025430
 8006a60:	58025444 	.word	0x58025444
 8006a64:	58025458 	.word	0x58025458
 8006a68:	5802546c 	.word	0x5802546c
 8006a6c:	58025480 	.word	0x58025480
 8006a70:	58025494 	.word	0x58025494
 8006a74:	cccccccd 	.word	0xcccccccd
 8006a78:	16009600 	.word	0x16009600
 8006a7c:	58025880 	.word	0x58025880
 8006a80:	aaaaaaab 	.word	0xaaaaaaab
 8006a84:	400204b8 	.word	0x400204b8
 8006a88:	4002040f 	.word	0x4002040f
 8006a8c:	10008200 	.word	0x10008200
 8006a90:	40020880 	.word	0x40020880

08006a94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d04a      	beq.n	8006b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b08      	cmp	r3, #8
 8006aae:	d847      	bhi.n	8006b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a25      	ldr	r2, [pc, #148]	; (8006b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d022      	beq.n	8006b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a24      	ldr	r2, [pc, #144]	; (8006b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d01d      	beq.n	8006b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a22      	ldr	r2, [pc, #136]	; (8006b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d018      	beq.n	8006b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a21      	ldr	r2, [pc, #132]	; (8006b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d013      	beq.n	8006b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1f      	ldr	r2, [pc, #124]	; (8006b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00e      	beq.n	8006b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a1e      	ldr	r2, [pc, #120]	; (8006b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d009      	beq.n	8006b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1c      	ldr	r2, [pc, #112]	; (8006b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d004      	beq.n	8006b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a1b      	ldr	r2, [pc, #108]	; (8006b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d101      	bne.n	8006b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006b00:	2301      	movs	r3, #1
 8006b02:	e000      	b.n	8006b06 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006b04:	2300      	movs	r3, #0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4b17      	ldr	r3, [pc, #92]	; (8006b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	461a      	mov	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a15      	ldr	r2, [pc, #84]	; (8006b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006b1c:	671a      	str	r2, [r3, #112]	; 0x70
 8006b1e:	e009      	b.n	8006b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4b14      	ldr	r3, [pc, #80]	; (8006b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006b24:	4413      	add	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	461a      	mov	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a11      	ldr	r2, [pc, #68]	; (8006b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006b32:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	2201      	movs	r2, #1
 8006b3a:	409a      	lsls	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006b40:	bf00      	nop
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	58025408 	.word	0x58025408
 8006b50:	5802541c 	.word	0x5802541c
 8006b54:	58025430 	.word	0x58025430
 8006b58:	58025444 	.word	0x58025444
 8006b5c:	58025458 	.word	0x58025458
 8006b60:	5802546c 	.word	0x5802546c
 8006b64:	58025480 	.word	0x58025480
 8006b68:	58025494 	.word	0x58025494
 8006b6c:	1600963f 	.word	0x1600963f
 8006b70:	58025940 	.word	0x58025940
 8006b74:	1000823f 	.word	0x1000823f
 8006b78:	40020940 	.word	0x40020940

08006b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b089      	sub	sp, #36	; 0x24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006b8a:	4b89      	ldr	r3, [pc, #548]	; (8006db0 <HAL_GPIO_Init+0x234>)
 8006b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006b8e:	e194      	b.n	8006eba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	2101      	movs	r1, #1
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	fa01 f303 	lsl.w	r3, r1, r3
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 8186 	beq.w	8006eb4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f003 0303 	and.w	r3, r3, #3
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d005      	beq.n	8006bc0 <HAL_GPIO_Init+0x44>
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f003 0303 	and.w	r3, r3, #3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d130      	bne.n	8006c22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	2203      	movs	r2, #3
 8006bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd0:	43db      	mvns	r3, r3
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	fa02 f303 	lsl.w	r3, r2, r3
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfe:	43db      	mvns	r3, r3
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	4013      	ands	r3, r2
 8006c04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	091b      	lsrs	r3, r3, #4
 8006c0c:	f003 0201 	and.w	r2, r3, #1
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	fa02 f303 	lsl.w	r3, r2, r3
 8006c16:	69ba      	ldr	r2, [r7, #24]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f003 0303 	and.w	r3, r3, #3
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	d017      	beq.n	8006c5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	2203      	movs	r2, #3
 8006c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3e:	43db      	mvns	r3, r3
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	4013      	ands	r3, r2
 8006c44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	689a      	ldr	r2, [r3, #8]
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f003 0303 	and.w	r3, r3, #3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d123      	bne.n	8006cb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	08da      	lsrs	r2, r3, #3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3208      	adds	r2, #8
 8006c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	f003 0307 	and.w	r3, r3, #7
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	220f      	movs	r2, #15
 8006c82:	fa02 f303 	lsl.w	r3, r2, r3
 8006c86:	43db      	mvns	r3, r3
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	691a      	ldr	r2, [r3, #16]
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	f003 0307 	and.w	r3, r3, #7
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	08da      	lsrs	r2, r3, #3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	3208      	adds	r2, #8
 8006cac:	69b9      	ldr	r1, [r7, #24]
 8006cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	2203      	movs	r2, #3
 8006cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc2:	43db      	mvns	r3, r3
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f003 0203 	and.w	r2, r3, #3
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	69ba      	ldr	r2, [r7, #24]
 8006ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 80e0 	beq.w	8006eb4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cf4:	4b2f      	ldr	r3, [pc, #188]	; (8006db4 <HAL_GPIO_Init+0x238>)
 8006cf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cfa:	4a2e      	ldr	r2, [pc, #184]	; (8006db4 <HAL_GPIO_Init+0x238>)
 8006cfc:	f043 0302 	orr.w	r3, r3, #2
 8006d00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006d04:	4b2b      	ldr	r3, [pc, #172]	; (8006db4 <HAL_GPIO_Init+0x238>)
 8006d06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d12:	4a29      	ldr	r2, [pc, #164]	; (8006db8 <HAL_GPIO_Init+0x23c>)
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	089b      	lsrs	r3, r3, #2
 8006d18:	3302      	adds	r3, #2
 8006d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	f003 0303 	and.w	r3, r3, #3
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	220f      	movs	r2, #15
 8006d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2e:	43db      	mvns	r3, r3
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	4013      	ands	r3, r2
 8006d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a20      	ldr	r2, [pc, #128]	; (8006dbc <HAL_GPIO_Init+0x240>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d052      	beq.n	8006de4 <HAL_GPIO_Init+0x268>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a1f      	ldr	r2, [pc, #124]	; (8006dc0 <HAL_GPIO_Init+0x244>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d031      	beq.n	8006daa <HAL_GPIO_Init+0x22e>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a1e      	ldr	r2, [pc, #120]	; (8006dc4 <HAL_GPIO_Init+0x248>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d02b      	beq.n	8006da6 <HAL_GPIO_Init+0x22a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a1d      	ldr	r2, [pc, #116]	; (8006dc8 <HAL_GPIO_Init+0x24c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d025      	beq.n	8006da2 <HAL_GPIO_Init+0x226>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a1c      	ldr	r2, [pc, #112]	; (8006dcc <HAL_GPIO_Init+0x250>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d01f      	beq.n	8006d9e <HAL_GPIO_Init+0x222>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a1b      	ldr	r2, [pc, #108]	; (8006dd0 <HAL_GPIO_Init+0x254>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d019      	beq.n	8006d9a <HAL_GPIO_Init+0x21e>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a1a      	ldr	r2, [pc, #104]	; (8006dd4 <HAL_GPIO_Init+0x258>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d013      	beq.n	8006d96 <HAL_GPIO_Init+0x21a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a19      	ldr	r2, [pc, #100]	; (8006dd8 <HAL_GPIO_Init+0x25c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d00d      	beq.n	8006d92 <HAL_GPIO_Init+0x216>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a18      	ldr	r2, [pc, #96]	; (8006ddc <HAL_GPIO_Init+0x260>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d007      	beq.n	8006d8e <HAL_GPIO_Init+0x212>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a17      	ldr	r2, [pc, #92]	; (8006de0 <HAL_GPIO_Init+0x264>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d101      	bne.n	8006d8a <HAL_GPIO_Init+0x20e>
 8006d86:	2309      	movs	r3, #9
 8006d88:	e02d      	b.n	8006de6 <HAL_GPIO_Init+0x26a>
 8006d8a:	230a      	movs	r3, #10
 8006d8c:	e02b      	b.n	8006de6 <HAL_GPIO_Init+0x26a>
 8006d8e:	2308      	movs	r3, #8
 8006d90:	e029      	b.n	8006de6 <HAL_GPIO_Init+0x26a>
 8006d92:	2307      	movs	r3, #7
 8006d94:	e027      	b.n	8006de6 <HAL_GPIO_Init+0x26a>
 8006d96:	2306      	movs	r3, #6
 8006d98:	e025      	b.n	8006de6 <HAL_GPIO_Init+0x26a>
 8006d9a:	2305      	movs	r3, #5
 8006d9c:	e023      	b.n	8006de6 <HAL_GPIO_Init+0x26a>
 8006d9e:	2304      	movs	r3, #4
 8006da0:	e021      	b.n	8006de6 <HAL_GPIO_Init+0x26a>
 8006da2:	2303      	movs	r3, #3
 8006da4:	e01f      	b.n	8006de6 <HAL_GPIO_Init+0x26a>
 8006da6:	2302      	movs	r3, #2
 8006da8:	e01d      	b.n	8006de6 <HAL_GPIO_Init+0x26a>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e01b      	b.n	8006de6 <HAL_GPIO_Init+0x26a>
 8006dae:	bf00      	nop
 8006db0:	58000080 	.word	0x58000080
 8006db4:	58024400 	.word	0x58024400
 8006db8:	58000400 	.word	0x58000400
 8006dbc:	58020000 	.word	0x58020000
 8006dc0:	58020400 	.word	0x58020400
 8006dc4:	58020800 	.word	0x58020800
 8006dc8:	58020c00 	.word	0x58020c00
 8006dcc:	58021000 	.word	0x58021000
 8006dd0:	58021400 	.word	0x58021400
 8006dd4:	58021800 	.word	0x58021800
 8006dd8:	58021c00 	.word	0x58021c00
 8006ddc:	58022000 	.word	0x58022000
 8006de0:	58022400 	.word	0x58022400
 8006de4:	2300      	movs	r3, #0
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	f002 0203 	and.w	r2, r2, #3
 8006dec:	0092      	lsls	r2, r2, #2
 8006dee:	4093      	lsls	r3, r2
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006df6:	4938      	ldr	r1, [pc, #224]	; (8006ed8 <HAL_GPIO_Init+0x35c>)
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	089b      	lsrs	r3, r3, #2
 8006dfc:	3302      	adds	r3, #2
 8006dfe:	69ba      	ldr	r2, [r7, #24]
 8006e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	43db      	mvns	r3, r3
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	4013      	ands	r3, r2
 8006e14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006e2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	43db      	mvns	r3, r3
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	4013      	ands	r3, r2
 8006e42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	43db      	mvns	r3, r3
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	43db      	mvns	r3, r3
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	4013      	ands	r3, r2
 8006e98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	69ba      	ldr	r2, [r7, #24]
 8006eb2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f47f ae63 	bne.w	8006b90 <HAL_GPIO_Init+0x14>
  }
}
 8006eca:	bf00      	nop
 8006ecc:	bf00      	nop
 8006ece:	3724      	adds	r7, #36	; 0x24
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	58000400 	.word	0x58000400

08006edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	807b      	strh	r3, [r7, #2]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006eec:	787b      	ldrb	r3, [r7, #1]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ef2:	887a      	ldrh	r2, [r7, #2]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006ef8:	e003      	b.n	8006f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006efa:	887b      	ldrh	r3, [r7, #2]
 8006efc:	041a      	lsls	r2, r3, #16
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	619a      	str	r2, [r3, #24]
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b085      	sub	sp, #20
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	460b      	mov	r3, r1
 8006f18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006f20:	887a      	ldrh	r2, [r7, #2]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4013      	ands	r3, r2
 8006f26:	041a      	lsls	r2, r3, #16
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	43d9      	mvns	r1, r3
 8006f2c:	887b      	ldrh	r3, [r7, #2]
 8006f2e:	400b      	ands	r3, r1
 8006f30:	431a      	orrs	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	619a      	str	r2, [r3, #24]
}
 8006f36:	bf00      	nop
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	4603      	mov	r3, r0
 8006f4a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006f54:	88fb      	ldrh	r3, [r7, #6]
 8006f56:	4013      	ands	r3, r2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d008      	beq.n	8006f6e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f60:	88fb      	ldrh	r3, [r7, #6]
 8006f62:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f66:	88fb      	ldrh	r3, [r7, #6]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 f804 	bl	8006f76 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006f6e:	bf00      	nop
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b083      	sub	sp, #12
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006f94:	4b19      	ldr	r3, [pc, #100]	; (8006ffc <HAL_PWREx_ConfigSupply+0x70>)
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b04      	cmp	r3, #4
 8006f9e:	d00a      	beq.n	8006fb6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006fa0:	4b16      	ldr	r3, [pc, #88]	; (8006ffc <HAL_PWREx_ConfigSupply+0x70>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f003 0307 	and.w	r3, r3, #7
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d001      	beq.n	8006fb2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e01f      	b.n	8006ff2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e01d      	b.n	8006ff2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006fb6:	4b11      	ldr	r3, [pc, #68]	; (8006ffc <HAL_PWREx_ConfigSupply+0x70>)
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f023 0207 	bic.w	r2, r3, #7
 8006fbe:	490f      	ldr	r1, [pc, #60]	; (8006ffc <HAL_PWREx_ConfigSupply+0x70>)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006fc6:	f7fb ff3f 	bl	8002e48 <HAL_GetTick>
 8006fca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006fcc:	e009      	b.n	8006fe2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006fce:	f7fb ff3b 	bl	8002e48 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fdc:	d901      	bls.n	8006fe2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e007      	b.n	8006ff2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006fe2:	4b06      	ldr	r3, [pc, #24]	; (8006ffc <HAL_PWREx_ConfigSupply+0x70>)
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fee:	d1ee      	bne.n	8006fce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	58024800 	.word	0x58024800

08007000 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08c      	sub	sp, #48	; 0x30
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d102      	bne.n	8007014 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	f000 bc1c 	b.w	800784c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 8087 	beq.w	8007130 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007022:	4b9e      	ldr	r3, [pc, #632]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800702a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800702c:	4b9b      	ldr	r3, [pc, #620]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 800702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007030:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007034:	2b10      	cmp	r3, #16
 8007036:	d007      	beq.n	8007048 <HAL_RCC_OscConfig+0x48>
 8007038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703a:	2b18      	cmp	r3, #24
 800703c:	d110      	bne.n	8007060 <HAL_RCC_OscConfig+0x60>
 800703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007040:	f003 0303 	and.w	r3, r3, #3
 8007044:	2b02      	cmp	r3, #2
 8007046:	d10b      	bne.n	8007060 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007048:	4b94      	ldr	r3, [pc, #592]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d06c      	beq.n	800712e <HAL_RCC_OscConfig+0x12e>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d168      	bne.n	800712e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e3f5      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007068:	d106      	bne.n	8007078 <HAL_RCC_OscConfig+0x78>
 800706a:	4b8c      	ldr	r3, [pc, #560]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a8b      	ldr	r2, [pc, #556]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 8007070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	e02e      	b.n	80070d6 <HAL_RCC_OscConfig+0xd6>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10c      	bne.n	800709a <HAL_RCC_OscConfig+0x9a>
 8007080:	4b86      	ldr	r3, [pc, #536]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a85      	ldr	r2, [pc, #532]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 8007086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	4b83      	ldr	r3, [pc, #524]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a82      	ldr	r2, [pc, #520]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 8007092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007096:	6013      	str	r3, [r2, #0]
 8007098:	e01d      	b.n	80070d6 <HAL_RCC_OscConfig+0xd6>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070a2:	d10c      	bne.n	80070be <HAL_RCC_OscConfig+0xbe>
 80070a4:	4b7d      	ldr	r3, [pc, #500]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a7c      	ldr	r2, [pc, #496]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 80070aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	4b7a      	ldr	r3, [pc, #488]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a79      	ldr	r2, [pc, #484]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 80070b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070ba:	6013      	str	r3, [r2, #0]
 80070bc:	e00b      	b.n	80070d6 <HAL_RCC_OscConfig+0xd6>
 80070be:	4b77      	ldr	r3, [pc, #476]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a76      	ldr	r2, [pc, #472]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 80070c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	4b74      	ldr	r3, [pc, #464]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a73      	ldr	r2, [pc, #460]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 80070d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d013      	beq.n	8007106 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070de:	f7fb feb3 	bl	8002e48 <HAL_GetTick>
 80070e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070e4:	e008      	b.n	80070f8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070e6:	f7fb feaf 	bl	8002e48 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b64      	cmp	r3, #100	; 0x64
 80070f2:	d901      	bls.n	80070f8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e3a9      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070f8:	4b68      	ldr	r3, [pc, #416]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0f0      	beq.n	80070e6 <HAL_RCC_OscConfig+0xe6>
 8007104:	e014      	b.n	8007130 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007106:	f7fb fe9f 	bl	8002e48 <HAL_GetTick>
 800710a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800710c:	e008      	b.n	8007120 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800710e:	f7fb fe9b 	bl	8002e48 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	2b64      	cmp	r3, #100	; 0x64
 800711a:	d901      	bls.n	8007120 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e395      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007120:	4b5e      	ldr	r3, [pc, #376]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1f0      	bne.n	800710e <HAL_RCC_OscConfig+0x10e>
 800712c:	e000      	b.n	8007130 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800712e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 80ca 	beq.w	80072d2 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800713e:	4b57      	ldr	r3, [pc, #348]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007146:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007148:	4b54      	ldr	r3, [pc, #336]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 800714a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d007      	beq.n	8007164 <HAL_RCC_OscConfig+0x164>
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	2b18      	cmp	r3, #24
 8007158:	d156      	bne.n	8007208 <HAL_RCC_OscConfig+0x208>
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	f003 0303 	and.w	r3, r3, #3
 8007160:	2b00      	cmp	r3, #0
 8007162:	d151      	bne.n	8007208 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007164:	4b4d      	ldr	r3, [pc, #308]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0304 	and.w	r3, r3, #4
 800716c:	2b00      	cmp	r3, #0
 800716e:	d005      	beq.n	800717c <HAL_RCC_OscConfig+0x17c>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e367      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800717c:	4b47      	ldr	r3, [pc, #284]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f023 0219 	bic.w	r2, r3, #25
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	4944      	ldr	r1, [pc, #272]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 800718a:	4313      	orrs	r3, r2
 800718c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800718e:	f7fb fe5b 	bl	8002e48 <HAL_GetTick>
 8007192:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007194:	e008      	b.n	80071a8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007196:	f7fb fe57 	bl	8002e48 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d901      	bls.n	80071a8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e351      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071a8:	4b3c      	ldr	r3, [pc, #240]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d0f0      	beq.n	8007196 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071b4:	f7fb fe54 	bl	8002e60 <HAL_GetREVID>
 80071b8:	4603      	mov	r3, r0
 80071ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80071be:	4293      	cmp	r3, r2
 80071c0:	d817      	bhi.n	80071f2 <HAL_RCC_OscConfig+0x1f2>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	2b40      	cmp	r3, #64	; 0x40
 80071c8:	d108      	bne.n	80071dc <HAL_RCC_OscConfig+0x1dc>
 80071ca:	4b34      	ldr	r3, [pc, #208]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80071d2:	4a32      	ldr	r2, [pc, #200]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 80071d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071da:	e07a      	b.n	80072d2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071dc:	4b2f      	ldr	r3, [pc, #188]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	031b      	lsls	r3, r3, #12
 80071ea:	492c      	ldr	r1, [pc, #176]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071f0:	e06f      	b.n	80072d2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071f2:	4b2a      	ldr	r3, [pc, #168]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	061b      	lsls	r3, r3, #24
 8007200:	4926      	ldr	r1, [pc, #152]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 8007202:	4313      	orrs	r3, r2
 8007204:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007206:	e064      	b.n	80072d2 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d047      	beq.n	80072a0 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007210:	4b22      	ldr	r3, [pc, #136]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f023 0219 	bic.w	r2, r3, #25
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	491f      	ldr	r1, [pc, #124]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 800721e:	4313      	orrs	r3, r2
 8007220:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007222:	f7fb fe11 	bl	8002e48 <HAL_GetTick>
 8007226:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007228:	e008      	b.n	800723c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800722a:	f7fb fe0d 	bl	8002e48 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	2b02      	cmp	r3, #2
 8007236:	d901      	bls.n	800723c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e307      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800723c:	4b17      	ldr	r3, [pc, #92]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0f0      	beq.n	800722a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007248:	f7fb fe0a 	bl	8002e60 <HAL_GetREVID>
 800724c:	4603      	mov	r3, r0
 800724e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007252:	4293      	cmp	r3, r2
 8007254:	d817      	bhi.n	8007286 <HAL_RCC_OscConfig+0x286>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	2b40      	cmp	r3, #64	; 0x40
 800725c:	d108      	bne.n	8007270 <HAL_RCC_OscConfig+0x270>
 800725e:	4b0f      	ldr	r3, [pc, #60]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007266:	4a0d      	ldr	r2, [pc, #52]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 8007268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800726c:	6053      	str	r3, [r2, #4]
 800726e:	e030      	b.n	80072d2 <HAL_RCC_OscConfig+0x2d2>
 8007270:	4b0a      	ldr	r3, [pc, #40]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	031b      	lsls	r3, r3, #12
 800727e:	4907      	ldr	r1, [pc, #28]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 8007280:	4313      	orrs	r3, r2
 8007282:	604b      	str	r3, [r1, #4]
 8007284:	e025      	b.n	80072d2 <HAL_RCC_OscConfig+0x2d2>
 8007286:	4b05      	ldr	r3, [pc, #20]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	061b      	lsls	r3, r3, #24
 8007294:	4901      	ldr	r1, [pc, #4]	; (800729c <HAL_RCC_OscConfig+0x29c>)
 8007296:	4313      	orrs	r3, r2
 8007298:	604b      	str	r3, [r1, #4]
 800729a:	e01a      	b.n	80072d2 <HAL_RCC_OscConfig+0x2d2>
 800729c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072a0:	4b9e      	ldr	r3, [pc, #632]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a9d      	ldr	r2, [pc, #628]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 80072a6:	f023 0301 	bic.w	r3, r3, #1
 80072aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ac:	f7fb fdcc 	bl	8002e48 <HAL_GetTick>
 80072b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80072b2:	e008      	b.n	80072c6 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072b4:	f7fb fdc8 	bl	8002e48 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e2c2      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80072c6:	4b95      	ldr	r3, [pc, #596]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0304 	and.w	r3, r3, #4
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1f0      	bne.n	80072b4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0310 	and.w	r3, r3, #16
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 80a9 	beq.w	8007432 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072e0:	4b8e      	ldr	r3, [pc, #568]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072e8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072ea:	4b8c      	ldr	r3, [pc, #560]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 80072ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ee:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	2b08      	cmp	r3, #8
 80072f4:	d007      	beq.n	8007306 <HAL_RCC_OscConfig+0x306>
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	2b18      	cmp	r3, #24
 80072fa:	d13a      	bne.n	8007372 <HAL_RCC_OscConfig+0x372>
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	2b01      	cmp	r3, #1
 8007304:	d135      	bne.n	8007372 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007306:	4b85      	ldr	r3, [pc, #532]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800730e:	2b00      	cmp	r3, #0
 8007310:	d005      	beq.n	800731e <HAL_RCC_OscConfig+0x31e>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	2b80      	cmp	r3, #128	; 0x80
 8007318:	d001      	beq.n	800731e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e296      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800731e:	f7fb fd9f 	bl	8002e60 <HAL_GetREVID>
 8007322:	4603      	mov	r3, r0
 8007324:	f241 0203 	movw	r2, #4099	; 0x1003
 8007328:	4293      	cmp	r3, r2
 800732a:	d817      	bhi.n	800735c <HAL_RCC_OscConfig+0x35c>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	2b20      	cmp	r3, #32
 8007332:	d108      	bne.n	8007346 <HAL_RCC_OscConfig+0x346>
 8007334:	4b79      	ldr	r3, [pc, #484]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800733c:	4a77      	ldr	r2, [pc, #476]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 800733e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007342:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007344:	e075      	b.n	8007432 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007346:	4b75      	ldr	r3, [pc, #468]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	069b      	lsls	r3, r3, #26
 8007354:	4971      	ldr	r1, [pc, #452]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 8007356:	4313      	orrs	r3, r2
 8007358:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800735a:	e06a      	b.n	8007432 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800735c:	4b6f      	ldr	r3, [pc, #444]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	061b      	lsls	r3, r3, #24
 800736a:	496c      	ldr	r1, [pc, #432]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 800736c:	4313      	orrs	r3, r2
 800736e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007370:	e05f      	b.n	8007432 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d042      	beq.n	8007400 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800737a:	4b68      	ldr	r3, [pc, #416]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a67      	ldr	r2, [pc, #412]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 8007380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007386:	f7fb fd5f 	bl	8002e48 <HAL_GetTick>
 800738a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800738c:	e008      	b.n	80073a0 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800738e:	f7fb fd5b 	bl	8002e48 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	2b02      	cmp	r3, #2
 800739a:	d901      	bls.n	80073a0 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e255      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073a0:	4b5e      	ldr	r3, [pc, #376]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d0f0      	beq.n	800738e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80073ac:	f7fb fd58 	bl	8002e60 <HAL_GetREVID>
 80073b0:	4603      	mov	r3, r0
 80073b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d817      	bhi.n	80073ea <HAL_RCC_OscConfig+0x3ea>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	2b20      	cmp	r3, #32
 80073c0:	d108      	bne.n	80073d4 <HAL_RCC_OscConfig+0x3d4>
 80073c2:	4b56      	ldr	r3, [pc, #344]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80073ca:	4a54      	ldr	r2, [pc, #336]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 80073cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073d0:	6053      	str	r3, [r2, #4]
 80073d2:	e02e      	b.n	8007432 <HAL_RCC_OscConfig+0x432>
 80073d4:	4b51      	ldr	r3, [pc, #324]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	069b      	lsls	r3, r3, #26
 80073e2:	494e      	ldr	r1, [pc, #312]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	604b      	str	r3, [r1, #4]
 80073e8:	e023      	b.n	8007432 <HAL_RCC_OscConfig+0x432>
 80073ea:	4b4c      	ldr	r3, [pc, #304]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	061b      	lsls	r3, r3, #24
 80073f8:	4948      	ldr	r1, [pc, #288]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60cb      	str	r3, [r1, #12]
 80073fe:	e018      	b.n	8007432 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007400:	4b46      	ldr	r3, [pc, #280]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a45      	ldr	r2, [pc, #276]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 8007406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800740a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800740c:	f7fb fd1c 	bl	8002e48 <HAL_GetTick>
 8007410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007412:	e008      	b.n	8007426 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007414:	f7fb fd18 	bl	8002e48 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e212      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007426:	4b3d      	ldr	r3, [pc, #244]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1f0      	bne.n	8007414 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0308 	and.w	r3, r3, #8
 800743a:	2b00      	cmp	r3, #0
 800743c:	d036      	beq.n	80074ac <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d019      	beq.n	800747a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007446:	4b35      	ldr	r3, [pc, #212]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 8007448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800744a:	4a34      	ldr	r2, [pc, #208]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 800744c:	f043 0301 	orr.w	r3, r3, #1
 8007450:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007452:	f7fb fcf9 	bl	8002e48 <HAL_GetTick>
 8007456:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007458:	e008      	b.n	800746c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800745a:	f7fb fcf5 	bl	8002e48 <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	2b02      	cmp	r3, #2
 8007466:	d901      	bls.n	800746c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e1ef      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800746c:	4b2b      	ldr	r3, [pc, #172]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 800746e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d0f0      	beq.n	800745a <HAL_RCC_OscConfig+0x45a>
 8007478:	e018      	b.n	80074ac <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800747a:	4b28      	ldr	r3, [pc, #160]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 800747c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800747e:	4a27      	ldr	r2, [pc, #156]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 8007480:	f023 0301 	bic.w	r3, r3, #1
 8007484:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007486:	f7fb fcdf 	bl	8002e48 <HAL_GetTick>
 800748a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800748c:	e008      	b.n	80074a0 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800748e:	f7fb fcdb 	bl	8002e48 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d901      	bls.n	80074a0 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e1d5      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80074a0:	4b1e      	ldr	r3, [pc, #120]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 80074a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1f0      	bne.n	800748e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0320 	and.w	r3, r3, #32
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d039      	beq.n	800752c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d019      	beq.n	80074f4 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074c0:	4b16      	ldr	r3, [pc, #88]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a15      	ldr	r2, [pc, #84]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 80074c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80074cc:	f7fb fcbc 	bl	8002e48 <HAL_GetTick>
 80074d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074d2:	e008      	b.n	80074e6 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80074d4:	f7fb fcb8 	bl	8002e48 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e1b2      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074e6:	4b0d      	ldr	r3, [pc, #52]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d0f0      	beq.n	80074d4 <HAL_RCC_OscConfig+0x4d4>
 80074f2:	e01b      	b.n	800752c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074f4:	4b09      	ldr	r3, [pc, #36]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a08      	ldr	r2, [pc, #32]	; (800751c <HAL_RCC_OscConfig+0x51c>)
 80074fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007500:	f7fb fca2 	bl	8002e48 <HAL_GetTick>
 8007504:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007506:	e00b      	b.n	8007520 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007508:	f7fb fc9e 	bl	8002e48 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d904      	bls.n	8007520 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e198      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
 800751a:	bf00      	nop
 800751c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007520:	4ba3      	ldr	r3, [pc, #652]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1ed      	bne.n	8007508 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 8081 	beq.w	800763c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800753a:	4b9e      	ldr	r3, [pc, #632]	; (80077b4 <HAL_RCC_OscConfig+0x7b4>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a9d      	ldr	r2, [pc, #628]	; (80077b4 <HAL_RCC_OscConfig+0x7b4>)
 8007540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007544:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007546:	f7fb fc7f 	bl	8002e48 <HAL_GetTick>
 800754a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800754c:	e008      	b.n	8007560 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800754e:	f7fb fc7b 	bl	8002e48 <HAL_GetTick>
 8007552:	4602      	mov	r2, r0
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	2b64      	cmp	r3, #100	; 0x64
 800755a:	d901      	bls.n	8007560 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e175      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007560:	4b94      	ldr	r3, [pc, #592]	; (80077b4 <HAL_RCC_OscConfig+0x7b4>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007568:	2b00      	cmp	r3, #0
 800756a:	d0f0      	beq.n	800754e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d106      	bne.n	8007582 <HAL_RCC_OscConfig+0x582>
 8007574:	4b8e      	ldr	r3, [pc, #568]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 8007576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007578:	4a8d      	ldr	r2, [pc, #564]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 800757a:	f043 0301 	orr.w	r3, r3, #1
 800757e:	6713      	str	r3, [r2, #112]	; 0x70
 8007580:	e02d      	b.n	80075de <HAL_RCC_OscConfig+0x5de>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10c      	bne.n	80075a4 <HAL_RCC_OscConfig+0x5a4>
 800758a:	4b89      	ldr	r3, [pc, #548]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 800758c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800758e:	4a88      	ldr	r2, [pc, #544]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 8007590:	f023 0301 	bic.w	r3, r3, #1
 8007594:	6713      	str	r3, [r2, #112]	; 0x70
 8007596:	4b86      	ldr	r3, [pc, #536]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 8007598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800759a:	4a85      	ldr	r2, [pc, #532]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 800759c:	f023 0304 	bic.w	r3, r3, #4
 80075a0:	6713      	str	r3, [r2, #112]	; 0x70
 80075a2:	e01c      	b.n	80075de <HAL_RCC_OscConfig+0x5de>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	2b05      	cmp	r3, #5
 80075aa:	d10c      	bne.n	80075c6 <HAL_RCC_OscConfig+0x5c6>
 80075ac:	4b80      	ldr	r3, [pc, #512]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 80075ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b0:	4a7f      	ldr	r2, [pc, #508]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 80075b2:	f043 0304 	orr.w	r3, r3, #4
 80075b6:	6713      	str	r3, [r2, #112]	; 0x70
 80075b8:	4b7d      	ldr	r3, [pc, #500]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 80075ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075bc:	4a7c      	ldr	r2, [pc, #496]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 80075be:	f043 0301 	orr.w	r3, r3, #1
 80075c2:	6713      	str	r3, [r2, #112]	; 0x70
 80075c4:	e00b      	b.n	80075de <HAL_RCC_OscConfig+0x5de>
 80075c6:	4b7a      	ldr	r3, [pc, #488]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 80075c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ca:	4a79      	ldr	r2, [pc, #484]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 80075cc:	f023 0301 	bic.w	r3, r3, #1
 80075d0:	6713      	str	r3, [r2, #112]	; 0x70
 80075d2:	4b77      	ldr	r3, [pc, #476]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 80075d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d6:	4a76      	ldr	r2, [pc, #472]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 80075d8:	f023 0304 	bic.w	r3, r3, #4
 80075dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d015      	beq.n	8007612 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075e6:	f7fb fc2f 	bl	8002e48 <HAL_GetTick>
 80075ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075ec:	e00a      	b.n	8007604 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075ee:	f7fb fc2b 	bl	8002e48 <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d901      	bls.n	8007604 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e123      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007604:	4b6a      	ldr	r3, [pc, #424]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 8007606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d0ee      	beq.n	80075ee <HAL_RCC_OscConfig+0x5ee>
 8007610:	e014      	b.n	800763c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007612:	f7fb fc19 	bl	8002e48 <HAL_GetTick>
 8007616:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007618:	e00a      	b.n	8007630 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800761a:	f7fb fc15 	bl	8002e48 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	f241 3288 	movw	r2, #5000	; 0x1388
 8007628:	4293      	cmp	r3, r2
 800762a:	d901      	bls.n	8007630 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e10d      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007630:	4b5f      	ldr	r3, [pc, #380]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 8007632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1ee      	bne.n	800761a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 8102 	beq.w	800784a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007646:	4b5a      	ldr	r3, [pc, #360]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800764e:	2b18      	cmp	r3, #24
 8007650:	f000 80bd 	beq.w	80077ce <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	2b02      	cmp	r3, #2
 800765a:	f040 8095 	bne.w	8007788 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800765e:	4b54      	ldr	r3, [pc, #336]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a53      	ldr	r2, [pc, #332]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 8007664:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800766a:	f7fb fbed 	bl	8002e48 <HAL_GetTick>
 800766e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007670:	e008      	b.n	8007684 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007672:	f7fb fbe9 	bl	8002e48 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	2b02      	cmp	r3, #2
 800767e:	d901      	bls.n	8007684 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e0e3      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007684:	4b4a      	ldr	r3, [pc, #296]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1f0      	bne.n	8007672 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007690:	4b47      	ldr	r3, [pc, #284]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 8007692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007694:	4b48      	ldr	r3, [pc, #288]	; (80077b8 <HAL_RCC_OscConfig+0x7b8>)
 8007696:	4013      	ands	r3, r2
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80076a0:	0112      	lsls	r2, r2, #4
 80076a2:	430a      	orrs	r2, r1
 80076a4:	4942      	ldr	r1, [pc, #264]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	628b      	str	r3, [r1, #40]	; 0x28
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ae:	3b01      	subs	r3, #1
 80076b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b8:	3b01      	subs	r3, #1
 80076ba:	025b      	lsls	r3, r3, #9
 80076bc:	b29b      	uxth	r3, r3
 80076be:	431a      	orrs	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c4:	3b01      	subs	r3, #1
 80076c6:	041b      	lsls	r3, r3, #16
 80076c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076cc:	431a      	orrs	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d2:	3b01      	subs	r3, #1
 80076d4:	061b      	lsls	r3, r3, #24
 80076d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076da:	4935      	ldr	r1, [pc, #212]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80076e0:	4b33      	ldr	r3, [pc, #204]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	4a32      	ldr	r2, [pc, #200]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 80076e6:	f023 0301 	bic.w	r3, r3, #1
 80076ea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80076ec:	4b30      	ldr	r3, [pc, #192]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 80076ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076f0:	4b32      	ldr	r3, [pc, #200]	; (80077bc <HAL_RCC_OscConfig+0x7bc>)
 80076f2:	4013      	ands	r3, r2
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80076f8:	00d2      	lsls	r2, r2, #3
 80076fa:	492d      	ldr	r1, [pc, #180]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007700:	4b2b      	ldr	r3, [pc, #172]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 8007702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007704:	f023 020c 	bic.w	r2, r3, #12
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770c:	4928      	ldr	r1, [pc, #160]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 800770e:	4313      	orrs	r3, r2
 8007710:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007712:	4b27      	ldr	r3, [pc, #156]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 8007714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007716:	f023 0202 	bic.w	r2, r3, #2
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771e:	4924      	ldr	r1, [pc, #144]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 8007720:	4313      	orrs	r3, r2
 8007722:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007724:	4b22      	ldr	r3, [pc, #136]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	4a21      	ldr	r2, [pc, #132]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 800772a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800772e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007730:	4b1f      	ldr	r3, [pc, #124]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	4a1e      	ldr	r2, [pc, #120]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 8007736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800773a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800773c:	4b1c      	ldr	r3, [pc, #112]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	4a1b      	ldr	r2, [pc, #108]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 8007742:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007746:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007748:	4b19      	ldr	r3, [pc, #100]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	4a18      	ldr	r2, [pc, #96]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 800774e:	f043 0301 	orr.w	r3, r3, #1
 8007752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007754:	4b16      	ldr	r3, [pc, #88]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a15      	ldr	r2, [pc, #84]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 800775a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800775e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007760:	f7fb fb72 	bl	8002e48 <HAL_GetTick>
 8007764:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007766:	e008      	b.n	800777a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007768:	f7fb fb6e 	bl	8002e48 <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	2b02      	cmp	r3, #2
 8007774:	d901      	bls.n	800777a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e068      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800777a:	4b0d      	ldr	r3, [pc, #52]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d0f0      	beq.n	8007768 <HAL_RCC_OscConfig+0x768>
 8007786:	e060      	b.n	800784a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007788:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a08      	ldr	r2, [pc, #32]	; (80077b0 <HAL_RCC_OscConfig+0x7b0>)
 800778e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007794:	f7fb fb58 	bl	8002e48 <HAL_GetTick>
 8007798:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800779a:	e011      	b.n	80077c0 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800779c:	f7fb fb54 	bl	8002e48 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d90a      	bls.n	80077c0 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e04e      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
 80077ae:	bf00      	nop
 80077b0:	58024400 	.word	0x58024400
 80077b4:	58024800 	.word	0x58024800
 80077b8:	fffffc0c 	.word	0xfffffc0c
 80077bc:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077c0:	4b24      	ldr	r3, [pc, #144]	; (8007854 <HAL_RCC_OscConfig+0x854>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e7      	bne.n	800779c <HAL_RCC_OscConfig+0x79c>
 80077cc:	e03d      	b.n	800784a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80077ce:	4b21      	ldr	r3, [pc, #132]	; (8007854 <HAL_RCC_OscConfig+0x854>)
 80077d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80077d4:	4b1f      	ldr	r3, [pc, #124]	; (8007854 <HAL_RCC_OscConfig+0x854>)
 80077d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d031      	beq.n	8007846 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	f003 0203 	and.w	r2, r3, #3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d12a      	bne.n	8007846 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	091b      	lsrs	r3, r3, #4
 80077f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d122      	bne.n	8007846 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800780c:	429a      	cmp	r2, r3
 800780e:	d11a      	bne.n	8007846 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	0a5b      	lsrs	r3, r3, #9
 8007814:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800781e:	429a      	cmp	r2, r3
 8007820:	d111      	bne.n	8007846 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	0c1b      	lsrs	r3, r3, #16
 8007826:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007830:	429a      	cmp	r2, r3
 8007832:	d108      	bne.n	8007846 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	0e1b      	lsrs	r3, r3, #24
 8007838:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007840:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007842:	429a      	cmp	r2, r3
 8007844:	d001      	beq.n	800784a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e000      	b.n	800784c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3730      	adds	r7, #48	; 0x30
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	58024400 	.word	0x58024400

08007858 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d101      	bne.n	800786c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e19c      	b.n	8007ba6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800786c:	4b8a      	ldr	r3, [pc, #552]	; (8007a98 <HAL_RCC_ClockConfig+0x240>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 030f 	and.w	r3, r3, #15
 8007874:	683a      	ldr	r2, [r7, #0]
 8007876:	429a      	cmp	r2, r3
 8007878:	d910      	bls.n	800789c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800787a:	4b87      	ldr	r3, [pc, #540]	; (8007a98 <HAL_RCC_ClockConfig+0x240>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f023 020f 	bic.w	r2, r3, #15
 8007882:	4985      	ldr	r1, [pc, #532]	; (8007a98 <HAL_RCC_ClockConfig+0x240>)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	4313      	orrs	r3, r2
 8007888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800788a:	4b83      	ldr	r3, [pc, #524]	; (8007a98 <HAL_RCC_ClockConfig+0x240>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	429a      	cmp	r2, r3
 8007896:	d001      	beq.n	800789c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e184      	b.n	8007ba6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0304 	and.w	r3, r3, #4
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d010      	beq.n	80078ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	691a      	ldr	r2, [r3, #16]
 80078ac:	4b7b      	ldr	r3, [pc, #492]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d908      	bls.n	80078ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078b8:	4b78      	ldr	r3, [pc, #480]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	4975      	ldr	r1, [pc, #468]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0308 	and.w	r3, r3, #8
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d010      	beq.n	80078f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	695a      	ldr	r2, [r3, #20]
 80078da:	4b70      	ldr	r3, [pc, #448]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d908      	bls.n	80078f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078e6:	4b6d      	ldr	r3, [pc, #436]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	496a      	ldr	r1, [pc, #424]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0310 	and.w	r3, r3, #16
 8007900:	2b00      	cmp	r3, #0
 8007902:	d010      	beq.n	8007926 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	699a      	ldr	r2, [r3, #24]
 8007908:	4b64      	ldr	r3, [pc, #400]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 800790a:	69db      	ldr	r3, [r3, #28]
 800790c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007910:	429a      	cmp	r2, r3
 8007912:	d908      	bls.n	8007926 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007914:	4b61      	ldr	r3, [pc, #388]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 8007916:	69db      	ldr	r3, [r3, #28]
 8007918:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	495e      	ldr	r1, [pc, #376]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 8007922:	4313      	orrs	r3, r2
 8007924:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0320 	and.w	r3, r3, #32
 800792e:	2b00      	cmp	r3, #0
 8007930:	d010      	beq.n	8007954 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	69da      	ldr	r2, [r3, #28]
 8007936:	4b59      	ldr	r3, [pc, #356]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800793e:	429a      	cmp	r2, r3
 8007940:	d908      	bls.n	8007954 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007942:	4b56      	ldr	r3, [pc, #344]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	69db      	ldr	r3, [r3, #28]
 800794e:	4953      	ldr	r1, [pc, #332]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 8007950:	4313      	orrs	r3, r2
 8007952:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d010      	beq.n	8007982 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	4b4d      	ldr	r3, [pc, #308]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	f003 030f 	and.w	r3, r3, #15
 800796c:	429a      	cmp	r2, r3
 800796e:	d908      	bls.n	8007982 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007970:	4b4a      	ldr	r3, [pc, #296]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	f023 020f 	bic.w	r2, r3, #15
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	4947      	ldr	r1, [pc, #284]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 800797e:	4313      	orrs	r3, r2
 8007980:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b00      	cmp	r3, #0
 800798c:	d055      	beq.n	8007a3a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800798e:	4b43      	ldr	r3, [pc, #268]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	4940      	ldr	r1, [pc, #256]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 800799c:	4313      	orrs	r3, r2
 800799e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d107      	bne.n	80079b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079a8:	4b3c      	ldr	r3, [pc, #240]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d121      	bne.n	80079f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e0f6      	b.n	8007ba6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d107      	bne.n	80079d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079c0:	4b36      	ldr	r3, [pc, #216]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d115      	bne.n	80079f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e0ea      	b.n	8007ba6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d107      	bne.n	80079e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079d8:	4b30      	ldr	r3, [pc, #192]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d109      	bne.n	80079f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e0de      	b.n	8007ba6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079e8:	4b2c      	ldr	r3, [pc, #176]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e0d6      	b.n	8007ba6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80079f8:	4b28      	ldr	r3, [pc, #160]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	f023 0207 	bic.w	r2, r3, #7
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	4925      	ldr	r1, [pc, #148]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a0a:	f7fb fa1d 	bl	8002e48 <HAL_GetTick>
 8007a0e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a10:	e00a      	b.n	8007a28 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a12:	f7fb fa19 	bl	8002e48 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d901      	bls.n	8007a28 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e0be      	b.n	8007ba6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a28:	4b1c      	ldr	r3, [pc, #112]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	00db      	lsls	r3, r3, #3
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d1eb      	bne.n	8007a12 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d010      	beq.n	8007a68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68da      	ldr	r2, [r3, #12]
 8007a4a:	4b14      	ldr	r3, [pc, #80]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	f003 030f 	and.w	r3, r3, #15
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d208      	bcs.n	8007a68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a56:	4b11      	ldr	r3, [pc, #68]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	f023 020f 	bic.w	r2, r3, #15
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	490e      	ldr	r1, [pc, #56]	; (8007a9c <HAL_RCC_ClockConfig+0x244>)
 8007a64:	4313      	orrs	r3, r2
 8007a66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a68:	4b0b      	ldr	r3, [pc, #44]	; (8007a98 <HAL_RCC_ClockConfig+0x240>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 030f 	and.w	r3, r3, #15
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d214      	bcs.n	8007aa0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a76:	4b08      	ldr	r3, [pc, #32]	; (8007a98 <HAL_RCC_ClockConfig+0x240>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f023 020f 	bic.w	r2, r3, #15
 8007a7e:	4906      	ldr	r1, [pc, #24]	; (8007a98 <HAL_RCC_ClockConfig+0x240>)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a86:	4b04      	ldr	r3, [pc, #16]	; (8007a98 <HAL_RCC_ClockConfig+0x240>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 030f 	and.w	r3, r3, #15
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d005      	beq.n	8007aa0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e086      	b.n	8007ba6 <HAL_RCC_ClockConfig+0x34e>
 8007a98:	52002000 	.word	0x52002000
 8007a9c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0304 	and.w	r3, r3, #4
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d010      	beq.n	8007ace <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	691a      	ldr	r2, [r3, #16]
 8007ab0:	4b3f      	ldr	r3, [pc, #252]	; (8007bb0 <HAL_RCC_ClockConfig+0x358>)
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d208      	bcs.n	8007ace <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007abc:	4b3c      	ldr	r3, [pc, #240]	; (8007bb0 <HAL_RCC_ClockConfig+0x358>)
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	4939      	ldr	r1, [pc, #228]	; (8007bb0 <HAL_RCC_ClockConfig+0x358>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0308 	and.w	r3, r3, #8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d010      	beq.n	8007afc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	695a      	ldr	r2, [r3, #20]
 8007ade:	4b34      	ldr	r3, [pc, #208]	; (8007bb0 <HAL_RCC_ClockConfig+0x358>)
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d208      	bcs.n	8007afc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007aea:	4b31      	ldr	r3, [pc, #196]	; (8007bb0 <HAL_RCC_ClockConfig+0x358>)
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	492e      	ldr	r1, [pc, #184]	; (8007bb0 <HAL_RCC_ClockConfig+0x358>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0310 	and.w	r3, r3, #16
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d010      	beq.n	8007b2a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	699a      	ldr	r2, [r3, #24]
 8007b0c:	4b28      	ldr	r3, [pc, #160]	; (8007bb0 <HAL_RCC_ClockConfig+0x358>)
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d208      	bcs.n	8007b2a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b18:	4b25      	ldr	r3, [pc, #148]	; (8007bb0 <HAL_RCC_ClockConfig+0x358>)
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	4922      	ldr	r1, [pc, #136]	; (8007bb0 <HAL_RCC_ClockConfig+0x358>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d010      	beq.n	8007b58 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	69da      	ldr	r2, [r3, #28]
 8007b3a:	4b1d      	ldr	r3, [pc, #116]	; (8007bb0 <HAL_RCC_ClockConfig+0x358>)
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d208      	bcs.n	8007b58 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007b46:	4b1a      	ldr	r3, [pc, #104]	; (8007bb0 <HAL_RCC_ClockConfig+0x358>)
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	4917      	ldr	r1, [pc, #92]	; (8007bb0 <HAL_RCC_ClockConfig+0x358>)
 8007b54:	4313      	orrs	r3, r2
 8007b56:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b58:	f000 f834 	bl	8007bc4 <HAL_RCC_GetSysClockFreq>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	4b14      	ldr	r3, [pc, #80]	; (8007bb0 <HAL_RCC_ClockConfig+0x358>)
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	0a1b      	lsrs	r3, r3, #8
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	4912      	ldr	r1, [pc, #72]	; (8007bb4 <HAL_RCC_ClockConfig+0x35c>)
 8007b6a:	5ccb      	ldrb	r3, [r1, r3]
 8007b6c:	f003 031f 	and.w	r3, r3, #31
 8007b70:	fa22 f303 	lsr.w	r3, r2, r3
 8007b74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b76:	4b0e      	ldr	r3, [pc, #56]	; (8007bb0 <HAL_RCC_ClockConfig+0x358>)
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	f003 030f 	and.w	r3, r3, #15
 8007b7e:	4a0d      	ldr	r2, [pc, #52]	; (8007bb4 <HAL_RCC_ClockConfig+0x35c>)
 8007b80:	5cd3      	ldrb	r3, [r2, r3]
 8007b82:	f003 031f 	and.w	r3, r3, #31
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	fa22 f303 	lsr.w	r3, r2, r3
 8007b8c:	4a0a      	ldr	r2, [pc, #40]	; (8007bb8 <HAL_RCC_ClockConfig+0x360>)
 8007b8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b90:	4a0a      	ldr	r2, [pc, #40]	; (8007bbc <HAL_RCC_ClockConfig+0x364>)
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007b96:	4b0a      	ldr	r3, [pc, #40]	; (8007bc0 <HAL_RCC_ClockConfig+0x368>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fb f90a 	bl	8002db4 <HAL_InitTick>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	58024400 	.word	0x58024400
 8007bb4:	0800d5f4 	.word	0x0800d5f4
 8007bb8:	20000028 	.word	0x20000028
 8007bbc:	20000024 	.word	0x20000024
 8007bc0:	2000002c 	.word	0x2000002c

08007bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b089      	sub	sp, #36	; 0x24
 8007bc8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bca:	4bb3      	ldr	r3, [pc, #716]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bd2:	2b18      	cmp	r3, #24
 8007bd4:	f200 8155 	bhi.w	8007e82 <HAL_RCC_GetSysClockFreq+0x2be>
 8007bd8:	a201      	add	r2, pc, #4	; (adr r2, 8007be0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bde:	bf00      	nop
 8007be0:	08007c45 	.word	0x08007c45
 8007be4:	08007e83 	.word	0x08007e83
 8007be8:	08007e83 	.word	0x08007e83
 8007bec:	08007e83 	.word	0x08007e83
 8007bf0:	08007e83 	.word	0x08007e83
 8007bf4:	08007e83 	.word	0x08007e83
 8007bf8:	08007e83 	.word	0x08007e83
 8007bfc:	08007e83 	.word	0x08007e83
 8007c00:	08007c6b 	.word	0x08007c6b
 8007c04:	08007e83 	.word	0x08007e83
 8007c08:	08007e83 	.word	0x08007e83
 8007c0c:	08007e83 	.word	0x08007e83
 8007c10:	08007e83 	.word	0x08007e83
 8007c14:	08007e83 	.word	0x08007e83
 8007c18:	08007e83 	.word	0x08007e83
 8007c1c:	08007e83 	.word	0x08007e83
 8007c20:	08007c71 	.word	0x08007c71
 8007c24:	08007e83 	.word	0x08007e83
 8007c28:	08007e83 	.word	0x08007e83
 8007c2c:	08007e83 	.word	0x08007e83
 8007c30:	08007e83 	.word	0x08007e83
 8007c34:	08007e83 	.word	0x08007e83
 8007c38:	08007e83 	.word	0x08007e83
 8007c3c:	08007e83 	.word	0x08007e83
 8007c40:	08007c77 	.word	0x08007c77
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c44:	4b94      	ldr	r3, [pc, #592]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0320 	and.w	r3, r3, #32
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d009      	beq.n	8007c64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c50:	4b91      	ldr	r3, [pc, #580]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	08db      	lsrs	r3, r3, #3
 8007c56:	f003 0303 	and.w	r3, r3, #3
 8007c5a:	4a90      	ldr	r2, [pc, #576]	; (8007e9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007c62:	e111      	b.n	8007e88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007c64:	4b8d      	ldr	r3, [pc, #564]	; (8007e9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c66:	61bb      	str	r3, [r7, #24]
    break;
 8007c68:	e10e      	b.n	8007e88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007c6a:	4b8d      	ldr	r3, [pc, #564]	; (8007ea0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c6c:	61bb      	str	r3, [r7, #24]
    break;
 8007c6e:	e10b      	b.n	8007e88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007c70:	4b8c      	ldr	r3, [pc, #560]	; (8007ea4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007c72:	61bb      	str	r3, [r7, #24]
    break;
 8007c74:	e108      	b.n	8007e88 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c76:	4b88      	ldr	r3, [pc, #544]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7a:	f003 0303 	and.w	r3, r3, #3
 8007c7e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007c80:	4b85      	ldr	r3, [pc, #532]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c84:	091b      	lsrs	r3, r3, #4
 8007c86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c8a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007c8c:	4b82      	ldr	r3, [pc, #520]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007c96:	4b80      	ldr	r3, [pc, #512]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9a:	08db      	lsrs	r3, r3, #3
 8007c9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	fb02 f303 	mul.w	r3, r2, r3
 8007ca6:	ee07 3a90 	vmov	s15, r3
 8007caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 80e1 	beq.w	8007e7c <HAL_RCC_GetSysClockFreq+0x2b8>
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	f000 8083 	beq.w	8007dc8 <HAL_RCC_GetSysClockFreq+0x204>
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	f200 80a1 	bhi.w	8007e0c <HAL_RCC_GetSysClockFreq+0x248>
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <HAL_RCC_GetSysClockFreq+0x114>
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d056      	beq.n	8007d84 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007cd6:	e099      	b.n	8007e0c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cd8:	4b6f      	ldr	r3, [pc, #444]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0320 	and.w	r3, r3, #32
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d02d      	beq.n	8007d40 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ce4:	4b6c      	ldr	r3, [pc, #432]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	08db      	lsrs	r3, r3, #3
 8007cea:	f003 0303 	and.w	r3, r3, #3
 8007cee:	4a6b      	ldr	r2, [pc, #428]	; (8007e9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	ee07 3a90 	vmov	s15, r3
 8007cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d0e:	4b62      	ldr	r3, [pc, #392]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d16:	ee07 3a90 	vmov	s15, r3
 8007d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d22:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007ea8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007d3e:	e087      	b.n	8007e50 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	ee07 3a90 	vmov	s15, r3
 8007d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007eac <HAL_RCC_GetSysClockFreq+0x2e8>
 8007d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d52:	4b51      	ldr	r3, [pc, #324]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d5a:	ee07 3a90 	vmov	s15, r3
 8007d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d62:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d66:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007ea8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d82:	e065      	b.n	8007e50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	ee07 3a90 	vmov	s15, r3
 8007d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d8e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007eb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d96:	4b40      	ldr	r3, [pc, #256]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d9e:	ee07 3a90 	vmov	s15, r3
 8007da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007da6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007daa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007ea8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dc6:	e043      	b.n	8007e50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	ee07 3a90 	vmov	s15, r3
 8007dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007eb4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dda:	4b2f      	ldr	r3, [pc, #188]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007de2:	ee07 3a90 	vmov	s15, r3
 8007de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dea:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007ea8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e0a:	e021      	b.n	8007e50 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	ee07 3a90 	vmov	s15, r3
 8007e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e16:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007eb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e1e:	4b1e      	ldr	r3, [pc, #120]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e26:	ee07 3a90 	vmov	s15, r3
 8007e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e32:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007ea8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e4e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007e50:	4b11      	ldr	r3, [pc, #68]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e54:	0a5b      	lsrs	r3, r3, #9
 8007e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	ee07 3a90 	vmov	s15, r3
 8007e64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e68:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e74:	ee17 3a90 	vmov	r3, s15
 8007e78:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007e7a:	e005      	b.n	8007e88 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	61bb      	str	r3, [r7, #24]
    break;
 8007e80:	e002      	b.n	8007e88 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007e82:	4b07      	ldr	r3, [pc, #28]	; (8007ea0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e84:	61bb      	str	r3, [r7, #24]
    break;
 8007e86:	bf00      	nop
  }

  return sysclockfreq;
 8007e88:	69bb      	ldr	r3, [r7, #24]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3724      	adds	r7, #36	; 0x24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	58024400 	.word	0x58024400
 8007e9c:	03d09000 	.word	0x03d09000
 8007ea0:	003d0900 	.word	0x003d0900
 8007ea4:	007a1200 	.word	0x007a1200
 8007ea8:	46000000 	.word	0x46000000
 8007eac:	4c742400 	.word	0x4c742400
 8007eb0:	4a742400 	.word	0x4a742400
 8007eb4:	4af42400 	.word	0x4af42400

08007eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007ebe:	f7ff fe81 	bl	8007bc4 <HAL_RCC_GetSysClockFreq>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	4b10      	ldr	r3, [pc, #64]	; (8007f08 <HAL_RCC_GetHCLKFreq+0x50>)
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	0a1b      	lsrs	r3, r3, #8
 8007eca:	f003 030f 	and.w	r3, r3, #15
 8007ece:	490f      	ldr	r1, [pc, #60]	; (8007f0c <HAL_RCC_GetHCLKFreq+0x54>)
 8007ed0:	5ccb      	ldrb	r3, [r1, r3]
 8007ed2:	f003 031f 	and.w	r3, r3, #31
 8007ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eda:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007edc:	4b0a      	ldr	r3, [pc, #40]	; (8007f08 <HAL_RCC_GetHCLKFreq+0x50>)
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	f003 030f 	and.w	r3, r3, #15
 8007ee4:	4a09      	ldr	r2, [pc, #36]	; (8007f0c <HAL_RCC_GetHCLKFreq+0x54>)
 8007ee6:	5cd3      	ldrb	r3, [r2, r3]
 8007ee8:	f003 031f 	and.w	r3, r3, #31
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef2:	4a07      	ldr	r2, [pc, #28]	; (8007f10 <HAL_RCC_GetHCLKFreq+0x58>)
 8007ef4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ef6:	4a07      	ldr	r2, [pc, #28]	; (8007f14 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007efc:	4b04      	ldr	r3, [pc, #16]	; (8007f10 <HAL_RCC_GetHCLKFreq+0x58>)
 8007efe:	681b      	ldr	r3, [r3, #0]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	58024400 	.word	0x58024400
 8007f0c:	0800d5f4 	.word	0x0800d5f4
 8007f10:	20000028 	.word	0x20000028
 8007f14:	20000024 	.word	0x20000024

08007f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007f1c:	f7ff ffcc 	bl	8007eb8 <HAL_RCC_GetHCLKFreq>
 8007f20:	4602      	mov	r2, r0
 8007f22:	4b06      	ldr	r3, [pc, #24]	; (8007f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	091b      	lsrs	r3, r3, #4
 8007f28:	f003 0307 	and.w	r3, r3, #7
 8007f2c:	4904      	ldr	r1, [pc, #16]	; (8007f40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f2e:	5ccb      	ldrb	r3, [r1, r3]
 8007f30:	f003 031f 	and.w	r3, r3, #31
 8007f34:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	58024400 	.word	0x58024400
 8007f40:	0800d5f4 	.word	0x0800d5f4

08007f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007f48:	f7ff ffb6 	bl	8007eb8 <HAL_RCC_GetHCLKFreq>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	4b06      	ldr	r3, [pc, #24]	; (8007f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f50:	69db      	ldr	r3, [r3, #28]
 8007f52:	0a1b      	lsrs	r3, r3, #8
 8007f54:	f003 0307 	and.w	r3, r3, #7
 8007f58:	4904      	ldr	r1, [pc, #16]	; (8007f6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f5a:	5ccb      	ldrb	r3, [r1, r3]
 8007f5c:	f003 031f 	and.w	r3, r3, #31
 8007f60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	58024400 	.word	0x58024400
 8007f6c:	0800d5f4 	.word	0x0800d5f4

08007f70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f78:	2300      	movs	r3, #0
 8007f7a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d03f      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f94:	d02a      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007f96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f9a:	d824      	bhi.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007f9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fa0:	d018      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007fa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fa6:	d81e      	bhi.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d003      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fb0:	d007      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007fb2:	e018      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fb4:	4bab      	ldr	r3, [pc, #684]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb8:	4aaa      	ldr	r2, [pc, #680]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007fc0:	e015      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	2102      	movs	r1, #2
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f001 fff3 	bl	8009fb4 <RCCEx_PLL2_Config>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007fd2:	e00c      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3324      	adds	r3, #36	; 0x24
 8007fd8:	2102      	movs	r1, #2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f002 f89c 	bl	800a118 <RCCEx_PLL3_Config>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007fe4:	e003      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8007fea:	e000      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d109      	bne.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007ff4:	4b9b      	ldr	r3, [pc, #620]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008000:	4998      	ldr	r1, [pc, #608]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008002:	4313      	orrs	r3, r2
 8008004:	650b      	str	r3, [r1, #80]	; 0x50
 8008006:	e001      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008008:	7dfb      	ldrb	r3, [r7, #23]
 800800a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008014:	2b00      	cmp	r3, #0
 8008016:	d03d      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800801c:	2b04      	cmp	r3, #4
 800801e:	d826      	bhi.n	800806e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008020:	a201      	add	r2, pc, #4	; (adr r2, 8008028 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008026:	bf00      	nop
 8008028:	0800803d 	.word	0x0800803d
 800802c:	0800804b 	.word	0x0800804b
 8008030:	0800805d 	.word	0x0800805d
 8008034:	08008075 	.word	0x08008075
 8008038:	08008075 	.word	0x08008075
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800803c:	4b89      	ldr	r3, [pc, #548]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800803e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008040:	4a88      	ldr	r2, [pc, #544]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008046:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008048:	e015      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	3304      	adds	r3, #4
 800804e:	2100      	movs	r1, #0
 8008050:	4618      	mov	r0, r3
 8008052:	f001 ffaf 	bl	8009fb4 <RCCEx_PLL2_Config>
 8008056:	4603      	mov	r3, r0
 8008058:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800805a:	e00c      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	3324      	adds	r3, #36	; 0x24
 8008060:	2100      	movs	r1, #0
 8008062:	4618      	mov	r0, r3
 8008064:	f002 f858 	bl	800a118 <RCCEx_PLL3_Config>
 8008068:	4603      	mov	r3, r0
 800806a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800806c:	e003      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	75fb      	strb	r3, [r7, #23]
      break;
 8008072:	e000      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008076:	7dfb      	ldrb	r3, [r7, #23]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d109      	bne.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800807c:	4b79      	ldr	r3, [pc, #484]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800807e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008080:	f023 0207 	bic.w	r2, r3, #7
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008088:	4976      	ldr	r1, [pc, #472]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800808a:	4313      	orrs	r3, r2
 800808c:	650b      	str	r3, [r1, #80]	; 0x50
 800808e:	e001      	b.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008090:	7dfb      	ldrb	r3, [r7, #23]
 8008092:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800809c:	2b00      	cmp	r3, #0
 800809e:	d042      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080a8:	d02b      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80080aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080ae:	d825      	bhi.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80080b0:	2bc0      	cmp	r3, #192	; 0xc0
 80080b2:	d028      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80080b4:	2bc0      	cmp	r3, #192	; 0xc0
 80080b6:	d821      	bhi.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80080b8:	2b80      	cmp	r3, #128	; 0x80
 80080ba:	d016      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80080bc:	2b80      	cmp	r3, #128	; 0x80
 80080be:	d81d      	bhi.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d002      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80080c4:	2b40      	cmp	r3, #64	; 0x40
 80080c6:	d007      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80080c8:	e018      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080ca:	4b66      	ldr	r3, [pc, #408]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ce:	4a65      	ldr	r2, [pc, #404]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80080d6:	e017      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3304      	adds	r3, #4
 80080dc:	2100      	movs	r1, #0
 80080de:	4618      	mov	r0, r3
 80080e0:	f001 ff68 	bl	8009fb4 <RCCEx_PLL2_Config>
 80080e4:	4603      	mov	r3, r0
 80080e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80080e8:	e00e      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3324      	adds	r3, #36	; 0x24
 80080ee:	2100      	movs	r1, #0
 80080f0:	4618      	mov	r0, r3
 80080f2:	f002 f811 	bl	800a118 <RCCEx_PLL3_Config>
 80080f6:	4603      	mov	r3, r0
 80080f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80080fa:	e005      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008100:	e002      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008102:	bf00      	nop
 8008104:	e000      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008108:	7dfb      	ldrb	r3, [r7, #23]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d109      	bne.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800810e:	4b55      	ldr	r3, [pc, #340]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008112:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800811a:	4952      	ldr	r1, [pc, #328]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800811c:	4313      	orrs	r3, r2
 800811e:	650b      	str	r3, [r1, #80]	; 0x50
 8008120:	e001      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008122:	7dfb      	ldrb	r3, [r7, #23]
 8008124:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800812e:	2b00      	cmp	r3, #0
 8008130:	d049      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008138:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800813c:	d030      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800813e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008142:	d82a      	bhi.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008144:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008148:	d02c      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800814a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800814e:	d824      	bhi.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008154:	d018      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800815a:	d81e      	bhi.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800815c:	2b00      	cmp	r3, #0
 800815e:	d003      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008160:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008164:	d007      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008166:	e018      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008168:	4b3e      	ldr	r3, [pc, #248]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800816a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816c:	4a3d      	ldr	r2, [pc, #244]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800816e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008172:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008174:	e017      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	3304      	adds	r3, #4
 800817a:	2100      	movs	r1, #0
 800817c:	4618      	mov	r0, r3
 800817e:	f001 ff19 	bl	8009fb4 <RCCEx_PLL2_Config>
 8008182:	4603      	mov	r3, r0
 8008184:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008186:	e00e      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3324      	adds	r3, #36	; 0x24
 800818c:	2100      	movs	r1, #0
 800818e:	4618      	mov	r0, r3
 8008190:	f001 ffc2 	bl	800a118 <RCCEx_PLL3_Config>
 8008194:	4603      	mov	r3, r0
 8008196:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008198:	e005      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	75fb      	strb	r3, [r7, #23]
      break;
 800819e:	e002      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80081a0:	bf00      	nop
 80081a2:	e000      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80081a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081a6:	7dfb      	ldrb	r3, [r7, #23]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10a      	bne.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80081ac:	4b2d      	ldr	r3, [pc, #180]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80081ba:	492a      	ldr	r1, [pc, #168]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081bc:	4313      	orrs	r3, r2
 80081be:	658b      	str	r3, [r1, #88]	; 0x58
 80081c0:	e001      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
 80081c4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d04c      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80081d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081dc:	d030      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80081de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081e2:	d82a      	bhi.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80081e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80081e8:	d02c      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80081ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80081ee:	d824      	bhi.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80081f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081f4:	d018      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80081f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081fa:	d81e      	bhi.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008204:	d007      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008206:	e018      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008208:	4b16      	ldr	r3, [pc, #88]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	4a15      	ldr	r2, [pc, #84]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800820e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008212:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008214:	e017      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	3304      	adds	r3, #4
 800821a:	2100      	movs	r1, #0
 800821c:	4618      	mov	r0, r3
 800821e:	f001 fec9 	bl	8009fb4 <RCCEx_PLL2_Config>
 8008222:	4603      	mov	r3, r0
 8008224:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008226:	e00e      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	3324      	adds	r3, #36	; 0x24
 800822c:	2100      	movs	r1, #0
 800822e:	4618      	mov	r0, r3
 8008230:	f001 ff72 	bl	800a118 <RCCEx_PLL3_Config>
 8008234:	4603      	mov	r3, r0
 8008236:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008238:	e005      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	75fb      	strb	r3, [r7, #23]
      break;
 800823e:	e002      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008240:	bf00      	nop
 8008242:	e000      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008246:	7dfb      	ldrb	r3, [r7, #23]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10d      	bne.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800824c:	4b05      	ldr	r3, [pc, #20]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800824e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008250:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800825a:	4902      	ldr	r1, [pc, #8]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800825c:	4313      	orrs	r3, r2
 800825e:	658b      	str	r3, [r1, #88]	; 0x58
 8008260:	e004      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008262:	bf00      	nop
 8008264:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008268:	7dfb      	ldrb	r3, [r7, #23]
 800826a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d032      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800827c:	2b30      	cmp	r3, #48	; 0x30
 800827e:	d01c      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008280:	2b30      	cmp	r3, #48	; 0x30
 8008282:	d817      	bhi.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008284:	2b20      	cmp	r3, #32
 8008286:	d00c      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008288:	2b20      	cmp	r3, #32
 800828a:	d813      	bhi.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800828c:	2b00      	cmp	r3, #0
 800828e:	d016      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008290:	2b10      	cmp	r3, #16
 8008292:	d10f      	bne.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008294:	4baf      	ldr	r3, [pc, #700]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008298:	4aae      	ldr	r2, [pc, #696]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800829a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800829e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80082a0:	e00e      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3304      	adds	r3, #4
 80082a6:	2102      	movs	r1, #2
 80082a8:	4618      	mov	r0, r3
 80082aa:	f001 fe83 	bl	8009fb4 <RCCEx_PLL2_Config>
 80082ae:	4603      	mov	r3, r0
 80082b0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80082b2:	e005      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	75fb      	strb	r3, [r7, #23]
      break;
 80082b8:	e002      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80082ba:	bf00      	nop
 80082bc:	e000      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80082be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082c0:	7dfb      	ldrb	r3, [r7, #23]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d109      	bne.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80082c6:	4ba3      	ldr	r3, [pc, #652]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082d2:	49a0      	ldr	r1, [pc, #640]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082d4:	4313      	orrs	r3, r2
 80082d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80082d8:	e001      	b.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d047      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082f2:	d030      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80082f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082f8:	d82a      	bhi.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80082fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082fe:	d02c      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008300:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008304:	d824      	bhi.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800830a:	d018      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800830c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008310:	d81e      	bhi.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800831a:	d007      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800831c:	e018      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800831e:	4b8d      	ldr	r3, [pc, #564]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008322:	4a8c      	ldr	r2, [pc, #560]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008328:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800832a:	e017      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	3304      	adds	r3, #4
 8008330:	2100      	movs	r1, #0
 8008332:	4618      	mov	r0, r3
 8008334:	f001 fe3e 	bl	8009fb4 <RCCEx_PLL2_Config>
 8008338:	4603      	mov	r3, r0
 800833a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800833c:	e00e      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	3324      	adds	r3, #36	; 0x24
 8008342:	2100      	movs	r1, #0
 8008344:	4618      	mov	r0, r3
 8008346:	f001 fee7 	bl	800a118 <RCCEx_PLL3_Config>
 800834a:	4603      	mov	r3, r0
 800834c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800834e:	e005      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	75fb      	strb	r3, [r7, #23]
      break;
 8008354:	e002      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008356:	bf00      	nop
 8008358:	e000      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800835a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800835c:	7dfb      	ldrb	r3, [r7, #23]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d109      	bne.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008362:	4b7c      	ldr	r3, [pc, #496]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008366:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800836e:	4979      	ldr	r1, [pc, #484]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008370:	4313      	orrs	r3, r2
 8008372:	650b      	str	r3, [r1, #80]	; 0x50
 8008374:	e001      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008376:	7dfb      	ldrb	r3, [r7, #23]
 8008378:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d049      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800838a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800838e:	d02e      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008394:	d828      	bhi.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008396:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800839a:	d02a      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800839c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083a0:	d822      	bhi.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80083a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80083a6:	d026      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80083a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80083ac:	d81c      	bhi.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80083ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083b2:	d010      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80083b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083b8:	d816      	bhi.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d01d      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80083be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083c2:	d111      	bne.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3304      	adds	r3, #4
 80083c8:	2101      	movs	r1, #1
 80083ca:	4618      	mov	r0, r3
 80083cc:	f001 fdf2 	bl	8009fb4 <RCCEx_PLL2_Config>
 80083d0:	4603      	mov	r3, r0
 80083d2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80083d4:	e012      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	3324      	adds	r3, #36	; 0x24
 80083da:	2101      	movs	r1, #1
 80083dc:	4618      	mov	r0, r3
 80083de:	f001 fe9b 	bl	800a118 <RCCEx_PLL3_Config>
 80083e2:	4603      	mov	r3, r0
 80083e4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80083e6:	e009      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	75fb      	strb	r3, [r7, #23]
      break;
 80083ec:	e006      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80083ee:	bf00      	nop
 80083f0:	e004      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80083f2:	bf00      	nop
 80083f4:	e002      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80083f6:	bf00      	nop
 80083f8:	e000      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80083fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d109      	bne.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008402:	4b54      	ldr	r3, [pc, #336]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008406:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800840e:	4951      	ldr	r1, [pc, #324]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008410:	4313      	orrs	r3, r2
 8008412:	650b      	str	r3, [r1, #80]	; 0x50
 8008414:	e001      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008416:	7dfb      	ldrb	r3, [r7, #23]
 8008418:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d04b      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800842c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008430:	d02e      	beq.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8008432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008436:	d828      	bhi.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800843c:	d02a      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800843e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008442:	d822      	bhi.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008444:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008448:	d026      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800844a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800844e:	d81c      	bhi.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008454:	d010      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800845a:	d816      	bhi.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800845c:	2b00      	cmp	r3, #0
 800845e:	d01d      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008460:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008464:	d111      	bne.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	3304      	adds	r3, #4
 800846a:	2101      	movs	r1, #1
 800846c:	4618      	mov	r0, r3
 800846e:	f001 fda1 	bl	8009fb4 <RCCEx_PLL2_Config>
 8008472:	4603      	mov	r3, r0
 8008474:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008476:	e012      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	3324      	adds	r3, #36	; 0x24
 800847c:	2101      	movs	r1, #1
 800847e:	4618      	mov	r0, r3
 8008480:	f001 fe4a 	bl	800a118 <RCCEx_PLL3_Config>
 8008484:	4603      	mov	r3, r0
 8008486:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008488:	e009      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	75fb      	strb	r3, [r7, #23]
      break;
 800848e:	e006      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008490:	bf00      	nop
 8008492:	e004      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008494:	bf00      	nop
 8008496:	e002      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008498:	bf00      	nop
 800849a:	e000      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800849c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800849e:	7dfb      	ldrb	r3, [r7, #23]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10a      	bne.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80084a4:	4b2b      	ldr	r3, [pc, #172]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80084a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80084b2:	4928      	ldr	r1, [pc, #160]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	658b      	str	r3, [r1, #88]	; 0x58
 80084b8:	e001      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
 80084bc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d02f      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084d2:	d00e      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80084d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084d8:	d814      	bhi.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d015      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80084de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084e2:	d10f      	bne.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084e4:	4b1b      	ldr	r3, [pc, #108]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80084e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e8:	4a1a      	ldr	r2, [pc, #104]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80084ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80084f0:	e00c      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3304      	adds	r3, #4
 80084f6:	2101      	movs	r1, #1
 80084f8:	4618      	mov	r0, r3
 80084fa:	f001 fd5b 	bl	8009fb4 <RCCEx_PLL2_Config>
 80084fe:	4603      	mov	r3, r0
 8008500:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008502:	e003      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	75fb      	strb	r3, [r7, #23]
      break;
 8008508:	e000      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800850a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800850c:	7dfb      	ldrb	r3, [r7, #23]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d109      	bne.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008512:	4b10      	ldr	r3, [pc, #64]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008516:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800851e:	490d      	ldr	r1, [pc, #52]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008520:	4313      	orrs	r3, r2
 8008522:	650b      	str	r3, [r1, #80]	; 0x50
 8008524:	e001      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008526:	7dfb      	ldrb	r3, [r7, #23]
 8008528:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d033      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800853a:	2b03      	cmp	r3, #3
 800853c:	d81c      	bhi.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800853e:	a201      	add	r2, pc, #4	; (adr r2, 8008544 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8008540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008544:	0800857f 	.word	0x0800857f
 8008548:	08008559 	.word	0x08008559
 800854c:	08008567 	.word	0x08008567
 8008550:	0800857f 	.word	0x0800857f
 8008554:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008558:	4bb8      	ldr	r3, [pc, #736]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800855a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855c:	4ab7      	ldr	r2, [pc, #732]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800855e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008562:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008564:	e00c      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	3304      	adds	r3, #4
 800856a:	2102      	movs	r1, #2
 800856c:	4618      	mov	r0, r3
 800856e:	f001 fd21 	bl	8009fb4 <RCCEx_PLL2_Config>
 8008572:	4603      	mov	r3, r0
 8008574:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008576:	e003      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	75fb      	strb	r3, [r7, #23]
      break;
 800857c:	e000      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800857e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008580:	7dfb      	ldrb	r3, [r7, #23]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d109      	bne.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008586:	4bad      	ldr	r3, [pc, #692]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800858a:	f023 0203 	bic.w	r2, r3, #3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008592:	49aa      	ldr	r1, [pc, #680]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008594:	4313      	orrs	r3, r2
 8008596:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008598:	e001      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800859a:	7dfb      	ldrb	r3, [r7, #23]
 800859c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 8086 	beq.w	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085ac:	4ba4      	ldr	r3, [pc, #656]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4aa3      	ldr	r2, [pc, #652]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80085b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085b8:	f7fa fc46 	bl	8002e48 <HAL_GetTick>
 80085bc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085be:	e009      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085c0:	f7fa fc42 	bl	8002e48 <HAL_GetTick>
 80085c4:	4602      	mov	r2, r0
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	2b64      	cmp	r3, #100	; 0x64
 80085cc:	d902      	bls.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	75fb      	strb	r3, [r7, #23]
        break;
 80085d2:	e005      	b.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085d4:	4b9a      	ldr	r3, [pc, #616]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d0ef      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80085e0:	7dfb      	ldrb	r3, [r7, #23]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d166      	bne.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80085e6:	4b95      	ldr	r3, [pc, #596]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80085e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085f0:	4053      	eors	r3, r2
 80085f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d013      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085fa:	4b90      	ldr	r3, [pc, #576]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80085fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008602:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008604:	4b8d      	ldr	r3, [pc, #564]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008608:	4a8c      	ldr	r2, [pc, #560]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800860a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800860e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008610:	4b8a      	ldr	r3, [pc, #552]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008614:	4a89      	ldr	r2, [pc, #548]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800861a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800861c:	4a87      	ldr	r2, [pc, #540]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800862c:	d115      	bne.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800862e:	f7fa fc0b 	bl	8002e48 <HAL_GetTick>
 8008632:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008634:	e00b      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008636:	f7fa fc07 	bl	8002e48 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	f241 3288 	movw	r2, #5000	; 0x1388
 8008644:	4293      	cmp	r3, r2
 8008646:	d902      	bls.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008648:	2303      	movs	r3, #3
 800864a:	75fb      	strb	r3, [r7, #23]
            break;
 800864c:	e005      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800864e:	4b7b      	ldr	r3, [pc, #492]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008652:	f003 0302 	and.w	r3, r3, #2
 8008656:	2b00      	cmp	r3, #0
 8008658:	d0ed      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800865a:	7dfb      	ldrb	r3, [r7, #23]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d126      	bne.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800866a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800866e:	d10d      	bne.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008670:	4b72      	ldr	r3, [pc, #456]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800867e:	0919      	lsrs	r1, r3, #4
 8008680:	4b70      	ldr	r3, [pc, #448]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008682:	400b      	ands	r3, r1
 8008684:	496d      	ldr	r1, [pc, #436]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008686:	4313      	orrs	r3, r2
 8008688:	610b      	str	r3, [r1, #16]
 800868a:	e005      	b.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800868c:	4b6b      	ldr	r3, [pc, #428]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	4a6a      	ldr	r2, [pc, #424]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008692:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008696:	6113      	str	r3, [r2, #16]
 8008698:	4b68      	ldr	r3, [pc, #416]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800869a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80086a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086a6:	4965      	ldr	r1, [pc, #404]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086a8:	4313      	orrs	r3, r2
 80086aa:	670b      	str	r3, [r1, #112]	; 0x70
 80086ac:	e004      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80086ae:	7dfb      	ldrb	r3, [r7, #23]
 80086b0:	75bb      	strb	r3, [r7, #22]
 80086b2:	e001      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086b4:	7dfb      	ldrb	r3, [r7, #23]
 80086b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 0301 	and.w	r3, r3, #1
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d07e      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086c8:	2b28      	cmp	r3, #40	; 0x28
 80086ca:	d867      	bhi.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80086cc:	a201      	add	r2, pc, #4	; (adr r2, 80086d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80086ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d2:	bf00      	nop
 80086d4:	080087a3 	.word	0x080087a3
 80086d8:	0800879d 	.word	0x0800879d
 80086dc:	0800879d 	.word	0x0800879d
 80086e0:	0800879d 	.word	0x0800879d
 80086e4:	0800879d 	.word	0x0800879d
 80086e8:	0800879d 	.word	0x0800879d
 80086ec:	0800879d 	.word	0x0800879d
 80086f0:	0800879d 	.word	0x0800879d
 80086f4:	08008779 	.word	0x08008779
 80086f8:	0800879d 	.word	0x0800879d
 80086fc:	0800879d 	.word	0x0800879d
 8008700:	0800879d 	.word	0x0800879d
 8008704:	0800879d 	.word	0x0800879d
 8008708:	0800879d 	.word	0x0800879d
 800870c:	0800879d 	.word	0x0800879d
 8008710:	0800879d 	.word	0x0800879d
 8008714:	0800878b 	.word	0x0800878b
 8008718:	0800879d 	.word	0x0800879d
 800871c:	0800879d 	.word	0x0800879d
 8008720:	0800879d 	.word	0x0800879d
 8008724:	0800879d 	.word	0x0800879d
 8008728:	0800879d 	.word	0x0800879d
 800872c:	0800879d 	.word	0x0800879d
 8008730:	0800879d 	.word	0x0800879d
 8008734:	080087a3 	.word	0x080087a3
 8008738:	0800879d 	.word	0x0800879d
 800873c:	0800879d 	.word	0x0800879d
 8008740:	0800879d 	.word	0x0800879d
 8008744:	0800879d 	.word	0x0800879d
 8008748:	0800879d 	.word	0x0800879d
 800874c:	0800879d 	.word	0x0800879d
 8008750:	0800879d 	.word	0x0800879d
 8008754:	080087a3 	.word	0x080087a3
 8008758:	0800879d 	.word	0x0800879d
 800875c:	0800879d 	.word	0x0800879d
 8008760:	0800879d 	.word	0x0800879d
 8008764:	0800879d 	.word	0x0800879d
 8008768:	0800879d 	.word	0x0800879d
 800876c:	0800879d 	.word	0x0800879d
 8008770:	0800879d 	.word	0x0800879d
 8008774:	080087a3 	.word	0x080087a3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3304      	adds	r3, #4
 800877c:	2101      	movs	r1, #1
 800877e:	4618      	mov	r0, r3
 8008780:	f001 fc18 	bl	8009fb4 <RCCEx_PLL2_Config>
 8008784:	4603      	mov	r3, r0
 8008786:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008788:	e00c      	b.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	3324      	adds	r3, #36	; 0x24
 800878e:	2101      	movs	r1, #1
 8008790:	4618      	mov	r0, r3
 8008792:	f001 fcc1 	bl	800a118 <RCCEx_PLL3_Config>
 8008796:	4603      	mov	r3, r0
 8008798:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800879a:	e003      	b.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	75fb      	strb	r3, [r7, #23]
      break;
 80087a0:	e000      	b.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80087a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087a4:	7dfb      	ldrb	r3, [r7, #23]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d109      	bne.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80087aa:	4b24      	ldr	r3, [pc, #144]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087b6:	4921      	ldr	r1, [pc, #132]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	654b      	str	r3, [r1, #84]	; 0x54
 80087bc:	e001      	b.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087be:	7dfb      	ldrb	r3, [r7, #23]
 80087c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0302 	and.w	r3, r3, #2
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d03e      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087d2:	2b05      	cmp	r3, #5
 80087d4:	d820      	bhi.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80087d6:	a201      	add	r2, pc, #4	; (adr r2, 80087dc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80087d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087dc:	0800881f 	.word	0x0800881f
 80087e0:	080087f5 	.word	0x080087f5
 80087e4:	08008807 	.word	0x08008807
 80087e8:	0800881f 	.word	0x0800881f
 80087ec:	0800881f 	.word	0x0800881f
 80087f0:	0800881f 	.word	0x0800881f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	3304      	adds	r3, #4
 80087f8:	2101      	movs	r1, #1
 80087fa:	4618      	mov	r0, r3
 80087fc:	f001 fbda 	bl	8009fb4 <RCCEx_PLL2_Config>
 8008800:	4603      	mov	r3, r0
 8008802:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008804:	e00c      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	3324      	adds	r3, #36	; 0x24
 800880a:	2101      	movs	r1, #1
 800880c:	4618      	mov	r0, r3
 800880e:	f001 fc83 	bl	800a118 <RCCEx_PLL3_Config>
 8008812:	4603      	mov	r3, r0
 8008814:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008816:	e003      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	75fb      	strb	r3, [r7, #23]
      break;
 800881c:	e000      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800881e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008820:	7dfb      	ldrb	r3, [r7, #23]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d110      	bne.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008826:	4b05      	ldr	r3, [pc, #20]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800882a:	f023 0207 	bic.w	r2, r3, #7
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008832:	4902      	ldr	r1, [pc, #8]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008834:	4313      	orrs	r3, r2
 8008836:	654b      	str	r3, [r1, #84]	; 0x54
 8008838:	e008      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800883a:	bf00      	nop
 800883c:	58024400 	.word	0x58024400
 8008840:	58024800 	.word	0x58024800
 8008844:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008848:	7dfb      	ldrb	r3, [r7, #23]
 800884a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0304 	and.w	r3, r3, #4
 8008854:	2b00      	cmp	r3, #0
 8008856:	d039      	beq.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800885e:	2b05      	cmp	r3, #5
 8008860:	d820      	bhi.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008862:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008868:	080088ab 	.word	0x080088ab
 800886c:	08008881 	.word	0x08008881
 8008870:	08008893 	.word	0x08008893
 8008874:	080088ab 	.word	0x080088ab
 8008878:	080088ab 	.word	0x080088ab
 800887c:	080088ab 	.word	0x080088ab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	3304      	adds	r3, #4
 8008884:	2101      	movs	r1, #1
 8008886:	4618      	mov	r0, r3
 8008888:	f001 fb94 	bl	8009fb4 <RCCEx_PLL2_Config>
 800888c:	4603      	mov	r3, r0
 800888e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008890:	e00c      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	3324      	adds	r3, #36	; 0x24
 8008896:	2101      	movs	r1, #1
 8008898:	4618      	mov	r0, r3
 800889a:	f001 fc3d 	bl	800a118 <RCCEx_PLL3_Config>
 800889e:	4603      	mov	r3, r0
 80088a0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80088a2:	e003      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	75fb      	strb	r3, [r7, #23]
      break;
 80088a8:	e000      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80088aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088ac:	7dfb      	ldrb	r3, [r7, #23]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10a      	bne.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80088b2:	4bb7      	ldr	r3, [pc, #732]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088b6:	f023 0207 	bic.w	r2, r3, #7
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088c0:	49b3      	ldr	r1, [pc, #716]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	658b      	str	r3, [r1, #88]	; 0x58
 80088c6:	e001      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c8:	7dfb      	ldrb	r3, [r7, #23]
 80088ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0320 	and.w	r3, r3, #32
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d04b      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088e2:	d02e      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80088e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088e8:	d828      	bhi.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80088ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ee:	d02a      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80088f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088f4:	d822      	bhi.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80088f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088fa:	d026      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80088fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008900:	d81c      	bhi.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008906:	d010      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800890c:	d816      	bhi.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800890e:	2b00      	cmp	r3, #0
 8008910:	d01d      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008912:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008916:	d111      	bne.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3304      	adds	r3, #4
 800891c:	2100      	movs	r1, #0
 800891e:	4618      	mov	r0, r3
 8008920:	f001 fb48 	bl	8009fb4 <RCCEx_PLL2_Config>
 8008924:	4603      	mov	r3, r0
 8008926:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008928:	e012      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	3324      	adds	r3, #36	; 0x24
 800892e:	2102      	movs	r1, #2
 8008930:	4618      	mov	r0, r3
 8008932:	f001 fbf1 	bl	800a118 <RCCEx_PLL3_Config>
 8008936:	4603      	mov	r3, r0
 8008938:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800893a:	e009      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	75fb      	strb	r3, [r7, #23]
      break;
 8008940:	e006      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008942:	bf00      	nop
 8008944:	e004      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008946:	bf00      	nop
 8008948:	e002      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800894a:	bf00      	nop
 800894c:	e000      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800894e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008950:	7dfb      	ldrb	r3, [r7, #23]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10a      	bne.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008956:	4b8e      	ldr	r3, [pc, #568]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800895a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008964:	498a      	ldr	r1, [pc, #552]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008966:	4313      	orrs	r3, r2
 8008968:	654b      	str	r3, [r1, #84]	; 0x54
 800896a:	e001      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800896c:	7dfb      	ldrb	r3, [r7, #23]
 800896e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008978:	2b00      	cmp	r3, #0
 800897a:	d04b      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008982:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008986:	d02e      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008988:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800898c:	d828      	bhi.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800898e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008992:	d02a      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008998:	d822      	bhi.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800899a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800899e:	d026      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80089a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089a4:	d81c      	bhi.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80089a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089aa:	d010      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80089ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089b0:	d816      	bhi.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d01d      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80089b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089ba:	d111      	bne.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	3304      	adds	r3, #4
 80089c0:	2100      	movs	r1, #0
 80089c2:	4618      	mov	r0, r3
 80089c4:	f001 faf6 	bl	8009fb4 <RCCEx_PLL2_Config>
 80089c8:	4603      	mov	r3, r0
 80089ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80089cc:	e012      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	3324      	adds	r3, #36	; 0x24
 80089d2:	2102      	movs	r1, #2
 80089d4:	4618      	mov	r0, r3
 80089d6:	f001 fb9f 	bl	800a118 <RCCEx_PLL3_Config>
 80089da:	4603      	mov	r3, r0
 80089dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80089de:	e009      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	75fb      	strb	r3, [r7, #23]
      break;
 80089e4:	e006      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80089e6:	bf00      	nop
 80089e8:	e004      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80089ea:	bf00      	nop
 80089ec:	e002      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80089ee:	bf00      	nop
 80089f0:	e000      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80089f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10a      	bne.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80089fa:	4b65      	ldr	r3, [pc, #404]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80089fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a08:	4961      	ldr	r1, [pc, #388]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	658b      	str	r3, [r1, #88]	; 0x58
 8008a0e:	e001      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a10:	7dfb      	ldrb	r3, [r7, #23]
 8008a12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d04b      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a26:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008a2a:	d02e      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008a2c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008a30:	d828      	bhi.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a36:	d02a      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a3c:	d822      	bhi.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008a3e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008a42:	d026      	beq.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008a44:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008a48:	d81c      	bhi.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008a4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a4e:	d010      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008a50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a54:	d816      	bhi.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d01d      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a5e:	d111      	bne.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	3304      	adds	r3, #4
 8008a64:	2100      	movs	r1, #0
 8008a66:	4618      	mov	r0, r3
 8008a68:	f001 faa4 	bl	8009fb4 <RCCEx_PLL2_Config>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008a70:	e012      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	3324      	adds	r3, #36	; 0x24
 8008a76:	2102      	movs	r1, #2
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f001 fb4d 	bl	800a118 <RCCEx_PLL3_Config>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008a82:	e009      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	75fb      	strb	r3, [r7, #23]
      break;
 8008a88:	e006      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008a8a:	bf00      	nop
 8008a8c:	e004      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008a8e:	bf00      	nop
 8008a90:	e002      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008a92:	bf00      	nop
 8008a94:	e000      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008a96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a98:	7dfb      	ldrb	r3, [r7, #23]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10a      	bne.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008a9e:	4b3c      	ldr	r3, [pc, #240]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008aac:	4938      	ldr	r1, [pc, #224]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	658b      	str	r3, [r1, #88]	; 0x58
 8008ab2:	e001      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab4:	7dfb      	ldrb	r3, [r7, #23]
 8008ab6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0308 	and.w	r3, r3, #8
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d01a      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ace:	d10a      	bne.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	3324      	adds	r3, #36	; 0x24
 8008ad4:	2102      	movs	r1, #2
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f001 fb1e 	bl	800a118 <RCCEx_PLL3_Config>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d001      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008ae6:	4b2a      	ldr	r3, [pc, #168]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008af4:	4926      	ldr	r1, [pc, #152]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008af6:	4313      	orrs	r3, r2
 8008af8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0310 	and.w	r3, r3, #16
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d01a      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b10:	d10a      	bne.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	3324      	adds	r3, #36	; 0x24
 8008b16:	2102      	movs	r1, #2
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f001 fafd 	bl	800a118 <RCCEx_PLL3_Config>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008b28:	4b19      	ldr	r3, [pc, #100]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b36:	4916      	ldr	r1, [pc, #88]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d036      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008b4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b52:	d01f      	beq.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008b54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b58:	d817      	bhi.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d003      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b62:	d009      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008b64:	e011      	b.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	3304      	adds	r3, #4
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f001 fa21 	bl	8009fb4 <RCCEx_PLL2_Config>
 8008b72:	4603      	mov	r3, r0
 8008b74:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008b76:	e00e      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	3324      	adds	r3, #36	; 0x24
 8008b7c:	2102      	movs	r1, #2
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f001 faca 	bl	800a118 <RCCEx_PLL3_Config>
 8008b84:	4603      	mov	r3, r0
 8008b86:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008b88:	e005      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b8e:	e002      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008b90:	58024400 	.word	0x58024400
      break;
 8008b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10a      	bne.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b9c:	4b93      	ldr	r3, [pc, #588]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ba0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008baa:	4990      	ldr	r1, [pc, #576]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bac:	4313      	orrs	r3, r2
 8008bae:	658b      	str	r3, [r1, #88]	; 0x58
 8008bb0:	e001      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d033      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bcc:	d01c      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008bce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bd2:	d816      	bhi.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008bd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bd8:	d003      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008bda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bde:	d007      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008be0:	e00f      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008be2:	4b82      	ldr	r3, [pc, #520]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be6:	4a81      	ldr	r2, [pc, #516]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008bee:	e00c      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3324      	adds	r3, #36	; 0x24
 8008bf4:	2101      	movs	r1, #1
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f001 fa8e 	bl	800a118 <RCCEx_PLL3_Config>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008c00:	e003      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	75fb      	strb	r3, [r7, #23]
      break;
 8008c06:	e000      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c0a:	7dfb      	ldrb	r3, [r7, #23]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10a      	bne.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c10:	4b76      	ldr	r3, [pc, #472]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c1e:	4973      	ldr	r1, [pc, #460]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c20:	4313      	orrs	r3, r2
 8008c22:	654b      	str	r3, [r1, #84]	; 0x54
 8008c24:	e001      	b.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c26:	7dfb      	ldrb	r3, [r7, #23]
 8008c28:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d029      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c42:	d007      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008c44:	e00f      	b.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c46:	4b69      	ldr	r3, [pc, #420]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4a:	4a68      	ldr	r2, [pc, #416]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008c52:	e00b      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	3304      	adds	r3, #4
 8008c58:	2102      	movs	r1, #2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f001 f9aa 	bl	8009fb4 <RCCEx_PLL2_Config>
 8008c60:	4603      	mov	r3, r0
 8008c62:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008c64:	e002      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	75fb      	strb	r3, [r7, #23]
      break;
 8008c6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d109      	bne.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008c72:	4b5e      	ldr	r3, [pc, #376]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c7e:	495b      	ldr	r1, [pc, #364]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c80:	4313      	orrs	r3, r2
 8008c82:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008c84:	e001      	b.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c86:	7dfb      	ldrb	r3, [r7, #23]
 8008c88:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00a      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3324      	adds	r3, #36	; 0x24
 8008c9a:	2102      	movs	r1, #2
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f001 fa3b 	bl	800a118 <RCCEx_PLL3_Config>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d001      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d030      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008cc0:	d017      	beq.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008cc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008cc6:	d811      	bhi.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ccc:	d013      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008cce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cd2:	d80b      	bhi.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d010      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cdc:	d106      	bne.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cde:	4b43      	ldr	r3, [pc, #268]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce2:	4a42      	ldr	r2, [pc, #264]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008cea:	e007      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	75fb      	strb	r3, [r7, #23]
      break;
 8008cf0:	e004      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008cf2:	bf00      	nop
 8008cf4:	e002      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008cf6:	bf00      	nop
 8008cf8:	e000      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cfc:	7dfb      	ldrb	r3, [r7, #23]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d109      	bne.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d02:	4b3a      	ldr	r3, [pc, #232]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d0e:	4937      	ldr	r1, [pc, #220]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d10:	4313      	orrs	r3, r2
 8008d12:	654b      	str	r3, [r1, #84]	; 0x54
 8008d14:	e001      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d16:	7dfb      	ldrb	r3, [r7, #23]
 8008d18:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d008      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008d26:	4b31      	ldr	r3, [pc, #196]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d32:	492e      	ldr	r1, [pc, #184]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d009      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008d44:	4b29      	ldr	r3, [pc, #164]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008d52:	4926      	ldr	r1, [pc, #152]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d54:	4313      	orrs	r3, r2
 8008d56:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d008      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008d64:	4b21      	ldr	r3, [pc, #132]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d70:	491e      	ldr	r1, [pc, #120]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00d      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d82:	4b1a      	ldr	r3, [pc, #104]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	4a19      	ldr	r2, [pc, #100]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d8c:	6113      	str	r3, [r2, #16]
 8008d8e:	4b17      	ldr	r3, [pc, #92]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d90:	691a      	ldr	r2, [r3, #16]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008d98:	4914      	ldr	r1, [pc, #80]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	da08      	bge.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008da6:	4b11      	ldr	r3, [pc, #68]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008daa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db2:	490e      	ldr	r1, [pc, #56]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d009      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008dc4:	4b09      	ldr	r3, [pc, #36]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd2:	4906      	ldr	r1, [pc, #24]	; (8008dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008dd8:	7dbb      	ldrb	r3, [r7, #22]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	e000      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3718      	adds	r7, #24
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	58024400 	.word	0x58024400

08008df0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b090      	sub	sp, #64	; 0x40
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dfe:	f040 8095 	bne.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008e02:	4bae      	ldr	r3, [pc, #696]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e06:	f003 0307 	and.w	r3, r3, #7
 8008e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	f200 8088 	bhi.w	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008e14:	a201      	add	r2, pc, #4	; (adr r2, 8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1a:	bf00      	nop
 8008e1c:	08008e31 	.word	0x08008e31
 8008e20:	08008e59 	.word	0x08008e59
 8008e24:	08008e81 	.word	0x08008e81
 8008e28:	08008f1d 	.word	0x08008f1d
 8008e2c:	08008ea9 	.word	0x08008ea9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e30:	4ba2      	ldr	r3, [pc, #648]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e3c:	d108      	bne.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 ff64 	bl	8009d10 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e4c:	f000 bc95 	b.w	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e50:	2300      	movs	r3, #0
 8008e52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e54:	f000 bc91 	b.w	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e58:	4b98      	ldr	r3, [pc, #608]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e64:	d108      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e66:	f107 0318 	add.w	r3, r7, #24
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f000 fca8 	bl	80097c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e74:	f000 bc81 	b.w	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e7c:	f000 bc7d 	b.w	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e80:	4b8e      	ldr	r3, [pc, #568]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e8c:	d108      	bne.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e8e:	f107 030c 	add.w	r3, r7, #12
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 fde8 	bl	8009a68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e9c:	f000 bc6d 	b.w	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ea4:	f000 bc69 	b.w	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ea8:	4b84      	ldr	r3, [pc, #528]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008eb0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008eb2:	4b82      	ldr	r3, [pc, #520]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 0304 	and.w	r3, r3, #4
 8008eba:	2b04      	cmp	r3, #4
 8008ebc:	d10c      	bne.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d109      	bne.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ec4:	4b7d      	ldr	r3, [pc, #500]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	08db      	lsrs	r3, r3, #3
 8008eca:	f003 0303 	and.w	r3, r3, #3
 8008ece:	4a7c      	ldr	r2, [pc, #496]	; (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ed6:	e01f      	b.n	8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ed8:	4b78      	ldr	r3, [pc, #480]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ee4:	d106      	bne.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eec:	d102      	bne.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008eee:	4b75      	ldr	r3, [pc, #468]	; (80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ef2:	e011      	b.n	8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ef4:	4b71      	ldr	r3, [pc, #452]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008efc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f00:	d106      	bne.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f08:	d102      	bne.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008f0a:	4b6f      	ldr	r3, [pc, #444]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f0e:	e003      	b.n	8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008f10:	2300      	movs	r3, #0
 8008f12:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008f14:	f000 bc31 	b.w	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008f18:	f000 bc2f 	b.w	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008f1c:	4b6b      	ldr	r3, [pc, #428]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f20:	f000 bc2b 	b.w	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008f24:	2300      	movs	r3, #0
 8008f26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f28:	f000 bc27 	b.w	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f32:	f040 8095 	bne.w	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008f36:	4b61      	ldr	r3, [pc, #388]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f3a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008f3e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f46:	d04d      	beq.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f4e:	f200 8084 	bhi.w	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f54:	2bc0      	cmp	r3, #192	; 0xc0
 8008f56:	d07d      	beq.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5a:	2bc0      	cmp	r3, #192	; 0xc0
 8008f5c:	d87d      	bhi.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	2b80      	cmp	r3, #128	; 0x80
 8008f62:	d02d      	beq.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f66:	2b80      	cmp	r3, #128	; 0x80
 8008f68:	d877      	bhi.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d003      	beq.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f72:	2b40      	cmp	r3, #64	; 0x40
 8008f74:	d012      	beq.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008f76:	e070      	b.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f78:	4b50      	ldr	r3, [pc, #320]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f84:	d107      	bne.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 fec0 	bl	8009d10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f94:	e3f1      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f96:	2300      	movs	r3, #0
 8008f98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f9a:	e3ee      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f9c:	4b47      	ldr	r3, [pc, #284]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fa8:	d107      	bne.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008faa:	f107 0318 	add.w	r3, r7, #24
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 fc06 	bl	80097c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008fb8:	e3df      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fbe:	e3dc      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fc0:	4b3e      	ldr	r3, [pc, #248]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fcc:	d107      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fce:	f107 030c 	add.w	r3, r7, #12
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 fd48 	bl	8009a68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008fdc:	e3cd      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fe2:	e3ca      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008fe4:	4b35      	ldr	r3, [pc, #212]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fe8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008fec:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008fee:	4b33      	ldr	r3, [pc, #204]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 0304 	and.w	r3, r3, #4
 8008ff6:	2b04      	cmp	r3, #4
 8008ff8:	d10c      	bne.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d109      	bne.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009000:	4b2e      	ldr	r3, [pc, #184]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	08db      	lsrs	r3, r3, #3
 8009006:	f003 0303 	and.w	r3, r3, #3
 800900a:	4a2d      	ldr	r2, [pc, #180]	; (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800900c:	fa22 f303 	lsr.w	r3, r2, r3
 8009010:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009012:	e01e      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009014:	4b29      	ldr	r3, [pc, #164]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800901c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009020:	d106      	bne.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8009022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009024:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009028:	d102      	bne.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800902a:	4b26      	ldr	r3, [pc, #152]	; (80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800902c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800902e:	e010      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009030:	4b22      	ldr	r3, [pc, #136]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800903c:	d106      	bne.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800903e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009044:	d102      	bne.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009046:	4b20      	ldr	r3, [pc, #128]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800904a:	e002      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800904c:	2300      	movs	r3, #0
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009050:	e393      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009052:	e392      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009054:	4b1d      	ldr	r3, [pc, #116]	; (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009056:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009058:	e38f      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800905e:	e38c      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009066:	f040 80a7 	bne.w	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800906a:	4b14      	ldr	r3, [pc, #80]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800906c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800906e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009072:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009076:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800907a:	d05f      	beq.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800907c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009082:	f200 8096 	bhi.w	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009088:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800908c:	f000 808e 	beq.w	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8009090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009092:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009096:	f200 808c 	bhi.w	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090a0:	d03a      	beq.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80090a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090a8:	f200 8083 	bhi.w	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80090ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00e      	beq.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80090b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090b8:	d01c      	beq.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80090ba:	e07a      	b.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80090bc:	58024400 	.word	0x58024400
 80090c0:	03d09000 	.word	0x03d09000
 80090c4:	003d0900 	.word	0x003d0900
 80090c8:	007a1200 	.word	0x007a1200
 80090cc:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090d0:	4baa      	ldr	r3, [pc, #680]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090dc:	d107      	bne.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 fe14 	bl	8009d10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090ec:	e345      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090f2:	e342      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090f4:	4ba1      	ldr	r3, [pc, #644]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009100:	d107      	bne.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009102:	f107 0318 	add.w	r3, r7, #24
 8009106:	4618      	mov	r0, r3
 8009108:	f000 fb5a 	bl	80097c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009110:	e333      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009116:	e330      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009118:	4b98      	ldr	r3, [pc, #608]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009124:	d107      	bne.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009126:	f107 030c 	add.w	r3, r7, #12
 800912a:	4618      	mov	r0, r3
 800912c:	f000 fc9c 	bl	8009a68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009134:	e321      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009136:	2300      	movs	r3, #0
 8009138:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800913a:	e31e      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800913c:	4b8f      	ldr	r3, [pc, #572]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800913e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009140:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009144:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009146:	4b8d      	ldr	r3, [pc, #564]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0304 	and.w	r3, r3, #4
 800914e:	2b04      	cmp	r3, #4
 8009150:	d10c      	bne.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8009152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009154:	2b00      	cmp	r3, #0
 8009156:	d109      	bne.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009158:	4b88      	ldr	r3, [pc, #544]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	08db      	lsrs	r3, r3, #3
 800915e:	f003 0303 	and.w	r3, r3, #3
 8009162:	4a87      	ldr	r2, [pc, #540]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009164:	fa22 f303 	lsr.w	r3, r2, r3
 8009168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800916a:	e01e      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800916c:	4b83      	ldr	r3, [pc, #524]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009178:	d106      	bne.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800917a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800917c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009180:	d102      	bne.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009182:	4b80      	ldr	r3, [pc, #512]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009186:	e010      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009188:	4b7c      	ldr	r3, [pc, #496]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009190:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009194:	d106      	bne.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8009196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800919c:	d102      	bne.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800919e:	4b7a      	ldr	r3, [pc, #488]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80091a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091a2:	e002      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80091a4:	2300      	movs	r3, #0
 80091a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80091a8:	e2e7      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80091aa:	e2e6      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80091ac:	4b77      	ldr	r3, [pc, #476]	; (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80091ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091b0:	e2e3      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80091b2:	2300      	movs	r3, #0
 80091b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091b6:	e2e0      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091be:	f040 809c 	bne.w	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80091c2:	4b6e      	ldr	r3, [pc, #440]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80091c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091c6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80091ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80091cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091d2:	d054      	beq.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80091d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091da:	f200 808b 	bhi.w	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80091de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80091e4:	f000 8083 	beq.w	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80091e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80091ee:	f200 8081 	bhi.w	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091f8:	d02f      	beq.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80091fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009200:	d878      	bhi.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009204:	2b00      	cmp	r3, #0
 8009206:	d004      	beq.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800920e:	d012      	beq.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8009210:	e070      	b.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009212:	4b5a      	ldr	r3, [pc, #360]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800921a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800921e:	d107      	bne.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009224:	4618      	mov	r0, r3
 8009226:	f000 fd73 	bl	8009d10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800922a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800922e:	e2a4      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009230:	2300      	movs	r3, #0
 8009232:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009234:	e2a1      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009236:	4b51      	ldr	r3, [pc, #324]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800923e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009242:	d107      	bne.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009244:	f107 0318 	add.w	r3, r7, #24
 8009248:	4618      	mov	r0, r3
 800924a:	f000 fab9 	bl	80097c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009252:	e292      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009258:	e28f      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800925a:	4b48      	ldr	r3, [pc, #288]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009262:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009266:	d107      	bne.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009268:	f107 030c 	add.w	r3, r7, #12
 800926c:	4618      	mov	r0, r3
 800926e:	f000 fbfb 	bl	8009a68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009276:	e280      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009278:	2300      	movs	r3, #0
 800927a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800927c:	e27d      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800927e:	4b3f      	ldr	r3, [pc, #252]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009282:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009286:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009288:	4b3c      	ldr	r3, [pc, #240]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 0304 	and.w	r3, r3, #4
 8009290:	2b04      	cmp	r3, #4
 8009292:	d10c      	bne.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009296:	2b00      	cmp	r3, #0
 8009298:	d109      	bne.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800929a:	4b38      	ldr	r3, [pc, #224]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	08db      	lsrs	r3, r3, #3
 80092a0:	f003 0303 	and.w	r3, r3, #3
 80092a4:	4a36      	ldr	r2, [pc, #216]	; (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80092a6:	fa22 f303 	lsr.w	r3, r2, r3
 80092aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092ac:	e01e      	b.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092ae:	4b33      	ldr	r3, [pc, #204]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ba:	d106      	bne.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80092bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092c2:	d102      	bne.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80092c4:	4b2f      	ldr	r3, [pc, #188]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80092c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092c8:	e010      	b.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092ca:	4b2c      	ldr	r3, [pc, #176]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092d6:	d106      	bne.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80092d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092de:	d102      	bne.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80092e0:	4b29      	ldr	r3, [pc, #164]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80092e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092e4:	e002      	b.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80092e6:	2300      	movs	r3, #0
 80092e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80092ea:	e246      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80092ec:	e245      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80092ee:	4b27      	ldr	r3, [pc, #156]	; (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80092f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092f2:	e242      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80092f4:	2300      	movs	r3, #0
 80092f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092f8:	e23f      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009300:	f040 80a8 	bne.w	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009304:	4b1d      	ldr	r3, [pc, #116]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009308:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800930c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800930e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009314:	d060      	beq.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8009316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800931c:	f200 8097 	bhi.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009322:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009326:	f000 808f 	beq.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800932a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009330:	f200 808d 	bhi.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800933a:	d03b      	beq.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009342:	f200 8084 	bhi.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009348:	2b00      	cmp	r3, #0
 800934a:	d004      	beq.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800934c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009352:	d01d      	beq.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8009354:	e07b      	b.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009356:	4b09      	ldr	r3, [pc, #36]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800935e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009362:	d107      	bne.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009368:	4618      	mov	r0, r3
 800936a:	f000 fcd1 	bl	8009d10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800936e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009370:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009372:	e202      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009374:	2300      	movs	r3, #0
 8009376:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009378:	e1ff      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800937a:	bf00      	nop
 800937c:	58024400 	.word	0x58024400
 8009380:	03d09000 	.word	0x03d09000
 8009384:	003d0900 	.word	0x003d0900
 8009388:	007a1200 	.word	0x007a1200
 800938c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009390:	4ba3      	ldr	r3, [pc, #652]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009398:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800939c:	d107      	bne.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800939e:	f107 0318 	add.w	r3, r7, #24
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 fa0c 	bl	80097c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093ac:	e1e5      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80093ae:	2300      	movs	r3, #0
 80093b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093b2:	e1e2      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093b4:	4b9a      	ldr	r3, [pc, #616]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093c0:	d107      	bne.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093c2:	f107 030c 	add.w	r3, r7, #12
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 fb4e 	bl	8009a68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093d0:	e1d3      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80093d2:	2300      	movs	r3, #0
 80093d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093d6:	e1d0      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80093d8:	4b91      	ldr	r3, [pc, #580]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80093da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80093e0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093e2:	4b8f      	ldr	r3, [pc, #572]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 0304 	and.w	r3, r3, #4
 80093ea:	2b04      	cmp	r3, #4
 80093ec:	d10c      	bne.n	8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80093ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d109      	bne.n	8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093f4:	4b8a      	ldr	r3, [pc, #552]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	08db      	lsrs	r3, r3, #3
 80093fa:	f003 0303 	and.w	r3, r3, #3
 80093fe:	4a89      	ldr	r2, [pc, #548]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009400:	fa22 f303 	lsr.w	r3, r2, r3
 8009404:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009406:	e01e      	b.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009408:	4b85      	ldr	r3, [pc, #532]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009414:	d106      	bne.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8009416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009418:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800941c:	d102      	bne.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800941e:	4b82      	ldr	r3, [pc, #520]	; (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009422:	e010      	b.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009424:	4b7e      	ldr	r3, [pc, #504]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800942c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009430:	d106      	bne.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009438:	d102      	bne.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800943a:	4b7c      	ldr	r3, [pc, #496]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800943c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800943e:	e002      	b.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009440:	2300      	movs	r3, #0
 8009442:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009444:	e199      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009446:	e198      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009448:	4b79      	ldr	r3, [pc, #484]	; (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800944a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800944c:	e195      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800944e:	2300      	movs	r3, #0
 8009450:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009452:	e192      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800945a:	d173      	bne.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800945c:	4b70      	ldr	r3, [pc, #448]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800945e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009460:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009464:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800946c:	d02f      	beq.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800946e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009470:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009474:	d863      	bhi.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8009476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009478:	2b00      	cmp	r3, #0
 800947a:	d004      	beq.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800947c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009482:	d012      	beq.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8009484:	e05b      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009486:	4b66      	ldr	r3, [pc, #408]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800948e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009492:	d107      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009494:	f107 0318 	add.w	r3, r7, #24
 8009498:	4618      	mov	r0, r3
 800949a:	f000 f991 	bl	80097c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094a2:	e16a      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094a8:	e167      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094aa:	4b5d      	ldr	r3, [pc, #372]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094b6:	d107      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094b8:	f107 030c 	add.w	r3, r7, #12
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 fad3 	bl	8009a68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094c6:	e158      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094cc:	e155      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80094ce:	4b54      	ldr	r3, [pc, #336]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80094d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094d6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094d8:	4b51      	ldr	r3, [pc, #324]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b04      	cmp	r3, #4
 80094e2:	d10c      	bne.n	80094fe <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80094e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d109      	bne.n	80094fe <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094ea:	4b4d      	ldr	r3, [pc, #308]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	08db      	lsrs	r3, r3, #3
 80094f0:	f003 0303 	and.w	r3, r3, #3
 80094f4:	4a4b      	ldr	r2, [pc, #300]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80094f6:	fa22 f303 	lsr.w	r3, r2, r3
 80094fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094fc:	e01e      	b.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094fe:	4b48      	ldr	r3, [pc, #288]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800950a:	d106      	bne.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800950c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800950e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009512:	d102      	bne.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009514:	4b44      	ldr	r3, [pc, #272]	; (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009518:	e010      	b.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800951a:	4b41      	ldr	r3, [pc, #260]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009522:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009526:	d106      	bne.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8009528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800952a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800952e:	d102      	bne.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009530:	4b3e      	ldr	r3, [pc, #248]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009534:	e002      	b.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009536:	2300      	movs	r3, #0
 8009538:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800953a:	e11e      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800953c:	e11d      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800953e:	2300      	movs	r3, #0
 8009540:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009542:	e11a      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800954a:	d133      	bne.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800954c:	4b34      	ldr	r3, [pc, #208]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800954e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009554:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009558:	2b00      	cmp	r3, #0
 800955a:	d004      	beq.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800955c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009562:	d012      	beq.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009564:	e023      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009566:	4b2e      	ldr	r3, [pc, #184]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800956e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009572:	d107      	bne.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009578:	4618      	mov	r0, r3
 800957a:	f000 fbc9 	bl	8009d10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800957e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009580:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009582:	e0fa      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009584:	2300      	movs	r3, #0
 8009586:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009588:	e0f7      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800958a:	4b25      	ldr	r3, [pc, #148]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009596:	d107      	bne.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009598:	f107 0318 	add.w	r3, r7, #24
 800959c:	4618      	mov	r0, r3
 800959e:	f000 f90f 	bl	80097c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80095a2:	6a3b      	ldr	r3, [r7, #32]
 80095a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80095a6:	e0e8      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095a8:	2300      	movs	r3, #0
 80095aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095ac:	e0e5      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80095ae:	2300      	movs	r3, #0
 80095b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095b2:	e0e2      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095ba:	f040 808f 	bne.w	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80095be:	4b18      	ldr	r3, [pc, #96]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80095c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095c2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80095c6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80095c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095ce:	d075      	beq.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80095d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095d6:	d87e      	bhi.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80095d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095de:	d060      	beq.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80095e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095e6:	d876      	bhi.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80095e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80095ee:	d045      	beq.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80095f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80095f6:	d86e      	bhi.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80095f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095fe:	d02b      	beq.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8009600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009606:	d866      	bhi.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960a:	2b00      	cmp	r3, #0
 800960c:	d004      	beq.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800960e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009614:	d00e      	beq.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009616:	e05e      	b.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009618:	f000 f8bc 	bl	8009794 <HAL_RCCEx_GetD3PCLK1Freq>
 800961c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800961e:	e0ac      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009620:	58024400 	.word	0x58024400
 8009624:	03d09000 	.word	0x03d09000
 8009628:	003d0900 	.word	0x003d0900
 800962c:	007a1200 	.word	0x007a1200
 8009630:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009634:	4b53      	ldr	r3, [pc, #332]	; (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800963c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009640:	d107      	bne.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009642:	f107 0318 	add.w	r3, r7, #24
 8009646:	4618      	mov	r0, r3
 8009648:	f000 f8ba 	bl	80097c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009650:	e093      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009652:	2300      	movs	r3, #0
 8009654:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009656:	e090      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009658:	4b4a      	ldr	r3, [pc, #296]	; (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009664:	d107      	bne.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009666:	f107 030c 	add.w	r3, r7, #12
 800966a:	4618      	mov	r0, r3
 800966c:	f000 f9fc 	bl	8009a68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009674:	e081      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009676:	2300      	movs	r3, #0
 8009678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800967a:	e07e      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800967c:	4b41      	ldr	r3, [pc, #260]	; (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0304 	and.w	r3, r3, #4
 8009684:	2b04      	cmp	r3, #4
 8009686:	d109      	bne.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009688:	4b3e      	ldr	r3, [pc, #248]	; (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	08db      	lsrs	r3, r3, #3
 800968e:	f003 0303 	and.w	r3, r3, #3
 8009692:	4a3d      	ldr	r2, [pc, #244]	; (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009694:	fa22 f303 	lsr.w	r3, r2, r3
 8009698:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800969a:	e06e      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800969c:	2300      	movs	r3, #0
 800969e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096a0:	e06b      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80096a2:	4b38      	ldr	r3, [pc, #224]	; (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096ae:	d102      	bne.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80096b0:	4b36      	ldr	r3, [pc, #216]	; (800978c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80096b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096b4:	e061      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80096b6:	2300      	movs	r3, #0
 80096b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096ba:	e05e      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80096bc:	4b31      	ldr	r3, [pc, #196]	; (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096c8:	d102      	bne.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80096ca:	4b31      	ldr	r3, [pc, #196]	; (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80096cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80096ce:	e054      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80096d0:	2300      	movs	r3, #0
 80096d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096d4:	e051      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096da:	e04e      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096e2:	d148      	bne.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80096e4:	4b27      	ldr	r3, [pc, #156]	; (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096ec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80096ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096f4:	d02a      	beq.n	800974c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80096f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096fc:	d838      	bhi.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80096fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009700:	2b00      	cmp	r3, #0
 8009702:	d004      	beq.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800970a:	d00d      	beq.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800970c:	e030      	b.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800970e:	4b1d      	ldr	r3, [pc, #116]	; (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009716:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800971a:	d102      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800971c:	4b1c      	ldr	r3, [pc, #112]	; (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800971e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009720:	e02b      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009722:	2300      	movs	r3, #0
 8009724:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009726:	e028      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009728:	4b16      	ldr	r3, [pc, #88]	; (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009730:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009734:	d107      	bne.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800973a:	4618      	mov	r0, r3
 800973c:	f000 fae8 	bl	8009d10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009742:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009744:	e019      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009746:	2300      	movs	r3, #0
 8009748:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800974a:	e016      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800974c:	4b0d      	ldr	r3, [pc, #52]	; (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009754:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009758:	d107      	bne.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800975a:	f107 0318 	add.w	r3, r7, #24
 800975e:	4618      	mov	r0, r3
 8009760:	f000 f82e 	bl	80097c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009768:	e007      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800976a:	2300      	movs	r3, #0
 800976c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800976e:	e004      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009770:	2300      	movs	r3, #0
 8009772:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009774:	e001      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009776:	2300      	movs	r3, #0
 8009778:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800977a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800977c:	4618      	mov	r0, r3
 800977e:	3740      	adds	r7, #64	; 0x40
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	58024400 	.word	0x58024400
 8009788:	03d09000 	.word	0x03d09000
 800978c:	003d0900 	.word	0x003d0900
 8009790:	007a1200 	.word	0x007a1200

08009794 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009798:	f7fe fb8e 	bl	8007eb8 <HAL_RCC_GetHCLKFreq>
 800979c:	4602      	mov	r2, r0
 800979e:	4b06      	ldr	r3, [pc, #24]	; (80097b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	091b      	lsrs	r3, r3, #4
 80097a4:	f003 0307 	and.w	r3, r3, #7
 80097a8:	4904      	ldr	r1, [pc, #16]	; (80097bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80097aa:	5ccb      	ldrb	r3, [r1, r3]
 80097ac:	f003 031f 	and.w	r3, r3, #31
 80097b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	58024400 	.word	0x58024400
 80097bc:	0800d5f4 	.word	0x0800d5f4

080097c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b089      	sub	sp, #36	; 0x24
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097c8:	4ba1      	ldr	r3, [pc, #644]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097cc:	f003 0303 	and.w	r3, r3, #3
 80097d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80097d2:	4b9f      	ldr	r3, [pc, #636]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d6:	0b1b      	lsrs	r3, r3, #12
 80097d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80097de:	4b9c      	ldr	r3, [pc, #624]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e2:	091b      	lsrs	r3, r3, #4
 80097e4:	f003 0301 	and.w	r3, r3, #1
 80097e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80097ea:	4b99      	ldr	r3, [pc, #612]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ee:	08db      	lsrs	r3, r3, #3
 80097f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	fb02 f303 	mul.w	r3, r2, r3
 80097fa:	ee07 3a90 	vmov	s15, r3
 80097fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009802:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2b00      	cmp	r3, #0
 800980a:	f000 8111 	beq.w	8009a30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	2b02      	cmp	r3, #2
 8009812:	f000 8083 	beq.w	800991c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	2b02      	cmp	r3, #2
 800981a:	f200 80a1 	bhi.w	8009960 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d003      	beq.n	800982c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d056      	beq.n	80098d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800982a:	e099      	b.n	8009960 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800982c:	4b88      	ldr	r3, [pc, #544]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f003 0320 	and.w	r3, r3, #32
 8009834:	2b00      	cmp	r3, #0
 8009836:	d02d      	beq.n	8009894 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009838:	4b85      	ldr	r3, [pc, #532]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	08db      	lsrs	r3, r3, #3
 800983e:	f003 0303 	and.w	r3, r3, #3
 8009842:	4a84      	ldr	r2, [pc, #528]	; (8009a54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009844:	fa22 f303 	lsr.w	r3, r2, r3
 8009848:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	ee07 3a90 	vmov	s15, r3
 8009850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	ee07 3a90 	vmov	s15, r3
 800985a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800985e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009862:	4b7b      	ldr	r3, [pc, #492]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986a:	ee07 3a90 	vmov	s15, r3
 800986e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009872:	ed97 6a03 	vldr	s12, [r7, #12]
 8009876:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800987a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800987e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800988a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800988e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009892:	e087      	b.n	80099a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	ee07 3a90 	vmov	s15, r3
 800989a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800989e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80098a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098a6:	4b6a      	ldr	r3, [pc, #424]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ae:	ee07 3a90 	vmov	s15, r3
 80098b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098d6:	e065      	b.n	80099a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	ee07 3a90 	vmov	s15, r3
 80098de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80098e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ea:	4b59      	ldr	r3, [pc, #356]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f2:	ee07 3a90 	vmov	s15, r3
 80098f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80098fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800990a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800990e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009916:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800991a:	e043      	b.n	80099a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	ee07 3a90 	vmov	s15, r3
 8009922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009926:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800992a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800992e:	4b48      	ldr	r3, [pc, #288]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800993e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009942:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800994a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800994e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800995a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800995e:	e021      	b.n	80099a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	ee07 3a90 	vmov	s15, r3
 8009966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800996a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800996e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009972:	4b37      	ldr	r3, [pc, #220]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800997a:	ee07 3a90 	vmov	s15, r3
 800997e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009982:	ed97 6a03 	vldr	s12, [r7, #12]
 8009986:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800998a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800998e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800999a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800999e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80099a4:	4b2a      	ldr	r3, [pc, #168]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a8:	0a5b      	lsrs	r3, r3, #9
 80099aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099be:	edd7 6a07 	vldr	s13, [r7, #28]
 80099c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ca:	ee17 2a90 	vmov	r2, s15
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80099d2:	4b1f      	ldr	r3, [pc, #124]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d6:	0c1b      	lsrs	r3, r3, #16
 80099d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099dc:	ee07 3a90 	vmov	s15, r3
 80099e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80099f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099f8:	ee17 2a90 	vmov	r2, s15
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009a00:	4b13      	ldr	r3, [pc, #76]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a04:	0e1b      	lsrs	r3, r3, #24
 8009a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a0a:	ee07 3a90 	vmov	s15, r3
 8009a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a26:	ee17 2a90 	vmov	r2, s15
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009a2e:	e008      	b.n	8009a42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	609a      	str	r2, [r3, #8]
}
 8009a42:	bf00      	nop
 8009a44:	3724      	adds	r7, #36	; 0x24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	58024400 	.word	0x58024400
 8009a54:	03d09000 	.word	0x03d09000
 8009a58:	46000000 	.word	0x46000000
 8009a5c:	4c742400 	.word	0x4c742400
 8009a60:	4a742400 	.word	0x4a742400
 8009a64:	4af42400 	.word	0x4af42400

08009a68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b089      	sub	sp, #36	; 0x24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a70:	4ba1      	ldr	r3, [pc, #644]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a74:	f003 0303 	and.w	r3, r3, #3
 8009a78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009a7a:	4b9f      	ldr	r3, [pc, #636]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7e:	0d1b      	lsrs	r3, r3, #20
 8009a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009a86:	4b9c      	ldr	r3, [pc, #624]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8a:	0a1b      	lsrs	r3, r3, #8
 8009a8c:	f003 0301 	and.w	r3, r3, #1
 8009a90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009a92:	4b99      	ldr	r3, [pc, #612]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a96:	08db      	lsrs	r3, r3, #3
 8009a98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a9c:	693a      	ldr	r2, [r7, #16]
 8009a9e:	fb02 f303 	mul.w	r3, r2, r3
 8009aa2:	ee07 3a90 	vmov	s15, r3
 8009aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aaa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 8111 	beq.w	8009cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	f000 8083 	beq.w	8009bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	f200 80a1 	bhi.w	8009c08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d056      	beq.n	8009b80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009ad2:	e099      	b.n	8009c08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ad4:	4b88      	ldr	r3, [pc, #544]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0320 	and.w	r3, r3, #32
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d02d      	beq.n	8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ae0:	4b85      	ldr	r3, [pc, #532]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	08db      	lsrs	r3, r3, #3
 8009ae6:	f003 0303 	and.w	r3, r3, #3
 8009aea:	4a84      	ldr	r2, [pc, #528]	; (8009cfc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009aec:	fa22 f303 	lsr.w	r3, r2, r3
 8009af0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	ee07 3a90 	vmov	s15, r3
 8009af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	ee07 3a90 	vmov	s15, r3
 8009b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b0a:	4b7b      	ldr	r3, [pc, #492]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b12:	ee07 3a90 	vmov	s15, r3
 8009b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009b3a:	e087      	b.n	8009c4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	ee07 3a90 	vmov	s15, r3
 8009b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009d04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b4e:	4b6a      	ldr	r3, [pc, #424]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b56:	ee07 3a90 	vmov	s15, r3
 8009b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b7e:	e065      	b.n	8009c4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	ee07 3a90 	vmov	s15, r3
 8009b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b92:	4b59      	ldr	r3, [pc, #356]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b9a:	ee07 3a90 	vmov	s15, r3
 8009b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ba6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bc2:	e043      	b.n	8009c4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	ee07 3a90 	vmov	s15, r3
 8009bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bd6:	4b48      	ldr	r3, [pc, #288]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bde:	ee07 3a90 	vmov	s15, r3
 8009be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c06:	e021      	b.n	8009c4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	ee07 3a90 	vmov	s15, r3
 8009c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c1a:	4b37      	ldr	r3, [pc, #220]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c22:	ee07 3a90 	vmov	s15, r3
 8009c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009c4c:	4b2a      	ldr	r3, [pc, #168]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c50:	0a5b      	lsrs	r3, r3, #9
 8009c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c56:	ee07 3a90 	vmov	s15, r3
 8009c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c72:	ee17 2a90 	vmov	r2, s15
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009c7a:	4b1f      	ldr	r3, [pc, #124]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7e:	0c1b      	lsrs	r3, r3, #16
 8009c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c84:	ee07 3a90 	vmov	s15, r3
 8009c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ca0:	ee17 2a90 	vmov	r2, s15
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009ca8:	4b13      	ldr	r3, [pc, #76]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cac:	0e1b      	lsrs	r3, r3, #24
 8009cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cb2:	ee07 3a90 	vmov	s15, r3
 8009cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cce:	ee17 2a90 	vmov	r2, s15
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009cd6:	e008      	b.n	8009cea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	609a      	str	r2, [r3, #8]
}
 8009cea:	bf00      	nop
 8009cec:	3724      	adds	r7, #36	; 0x24
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	58024400 	.word	0x58024400
 8009cfc:	03d09000 	.word	0x03d09000
 8009d00:	46000000 	.word	0x46000000
 8009d04:	4c742400 	.word	0x4c742400
 8009d08:	4a742400 	.word	0x4a742400
 8009d0c:	4af42400 	.word	0x4af42400

08009d10 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b089      	sub	sp, #36	; 0x24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d18:	4ba0      	ldr	r3, [pc, #640]	; (8009f9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d1c:	f003 0303 	and.w	r3, r3, #3
 8009d20:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009d22:	4b9e      	ldr	r3, [pc, #632]	; (8009f9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d26:	091b      	lsrs	r3, r3, #4
 8009d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d2c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009d2e:	4b9b      	ldr	r3, [pc, #620]	; (8009f9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009d38:	4b98      	ldr	r3, [pc, #608]	; (8009f9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d3c:	08db      	lsrs	r3, r3, #3
 8009d3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d42:	693a      	ldr	r2, [r7, #16]
 8009d44:	fb02 f303 	mul.w	r3, r2, r3
 8009d48:	ee07 3a90 	vmov	s15, r3
 8009d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d50:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f000 8111 	beq.w	8009f7e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	f000 8083 	beq.w	8009e6a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	f200 80a1 	bhi.w	8009eae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d003      	beq.n	8009d7a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d056      	beq.n	8009e26 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009d78:	e099      	b.n	8009eae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d7a:	4b88      	ldr	r3, [pc, #544]	; (8009f9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 0320 	and.w	r3, r3, #32
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d02d      	beq.n	8009de2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d86:	4b85      	ldr	r3, [pc, #532]	; (8009f9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	08db      	lsrs	r3, r3, #3
 8009d8c:	f003 0303 	and.w	r3, r3, #3
 8009d90:	4a83      	ldr	r2, [pc, #524]	; (8009fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009d92:	fa22 f303 	lsr.w	r3, r2, r3
 8009d96:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	ee07 3a90 	vmov	s15, r3
 8009d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	ee07 3a90 	vmov	s15, r3
 8009da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009db0:	4b7a      	ldr	r3, [pc, #488]	; (8009f9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009db8:	ee07 3a90 	vmov	s15, r3
 8009dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dc4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ddc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009de0:	e087      	b.n	8009ef2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	ee07 3a90 	vmov	s15, r3
 8009de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009df0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009df4:	4b69      	ldr	r3, [pc, #420]	; (8009f9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dfc:	ee07 3a90 	vmov	s15, r3
 8009e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e04:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e08:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e24:	e065      	b.n	8009ef2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	ee07 3a90 	vmov	s15, r3
 8009e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e30:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009fac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e38:	4b58      	ldr	r3, [pc, #352]	; (8009f9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e40:	ee07 3a90 	vmov	s15, r3
 8009e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e48:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e4c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e68:	e043      	b.n	8009ef2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	ee07 3a90 	vmov	s15, r3
 8009e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e74:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009e78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e7c:	4b47      	ldr	r3, [pc, #284]	; (8009f9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e84:	ee07 3a90 	vmov	s15, r3
 8009e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e90:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ea8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009eac:	e021      	b.n	8009ef2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	ee07 3a90 	vmov	s15, r3
 8009eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eb8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009ebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ec0:	4b36      	ldr	r3, [pc, #216]	; (8009f9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ec8:	ee07 3a90 	vmov	s15, r3
 8009ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ed0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ed4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ee0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ef0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009ef2:	4b2a      	ldr	r3, [pc, #168]	; (8009f9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef6:	0a5b      	lsrs	r3, r3, #9
 8009ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009efc:	ee07 3a90 	vmov	s15, r3
 8009f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f18:	ee17 2a90 	vmov	r2, s15
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009f20:	4b1e      	ldr	r3, [pc, #120]	; (8009f9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f24:	0c1b      	lsrs	r3, r3, #16
 8009f26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f2a:	ee07 3a90 	vmov	s15, r3
 8009f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f46:	ee17 2a90 	vmov	r2, s15
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009f4e:	4b13      	ldr	r3, [pc, #76]	; (8009f9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f52:	0e1b      	lsrs	r3, r3, #24
 8009f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f58:	ee07 3a90 	vmov	s15, r3
 8009f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f68:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f74:	ee17 2a90 	vmov	r2, s15
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009f7c:	e008      	b.n	8009f90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	609a      	str	r2, [r3, #8]
}
 8009f90:	bf00      	nop
 8009f92:	3724      	adds	r7, #36	; 0x24
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr
 8009f9c:	58024400 	.word	0x58024400
 8009fa0:	03d09000 	.word	0x03d09000
 8009fa4:	46000000 	.word	0x46000000
 8009fa8:	4c742400 	.word	0x4c742400
 8009fac:	4a742400 	.word	0x4a742400
 8009fb0:	4af42400 	.word	0x4af42400

08009fb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009fc2:	4b53      	ldr	r3, [pc, #332]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 8009fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc6:	f003 0303 	and.w	r3, r3, #3
 8009fca:	2b03      	cmp	r3, #3
 8009fcc:	d101      	bne.n	8009fd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e099      	b.n	800a106 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009fd2:	4b4f      	ldr	r3, [pc, #316]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a4e      	ldr	r2, [pc, #312]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 8009fd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009fdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fde:	f7f8 ff33 	bl	8002e48 <HAL_GetTick>
 8009fe2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009fe4:	e008      	b.n	8009ff8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009fe6:	f7f8 ff2f 	bl	8002e48 <HAL_GetTick>
 8009fea:	4602      	mov	r2, r0
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d901      	bls.n	8009ff8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	e086      	b.n	800a106 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ff8:	4b45      	ldr	r3, [pc, #276]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d1f0      	bne.n	8009fe6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a004:	4b42      	ldr	r3, [pc, #264]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a008:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	031b      	lsls	r3, r3, #12
 800a012:	493f      	ldr	r1, [pc, #252]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a014:	4313      	orrs	r3, r2
 800a016:	628b      	str	r3, [r1, #40]	; 0x28
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	3b01      	subs	r3, #1
 800a01e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	3b01      	subs	r3, #1
 800a028:	025b      	lsls	r3, r3, #9
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	431a      	orrs	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	3b01      	subs	r3, #1
 800a034:	041b      	lsls	r3, r3, #16
 800a036:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a03a:	431a      	orrs	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	3b01      	subs	r3, #1
 800a042:	061b      	lsls	r3, r3, #24
 800a044:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a048:	4931      	ldr	r1, [pc, #196]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a04a:	4313      	orrs	r3, r2
 800a04c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a04e:	4b30      	ldr	r3, [pc, #192]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a052:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	492d      	ldr	r1, [pc, #180]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a05c:	4313      	orrs	r3, r2
 800a05e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a060:	4b2b      	ldr	r3, [pc, #172]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a064:	f023 0220 	bic.w	r2, r3, #32
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	699b      	ldr	r3, [r3, #24]
 800a06c:	4928      	ldr	r1, [pc, #160]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a06e:	4313      	orrs	r3, r2
 800a070:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a072:	4b27      	ldr	r3, [pc, #156]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a076:	4a26      	ldr	r2, [pc, #152]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a078:	f023 0310 	bic.w	r3, r3, #16
 800a07c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a07e:	4b24      	ldr	r3, [pc, #144]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a080:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a082:	4b24      	ldr	r3, [pc, #144]	; (800a114 <RCCEx_PLL2_Config+0x160>)
 800a084:	4013      	ands	r3, r2
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	69d2      	ldr	r2, [r2, #28]
 800a08a:	00d2      	lsls	r2, r2, #3
 800a08c:	4920      	ldr	r1, [pc, #128]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a08e:	4313      	orrs	r3, r2
 800a090:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a092:	4b1f      	ldr	r3, [pc, #124]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a096:	4a1e      	ldr	r2, [pc, #120]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a098:	f043 0310 	orr.w	r3, r3, #16
 800a09c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d106      	bne.n	800a0b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a0a4:	4b1a      	ldr	r3, [pc, #104]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a8:	4a19      	ldr	r2, [pc, #100]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a0aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0b0:	e00f      	b.n	800a0d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d106      	bne.n	800a0c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a0b8:	4b15      	ldr	r3, [pc, #84]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0bc:	4a14      	ldr	r2, [pc, #80]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a0be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0c4:	e005      	b.n	800a0d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a0c6:	4b12      	ldr	r3, [pc, #72]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ca:	4a11      	ldr	r2, [pc, #68]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a0cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a0d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a0d2:	4b0f      	ldr	r3, [pc, #60]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a0e      	ldr	r2, [pc, #56]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a0d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a0dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0de:	f7f8 feb3 	bl	8002e48 <HAL_GetTick>
 800a0e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0e4:	e008      	b.n	800a0f8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a0e6:	f7f8 feaf 	bl	8002e48 <HAL_GetTick>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d901      	bls.n	800a0f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a0f4:	2303      	movs	r3, #3
 800a0f6:	e006      	b.n	800a106 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0f8:	4b05      	ldr	r3, [pc, #20]	; (800a110 <RCCEx_PLL2_Config+0x15c>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d0f0      	beq.n	800a0e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a104:	7bfb      	ldrb	r3, [r7, #15]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	58024400 	.word	0x58024400
 800a114:	ffff0007 	.word	0xffff0007

0800a118 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a122:	2300      	movs	r3, #0
 800a124:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a126:	4b53      	ldr	r3, [pc, #332]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12a:	f003 0303 	and.w	r3, r3, #3
 800a12e:	2b03      	cmp	r3, #3
 800a130:	d101      	bne.n	800a136 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	e099      	b.n	800a26a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a136:	4b4f      	ldr	r3, [pc, #316]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a4e      	ldr	r2, [pc, #312]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a13c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a140:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a142:	f7f8 fe81 	bl	8002e48 <HAL_GetTick>
 800a146:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a148:	e008      	b.n	800a15c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a14a:	f7f8 fe7d 	bl	8002e48 <HAL_GetTick>
 800a14e:	4602      	mov	r2, r0
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	2b02      	cmp	r3, #2
 800a156:	d901      	bls.n	800a15c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a158:	2303      	movs	r3, #3
 800a15a:	e086      	b.n	800a26a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a15c:	4b45      	ldr	r3, [pc, #276]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1f0      	bne.n	800a14a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a168:	4b42      	ldr	r3, [pc, #264]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a16c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	051b      	lsls	r3, r3, #20
 800a176:	493f      	ldr	r1, [pc, #252]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a178:	4313      	orrs	r3, r2
 800a17a:	628b      	str	r3, [r1, #40]	; 0x28
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	3b01      	subs	r3, #1
 800a182:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	3b01      	subs	r3, #1
 800a18c:	025b      	lsls	r3, r3, #9
 800a18e:	b29b      	uxth	r3, r3
 800a190:	431a      	orrs	r2, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	3b01      	subs	r3, #1
 800a198:	041b      	lsls	r3, r3, #16
 800a19a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a19e:	431a      	orrs	r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	691b      	ldr	r3, [r3, #16]
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	061b      	lsls	r3, r3, #24
 800a1a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1ac:	4931      	ldr	r1, [pc, #196]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a1b2:	4b30      	ldr	r3, [pc, #192]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	695b      	ldr	r3, [r3, #20]
 800a1be:	492d      	ldr	r1, [pc, #180]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a1c4:	4b2b      	ldr	r3, [pc, #172]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	4928      	ldr	r1, [pc, #160]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a1d6:	4b27      	ldr	r3, [pc, #156]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1da:	4a26      	ldr	r2, [pc, #152]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a1dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a1e2:	4b24      	ldr	r3, [pc, #144]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a1e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1e6:	4b24      	ldr	r3, [pc, #144]	; (800a278 <RCCEx_PLL3_Config+0x160>)
 800a1e8:	4013      	ands	r3, r2
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	69d2      	ldr	r2, [r2, #28]
 800a1ee:	00d2      	lsls	r2, r2, #3
 800a1f0:	4920      	ldr	r1, [pc, #128]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a1f6:	4b1f      	ldr	r3, [pc, #124]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1fa:	4a1e      	ldr	r2, [pc, #120]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a1fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a200:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d106      	bne.n	800a216 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a208:	4b1a      	ldr	r3, [pc, #104]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20c:	4a19      	ldr	r2, [pc, #100]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a20e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a212:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a214:	e00f      	b.n	800a236 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d106      	bne.n	800a22a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a21c:	4b15      	ldr	r3, [pc, #84]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a220:	4a14      	ldr	r2, [pc, #80]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a222:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a226:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a228:	e005      	b.n	800a236 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a22a:	4b12      	ldr	r3, [pc, #72]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22e:	4a11      	ldr	r2, [pc, #68]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a230:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a234:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a236:	4b0f      	ldr	r3, [pc, #60]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a0e      	ldr	r2, [pc, #56]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a23c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a240:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a242:	f7f8 fe01 	bl	8002e48 <HAL_GetTick>
 800a246:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a248:	e008      	b.n	800a25c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a24a:	f7f8 fdfd 	bl	8002e48 <HAL_GetTick>
 800a24e:	4602      	mov	r2, r0
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	2b02      	cmp	r3, #2
 800a256:	d901      	bls.n	800a25c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a258:	2303      	movs	r3, #3
 800a25a:	e006      	b.n	800a26a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a25c:	4b05      	ldr	r3, [pc, #20]	; (800a274 <RCCEx_PLL3_Config+0x15c>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d0f0      	beq.n	800a24a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a268:	7bfb      	ldrb	r3, [r7, #15]
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	58024400 	.word	0x58024400
 800a278:	ffff0007 	.word	0xffff0007

0800a27c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d101      	bne.n	800a28e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e049      	b.n	800a322 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2b00      	cmp	r3, #0
 800a298:	d106      	bne.n	800a2a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f7f8 fab2 	bl	800280c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2202      	movs	r2, #2
 800a2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	4610      	mov	r0, r2
 800a2bc:	f000 ff90 	bl	800b1e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b082      	sub	sp, #8
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d101      	bne.n	800a33c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	e049      	b.n	800a3d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b00      	cmp	r3, #0
 800a346:	d106      	bne.n	800a356 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 f841 	bl	800a3d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2202      	movs	r2, #2
 800a35a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	3304      	adds	r3, #4
 800a366:	4619      	mov	r1, r3
 800a368:	4610      	mov	r0, r2
 800a36a:	f000 ff39 	bl	800b1e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2201      	movs	r2, #1
 800a372:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2201      	movs	r2, #1
 800a38a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2201      	movs	r2, #1
 800a392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a3e0:	bf00      	nop
 800a3e2:	370c      	adds	r7, #12
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d109      	bne.n	800a410 <HAL_TIM_PWM_Start+0x24>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a402:	b2db      	uxtb	r3, r3
 800a404:	2b01      	cmp	r3, #1
 800a406:	bf14      	ite	ne
 800a408:	2301      	movne	r3, #1
 800a40a:	2300      	moveq	r3, #0
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	e03c      	b.n	800a48a <HAL_TIM_PWM_Start+0x9e>
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	2b04      	cmp	r3, #4
 800a414:	d109      	bne.n	800a42a <HAL_TIM_PWM_Start+0x3e>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	2b01      	cmp	r3, #1
 800a420:	bf14      	ite	ne
 800a422:	2301      	movne	r3, #1
 800a424:	2300      	moveq	r3, #0
 800a426:	b2db      	uxtb	r3, r3
 800a428:	e02f      	b.n	800a48a <HAL_TIM_PWM_Start+0x9e>
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b08      	cmp	r3, #8
 800a42e:	d109      	bne.n	800a444 <HAL_TIM_PWM_Start+0x58>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a436:	b2db      	uxtb	r3, r3
 800a438:	2b01      	cmp	r3, #1
 800a43a:	bf14      	ite	ne
 800a43c:	2301      	movne	r3, #1
 800a43e:	2300      	moveq	r3, #0
 800a440:	b2db      	uxtb	r3, r3
 800a442:	e022      	b.n	800a48a <HAL_TIM_PWM_Start+0x9e>
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2b0c      	cmp	r3, #12
 800a448:	d109      	bne.n	800a45e <HAL_TIM_PWM_Start+0x72>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b01      	cmp	r3, #1
 800a454:	bf14      	ite	ne
 800a456:	2301      	movne	r3, #1
 800a458:	2300      	moveq	r3, #0
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	e015      	b.n	800a48a <HAL_TIM_PWM_Start+0x9e>
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	2b10      	cmp	r3, #16
 800a462:	d109      	bne.n	800a478 <HAL_TIM_PWM_Start+0x8c>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	bf14      	ite	ne
 800a470:	2301      	movne	r3, #1
 800a472:	2300      	moveq	r3, #0
 800a474:	b2db      	uxtb	r3, r3
 800a476:	e008      	b.n	800a48a <HAL_TIM_PWM_Start+0x9e>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	2b01      	cmp	r3, #1
 800a482:	bf14      	ite	ne
 800a484:	2301      	movne	r3, #1
 800a486:	2300      	moveq	r3, #0
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d001      	beq.n	800a492 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	e0a1      	b.n	800a5d6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d104      	bne.n	800a4a2 <HAL_TIM_PWM_Start+0xb6>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2202      	movs	r2, #2
 800a49c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4a0:	e023      	b.n	800a4ea <HAL_TIM_PWM_Start+0xfe>
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	2b04      	cmp	r3, #4
 800a4a6:	d104      	bne.n	800a4b2 <HAL_TIM_PWM_Start+0xc6>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2202      	movs	r2, #2
 800a4ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4b0:	e01b      	b.n	800a4ea <HAL_TIM_PWM_Start+0xfe>
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	2b08      	cmp	r3, #8
 800a4b6:	d104      	bne.n	800a4c2 <HAL_TIM_PWM_Start+0xd6>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2202      	movs	r2, #2
 800a4bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4c0:	e013      	b.n	800a4ea <HAL_TIM_PWM_Start+0xfe>
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	2b0c      	cmp	r3, #12
 800a4c6:	d104      	bne.n	800a4d2 <HAL_TIM_PWM_Start+0xe6>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2202      	movs	r2, #2
 800a4cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a4d0:	e00b      	b.n	800a4ea <HAL_TIM_PWM_Start+0xfe>
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	2b10      	cmp	r3, #16
 800a4d6:	d104      	bne.n	800a4e2 <HAL_TIM_PWM_Start+0xf6>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2202      	movs	r2, #2
 800a4dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4e0:	e003      	b.n	800a4ea <HAL_TIM_PWM_Start+0xfe>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2202      	movs	r2, #2
 800a4e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	6839      	ldr	r1, [r7, #0]
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f001 fa82 	bl	800b9fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a38      	ldr	r2, [pc, #224]	; (800a5e0 <HAL_TIM_PWM_Start+0x1f4>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d013      	beq.n	800a52a <HAL_TIM_PWM_Start+0x13e>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a37      	ldr	r2, [pc, #220]	; (800a5e4 <HAL_TIM_PWM_Start+0x1f8>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d00e      	beq.n	800a52a <HAL_TIM_PWM_Start+0x13e>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a35      	ldr	r2, [pc, #212]	; (800a5e8 <HAL_TIM_PWM_Start+0x1fc>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d009      	beq.n	800a52a <HAL_TIM_PWM_Start+0x13e>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a34      	ldr	r2, [pc, #208]	; (800a5ec <HAL_TIM_PWM_Start+0x200>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d004      	beq.n	800a52a <HAL_TIM_PWM_Start+0x13e>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a32      	ldr	r2, [pc, #200]	; (800a5f0 <HAL_TIM_PWM_Start+0x204>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d101      	bne.n	800a52e <HAL_TIM_PWM_Start+0x142>
 800a52a:	2301      	movs	r3, #1
 800a52c:	e000      	b.n	800a530 <HAL_TIM_PWM_Start+0x144>
 800a52e:	2300      	movs	r3, #0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d007      	beq.n	800a544 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a542:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a25      	ldr	r2, [pc, #148]	; (800a5e0 <HAL_TIM_PWM_Start+0x1f4>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d022      	beq.n	800a594 <HAL_TIM_PWM_Start+0x1a8>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a556:	d01d      	beq.n	800a594 <HAL_TIM_PWM_Start+0x1a8>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a25      	ldr	r2, [pc, #148]	; (800a5f4 <HAL_TIM_PWM_Start+0x208>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d018      	beq.n	800a594 <HAL_TIM_PWM_Start+0x1a8>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a24      	ldr	r2, [pc, #144]	; (800a5f8 <HAL_TIM_PWM_Start+0x20c>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d013      	beq.n	800a594 <HAL_TIM_PWM_Start+0x1a8>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a22      	ldr	r2, [pc, #136]	; (800a5fc <HAL_TIM_PWM_Start+0x210>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d00e      	beq.n	800a594 <HAL_TIM_PWM_Start+0x1a8>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a1a      	ldr	r2, [pc, #104]	; (800a5e4 <HAL_TIM_PWM_Start+0x1f8>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d009      	beq.n	800a594 <HAL_TIM_PWM_Start+0x1a8>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a1e      	ldr	r2, [pc, #120]	; (800a600 <HAL_TIM_PWM_Start+0x214>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d004      	beq.n	800a594 <HAL_TIM_PWM_Start+0x1a8>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a16      	ldr	r2, [pc, #88]	; (800a5e8 <HAL_TIM_PWM_Start+0x1fc>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d115      	bne.n	800a5c0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	689a      	ldr	r2, [r3, #8]
 800a59a:	4b1a      	ldr	r3, [pc, #104]	; (800a604 <HAL_TIM_PWM_Start+0x218>)
 800a59c:	4013      	ands	r3, r2
 800a59e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2b06      	cmp	r3, #6
 800a5a4:	d015      	beq.n	800a5d2 <HAL_TIM_PWM_Start+0x1e6>
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5ac:	d011      	beq.n	800a5d2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f042 0201 	orr.w	r2, r2, #1
 800a5bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5be:	e008      	b.n	800a5d2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f042 0201 	orr.w	r2, r2, #1
 800a5ce:	601a      	str	r2, [r3, #0]
 800a5d0:	e000      	b.n	800a5d4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	40010000 	.word	0x40010000
 800a5e4:	40010400 	.word	0x40010400
 800a5e8:	40014000 	.word	0x40014000
 800a5ec:	40014400 	.word	0x40014400
 800a5f0:	40014800 	.word	0x40014800
 800a5f4:	40000400 	.word	0x40000400
 800a5f8:	40000800 	.word	0x40000800
 800a5fc:	40000c00 	.word	0x40000c00
 800a600:	40001800 	.word	0x40001800
 800a604:	00010007 	.word	0x00010007

0800a608 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a612:	2300      	movs	r3, #0
 800a614:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d109      	bne.n	800a630 <HAL_TIM_PWM_Start_IT+0x28>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a622:	b2db      	uxtb	r3, r3
 800a624:	2b01      	cmp	r3, #1
 800a626:	bf14      	ite	ne
 800a628:	2301      	movne	r3, #1
 800a62a:	2300      	moveq	r3, #0
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	e03c      	b.n	800a6aa <HAL_TIM_PWM_Start_IT+0xa2>
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	2b04      	cmp	r3, #4
 800a634:	d109      	bne.n	800a64a <HAL_TIM_PWM_Start_IT+0x42>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	2b01      	cmp	r3, #1
 800a640:	bf14      	ite	ne
 800a642:	2301      	movne	r3, #1
 800a644:	2300      	moveq	r3, #0
 800a646:	b2db      	uxtb	r3, r3
 800a648:	e02f      	b.n	800a6aa <HAL_TIM_PWM_Start_IT+0xa2>
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	2b08      	cmp	r3, #8
 800a64e:	d109      	bne.n	800a664 <HAL_TIM_PWM_Start_IT+0x5c>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a656:	b2db      	uxtb	r3, r3
 800a658:	2b01      	cmp	r3, #1
 800a65a:	bf14      	ite	ne
 800a65c:	2301      	movne	r3, #1
 800a65e:	2300      	moveq	r3, #0
 800a660:	b2db      	uxtb	r3, r3
 800a662:	e022      	b.n	800a6aa <HAL_TIM_PWM_Start_IT+0xa2>
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	2b0c      	cmp	r3, #12
 800a668:	d109      	bne.n	800a67e <HAL_TIM_PWM_Start_IT+0x76>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a670:	b2db      	uxtb	r3, r3
 800a672:	2b01      	cmp	r3, #1
 800a674:	bf14      	ite	ne
 800a676:	2301      	movne	r3, #1
 800a678:	2300      	moveq	r3, #0
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	e015      	b.n	800a6aa <HAL_TIM_PWM_Start_IT+0xa2>
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	2b10      	cmp	r3, #16
 800a682:	d109      	bne.n	800a698 <HAL_TIM_PWM_Start_IT+0x90>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	bf14      	ite	ne
 800a690:	2301      	movne	r3, #1
 800a692:	2300      	moveq	r3, #0
 800a694:	b2db      	uxtb	r3, r3
 800a696:	e008      	b.n	800a6aa <HAL_TIM_PWM_Start_IT+0xa2>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	bf14      	ite	ne
 800a6a4:	2301      	movne	r3, #1
 800a6a6:	2300      	moveq	r3, #0
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d001      	beq.n	800a6b2 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e0ec      	b.n	800a88c <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d104      	bne.n	800a6c2 <HAL_TIM_PWM_Start_IT+0xba>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2202      	movs	r2, #2
 800a6bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6c0:	e023      	b.n	800a70a <HAL_TIM_PWM_Start_IT+0x102>
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	2b04      	cmp	r3, #4
 800a6c6:	d104      	bne.n	800a6d2 <HAL_TIM_PWM_Start_IT+0xca>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2202      	movs	r2, #2
 800a6cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6d0:	e01b      	b.n	800a70a <HAL_TIM_PWM_Start_IT+0x102>
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	2b08      	cmp	r3, #8
 800a6d6:	d104      	bne.n	800a6e2 <HAL_TIM_PWM_Start_IT+0xda>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2202      	movs	r2, #2
 800a6dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6e0:	e013      	b.n	800a70a <HAL_TIM_PWM_Start_IT+0x102>
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b0c      	cmp	r3, #12
 800a6e6:	d104      	bne.n	800a6f2 <HAL_TIM_PWM_Start_IT+0xea>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2202      	movs	r2, #2
 800a6ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a6f0:	e00b      	b.n	800a70a <HAL_TIM_PWM_Start_IT+0x102>
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	2b10      	cmp	r3, #16
 800a6f6:	d104      	bne.n	800a702 <HAL_TIM_PWM_Start_IT+0xfa>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2202      	movs	r2, #2
 800a6fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a700:	e003      	b.n	800a70a <HAL_TIM_PWM_Start_IT+0x102>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2202      	movs	r2, #2
 800a706:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	2b0c      	cmp	r3, #12
 800a70e:	d841      	bhi.n	800a794 <HAL_TIM_PWM_Start_IT+0x18c>
 800a710:	a201      	add	r2, pc, #4	; (adr r2, 800a718 <HAL_TIM_PWM_Start_IT+0x110>)
 800a712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a716:	bf00      	nop
 800a718:	0800a74d 	.word	0x0800a74d
 800a71c:	0800a795 	.word	0x0800a795
 800a720:	0800a795 	.word	0x0800a795
 800a724:	0800a795 	.word	0x0800a795
 800a728:	0800a75f 	.word	0x0800a75f
 800a72c:	0800a795 	.word	0x0800a795
 800a730:	0800a795 	.word	0x0800a795
 800a734:	0800a795 	.word	0x0800a795
 800a738:	0800a771 	.word	0x0800a771
 800a73c:	0800a795 	.word	0x0800a795
 800a740:	0800a795 	.word	0x0800a795
 800a744:	0800a795 	.word	0x0800a795
 800a748:	0800a783 	.word	0x0800a783
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	68da      	ldr	r2, [r3, #12]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f042 0202 	orr.w	r2, r2, #2
 800a75a:	60da      	str	r2, [r3, #12]
      break;
 800a75c:	e01d      	b.n	800a79a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	68da      	ldr	r2, [r3, #12]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f042 0204 	orr.w	r2, r2, #4
 800a76c:	60da      	str	r2, [r3, #12]
      break;
 800a76e:	e014      	b.n	800a79a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68da      	ldr	r2, [r3, #12]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f042 0208 	orr.w	r2, r2, #8
 800a77e:	60da      	str	r2, [r3, #12]
      break;
 800a780:	e00b      	b.n	800a79a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68da      	ldr	r2, [r3, #12]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f042 0210 	orr.w	r2, r2, #16
 800a790:	60da      	str	r2, [r3, #12]
      break;
 800a792:	e002      	b.n	800a79a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	73fb      	strb	r3, [r7, #15]
      break;
 800a798:	bf00      	nop
  }

  if (status == HAL_OK)
 800a79a:	7bfb      	ldrb	r3, [r7, #15]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d174      	bne.n	800a88a <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	6839      	ldr	r1, [r7, #0]
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f001 f927 	bl	800b9fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a38      	ldr	r2, [pc, #224]	; (800a894 <HAL_TIM_PWM_Start_IT+0x28c>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d013      	beq.n	800a7e0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a36      	ldr	r2, [pc, #216]	; (800a898 <HAL_TIM_PWM_Start_IT+0x290>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d00e      	beq.n	800a7e0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a35      	ldr	r2, [pc, #212]	; (800a89c <HAL_TIM_PWM_Start_IT+0x294>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d009      	beq.n	800a7e0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a33      	ldr	r2, [pc, #204]	; (800a8a0 <HAL_TIM_PWM_Start_IT+0x298>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d004      	beq.n	800a7e0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a32      	ldr	r2, [pc, #200]	; (800a8a4 <HAL_TIM_PWM_Start_IT+0x29c>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d101      	bne.n	800a7e4 <HAL_TIM_PWM_Start_IT+0x1dc>
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e000      	b.n	800a7e6 <HAL_TIM_PWM_Start_IT+0x1de>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d007      	beq.n	800a7fa <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a25      	ldr	r2, [pc, #148]	; (800a894 <HAL_TIM_PWM_Start_IT+0x28c>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d022      	beq.n	800a84a <HAL_TIM_PWM_Start_IT+0x242>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a80c:	d01d      	beq.n	800a84a <HAL_TIM_PWM_Start_IT+0x242>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a25      	ldr	r2, [pc, #148]	; (800a8a8 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d018      	beq.n	800a84a <HAL_TIM_PWM_Start_IT+0x242>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a23      	ldr	r2, [pc, #140]	; (800a8ac <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d013      	beq.n	800a84a <HAL_TIM_PWM_Start_IT+0x242>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a22      	ldr	r2, [pc, #136]	; (800a8b0 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d00e      	beq.n	800a84a <HAL_TIM_PWM_Start_IT+0x242>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a19      	ldr	r2, [pc, #100]	; (800a898 <HAL_TIM_PWM_Start_IT+0x290>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d009      	beq.n	800a84a <HAL_TIM_PWM_Start_IT+0x242>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a1e      	ldr	r2, [pc, #120]	; (800a8b4 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d004      	beq.n	800a84a <HAL_TIM_PWM_Start_IT+0x242>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a15      	ldr	r2, [pc, #84]	; (800a89c <HAL_TIM_PWM_Start_IT+0x294>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d115      	bne.n	800a876 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	689a      	ldr	r2, [r3, #8]
 800a850:	4b19      	ldr	r3, [pc, #100]	; (800a8b8 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800a852:	4013      	ands	r3, r2
 800a854:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2b06      	cmp	r3, #6
 800a85a:	d015      	beq.n	800a888 <HAL_TIM_PWM_Start_IT+0x280>
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a862:	d011      	beq.n	800a888 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f042 0201 	orr.w	r2, r2, #1
 800a872:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a874:	e008      	b.n	800a888 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f042 0201 	orr.w	r2, r2, #1
 800a884:	601a      	str	r2, [r3, #0]
 800a886:	e000      	b.n	800a88a <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a888:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a88a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	40010000 	.word	0x40010000
 800a898:	40010400 	.word	0x40010400
 800a89c:	40014000 	.word	0x40014000
 800a8a0:	40014400 	.word	0x40014400
 800a8a4:	40014800 	.word	0x40014800
 800a8a8:	40000400 	.word	0x40000400
 800a8ac:	40000800 	.word	0x40000800
 800a8b0:	40000c00 	.word	0x40000c00
 800a8b4:	40001800 	.word	0x40001800
 800a8b8:	00010007 	.word	0x00010007

0800a8bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d101      	bne.n	800a8d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e08f      	b.n	800a9f0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d106      	bne.n	800a8ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7f7 ffdb 	bl	80028a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2202      	movs	r2, #2
 800a8ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	6899      	ldr	r1, [r3, #8]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	4b3e      	ldr	r3, [pc, #248]	; (800a9f8 <HAL_TIM_Encoder_Init+0x13c>)
 800a8fe:	400b      	ands	r3, r1
 800a900:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	3304      	adds	r3, #4
 800a90a:	4619      	mov	r1, r3
 800a90c:	4610      	mov	r0, r2
 800a90e:	f000 fc67 	bl	800b1e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	699b      	ldr	r3, [r3, #24]
 800a920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	6a1b      	ldr	r3, [r3, #32]
 800a928:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	697a      	ldr	r2, [r7, #20]
 800a930:	4313      	orrs	r3, r2
 800a932:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	4b31      	ldr	r3, [pc, #196]	; (800a9fc <HAL_TIM_Encoder_Init+0x140>)
 800a938:	4013      	ands	r3, r2
 800a93a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	689a      	ldr	r2, [r3, #8]
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	699b      	ldr	r3, [r3, #24]
 800a944:	021b      	lsls	r3, r3, #8
 800a946:	4313      	orrs	r3, r2
 800a948:	693a      	ldr	r2, [r7, #16]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a94e:	693a      	ldr	r2, [r7, #16]
 800a950:	4b2b      	ldr	r3, [pc, #172]	; (800aa00 <HAL_TIM_Encoder_Init+0x144>)
 800a952:	4013      	ands	r3, r2
 800a954:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	4b2a      	ldr	r3, [pc, #168]	; (800aa04 <HAL_TIM_Encoder_Init+0x148>)
 800a95a:	4013      	ands	r3, r2
 800a95c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	68da      	ldr	r2, [r3, #12]
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	69db      	ldr	r3, [r3, #28]
 800a966:	021b      	lsls	r3, r3, #8
 800a968:	4313      	orrs	r3, r2
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	691b      	ldr	r3, [r3, #16]
 800a974:	011a      	lsls	r2, r3, #4
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	6a1b      	ldr	r3, [r3, #32]
 800a97a:	031b      	lsls	r3, r3, #12
 800a97c:	4313      	orrs	r3, r2
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	4313      	orrs	r3, r2
 800a982:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a98a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a992:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	685a      	ldr	r2, [r3, #4]
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	695b      	ldr	r3, [r3, #20]
 800a99c:	011b      	lsls	r3, r3, #4
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	697a      	ldr	r2, [r7, #20]
 800a9ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	693a      	ldr	r2, [r7, #16]
 800a9b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3718      	adds	r7, #24
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	fffebff8 	.word	0xfffebff8
 800a9fc:	fffffcfc 	.word	0xfffffcfc
 800aa00:	fffff3f3 	.word	0xfffff3f3
 800aa04:	ffff0f0f 	.word	0xffff0f0f

0800aa08 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa18:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aa20:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa28:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa30:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d110      	bne.n	800aa5a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa38:	7bfb      	ldrb	r3, [r7, #15]
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d102      	bne.n	800aa44 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800aa3e:	7b7b      	ldrb	r3, [r7, #13]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d001      	beq.n	800aa48 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	e069      	b.n	800ab1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2202      	movs	r2, #2
 800aa4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2202      	movs	r2, #2
 800aa54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa58:	e031      	b.n	800aabe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	2b04      	cmp	r3, #4
 800aa5e:	d110      	bne.n	800aa82 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa60:	7bbb      	ldrb	r3, [r7, #14]
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d102      	bne.n	800aa6c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aa66:	7b3b      	ldrb	r3, [r7, #12]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d001      	beq.n	800aa70 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e055      	b.n	800ab1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2202      	movs	r2, #2
 800aa74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2202      	movs	r2, #2
 800aa7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa80:	e01d      	b.n	800aabe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa82:	7bfb      	ldrb	r3, [r7, #15]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d108      	bne.n	800aa9a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa88:	7bbb      	ldrb	r3, [r7, #14]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d105      	bne.n	800aa9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa8e:	7b7b      	ldrb	r3, [r7, #13]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d102      	bne.n	800aa9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aa94:	7b3b      	ldrb	r3, [r7, #12]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d001      	beq.n	800aa9e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e03e      	b.n	800ab1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2202      	movs	r2, #2
 800aaa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2202      	movs	r2, #2
 800aaaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2202      	movs	r2, #2
 800aab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2202      	movs	r2, #2
 800aaba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d003      	beq.n	800aacc <HAL_TIM_Encoder_Start+0xc4>
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	2b04      	cmp	r3, #4
 800aac8:	d008      	beq.n	800aadc <HAL_TIM_Encoder_Start+0xd4>
 800aaca:	e00f      	b.n	800aaec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2201      	movs	r2, #1
 800aad2:	2100      	movs	r1, #0
 800aad4:	4618      	mov	r0, r3
 800aad6:	f000 ff91 	bl	800b9fc <TIM_CCxChannelCmd>
      break;
 800aada:	e016      	b.n	800ab0a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2201      	movs	r2, #1
 800aae2:	2104      	movs	r1, #4
 800aae4:	4618      	mov	r0, r3
 800aae6:	f000 ff89 	bl	800b9fc <TIM_CCxChannelCmd>
      break;
 800aaea:	e00e      	b.n	800ab0a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f000 ff81 	bl	800b9fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2201      	movs	r2, #1
 800ab00:	2104      	movs	r1, #4
 800ab02:	4618      	mov	r0, r3
 800ab04:	f000 ff7a 	bl	800b9fc <TIM_CCxChannelCmd>
      break;
 800ab08:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f042 0201 	orr.w	r2, r2, #1
 800ab18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	691b      	ldr	r3, [r3, #16]
 800ab32:	f003 0302 	and.w	r3, r3, #2
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d122      	bne.n	800ab80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	f003 0302 	and.w	r3, r3, #2
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d11b      	bne.n	800ab80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f06f 0202 	mvn.w	r2, #2
 800ab50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2201      	movs	r2, #1
 800ab56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	699b      	ldr	r3, [r3, #24]
 800ab5e:	f003 0303 	and.w	r3, r3, #3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d003      	beq.n	800ab6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 fb1c 	bl	800b1a4 <HAL_TIM_IC_CaptureCallback>
 800ab6c:	e005      	b.n	800ab7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 fb0e 	bl	800b190 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 fb1f 	bl	800b1b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	f003 0304 	and.w	r3, r3, #4
 800ab8a:	2b04      	cmp	r3, #4
 800ab8c:	d122      	bne.n	800abd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	f003 0304 	and.w	r3, r3, #4
 800ab98:	2b04      	cmp	r3, #4
 800ab9a:	d11b      	bne.n	800abd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f06f 0204 	mvn.w	r2, #4
 800aba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2202      	movs	r2, #2
 800abaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d003      	beq.n	800abc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 faf2 	bl	800b1a4 <HAL_TIM_IC_CaptureCallback>
 800abc0:	e005      	b.n	800abce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fae4 	bl	800b190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 faf5 	bl	800b1b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	f003 0308 	and.w	r3, r3, #8
 800abde:	2b08      	cmp	r3, #8
 800abe0:	d122      	bne.n	800ac28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	f003 0308 	and.w	r3, r3, #8
 800abec:	2b08      	cmp	r3, #8
 800abee:	d11b      	bne.n	800ac28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f06f 0208 	mvn.w	r2, #8
 800abf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2204      	movs	r2, #4
 800abfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	69db      	ldr	r3, [r3, #28]
 800ac06:	f003 0303 	and.w	r3, r3, #3
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d003      	beq.n	800ac16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fac8 	bl	800b1a4 <HAL_TIM_IC_CaptureCallback>
 800ac14:	e005      	b.n	800ac22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 faba 	bl	800b190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 facb 	bl	800b1b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	f003 0310 	and.w	r3, r3, #16
 800ac32:	2b10      	cmp	r3, #16
 800ac34:	d122      	bne.n	800ac7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	f003 0310 	and.w	r3, r3, #16
 800ac40:	2b10      	cmp	r3, #16
 800ac42:	d11b      	bne.n	800ac7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f06f 0210 	mvn.w	r2, #16
 800ac4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2208      	movs	r2, #8
 800ac52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	69db      	ldr	r3, [r3, #28]
 800ac5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d003      	beq.n	800ac6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 fa9e 	bl	800b1a4 <HAL_TIM_IC_CaptureCallback>
 800ac68:	e005      	b.n	800ac76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fa90 	bl	800b190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 faa1 	bl	800b1b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	691b      	ldr	r3, [r3, #16]
 800ac82:	f003 0301 	and.w	r3, r3, #1
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d10e      	bne.n	800aca8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	f003 0301 	and.w	r3, r3, #1
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d107      	bne.n	800aca8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f06f 0201 	mvn.w	r2, #1
 800aca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 fa6a 	bl	800b17c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acb2:	2b80      	cmp	r3, #128	; 0x80
 800acb4:	d10e      	bne.n	800acd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acc0:	2b80      	cmp	r3, #128	; 0x80
 800acc2:	d107      	bne.n	800acd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800accc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 ffd0 	bl	800bc74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ace2:	d10e      	bne.n	800ad02 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acee:	2b80      	cmp	r3, #128	; 0x80
 800acf0:	d107      	bne.n	800ad02 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800acfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 ffc3 	bl	800bc88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad0c:	2b40      	cmp	r3, #64	; 0x40
 800ad0e:	d10e      	bne.n	800ad2e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad1a:	2b40      	cmp	r3, #64	; 0x40
 800ad1c:	d107      	bne.n	800ad2e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 fa4f 	bl	800b1cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	691b      	ldr	r3, [r3, #16]
 800ad34:	f003 0320 	and.w	r3, r3, #32
 800ad38:	2b20      	cmp	r3, #32
 800ad3a:	d10e      	bne.n	800ad5a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	f003 0320 	and.w	r3, r3, #32
 800ad46:	2b20      	cmp	r3, #32
 800ad48:	d107      	bne.n	800ad5a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f06f 0220 	mvn.w	r2, #32
 800ad52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 ff83 	bl	800bc60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad5a:	bf00      	nop
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
	...

0800ad64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b086      	sub	sp, #24
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad70:	2300      	movs	r3, #0
 800ad72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d101      	bne.n	800ad82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ad7e:	2302      	movs	r3, #2
 800ad80:	e0ff      	b.n	800af82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2201      	movs	r2, #1
 800ad86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2b14      	cmp	r3, #20
 800ad8e:	f200 80f0 	bhi.w	800af72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ad92:	a201      	add	r2, pc, #4	; (adr r2, 800ad98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ad94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad98:	0800aded 	.word	0x0800aded
 800ad9c:	0800af73 	.word	0x0800af73
 800ada0:	0800af73 	.word	0x0800af73
 800ada4:	0800af73 	.word	0x0800af73
 800ada8:	0800ae2d 	.word	0x0800ae2d
 800adac:	0800af73 	.word	0x0800af73
 800adb0:	0800af73 	.word	0x0800af73
 800adb4:	0800af73 	.word	0x0800af73
 800adb8:	0800ae6f 	.word	0x0800ae6f
 800adbc:	0800af73 	.word	0x0800af73
 800adc0:	0800af73 	.word	0x0800af73
 800adc4:	0800af73 	.word	0x0800af73
 800adc8:	0800aeaf 	.word	0x0800aeaf
 800adcc:	0800af73 	.word	0x0800af73
 800add0:	0800af73 	.word	0x0800af73
 800add4:	0800af73 	.word	0x0800af73
 800add8:	0800aef1 	.word	0x0800aef1
 800addc:	0800af73 	.word	0x0800af73
 800ade0:	0800af73 	.word	0x0800af73
 800ade4:	0800af73 	.word	0x0800af73
 800ade8:	0800af31 	.word	0x0800af31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	68b9      	ldr	r1, [r7, #8]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f000 fa8e 	bl	800b314 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	699a      	ldr	r2, [r3, #24]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f042 0208 	orr.w	r2, r2, #8
 800ae06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	699a      	ldr	r2, [r3, #24]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f022 0204 	bic.w	r2, r2, #4
 800ae16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	6999      	ldr	r1, [r3, #24]
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	691a      	ldr	r2, [r3, #16]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	430a      	orrs	r2, r1
 800ae28:	619a      	str	r2, [r3, #24]
      break;
 800ae2a:	e0a5      	b.n	800af78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	68b9      	ldr	r1, [r7, #8]
 800ae32:	4618      	mov	r0, r3
 800ae34:	f000 fafe 	bl	800b434 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	699a      	ldr	r2, [r3, #24]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	699a      	ldr	r2, [r3, #24]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	6999      	ldr	r1, [r3, #24]
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	691b      	ldr	r3, [r3, #16]
 800ae62:	021a      	lsls	r2, r3, #8
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	430a      	orrs	r2, r1
 800ae6a:	619a      	str	r2, [r3, #24]
      break;
 800ae6c:	e084      	b.n	800af78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68b9      	ldr	r1, [r7, #8]
 800ae74:	4618      	mov	r0, r3
 800ae76:	f000 fb67 	bl	800b548 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	69da      	ldr	r2, [r3, #28]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f042 0208 	orr.w	r2, r2, #8
 800ae88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	69da      	ldr	r2, [r3, #28]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f022 0204 	bic.w	r2, r2, #4
 800ae98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	69d9      	ldr	r1, [r3, #28]
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	691a      	ldr	r2, [r3, #16]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	430a      	orrs	r2, r1
 800aeaa:	61da      	str	r2, [r3, #28]
      break;
 800aeac:	e064      	b.n	800af78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	68b9      	ldr	r1, [r7, #8]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 fbcf 	bl	800b658 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	69da      	ldr	r2, [r3, #28]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	69da      	ldr	r2, [r3, #28]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	69d9      	ldr	r1, [r3, #28]
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	691b      	ldr	r3, [r3, #16]
 800aee4:	021a      	lsls	r2, r3, #8
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	430a      	orrs	r2, r1
 800aeec:	61da      	str	r2, [r3, #28]
      break;
 800aeee:	e043      	b.n	800af78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	68b9      	ldr	r1, [r7, #8]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f000 fc18 	bl	800b72c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f042 0208 	orr.w	r2, r2, #8
 800af0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f022 0204 	bic.w	r2, r2, #4
 800af1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	691a      	ldr	r2, [r3, #16]
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	430a      	orrs	r2, r1
 800af2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800af2e:	e023      	b.n	800af78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	68b9      	ldr	r1, [r7, #8]
 800af36:	4618      	mov	r0, r3
 800af38:	f000 fc5c 	bl	800b7f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	021a      	lsls	r2, r3, #8
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	430a      	orrs	r2, r1
 800af6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800af70:	e002      	b.n	800af78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	75fb      	strb	r3, [r7, #23]
      break;
 800af76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800af80:	7dfb      	ldrb	r3, [r7, #23]
}
 800af82:	4618      	mov	r0, r3
 800af84:	3718      	adds	r7, #24
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop

0800af8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af96:	2300      	movs	r3, #0
 800af98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d101      	bne.n	800afa8 <HAL_TIM_ConfigClockSource+0x1c>
 800afa4:	2302      	movs	r3, #2
 800afa6:	e0dc      	b.n	800b162 <HAL_TIM_ConfigClockSource+0x1d6>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2202      	movs	r2, #2
 800afb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800afc0:	68ba      	ldr	r2, [r7, #8]
 800afc2:	4b6a      	ldr	r3, [pc, #424]	; (800b16c <HAL_TIM_ConfigClockSource+0x1e0>)
 800afc4:	4013      	ands	r3, r2
 800afc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	68ba      	ldr	r2, [r7, #8]
 800afd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a64      	ldr	r2, [pc, #400]	; (800b170 <HAL_TIM_ConfigClockSource+0x1e4>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	f000 80a9 	beq.w	800b136 <HAL_TIM_ConfigClockSource+0x1aa>
 800afe4:	4a62      	ldr	r2, [pc, #392]	; (800b170 <HAL_TIM_ConfigClockSource+0x1e4>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	f200 80ae 	bhi.w	800b148 <HAL_TIM_ConfigClockSource+0x1bc>
 800afec:	4a61      	ldr	r2, [pc, #388]	; (800b174 <HAL_TIM_ConfigClockSource+0x1e8>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	f000 80a1 	beq.w	800b136 <HAL_TIM_ConfigClockSource+0x1aa>
 800aff4:	4a5f      	ldr	r2, [pc, #380]	; (800b174 <HAL_TIM_ConfigClockSource+0x1e8>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	f200 80a6 	bhi.w	800b148 <HAL_TIM_ConfigClockSource+0x1bc>
 800affc:	4a5e      	ldr	r2, [pc, #376]	; (800b178 <HAL_TIM_ConfigClockSource+0x1ec>)
 800affe:	4293      	cmp	r3, r2
 800b000:	f000 8099 	beq.w	800b136 <HAL_TIM_ConfigClockSource+0x1aa>
 800b004:	4a5c      	ldr	r2, [pc, #368]	; (800b178 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b006:	4293      	cmp	r3, r2
 800b008:	f200 809e 	bhi.w	800b148 <HAL_TIM_ConfigClockSource+0x1bc>
 800b00c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b010:	f000 8091 	beq.w	800b136 <HAL_TIM_ConfigClockSource+0x1aa>
 800b014:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b018:	f200 8096 	bhi.w	800b148 <HAL_TIM_ConfigClockSource+0x1bc>
 800b01c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b020:	f000 8089 	beq.w	800b136 <HAL_TIM_ConfigClockSource+0x1aa>
 800b024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b028:	f200 808e 	bhi.w	800b148 <HAL_TIM_ConfigClockSource+0x1bc>
 800b02c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b030:	d03e      	beq.n	800b0b0 <HAL_TIM_ConfigClockSource+0x124>
 800b032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b036:	f200 8087 	bhi.w	800b148 <HAL_TIM_ConfigClockSource+0x1bc>
 800b03a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b03e:	f000 8086 	beq.w	800b14e <HAL_TIM_ConfigClockSource+0x1c2>
 800b042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b046:	d87f      	bhi.n	800b148 <HAL_TIM_ConfigClockSource+0x1bc>
 800b048:	2b70      	cmp	r3, #112	; 0x70
 800b04a:	d01a      	beq.n	800b082 <HAL_TIM_ConfigClockSource+0xf6>
 800b04c:	2b70      	cmp	r3, #112	; 0x70
 800b04e:	d87b      	bhi.n	800b148 <HAL_TIM_ConfigClockSource+0x1bc>
 800b050:	2b60      	cmp	r3, #96	; 0x60
 800b052:	d050      	beq.n	800b0f6 <HAL_TIM_ConfigClockSource+0x16a>
 800b054:	2b60      	cmp	r3, #96	; 0x60
 800b056:	d877      	bhi.n	800b148 <HAL_TIM_ConfigClockSource+0x1bc>
 800b058:	2b50      	cmp	r3, #80	; 0x50
 800b05a:	d03c      	beq.n	800b0d6 <HAL_TIM_ConfigClockSource+0x14a>
 800b05c:	2b50      	cmp	r3, #80	; 0x50
 800b05e:	d873      	bhi.n	800b148 <HAL_TIM_ConfigClockSource+0x1bc>
 800b060:	2b40      	cmp	r3, #64	; 0x40
 800b062:	d058      	beq.n	800b116 <HAL_TIM_ConfigClockSource+0x18a>
 800b064:	2b40      	cmp	r3, #64	; 0x40
 800b066:	d86f      	bhi.n	800b148 <HAL_TIM_ConfigClockSource+0x1bc>
 800b068:	2b30      	cmp	r3, #48	; 0x30
 800b06a:	d064      	beq.n	800b136 <HAL_TIM_ConfigClockSource+0x1aa>
 800b06c:	2b30      	cmp	r3, #48	; 0x30
 800b06e:	d86b      	bhi.n	800b148 <HAL_TIM_ConfigClockSource+0x1bc>
 800b070:	2b20      	cmp	r3, #32
 800b072:	d060      	beq.n	800b136 <HAL_TIM_ConfigClockSource+0x1aa>
 800b074:	2b20      	cmp	r3, #32
 800b076:	d867      	bhi.n	800b148 <HAL_TIM_ConfigClockSource+0x1bc>
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d05c      	beq.n	800b136 <HAL_TIM_ConfigClockSource+0x1aa>
 800b07c:	2b10      	cmp	r3, #16
 800b07e:	d05a      	beq.n	800b136 <HAL_TIM_ConfigClockSource+0x1aa>
 800b080:	e062      	b.n	800b148 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6818      	ldr	r0, [r3, #0]
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	6899      	ldr	r1, [r3, #8]
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	685a      	ldr	r2, [r3, #4]
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	f000 fc93 	bl	800b9bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b0a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	609a      	str	r2, [r3, #8]
      break;
 800b0ae:	e04f      	b.n	800b150 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6818      	ldr	r0, [r3, #0]
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	6899      	ldr	r1, [r3, #8]
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	685a      	ldr	r2, [r3, #4]
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	f000 fc7c 	bl	800b9bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	689a      	ldr	r2, [r3, #8]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b0d2:	609a      	str	r2, [r3, #8]
      break;
 800b0d4:	e03c      	b.n	800b150 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6818      	ldr	r0, [r3, #0]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	6859      	ldr	r1, [r3, #4]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	f000 fbec 	bl	800b8c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2150      	movs	r1, #80	; 0x50
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f000 fc46 	bl	800b980 <TIM_ITRx_SetConfig>
      break;
 800b0f4:	e02c      	b.n	800b150 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6818      	ldr	r0, [r3, #0]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	6859      	ldr	r1, [r3, #4]
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	461a      	mov	r2, r3
 800b104:	f000 fc0b 	bl	800b91e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2160      	movs	r1, #96	; 0x60
 800b10e:	4618      	mov	r0, r3
 800b110:	f000 fc36 	bl	800b980 <TIM_ITRx_SetConfig>
      break;
 800b114:	e01c      	b.n	800b150 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6818      	ldr	r0, [r3, #0]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	6859      	ldr	r1, [r3, #4]
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	461a      	mov	r2, r3
 800b124:	f000 fbcc 	bl	800b8c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2140      	movs	r1, #64	; 0x40
 800b12e:	4618      	mov	r0, r3
 800b130:	f000 fc26 	bl	800b980 <TIM_ITRx_SetConfig>
      break;
 800b134:	e00c      	b.n	800b150 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4619      	mov	r1, r3
 800b140:	4610      	mov	r0, r2
 800b142:	f000 fc1d 	bl	800b980 <TIM_ITRx_SetConfig>
      break;
 800b146:	e003      	b.n	800b150 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b148:	2301      	movs	r3, #1
 800b14a:	73fb      	strb	r3, [r7, #15]
      break;
 800b14c:	e000      	b.n	800b150 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b14e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b160:	7bfb      	ldrb	r3, [r7, #15]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	ffceff88 	.word	0xffceff88
 800b170:	00100040 	.word	0x00100040
 800b174:	00100030 	.word	0x00100030
 800b178:	00100020 	.word	0x00100020

0800b17c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b184:	bf00      	nop
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b198:	bf00      	nop
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b1c0:	bf00      	nop
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b1d4:	bf00      	nop
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	4a40      	ldr	r2, [pc, #256]	; (800b2f4 <TIM_Base_SetConfig+0x114>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d013      	beq.n	800b220 <TIM_Base_SetConfig+0x40>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1fe:	d00f      	beq.n	800b220 <TIM_Base_SetConfig+0x40>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	4a3d      	ldr	r2, [pc, #244]	; (800b2f8 <TIM_Base_SetConfig+0x118>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d00b      	beq.n	800b220 <TIM_Base_SetConfig+0x40>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4a3c      	ldr	r2, [pc, #240]	; (800b2fc <TIM_Base_SetConfig+0x11c>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d007      	beq.n	800b220 <TIM_Base_SetConfig+0x40>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4a3b      	ldr	r2, [pc, #236]	; (800b300 <TIM_Base_SetConfig+0x120>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d003      	beq.n	800b220 <TIM_Base_SetConfig+0x40>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	4a3a      	ldr	r2, [pc, #232]	; (800b304 <TIM_Base_SetConfig+0x124>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d108      	bne.n	800b232 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	4313      	orrs	r3, r2
 800b230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4a2f      	ldr	r2, [pc, #188]	; (800b2f4 <TIM_Base_SetConfig+0x114>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d01f      	beq.n	800b27a <TIM_Base_SetConfig+0x9a>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b240:	d01b      	beq.n	800b27a <TIM_Base_SetConfig+0x9a>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	4a2c      	ldr	r2, [pc, #176]	; (800b2f8 <TIM_Base_SetConfig+0x118>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d017      	beq.n	800b27a <TIM_Base_SetConfig+0x9a>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4a2b      	ldr	r2, [pc, #172]	; (800b2fc <TIM_Base_SetConfig+0x11c>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d013      	beq.n	800b27a <TIM_Base_SetConfig+0x9a>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	4a2a      	ldr	r2, [pc, #168]	; (800b300 <TIM_Base_SetConfig+0x120>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d00f      	beq.n	800b27a <TIM_Base_SetConfig+0x9a>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4a29      	ldr	r2, [pc, #164]	; (800b304 <TIM_Base_SetConfig+0x124>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d00b      	beq.n	800b27a <TIM_Base_SetConfig+0x9a>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4a28      	ldr	r2, [pc, #160]	; (800b308 <TIM_Base_SetConfig+0x128>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d007      	beq.n	800b27a <TIM_Base_SetConfig+0x9a>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4a27      	ldr	r2, [pc, #156]	; (800b30c <TIM_Base_SetConfig+0x12c>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d003      	beq.n	800b27a <TIM_Base_SetConfig+0x9a>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	4a26      	ldr	r2, [pc, #152]	; (800b310 <TIM_Base_SetConfig+0x130>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d108      	bne.n	800b28c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	4313      	orrs	r3, r2
 800b28a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	695b      	ldr	r3, [r3, #20]
 800b296:	4313      	orrs	r3, r2
 800b298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	689a      	ldr	r2, [r3, #8]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	4a10      	ldr	r2, [pc, #64]	; (800b2f4 <TIM_Base_SetConfig+0x114>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d00f      	beq.n	800b2d8 <TIM_Base_SetConfig+0xf8>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	4a12      	ldr	r2, [pc, #72]	; (800b304 <TIM_Base_SetConfig+0x124>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d00b      	beq.n	800b2d8 <TIM_Base_SetConfig+0xf8>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	4a11      	ldr	r2, [pc, #68]	; (800b308 <TIM_Base_SetConfig+0x128>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d007      	beq.n	800b2d8 <TIM_Base_SetConfig+0xf8>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a10      	ldr	r2, [pc, #64]	; (800b30c <TIM_Base_SetConfig+0x12c>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d003      	beq.n	800b2d8 <TIM_Base_SetConfig+0xf8>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a0f      	ldr	r2, [pc, #60]	; (800b310 <TIM_Base_SetConfig+0x130>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d103      	bne.n	800b2e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	691a      	ldr	r2, [r3, #16]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	615a      	str	r2, [r3, #20]
}
 800b2e6:	bf00      	nop
 800b2e8:	3714      	adds	r7, #20
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	40010000 	.word	0x40010000
 800b2f8:	40000400 	.word	0x40000400
 800b2fc:	40000800 	.word	0x40000800
 800b300:	40000c00 	.word	0x40000c00
 800b304:	40010400 	.word	0x40010400
 800b308:	40014000 	.word	0x40014000
 800b30c:	40014400 	.word	0x40014400
 800b310:	40014800 	.word	0x40014800

0800b314 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b314:	b480      	push	{r7}
 800b316:	b087      	sub	sp, #28
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a1b      	ldr	r3, [r3, #32]
 800b322:	f023 0201 	bic.w	r2, r3, #1
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a1b      	ldr	r3, [r3, #32]
 800b32e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	699b      	ldr	r3, [r3, #24]
 800b33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	4b37      	ldr	r3, [pc, #220]	; (800b41c <TIM_OC1_SetConfig+0x108>)
 800b340:	4013      	ands	r3, r2
 800b342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f023 0303 	bic.w	r3, r3, #3
 800b34a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	4313      	orrs	r3, r2
 800b354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	f023 0302 	bic.w	r3, r3, #2
 800b35c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	697a      	ldr	r2, [r7, #20]
 800b364:	4313      	orrs	r3, r2
 800b366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4a2d      	ldr	r2, [pc, #180]	; (800b420 <TIM_OC1_SetConfig+0x10c>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d00f      	beq.n	800b390 <TIM_OC1_SetConfig+0x7c>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	4a2c      	ldr	r2, [pc, #176]	; (800b424 <TIM_OC1_SetConfig+0x110>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d00b      	beq.n	800b390 <TIM_OC1_SetConfig+0x7c>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	4a2b      	ldr	r2, [pc, #172]	; (800b428 <TIM_OC1_SetConfig+0x114>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d007      	beq.n	800b390 <TIM_OC1_SetConfig+0x7c>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	4a2a      	ldr	r2, [pc, #168]	; (800b42c <TIM_OC1_SetConfig+0x118>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d003      	beq.n	800b390 <TIM_OC1_SetConfig+0x7c>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4a29      	ldr	r2, [pc, #164]	; (800b430 <TIM_OC1_SetConfig+0x11c>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d10c      	bne.n	800b3aa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	f023 0308 	bic.w	r3, r3, #8
 800b396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	697a      	ldr	r2, [r7, #20]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	f023 0304 	bic.w	r3, r3, #4
 800b3a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4a1c      	ldr	r2, [pc, #112]	; (800b420 <TIM_OC1_SetConfig+0x10c>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d00f      	beq.n	800b3d2 <TIM_OC1_SetConfig+0xbe>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	4a1b      	ldr	r2, [pc, #108]	; (800b424 <TIM_OC1_SetConfig+0x110>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d00b      	beq.n	800b3d2 <TIM_OC1_SetConfig+0xbe>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	4a1a      	ldr	r2, [pc, #104]	; (800b428 <TIM_OC1_SetConfig+0x114>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d007      	beq.n	800b3d2 <TIM_OC1_SetConfig+0xbe>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	4a19      	ldr	r2, [pc, #100]	; (800b42c <TIM_OC1_SetConfig+0x118>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d003      	beq.n	800b3d2 <TIM_OC1_SetConfig+0xbe>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4a18      	ldr	r2, [pc, #96]	; (800b430 <TIM_OC1_SetConfig+0x11c>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d111      	bne.n	800b3f6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	695b      	ldr	r3, [r3, #20]
 800b3e6:	693a      	ldr	r2, [r7, #16]
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	699b      	ldr	r3, [r3, #24]
 800b3f0:	693a      	ldr	r2, [r7, #16]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	693a      	ldr	r2, [r7, #16]
 800b3fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	685a      	ldr	r2, [r3, #4]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	697a      	ldr	r2, [r7, #20]
 800b40e:	621a      	str	r2, [r3, #32]
}
 800b410:	bf00      	nop
 800b412:	371c      	adds	r7, #28
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr
 800b41c:	fffeff8f 	.word	0xfffeff8f
 800b420:	40010000 	.word	0x40010000
 800b424:	40010400 	.word	0x40010400
 800b428:	40014000 	.word	0x40014000
 800b42c:	40014400 	.word	0x40014400
 800b430:	40014800 	.word	0x40014800

0800b434 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b434:	b480      	push	{r7}
 800b436:	b087      	sub	sp, #28
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	f023 0210 	bic.w	r2, r3, #16
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6a1b      	ldr	r3, [r3, #32]
 800b44e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	699b      	ldr	r3, [r3, #24]
 800b45a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	4b34      	ldr	r3, [pc, #208]	; (800b530 <TIM_OC2_SetConfig+0xfc>)
 800b460:	4013      	ands	r3, r2
 800b462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b46a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	021b      	lsls	r3, r3, #8
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	4313      	orrs	r3, r2
 800b476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	f023 0320 	bic.w	r3, r3, #32
 800b47e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	011b      	lsls	r3, r3, #4
 800b486:	697a      	ldr	r2, [r7, #20]
 800b488:	4313      	orrs	r3, r2
 800b48a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4a29      	ldr	r2, [pc, #164]	; (800b534 <TIM_OC2_SetConfig+0x100>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d003      	beq.n	800b49c <TIM_OC2_SetConfig+0x68>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a28      	ldr	r2, [pc, #160]	; (800b538 <TIM_OC2_SetConfig+0x104>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d10d      	bne.n	800b4b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b4a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	011b      	lsls	r3, r3, #4
 800b4aa:	697a      	ldr	r2, [r7, #20]
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a1e      	ldr	r2, [pc, #120]	; (800b534 <TIM_OC2_SetConfig+0x100>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d00f      	beq.n	800b4e0 <TIM_OC2_SetConfig+0xac>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4a1d      	ldr	r2, [pc, #116]	; (800b538 <TIM_OC2_SetConfig+0x104>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d00b      	beq.n	800b4e0 <TIM_OC2_SetConfig+0xac>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a1c      	ldr	r2, [pc, #112]	; (800b53c <TIM_OC2_SetConfig+0x108>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d007      	beq.n	800b4e0 <TIM_OC2_SetConfig+0xac>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	4a1b      	ldr	r2, [pc, #108]	; (800b540 <TIM_OC2_SetConfig+0x10c>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d003      	beq.n	800b4e0 <TIM_OC2_SetConfig+0xac>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4a1a      	ldr	r2, [pc, #104]	; (800b544 <TIM_OC2_SetConfig+0x110>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d113      	bne.n	800b508 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b4e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	695b      	ldr	r3, [r3, #20]
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	693a      	ldr	r2, [r7, #16]
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	693a      	ldr	r2, [r7, #16]
 800b504:	4313      	orrs	r3, r2
 800b506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	693a      	ldr	r2, [r7, #16]
 800b50c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	685a      	ldr	r2, [r3, #4]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	697a      	ldr	r2, [r7, #20]
 800b520:	621a      	str	r2, [r3, #32]
}
 800b522:	bf00      	nop
 800b524:	371c      	adds	r7, #28
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	feff8fff 	.word	0xfeff8fff
 800b534:	40010000 	.word	0x40010000
 800b538:	40010400 	.word	0x40010400
 800b53c:	40014000 	.word	0x40014000
 800b540:	40014400 	.word	0x40014400
 800b544:	40014800 	.word	0x40014800

0800b548 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b548:	b480      	push	{r7}
 800b54a:	b087      	sub	sp, #28
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a1b      	ldr	r3, [r3, #32]
 800b556:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6a1b      	ldr	r3, [r3, #32]
 800b562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	69db      	ldr	r3, [r3, #28]
 800b56e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	4b33      	ldr	r3, [pc, #204]	; (800b640 <TIM_OC3_SetConfig+0xf8>)
 800b574:	4013      	ands	r3, r2
 800b576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f023 0303 	bic.w	r3, r3, #3
 800b57e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	4313      	orrs	r3, r2
 800b588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	021b      	lsls	r3, r3, #8
 800b598:	697a      	ldr	r2, [r7, #20]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	4a28      	ldr	r2, [pc, #160]	; (800b644 <TIM_OC3_SetConfig+0xfc>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d003      	beq.n	800b5ae <TIM_OC3_SetConfig+0x66>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4a27      	ldr	r2, [pc, #156]	; (800b648 <TIM_OC3_SetConfig+0x100>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d10d      	bne.n	800b5ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	021b      	lsls	r3, r3, #8
 800b5bc:	697a      	ldr	r2, [r7, #20]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4a1d      	ldr	r2, [pc, #116]	; (800b644 <TIM_OC3_SetConfig+0xfc>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d00f      	beq.n	800b5f2 <TIM_OC3_SetConfig+0xaa>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4a1c      	ldr	r2, [pc, #112]	; (800b648 <TIM_OC3_SetConfig+0x100>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d00b      	beq.n	800b5f2 <TIM_OC3_SetConfig+0xaa>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4a1b      	ldr	r2, [pc, #108]	; (800b64c <TIM_OC3_SetConfig+0x104>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d007      	beq.n	800b5f2 <TIM_OC3_SetConfig+0xaa>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a1a      	ldr	r2, [pc, #104]	; (800b650 <TIM_OC3_SetConfig+0x108>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d003      	beq.n	800b5f2 <TIM_OC3_SetConfig+0xaa>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a19      	ldr	r2, [pc, #100]	; (800b654 <TIM_OC3_SetConfig+0x10c>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d113      	bne.n	800b61a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	695b      	ldr	r3, [r3, #20]
 800b606:	011b      	lsls	r3, r3, #4
 800b608:	693a      	ldr	r2, [r7, #16]
 800b60a:	4313      	orrs	r3, r2
 800b60c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	699b      	ldr	r3, [r3, #24]
 800b612:	011b      	lsls	r3, r3, #4
 800b614:	693a      	ldr	r2, [r7, #16]
 800b616:	4313      	orrs	r3, r2
 800b618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	693a      	ldr	r2, [r7, #16]
 800b61e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	685a      	ldr	r2, [r3, #4]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	697a      	ldr	r2, [r7, #20]
 800b632:	621a      	str	r2, [r3, #32]
}
 800b634:	bf00      	nop
 800b636:	371c      	adds	r7, #28
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	fffeff8f 	.word	0xfffeff8f
 800b644:	40010000 	.word	0x40010000
 800b648:	40010400 	.word	0x40010400
 800b64c:	40014000 	.word	0x40014000
 800b650:	40014400 	.word	0x40014400
 800b654:	40014800 	.word	0x40014800

0800b658 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b658:	b480      	push	{r7}
 800b65a:	b087      	sub	sp, #28
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6a1b      	ldr	r3, [r3, #32]
 800b666:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6a1b      	ldr	r3, [r3, #32]
 800b672:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	69db      	ldr	r3, [r3, #28]
 800b67e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	4b24      	ldr	r3, [pc, #144]	; (800b714 <TIM_OC4_SetConfig+0xbc>)
 800b684:	4013      	ands	r3, r2
 800b686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b68e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	021b      	lsls	r3, r3, #8
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	4313      	orrs	r3, r2
 800b69a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	031b      	lsls	r3, r3, #12
 800b6aa:	693a      	ldr	r2, [r7, #16]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4a19      	ldr	r2, [pc, #100]	; (800b718 <TIM_OC4_SetConfig+0xc0>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d00f      	beq.n	800b6d8 <TIM_OC4_SetConfig+0x80>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a18      	ldr	r2, [pc, #96]	; (800b71c <TIM_OC4_SetConfig+0xc4>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d00b      	beq.n	800b6d8 <TIM_OC4_SetConfig+0x80>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a17      	ldr	r2, [pc, #92]	; (800b720 <TIM_OC4_SetConfig+0xc8>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d007      	beq.n	800b6d8 <TIM_OC4_SetConfig+0x80>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a16      	ldr	r2, [pc, #88]	; (800b724 <TIM_OC4_SetConfig+0xcc>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d003      	beq.n	800b6d8 <TIM_OC4_SetConfig+0x80>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a15      	ldr	r2, [pc, #84]	; (800b728 <TIM_OC4_SetConfig+0xd0>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d109      	bne.n	800b6ec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	695b      	ldr	r3, [r3, #20]
 800b6e4:	019b      	lsls	r3, r3, #6
 800b6e6:	697a      	ldr	r2, [r7, #20]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	697a      	ldr	r2, [r7, #20]
 800b6f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	685a      	ldr	r2, [r3, #4]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	693a      	ldr	r2, [r7, #16]
 800b704:	621a      	str	r2, [r3, #32]
}
 800b706:	bf00      	nop
 800b708:	371c      	adds	r7, #28
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop
 800b714:	feff8fff 	.word	0xfeff8fff
 800b718:	40010000 	.word	0x40010000
 800b71c:	40010400 	.word	0x40010400
 800b720:	40014000 	.word	0x40014000
 800b724:	40014400 	.word	0x40014400
 800b728:	40014800 	.word	0x40014800

0800b72c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b087      	sub	sp, #28
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a1b      	ldr	r3, [r3, #32]
 800b73a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a1b      	ldr	r3, [r3, #32]
 800b746:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	4b21      	ldr	r3, [pc, #132]	; (800b7dc <TIM_OC5_SetConfig+0xb0>)
 800b758:	4013      	ands	r3, r2
 800b75a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	4313      	orrs	r3, r2
 800b764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b76c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	041b      	lsls	r3, r3, #16
 800b774:	693a      	ldr	r2, [r7, #16]
 800b776:	4313      	orrs	r3, r2
 800b778:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	4a18      	ldr	r2, [pc, #96]	; (800b7e0 <TIM_OC5_SetConfig+0xb4>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d00f      	beq.n	800b7a2 <TIM_OC5_SetConfig+0x76>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	4a17      	ldr	r2, [pc, #92]	; (800b7e4 <TIM_OC5_SetConfig+0xb8>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d00b      	beq.n	800b7a2 <TIM_OC5_SetConfig+0x76>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4a16      	ldr	r2, [pc, #88]	; (800b7e8 <TIM_OC5_SetConfig+0xbc>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d007      	beq.n	800b7a2 <TIM_OC5_SetConfig+0x76>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	4a15      	ldr	r2, [pc, #84]	; (800b7ec <TIM_OC5_SetConfig+0xc0>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d003      	beq.n	800b7a2 <TIM_OC5_SetConfig+0x76>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4a14      	ldr	r2, [pc, #80]	; (800b7f0 <TIM_OC5_SetConfig+0xc4>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d109      	bne.n	800b7b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	695b      	ldr	r3, [r3, #20]
 800b7ae:	021b      	lsls	r3, r3, #8
 800b7b0:	697a      	ldr	r2, [r7, #20]
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	697a      	ldr	r2, [r7, #20]
 800b7ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	685a      	ldr	r2, [r3, #4]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	621a      	str	r2, [r3, #32]
}
 800b7d0:	bf00      	nop
 800b7d2:	371c      	adds	r7, #28
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr
 800b7dc:	fffeff8f 	.word	0xfffeff8f
 800b7e0:	40010000 	.word	0x40010000
 800b7e4:	40010400 	.word	0x40010400
 800b7e8:	40014000 	.word	0x40014000
 800b7ec:	40014400 	.word	0x40014400
 800b7f0:	40014800 	.word	0x40014800

0800b7f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b087      	sub	sp, #28
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a1b      	ldr	r3, [r3, #32]
 800b802:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a1b      	ldr	r3, [r3, #32]
 800b80e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b81a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	4b22      	ldr	r3, [pc, #136]	; (800b8a8 <TIM_OC6_SetConfig+0xb4>)
 800b820:	4013      	ands	r3, r2
 800b822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	021b      	lsls	r3, r3, #8
 800b82a:	68fa      	ldr	r2, [r7, #12]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b836:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	051b      	lsls	r3, r3, #20
 800b83e:	693a      	ldr	r2, [r7, #16]
 800b840:	4313      	orrs	r3, r2
 800b842:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	4a19      	ldr	r2, [pc, #100]	; (800b8ac <TIM_OC6_SetConfig+0xb8>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d00f      	beq.n	800b86c <TIM_OC6_SetConfig+0x78>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a18      	ldr	r2, [pc, #96]	; (800b8b0 <TIM_OC6_SetConfig+0xbc>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d00b      	beq.n	800b86c <TIM_OC6_SetConfig+0x78>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	4a17      	ldr	r2, [pc, #92]	; (800b8b4 <TIM_OC6_SetConfig+0xc0>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d007      	beq.n	800b86c <TIM_OC6_SetConfig+0x78>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	4a16      	ldr	r2, [pc, #88]	; (800b8b8 <TIM_OC6_SetConfig+0xc4>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d003      	beq.n	800b86c <TIM_OC6_SetConfig+0x78>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4a15      	ldr	r2, [pc, #84]	; (800b8bc <TIM_OC6_SetConfig+0xc8>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d109      	bne.n	800b880 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b872:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	695b      	ldr	r3, [r3, #20]
 800b878:	029b      	lsls	r3, r3, #10
 800b87a:	697a      	ldr	r2, [r7, #20]
 800b87c:	4313      	orrs	r3, r2
 800b87e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	697a      	ldr	r2, [r7, #20]
 800b884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	685a      	ldr	r2, [r3, #4]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	693a      	ldr	r2, [r7, #16]
 800b898:	621a      	str	r2, [r3, #32]
}
 800b89a:	bf00      	nop
 800b89c:	371c      	adds	r7, #28
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr
 800b8a6:	bf00      	nop
 800b8a8:	feff8fff 	.word	0xfeff8fff
 800b8ac:	40010000 	.word	0x40010000
 800b8b0:	40010400 	.word	0x40010400
 800b8b4:	40014000 	.word	0x40014000
 800b8b8:	40014400 	.word	0x40014400
 800b8bc:	40014800 	.word	0x40014800

0800b8c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b087      	sub	sp, #28
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6a1b      	ldr	r3, [r3, #32]
 800b8d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6a1b      	ldr	r3, [r3, #32]
 800b8d6:	f023 0201 	bic.w	r2, r3, #1
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	699b      	ldr	r3, [r3, #24]
 800b8e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b8ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	011b      	lsls	r3, r3, #4
 800b8f0:	693a      	ldr	r2, [r7, #16]
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	f023 030a 	bic.w	r3, r3, #10
 800b8fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b8fe:	697a      	ldr	r2, [r7, #20]
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	4313      	orrs	r3, r2
 800b904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	693a      	ldr	r2, [r7, #16]
 800b90a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	697a      	ldr	r2, [r7, #20]
 800b910:	621a      	str	r2, [r3, #32]
}
 800b912:	bf00      	nop
 800b914:	371c      	adds	r7, #28
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr

0800b91e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b91e:	b480      	push	{r7}
 800b920:	b087      	sub	sp, #28
 800b922:	af00      	add	r7, sp, #0
 800b924:	60f8      	str	r0, [r7, #12]
 800b926:	60b9      	str	r1, [r7, #8]
 800b928:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	6a1b      	ldr	r3, [r3, #32]
 800b92e:	f023 0210 	bic.w	r2, r3, #16
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	699b      	ldr	r3, [r3, #24]
 800b93a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	6a1b      	ldr	r3, [r3, #32]
 800b940:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b948:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	031b      	lsls	r3, r3, #12
 800b94e:	697a      	ldr	r2, [r7, #20]
 800b950:	4313      	orrs	r3, r2
 800b952:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b95a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	011b      	lsls	r3, r3, #4
 800b960:	693a      	ldr	r2, [r7, #16]
 800b962:	4313      	orrs	r3, r2
 800b964:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	697a      	ldr	r2, [r7, #20]
 800b96a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	693a      	ldr	r2, [r7, #16]
 800b970:	621a      	str	r2, [r3, #32]
}
 800b972:	bf00      	nop
 800b974:	371c      	adds	r7, #28
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr
	...

0800b980 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b980:	b480      	push	{r7}
 800b982:	b085      	sub	sp, #20
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	4b09      	ldr	r3, [pc, #36]	; (800b9b8 <TIM_ITRx_SetConfig+0x38>)
 800b994:	4013      	ands	r3, r2
 800b996:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b998:	683a      	ldr	r2, [r7, #0]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	4313      	orrs	r3, r2
 800b99e:	f043 0307 	orr.w	r3, r3, #7
 800b9a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	68fa      	ldr	r2, [r7, #12]
 800b9a8:	609a      	str	r2, [r3, #8]
}
 800b9aa:	bf00      	nop
 800b9ac:	3714      	adds	r7, #20
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop
 800b9b8:	ffcfff8f 	.word	0xffcfff8f

0800b9bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b087      	sub	sp, #28
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
 800b9c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b9d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	021a      	lsls	r2, r3, #8
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	431a      	orrs	r2, r3
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	697a      	ldr	r2, [r7, #20]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	697a      	ldr	r2, [r7, #20]
 800b9ee:	609a      	str	r2, [r3, #8]
}
 800b9f0:	bf00      	nop
 800b9f2:	371c      	adds	r7, #28
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b087      	sub	sp, #28
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	f003 031f 	and.w	r3, r3, #31
 800ba0e:	2201      	movs	r2, #1
 800ba10:	fa02 f303 	lsl.w	r3, r2, r3
 800ba14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6a1a      	ldr	r2, [r3, #32]
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	43db      	mvns	r3, r3
 800ba1e:	401a      	ands	r2, r3
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6a1a      	ldr	r2, [r3, #32]
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	f003 031f 	and.w	r3, r3, #31
 800ba2e:	6879      	ldr	r1, [r7, #4]
 800ba30:	fa01 f303 	lsl.w	r3, r1, r3
 800ba34:	431a      	orrs	r2, r3
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	621a      	str	r2, [r3, #32]
}
 800ba3a:	bf00      	nop
 800ba3c:	371c      	adds	r7, #28
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr
	...

0800ba48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d101      	bne.n	800ba60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	e06d      	b.n	800bb3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2201      	movs	r2, #1
 800ba64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2202      	movs	r2, #2
 800ba6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a30      	ldr	r2, [pc, #192]	; (800bb48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d004      	beq.n	800ba94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a2f      	ldr	r2, [pc, #188]	; (800bb4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d108      	bne.n	800baa6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ba9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	4313      	orrs	r3, r2
 800baa4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	68fa      	ldr	r2, [r7, #12]
 800bab4:	4313      	orrs	r3, r2
 800bab6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4a20      	ldr	r2, [pc, #128]	; (800bb48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d022      	beq.n	800bb10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bad2:	d01d      	beq.n	800bb10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a1d      	ldr	r2, [pc, #116]	; (800bb50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d018      	beq.n	800bb10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a1c      	ldr	r2, [pc, #112]	; (800bb54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d013      	beq.n	800bb10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a1a      	ldr	r2, [pc, #104]	; (800bb58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d00e      	beq.n	800bb10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a15      	ldr	r2, [pc, #84]	; (800bb4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d009      	beq.n	800bb10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a16      	ldr	r2, [pc, #88]	; (800bb5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d004      	beq.n	800bb10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a15      	ldr	r2, [pc, #84]	; (800bb60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d10c      	bne.n	800bb2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	68ba      	ldr	r2, [r7, #8]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb3a:	2300      	movs	r3, #0
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3714      	adds	r7, #20
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr
 800bb48:	40010000 	.word	0x40010000
 800bb4c:	40010400 	.word	0x40010400
 800bb50:	40000400 	.word	0x40000400
 800bb54:	40000800 	.word	0x40000800
 800bb58:	40000c00 	.word	0x40000c00
 800bb5c:	40001800 	.word	0x40001800
 800bb60:	40014000 	.word	0x40014000

0800bb64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d101      	bne.n	800bb80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bb7c:	2302      	movs	r3, #2
 800bb7e:	e065      	b.n	800bc4c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	695b      	ldr	r3, [r3, #20]
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	699b      	ldr	r3, [r3, #24]
 800bbf4:	041b      	lsls	r3, r3, #16
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a16      	ldr	r2, [pc, #88]	; (800bc58 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d004      	beq.n	800bc0e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4a14      	ldr	r2, [pc, #80]	; (800bc5c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d115      	bne.n	800bc3a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc18:	051b      	lsls	r3, r3, #20
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	69db      	ldr	r3, [r3, #28]
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	6a1b      	ldr	r3, [r3, #32]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3714      	adds	r7, #20
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr
 800bc58:	40010000 	.word	0x40010000
 800bc5c:	40010400 	.word	0x40010400

0800bc60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc68:	bf00      	nop
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc7c:	bf00      	nop
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bc90:	bf00      	nop
 800bc92:	370c      	adds	r7, #12
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d101      	bne.n	800bcae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e042      	b.n	800bd34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d106      	bne.n	800bcc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f7f6 fe73 	bl	80029ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2224      	movs	r2, #36	; 0x24
 800bcca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f022 0201 	bic.w	r2, r2, #1
 800bcdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 f942 	bl	800bf68 <UART_SetConfig>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d101      	bne.n	800bcee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bcea:	2301      	movs	r3, #1
 800bcec:	e022      	b.n	800bd34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d002      	beq.n	800bcfc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 fe96 	bl	800ca28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	685a      	ldr	r2, [r3, #4]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	689a      	ldr	r2, [r3, #8]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f042 0201 	orr.w	r2, r2, #1
 800bd2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 ff1d 	bl	800cb6c <UART_CheckIdleState>
 800bd32:	4603      	mov	r3, r0
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b08a      	sub	sp, #40	; 0x28
 800bd40:	af02      	add	r7, sp, #8
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	603b      	str	r3, [r7, #0]
 800bd48:	4613      	mov	r3, r2
 800bd4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd52:	2b20      	cmp	r3, #32
 800bd54:	f040 8083 	bne.w	800be5e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d002      	beq.n	800bd64 <HAL_UART_Transmit+0x28>
 800bd5e:	88fb      	ldrh	r3, [r7, #6]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d101      	bne.n	800bd68 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bd64:	2301      	movs	r3, #1
 800bd66:	e07b      	b.n	800be60 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d101      	bne.n	800bd76 <HAL_UART_Transmit+0x3a>
 800bd72:	2302      	movs	r3, #2
 800bd74:	e074      	b.n	800be60 <HAL_UART_Transmit+0x124>
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2200      	movs	r2, #0
 800bd82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2221      	movs	r2, #33	; 0x21
 800bd8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bd8e:	f7f7 f85b 	bl	8002e48 <HAL_GetTick>
 800bd92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	88fa      	ldrh	r2, [r7, #6]
 800bd98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	88fa      	ldrh	r2, [r7, #6]
 800bda0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdac:	d108      	bne.n	800bdc0 <HAL_UART_Transmit+0x84>
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d104      	bne.n	800bdc0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	61bb      	str	r3, [r7, #24]
 800bdbe:	e003      	b.n	800bdc8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bdd0:	e02c      	b.n	800be2c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	2180      	movs	r1, #128	; 0x80
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f000 ff10 	bl	800cc02 <UART_WaitOnFlagUntilTimeout>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d001      	beq.n	800bdec <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bde8:	2303      	movs	r3, #3
 800bdea:	e039      	b.n	800be60 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d10b      	bne.n	800be0a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	881b      	ldrh	r3, [r3, #0]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	3302      	adds	r3, #2
 800be06:	61bb      	str	r3, [r7, #24]
 800be08:	e007      	b.n	800be1a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	781a      	ldrb	r2, [r3, #0]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	3301      	adds	r3, #1
 800be18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800be20:	b29b      	uxth	r3, r3
 800be22:	3b01      	subs	r3, #1
 800be24:	b29a      	uxth	r2, r3
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800be32:	b29b      	uxth	r3, r3
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1cc      	bne.n	800bdd2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	9300      	str	r3, [sp, #0]
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	2200      	movs	r2, #0
 800be40:	2140      	movs	r1, #64	; 0x40
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f000 fedd 	bl	800cc02 <UART_WaitOnFlagUntilTimeout>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800be4e:	2303      	movs	r3, #3
 800be50:	e006      	b.n	800be60 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2220      	movs	r2, #32
 800be56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	e000      	b.n	800be60 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800be5e:	2302      	movs	r3, #2
  }
}
 800be60:	4618      	mov	r0, r3
 800be62:	3720      	adds	r7, #32
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b08a      	sub	sp, #40	; 0x28
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	4613      	mov	r3, r2
 800be74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be7c:	2b20      	cmp	r3, #32
 800be7e:	d142      	bne.n	800bf06 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d002      	beq.n	800be8c <HAL_UART_Receive_DMA+0x24>
 800be86:	88fb      	ldrh	r3, [r7, #6]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d101      	bne.n	800be90 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800be8c:	2301      	movs	r3, #1
 800be8e:	e03b      	b.n	800bf08 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be96:	2b01      	cmp	r3, #1
 800be98:	d101      	bne.n	800be9e <HAL_UART_Receive_DMA+0x36>
 800be9a:	2302      	movs	r3, #2
 800be9c:	e034      	b.n	800bf08 <HAL_UART_Receive_DMA+0xa0>
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2201      	movs	r2, #1
 800bea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2200      	movs	r2, #0
 800beaa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a17      	ldr	r2, [pc, #92]	; (800bf10 <HAL_UART_Receive_DMA+0xa8>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d01f      	beq.n	800bef6 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d018      	beq.n	800bef6 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	e853 3f00 	ldrex	r3, [r3]
 800bed0:	613b      	str	r3, [r7, #16]
   return(result);
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bed8:	627b      	str	r3, [r7, #36]	; 0x24
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	461a      	mov	r2, r3
 800bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee2:	623b      	str	r3, [r7, #32]
 800bee4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee6:	69f9      	ldr	r1, [r7, #28]
 800bee8:	6a3a      	ldr	r2, [r7, #32]
 800beea:	e841 2300 	strex	r3, r2, [r1]
 800beee:	61bb      	str	r3, [r7, #24]
   return(result);
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1e6      	bne.n	800bec4 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bef6:	88fb      	ldrh	r3, [r7, #6]
 800bef8:	461a      	mov	r2, r3
 800befa:	68b9      	ldr	r1, [r7, #8]
 800befc:	68f8      	ldr	r0, [r7, #12]
 800befe:	f000 ff49 	bl	800cd94 <UART_Start_Receive_DMA>
 800bf02:	4603      	mov	r3, r0
 800bf04:	e000      	b.n	800bf08 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bf06:	2302      	movs	r3, #2
  }
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3728      	adds	r7, #40	; 0x28
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	58000c00 	.word	0x58000c00

0800bf14 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800bf1c:	bf00      	nop
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bf30:	bf00      	nop
 800bf32:	370c      	adds	r7, #12
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bf44:	bf00      	nop
 800bf46:	370c      	adds	r7, #12
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b083      	sub	sp, #12
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	460b      	mov	r3, r1
 800bf5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf5c:	bf00      	nop
 800bf5e:	370c      	adds	r7, #12
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf68:	b5b0      	push	{r4, r5, r7, lr}
 800bf6a:	b08e      	sub	sp, #56	; 0x38
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf70:	2300      	movs	r3, #0
 800bf72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	689a      	ldr	r2, [r3, #8]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	691b      	ldr	r3, [r3, #16]
 800bf7e:	431a      	orrs	r2, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	695b      	ldr	r3, [r3, #20]
 800bf84:	431a      	orrs	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	69db      	ldr	r3, [r3, #28]
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	4bbf      	ldr	r3, [pc, #764]	; (800c294 <UART_SetConfig+0x32c>)
 800bf96:	4013      	ands	r3, r2
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	6812      	ldr	r2, [r2, #0]
 800bf9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bf9e:	430b      	orrs	r3, r1
 800bfa0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	68da      	ldr	r2, [r3, #12]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	430a      	orrs	r2, r1
 800bfb6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	699b      	ldr	r3, [r3, #24]
 800bfbc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4ab5      	ldr	r2, [pc, #724]	; (800c298 <UART_SetConfig+0x330>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d004      	beq.n	800bfd2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a1b      	ldr	r3, [r3, #32]
 800bfcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	689a      	ldr	r2, [r3, #8]
 800bfd8:	4bb0      	ldr	r3, [pc, #704]	; (800c29c <UART_SetConfig+0x334>)
 800bfda:	4013      	ands	r3, r2
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	6812      	ldr	r2, [r2, #0]
 800bfe0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bfe2:	430b      	orrs	r3, r1
 800bfe4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfec:	f023 010f 	bic.w	r1, r3, #15
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	430a      	orrs	r2, r1
 800bffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4aa7      	ldr	r2, [pc, #668]	; (800c2a0 <UART_SetConfig+0x338>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d176      	bne.n	800c0f4 <UART_SetConfig+0x18c>
 800c006:	4ba7      	ldr	r3, [pc, #668]	; (800c2a4 <UART_SetConfig+0x33c>)
 800c008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c00a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c00e:	2b28      	cmp	r3, #40	; 0x28
 800c010:	d86c      	bhi.n	800c0ec <UART_SetConfig+0x184>
 800c012:	a201      	add	r2, pc, #4	; (adr r2, 800c018 <UART_SetConfig+0xb0>)
 800c014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c018:	0800c0bd 	.word	0x0800c0bd
 800c01c:	0800c0ed 	.word	0x0800c0ed
 800c020:	0800c0ed 	.word	0x0800c0ed
 800c024:	0800c0ed 	.word	0x0800c0ed
 800c028:	0800c0ed 	.word	0x0800c0ed
 800c02c:	0800c0ed 	.word	0x0800c0ed
 800c030:	0800c0ed 	.word	0x0800c0ed
 800c034:	0800c0ed 	.word	0x0800c0ed
 800c038:	0800c0c5 	.word	0x0800c0c5
 800c03c:	0800c0ed 	.word	0x0800c0ed
 800c040:	0800c0ed 	.word	0x0800c0ed
 800c044:	0800c0ed 	.word	0x0800c0ed
 800c048:	0800c0ed 	.word	0x0800c0ed
 800c04c:	0800c0ed 	.word	0x0800c0ed
 800c050:	0800c0ed 	.word	0x0800c0ed
 800c054:	0800c0ed 	.word	0x0800c0ed
 800c058:	0800c0cd 	.word	0x0800c0cd
 800c05c:	0800c0ed 	.word	0x0800c0ed
 800c060:	0800c0ed 	.word	0x0800c0ed
 800c064:	0800c0ed 	.word	0x0800c0ed
 800c068:	0800c0ed 	.word	0x0800c0ed
 800c06c:	0800c0ed 	.word	0x0800c0ed
 800c070:	0800c0ed 	.word	0x0800c0ed
 800c074:	0800c0ed 	.word	0x0800c0ed
 800c078:	0800c0d5 	.word	0x0800c0d5
 800c07c:	0800c0ed 	.word	0x0800c0ed
 800c080:	0800c0ed 	.word	0x0800c0ed
 800c084:	0800c0ed 	.word	0x0800c0ed
 800c088:	0800c0ed 	.word	0x0800c0ed
 800c08c:	0800c0ed 	.word	0x0800c0ed
 800c090:	0800c0ed 	.word	0x0800c0ed
 800c094:	0800c0ed 	.word	0x0800c0ed
 800c098:	0800c0dd 	.word	0x0800c0dd
 800c09c:	0800c0ed 	.word	0x0800c0ed
 800c0a0:	0800c0ed 	.word	0x0800c0ed
 800c0a4:	0800c0ed 	.word	0x0800c0ed
 800c0a8:	0800c0ed 	.word	0x0800c0ed
 800c0ac:	0800c0ed 	.word	0x0800c0ed
 800c0b0:	0800c0ed 	.word	0x0800c0ed
 800c0b4:	0800c0ed 	.word	0x0800c0ed
 800c0b8:	0800c0e5 	.word	0x0800c0e5
 800c0bc:	2301      	movs	r3, #1
 800c0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0c2:	e222      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c0c4:	2304      	movs	r3, #4
 800c0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0ca:	e21e      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c0cc:	2308      	movs	r3, #8
 800c0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0d2:	e21a      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c0d4:	2310      	movs	r3, #16
 800c0d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0da:	e216      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c0dc:	2320      	movs	r3, #32
 800c0de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0e2:	e212      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c0e4:	2340      	movs	r3, #64	; 0x40
 800c0e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0ea:	e20e      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c0ec:	2380      	movs	r3, #128	; 0x80
 800c0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0f2:	e20a      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a6b      	ldr	r2, [pc, #428]	; (800c2a8 <UART_SetConfig+0x340>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d130      	bne.n	800c160 <UART_SetConfig+0x1f8>
 800c0fe:	4b69      	ldr	r3, [pc, #420]	; (800c2a4 <UART_SetConfig+0x33c>)
 800c100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c102:	f003 0307 	and.w	r3, r3, #7
 800c106:	2b05      	cmp	r3, #5
 800c108:	d826      	bhi.n	800c158 <UART_SetConfig+0x1f0>
 800c10a:	a201      	add	r2, pc, #4	; (adr r2, 800c110 <UART_SetConfig+0x1a8>)
 800c10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c110:	0800c129 	.word	0x0800c129
 800c114:	0800c131 	.word	0x0800c131
 800c118:	0800c139 	.word	0x0800c139
 800c11c:	0800c141 	.word	0x0800c141
 800c120:	0800c149 	.word	0x0800c149
 800c124:	0800c151 	.word	0x0800c151
 800c128:	2300      	movs	r3, #0
 800c12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c12e:	e1ec      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c130:	2304      	movs	r3, #4
 800c132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c136:	e1e8      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c138:	2308      	movs	r3, #8
 800c13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c13e:	e1e4      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c140:	2310      	movs	r3, #16
 800c142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c146:	e1e0      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c148:	2320      	movs	r3, #32
 800c14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c14e:	e1dc      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c150:	2340      	movs	r3, #64	; 0x40
 800c152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c156:	e1d8      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c158:	2380      	movs	r3, #128	; 0x80
 800c15a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c15e:	e1d4      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4a51      	ldr	r2, [pc, #324]	; (800c2ac <UART_SetConfig+0x344>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d130      	bne.n	800c1cc <UART_SetConfig+0x264>
 800c16a:	4b4e      	ldr	r3, [pc, #312]	; (800c2a4 <UART_SetConfig+0x33c>)
 800c16c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c16e:	f003 0307 	and.w	r3, r3, #7
 800c172:	2b05      	cmp	r3, #5
 800c174:	d826      	bhi.n	800c1c4 <UART_SetConfig+0x25c>
 800c176:	a201      	add	r2, pc, #4	; (adr r2, 800c17c <UART_SetConfig+0x214>)
 800c178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c17c:	0800c195 	.word	0x0800c195
 800c180:	0800c19d 	.word	0x0800c19d
 800c184:	0800c1a5 	.word	0x0800c1a5
 800c188:	0800c1ad 	.word	0x0800c1ad
 800c18c:	0800c1b5 	.word	0x0800c1b5
 800c190:	0800c1bd 	.word	0x0800c1bd
 800c194:	2300      	movs	r3, #0
 800c196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c19a:	e1b6      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c19c:	2304      	movs	r3, #4
 800c19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1a2:	e1b2      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c1a4:	2308      	movs	r3, #8
 800c1a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1aa:	e1ae      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c1ac:	2310      	movs	r3, #16
 800c1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1b2:	e1aa      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c1b4:	2320      	movs	r3, #32
 800c1b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1ba:	e1a6      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c1bc:	2340      	movs	r3, #64	; 0x40
 800c1be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1c2:	e1a2      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c1c4:	2380      	movs	r3, #128	; 0x80
 800c1c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1ca:	e19e      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a37      	ldr	r2, [pc, #220]	; (800c2b0 <UART_SetConfig+0x348>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d130      	bne.n	800c238 <UART_SetConfig+0x2d0>
 800c1d6:	4b33      	ldr	r3, [pc, #204]	; (800c2a4 <UART_SetConfig+0x33c>)
 800c1d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1da:	f003 0307 	and.w	r3, r3, #7
 800c1de:	2b05      	cmp	r3, #5
 800c1e0:	d826      	bhi.n	800c230 <UART_SetConfig+0x2c8>
 800c1e2:	a201      	add	r2, pc, #4	; (adr r2, 800c1e8 <UART_SetConfig+0x280>)
 800c1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e8:	0800c201 	.word	0x0800c201
 800c1ec:	0800c209 	.word	0x0800c209
 800c1f0:	0800c211 	.word	0x0800c211
 800c1f4:	0800c219 	.word	0x0800c219
 800c1f8:	0800c221 	.word	0x0800c221
 800c1fc:	0800c229 	.word	0x0800c229
 800c200:	2300      	movs	r3, #0
 800c202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c206:	e180      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c208:	2304      	movs	r3, #4
 800c20a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c20e:	e17c      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c210:	2308      	movs	r3, #8
 800c212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c216:	e178      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c218:	2310      	movs	r3, #16
 800c21a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c21e:	e174      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c220:	2320      	movs	r3, #32
 800c222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c226:	e170      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c228:	2340      	movs	r3, #64	; 0x40
 800c22a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c22e:	e16c      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c230:	2380      	movs	r3, #128	; 0x80
 800c232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c236:	e168      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a1d      	ldr	r2, [pc, #116]	; (800c2b4 <UART_SetConfig+0x34c>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d142      	bne.n	800c2c8 <UART_SetConfig+0x360>
 800c242:	4b18      	ldr	r3, [pc, #96]	; (800c2a4 <UART_SetConfig+0x33c>)
 800c244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c246:	f003 0307 	and.w	r3, r3, #7
 800c24a:	2b05      	cmp	r3, #5
 800c24c:	d838      	bhi.n	800c2c0 <UART_SetConfig+0x358>
 800c24e:	a201      	add	r2, pc, #4	; (adr r2, 800c254 <UART_SetConfig+0x2ec>)
 800c250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c254:	0800c26d 	.word	0x0800c26d
 800c258:	0800c275 	.word	0x0800c275
 800c25c:	0800c27d 	.word	0x0800c27d
 800c260:	0800c285 	.word	0x0800c285
 800c264:	0800c28d 	.word	0x0800c28d
 800c268:	0800c2b9 	.word	0x0800c2b9
 800c26c:	2300      	movs	r3, #0
 800c26e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c272:	e14a      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c274:	2304      	movs	r3, #4
 800c276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c27a:	e146      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c27c:	2308      	movs	r3, #8
 800c27e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c282:	e142      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c284:	2310      	movs	r3, #16
 800c286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c28a:	e13e      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c28c:	2320      	movs	r3, #32
 800c28e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c292:	e13a      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c294:	cfff69f3 	.word	0xcfff69f3
 800c298:	58000c00 	.word	0x58000c00
 800c29c:	11fff4ff 	.word	0x11fff4ff
 800c2a0:	40011000 	.word	0x40011000
 800c2a4:	58024400 	.word	0x58024400
 800c2a8:	40004400 	.word	0x40004400
 800c2ac:	40004800 	.word	0x40004800
 800c2b0:	40004c00 	.word	0x40004c00
 800c2b4:	40005000 	.word	0x40005000
 800c2b8:	2340      	movs	r3, #64	; 0x40
 800c2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2be:	e124      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c2c0:	2380      	movs	r3, #128	; 0x80
 800c2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2c6:	e120      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4acc      	ldr	r2, [pc, #816]	; (800c600 <UART_SetConfig+0x698>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d176      	bne.n	800c3c0 <UART_SetConfig+0x458>
 800c2d2:	4bcc      	ldr	r3, [pc, #816]	; (800c604 <UART_SetConfig+0x69c>)
 800c2d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c2da:	2b28      	cmp	r3, #40	; 0x28
 800c2dc:	d86c      	bhi.n	800c3b8 <UART_SetConfig+0x450>
 800c2de:	a201      	add	r2, pc, #4	; (adr r2, 800c2e4 <UART_SetConfig+0x37c>)
 800c2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e4:	0800c389 	.word	0x0800c389
 800c2e8:	0800c3b9 	.word	0x0800c3b9
 800c2ec:	0800c3b9 	.word	0x0800c3b9
 800c2f0:	0800c3b9 	.word	0x0800c3b9
 800c2f4:	0800c3b9 	.word	0x0800c3b9
 800c2f8:	0800c3b9 	.word	0x0800c3b9
 800c2fc:	0800c3b9 	.word	0x0800c3b9
 800c300:	0800c3b9 	.word	0x0800c3b9
 800c304:	0800c391 	.word	0x0800c391
 800c308:	0800c3b9 	.word	0x0800c3b9
 800c30c:	0800c3b9 	.word	0x0800c3b9
 800c310:	0800c3b9 	.word	0x0800c3b9
 800c314:	0800c3b9 	.word	0x0800c3b9
 800c318:	0800c3b9 	.word	0x0800c3b9
 800c31c:	0800c3b9 	.word	0x0800c3b9
 800c320:	0800c3b9 	.word	0x0800c3b9
 800c324:	0800c399 	.word	0x0800c399
 800c328:	0800c3b9 	.word	0x0800c3b9
 800c32c:	0800c3b9 	.word	0x0800c3b9
 800c330:	0800c3b9 	.word	0x0800c3b9
 800c334:	0800c3b9 	.word	0x0800c3b9
 800c338:	0800c3b9 	.word	0x0800c3b9
 800c33c:	0800c3b9 	.word	0x0800c3b9
 800c340:	0800c3b9 	.word	0x0800c3b9
 800c344:	0800c3a1 	.word	0x0800c3a1
 800c348:	0800c3b9 	.word	0x0800c3b9
 800c34c:	0800c3b9 	.word	0x0800c3b9
 800c350:	0800c3b9 	.word	0x0800c3b9
 800c354:	0800c3b9 	.word	0x0800c3b9
 800c358:	0800c3b9 	.word	0x0800c3b9
 800c35c:	0800c3b9 	.word	0x0800c3b9
 800c360:	0800c3b9 	.word	0x0800c3b9
 800c364:	0800c3a9 	.word	0x0800c3a9
 800c368:	0800c3b9 	.word	0x0800c3b9
 800c36c:	0800c3b9 	.word	0x0800c3b9
 800c370:	0800c3b9 	.word	0x0800c3b9
 800c374:	0800c3b9 	.word	0x0800c3b9
 800c378:	0800c3b9 	.word	0x0800c3b9
 800c37c:	0800c3b9 	.word	0x0800c3b9
 800c380:	0800c3b9 	.word	0x0800c3b9
 800c384:	0800c3b1 	.word	0x0800c3b1
 800c388:	2301      	movs	r3, #1
 800c38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c38e:	e0bc      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c390:	2304      	movs	r3, #4
 800c392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c396:	e0b8      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c398:	2308      	movs	r3, #8
 800c39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c39e:	e0b4      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c3a0:	2310      	movs	r3, #16
 800c3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3a6:	e0b0      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c3a8:	2320      	movs	r3, #32
 800c3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3ae:	e0ac      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c3b0:	2340      	movs	r3, #64	; 0x40
 800c3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3b6:	e0a8      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c3b8:	2380      	movs	r3, #128	; 0x80
 800c3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3be:	e0a4      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a90      	ldr	r2, [pc, #576]	; (800c608 <UART_SetConfig+0x6a0>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d130      	bne.n	800c42c <UART_SetConfig+0x4c4>
 800c3ca:	4b8e      	ldr	r3, [pc, #568]	; (800c604 <UART_SetConfig+0x69c>)
 800c3cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ce:	f003 0307 	and.w	r3, r3, #7
 800c3d2:	2b05      	cmp	r3, #5
 800c3d4:	d826      	bhi.n	800c424 <UART_SetConfig+0x4bc>
 800c3d6:	a201      	add	r2, pc, #4	; (adr r2, 800c3dc <UART_SetConfig+0x474>)
 800c3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3dc:	0800c3f5 	.word	0x0800c3f5
 800c3e0:	0800c3fd 	.word	0x0800c3fd
 800c3e4:	0800c405 	.word	0x0800c405
 800c3e8:	0800c40d 	.word	0x0800c40d
 800c3ec:	0800c415 	.word	0x0800c415
 800c3f0:	0800c41d 	.word	0x0800c41d
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3fa:	e086      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c3fc:	2304      	movs	r3, #4
 800c3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c402:	e082      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c404:	2308      	movs	r3, #8
 800c406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c40a:	e07e      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c40c:	2310      	movs	r3, #16
 800c40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c412:	e07a      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c414:	2320      	movs	r3, #32
 800c416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c41a:	e076      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c41c:	2340      	movs	r3, #64	; 0x40
 800c41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c422:	e072      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c424:	2380      	movs	r3, #128	; 0x80
 800c426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c42a:	e06e      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a76      	ldr	r2, [pc, #472]	; (800c60c <UART_SetConfig+0x6a4>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d130      	bne.n	800c498 <UART_SetConfig+0x530>
 800c436:	4b73      	ldr	r3, [pc, #460]	; (800c604 <UART_SetConfig+0x69c>)
 800c438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c43a:	f003 0307 	and.w	r3, r3, #7
 800c43e:	2b05      	cmp	r3, #5
 800c440:	d826      	bhi.n	800c490 <UART_SetConfig+0x528>
 800c442:	a201      	add	r2, pc, #4	; (adr r2, 800c448 <UART_SetConfig+0x4e0>)
 800c444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c448:	0800c461 	.word	0x0800c461
 800c44c:	0800c469 	.word	0x0800c469
 800c450:	0800c471 	.word	0x0800c471
 800c454:	0800c479 	.word	0x0800c479
 800c458:	0800c481 	.word	0x0800c481
 800c45c:	0800c489 	.word	0x0800c489
 800c460:	2300      	movs	r3, #0
 800c462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c466:	e050      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c468:	2304      	movs	r3, #4
 800c46a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c46e:	e04c      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c470:	2308      	movs	r3, #8
 800c472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c476:	e048      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c478:	2310      	movs	r3, #16
 800c47a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c47e:	e044      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c480:	2320      	movs	r3, #32
 800c482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c486:	e040      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c488:	2340      	movs	r3, #64	; 0x40
 800c48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c48e:	e03c      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c490:	2380      	movs	r3, #128	; 0x80
 800c492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c496:	e038      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a5c      	ldr	r2, [pc, #368]	; (800c610 <UART_SetConfig+0x6a8>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d130      	bne.n	800c504 <UART_SetConfig+0x59c>
 800c4a2:	4b58      	ldr	r3, [pc, #352]	; (800c604 <UART_SetConfig+0x69c>)
 800c4a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4a6:	f003 0307 	and.w	r3, r3, #7
 800c4aa:	2b05      	cmp	r3, #5
 800c4ac:	d826      	bhi.n	800c4fc <UART_SetConfig+0x594>
 800c4ae:	a201      	add	r2, pc, #4	; (adr r2, 800c4b4 <UART_SetConfig+0x54c>)
 800c4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b4:	0800c4cd 	.word	0x0800c4cd
 800c4b8:	0800c4d5 	.word	0x0800c4d5
 800c4bc:	0800c4dd 	.word	0x0800c4dd
 800c4c0:	0800c4e5 	.word	0x0800c4e5
 800c4c4:	0800c4ed 	.word	0x0800c4ed
 800c4c8:	0800c4f5 	.word	0x0800c4f5
 800c4cc:	2302      	movs	r3, #2
 800c4ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4d2:	e01a      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c4d4:	2304      	movs	r3, #4
 800c4d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4da:	e016      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c4dc:	2308      	movs	r3, #8
 800c4de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4e2:	e012      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c4e4:	2310      	movs	r3, #16
 800c4e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ea:	e00e      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c4ec:	2320      	movs	r3, #32
 800c4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4f2:	e00a      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c4f4:	2340      	movs	r3, #64	; 0x40
 800c4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4fa:	e006      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c4fc:	2380      	movs	r3, #128	; 0x80
 800c4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c502:	e002      	b.n	800c50a <UART_SetConfig+0x5a2>
 800c504:	2380      	movs	r3, #128	; 0x80
 800c506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a40      	ldr	r2, [pc, #256]	; (800c610 <UART_SetConfig+0x6a8>)
 800c510:	4293      	cmp	r3, r2
 800c512:	f040 80ef 	bne.w	800c6f4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c516:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c51a:	2b20      	cmp	r3, #32
 800c51c:	dc46      	bgt.n	800c5ac <UART_SetConfig+0x644>
 800c51e:	2b02      	cmp	r3, #2
 800c520:	f2c0 8081 	blt.w	800c626 <UART_SetConfig+0x6be>
 800c524:	3b02      	subs	r3, #2
 800c526:	2b1e      	cmp	r3, #30
 800c528:	d87d      	bhi.n	800c626 <UART_SetConfig+0x6be>
 800c52a:	a201      	add	r2, pc, #4	; (adr r2, 800c530 <UART_SetConfig+0x5c8>)
 800c52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c530:	0800c5b3 	.word	0x0800c5b3
 800c534:	0800c627 	.word	0x0800c627
 800c538:	0800c5bb 	.word	0x0800c5bb
 800c53c:	0800c627 	.word	0x0800c627
 800c540:	0800c627 	.word	0x0800c627
 800c544:	0800c627 	.word	0x0800c627
 800c548:	0800c5cb 	.word	0x0800c5cb
 800c54c:	0800c627 	.word	0x0800c627
 800c550:	0800c627 	.word	0x0800c627
 800c554:	0800c627 	.word	0x0800c627
 800c558:	0800c627 	.word	0x0800c627
 800c55c:	0800c627 	.word	0x0800c627
 800c560:	0800c627 	.word	0x0800c627
 800c564:	0800c627 	.word	0x0800c627
 800c568:	0800c5db 	.word	0x0800c5db
 800c56c:	0800c627 	.word	0x0800c627
 800c570:	0800c627 	.word	0x0800c627
 800c574:	0800c627 	.word	0x0800c627
 800c578:	0800c627 	.word	0x0800c627
 800c57c:	0800c627 	.word	0x0800c627
 800c580:	0800c627 	.word	0x0800c627
 800c584:	0800c627 	.word	0x0800c627
 800c588:	0800c627 	.word	0x0800c627
 800c58c:	0800c627 	.word	0x0800c627
 800c590:	0800c627 	.word	0x0800c627
 800c594:	0800c627 	.word	0x0800c627
 800c598:	0800c627 	.word	0x0800c627
 800c59c:	0800c627 	.word	0x0800c627
 800c5a0:	0800c627 	.word	0x0800c627
 800c5a4:	0800c627 	.word	0x0800c627
 800c5a8:	0800c619 	.word	0x0800c619
 800c5ac:	2b40      	cmp	r3, #64	; 0x40
 800c5ae:	d036      	beq.n	800c61e <UART_SetConfig+0x6b6>
 800c5b0:	e039      	b.n	800c626 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c5b2:	f7fd f8ef 	bl	8009794 <HAL_RCCEx_GetD3PCLK1Freq>
 800c5b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c5b8:	e03b      	b.n	800c632 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5ba:	f107 0314 	add.w	r3, r7, #20
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fd f8fe 	bl	80097c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c5c8:	e033      	b.n	800c632 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5ca:	f107 0308 	add.w	r3, r7, #8
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7fd fa4a 	bl	8009a68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c5d8:	e02b      	b.n	800c632 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5da:	4b0a      	ldr	r3, [pc, #40]	; (800c604 <UART_SetConfig+0x69c>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f003 0320 	and.w	r3, r3, #32
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d009      	beq.n	800c5fa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c5e6:	4b07      	ldr	r3, [pc, #28]	; (800c604 <UART_SetConfig+0x69c>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	08db      	lsrs	r3, r3, #3
 800c5ec:	f003 0303 	and.w	r3, r3, #3
 800c5f0:	4a08      	ldr	r2, [pc, #32]	; (800c614 <UART_SetConfig+0x6ac>)
 800c5f2:	fa22 f303 	lsr.w	r3, r2, r3
 800c5f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c5f8:	e01b      	b.n	800c632 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800c5fa:	4b06      	ldr	r3, [pc, #24]	; (800c614 <UART_SetConfig+0x6ac>)
 800c5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c5fe:	e018      	b.n	800c632 <UART_SetConfig+0x6ca>
 800c600:	40011400 	.word	0x40011400
 800c604:	58024400 	.word	0x58024400
 800c608:	40007800 	.word	0x40007800
 800c60c:	40007c00 	.word	0x40007c00
 800c610:	58000c00 	.word	0x58000c00
 800c614:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c618:	4bc4      	ldr	r3, [pc, #784]	; (800c92c <UART_SetConfig+0x9c4>)
 800c61a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c61c:	e009      	b.n	800c632 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c61e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c622:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c624:	e005      	b.n	800c632 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800c626:	2300      	movs	r3, #0
 800c628:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c62a:	2301      	movs	r3, #1
 800c62c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c630:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c634:	2b00      	cmp	r3, #0
 800c636:	f000 81da 	beq.w	800c9ee <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c63e:	4abc      	ldr	r2, [pc, #752]	; (800c930 <UART_SetConfig+0x9c8>)
 800c640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c644:	461a      	mov	r2, r3
 800c646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c648:	fbb3 f3f2 	udiv	r3, r3, r2
 800c64c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	685a      	ldr	r2, [r3, #4]
 800c652:	4613      	mov	r3, r2
 800c654:	005b      	lsls	r3, r3, #1
 800c656:	4413      	add	r3, r2
 800c658:	6a3a      	ldr	r2, [r7, #32]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d305      	bcc.n	800c66a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c664:	6a3a      	ldr	r2, [r7, #32]
 800c666:	429a      	cmp	r2, r3
 800c668:	d903      	bls.n	800c672 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800c66a:	2301      	movs	r3, #1
 800c66c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c670:	e1bd      	b.n	800c9ee <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c674:	4618      	mov	r0, r3
 800c676:	f04f 0100 	mov.w	r1, #0
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c67e:	4aac      	ldr	r2, [pc, #688]	; (800c930 <UART_SetConfig+0x9c8>)
 800c680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c684:	b29a      	uxth	r2, r3
 800c686:	f04f 0300 	mov.w	r3, #0
 800c68a:	f7f3 fe25 	bl	80002d8 <__aeabi_uldivmod>
 800c68e:	4602      	mov	r2, r0
 800c690:	460b      	mov	r3, r1
 800c692:	4610      	mov	r0, r2
 800c694:	4619      	mov	r1, r3
 800c696:	f04f 0200 	mov.w	r2, #0
 800c69a:	f04f 0300 	mov.w	r3, #0
 800c69e:	020b      	lsls	r3, r1, #8
 800c6a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c6a4:	0202      	lsls	r2, r0, #8
 800c6a6:	6879      	ldr	r1, [r7, #4]
 800c6a8:	6849      	ldr	r1, [r1, #4]
 800c6aa:	0849      	lsrs	r1, r1, #1
 800c6ac:	4608      	mov	r0, r1
 800c6ae:	f04f 0100 	mov.w	r1, #0
 800c6b2:	1814      	adds	r4, r2, r0
 800c6b4:	eb43 0501 	adc.w	r5, r3, r1
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	461a      	mov	r2, r3
 800c6be:	f04f 0300 	mov.w	r3, #0
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	4629      	mov	r1, r5
 800c6c6:	f7f3 fe07 	bl	80002d8 <__aeabi_uldivmod>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6d8:	d308      	bcc.n	800c6ec <UART_SetConfig+0x784>
 800c6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6e0:	d204      	bcs.n	800c6ec <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6e8:	60da      	str	r2, [r3, #12]
 800c6ea:	e180      	b.n	800c9ee <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c6f2:	e17c      	b.n	800c9ee <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	69db      	ldr	r3, [r3, #28]
 800c6f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6fc:	f040 80be 	bne.w	800c87c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800c700:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c704:	2b20      	cmp	r3, #32
 800c706:	dc49      	bgt.n	800c79c <UART_SetConfig+0x834>
 800c708:	2b00      	cmp	r3, #0
 800c70a:	db7c      	blt.n	800c806 <UART_SetConfig+0x89e>
 800c70c:	2b20      	cmp	r3, #32
 800c70e:	d87a      	bhi.n	800c806 <UART_SetConfig+0x89e>
 800c710:	a201      	add	r2, pc, #4	; (adr r2, 800c718 <UART_SetConfig+0x7b0>)
 800c712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c716:	bf00      	nop
 800c718:	0800c7a3 	.word	0x0800c7a3
 800c71c:	0800c7ab 	.word	0x0800c7ab
 800c720:	0800c807 	.word	0x0800c807
 800c724:	0800c807 	.word	0x0800c807
 800c728:	0800c7b3 	.word	0x0800c7b3
 800c72c:	0800c807 	.word	0x0800c807
 800c730:	0800c807 	.word	0x0800c807
 800c734:	0800c807 	.word	0x0800c807
 800c738:	0800c7c3 	.word	0x0800c7c3
 800c73c:	0800c807 	.word	0x0800c807
 800c740:	0800c807 	.word	0x0800c807
 800c744:	0800c807 	.word	0x0800c807
 800c748:	0800c807 	.word	0x0800c807
 800c74c:	0800c807 	.word	0x0800c807
 800c750:	0800c807 	.word	0x0800c807
 800c754:	0800c807 	.word	0x0800c807
 800c758:	0800c7d3 	.word	0x0800c7d3
 800c75c:	0800c807 	.word	0x0800c807
 800c760:	0800c807 	.word	0x0800c807
 800c764:	0800c807 	.word	0x0800c807
 800c768:	0800c807 	.word	0x0800c807
 800c76c:	0800c807 	.word	0x0800c807
 800c770:	0800c807 	.word	0x0800c807
 800c774:	0800c807 	.word	0x0800c807
 800c778:	0800c807 	.word	0x0800c807
 800c77c:	0800c807 	.word	0x0800c807
 800c780:	0800c807 	.word	0x0800c807
 800c784:	0800c807 	.word	0x0800c807
 800c788:	0800c807 	.word	0x0800c807
 800c78c:	0800c807 	.word	0x0800c807
 800c790:	0800c807 	.word	0x0800c807
 800c794:	0800c807 	.word	0x0800c807
 800c798:	0800c7f9 	.word	0x0800c7f9
 800c79c:	2b40      	cmp	r3, #64	; 0x40
 800c79e:	d02e      	beq.n	800c7fe <UART_SetConfig+0x896>
 800c7a0:	e031      	b.n	800c806 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7a2:	f7fb fbb9 	bl	8007f18 <HAL_RCC_GetPCLK1Freq>
 800c7a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c7a8:	e033      	b.n	800c812 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c7aa:	f7fb fbcb 	bl	8007f44 <HAL_RCC_GetPCLK2Freq>
 800c7ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c7b0:	e02f      	b.n	800c812 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7b2:	f107 0314 	add.w	r3, r7, #20
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7fd f802 	bl	80097c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c7c0:	e027      	b.n	800c812 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7c2:	f107 0308 	add.w	r3, r7, #8
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7fd f94e 	bl	8009a68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c7d0:	e01f      	b.n	800c812 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7d2:	4b58      	ldr	r3, [pc, #352]	; (800c934 <UART_SetConfig+0x9cc>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f003 0320 	and.w	r3, r3, #32
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d009      	beq.n	800c7f2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c7de:	4b55      	ldr	r3, [pc, #340]	; (800c934 <UART_SetConfig+0x9cc>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	08db      	lsrs	r3, r3, #3
 800c7e4:	f003 0303 	and.w	r3, r3, #3
 800c7e8:	4a53      	ldr	r2, [pc, #332]	; (800c938 <UART_SetConfig+0x9d0>)
 800c7ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c7f0:	e00f      	b.n	800c812 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c7f2:	4b51      	ldr	r3, [pc, #324]	; (800c938 <UART_SetConfig+0x9d0>)
 800c7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c7f6:	e00c      	b.n	800c812 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c7f8:	4b4c      	ldr	r3, [pc, #304]	; (800c92c <UART_SetConfig+0x9c4>)
 800c7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c7fc:	e009      	b.n	800c812 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c802:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c804:	e005      	b.n	800c812 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c806:	2300      	movs	r3, #0
 800c808:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c80a:	2301      	movs	r3, #1
 800c80c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c810:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c814:	2b00      	cmp	r3, #0
 800c816:	f000 80ea 	beq.w	800c9ee <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c81e:	4a44      	ldr	r2, [pc, #272]	; (800c930 <UART_SetConfig+0x9c8>)
 800c820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c824:	461a      	mov	r2, r3
 800c826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c828:	fbb3 f3f2 	udiv	r3, r3, r2
 800c82c:	005a      	lsls	r2, r3, #1
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	085b      	lsrs	r3, r3, #1
 800c834:	441a      	add	r2, r3
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c83e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c842:	2b0f      	cmp	r3, #15
 800c844:	d916      	bls.n	800c874 <UART_SetConfig+0x90c>
 800c846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c84c:	d212      	bcs.n	800c874 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c850:	b29b      	uxth	r3, r3
 800c852:	f023 030f 	bic.w	r3, r3, #15
 800c856:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85a:	085b      	lsrs	r3, r3, #1
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	f003 0307 	and.w	r3, r3, #7
 800c862:	b29a      	uxth	r2, r3
 800c864:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c866:	4313      	orrs	r3, r2
 800c868:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c870:	60da      	str	r2, [r3, #12]
 800c872:	e0bc      	b.n	800c9ee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c874:	2301      	movs	r3, #1
 800c876:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c87a:	e0b8      	b.n	800c9ee <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c87c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c880:	2b20      	cmp	r3, #32
 800c882:	dc4b      	bgt.n	800c91c <UART_SetConfig+0x9b4>
 800c884:	2b00      	cmp	r3, #0
 800c886:	f2c0 8087 	blt.w	800c998 <UART_SetConfig+0xa30>
 800c88a:	2b20      	cmp	r3, #32
 800c88c:	f200 8084 	bhi.w	800c998 <UART_SetConfig+0xa30>
 800c890:	a201      	add	r2, pc, #4	; (adr r2, 800c898 <UART_SetConfig+0x930>)
 800c892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c896:	bf00      	nop
 800c898:	0800c923 	.word	0x0800c923
 800c89c:	0800c93d 	.word	0x0800c93d
 800c8a0:	0800c999 	.word	0x0800c999
 800c8a4:	0800c999 	.word	0x0800c999
 800c8a8:	0800c945 	.word	0x0800c945
 800c8ac:	0800c999 	.word	0x0800c999
 800c8b0:	0800c999 	.word	0x0800c999
 800c8b4:	0800c999 	.word	0x0800c999
 800c8b8:	0800c955 	.word	0x0800c955
 800c8bc:	0800c999 	.word	0x0800c999
 800c8c0:	0800c999 	.word	0x0800c999
 800c8c4:	0800c999 	.word	0x0800c999
 800c8c8:	0800c999 	.word	0x0800c999
 800c8cc:	0800c999 	.word	0x0800c999
 800c8d0:	0800c999 	.word	0x0800c999
 800c8d4:	0800c999 	.word	0x0800c999
 800c8d8:	0800c965 	.word	0x0800c965
 800c8dc:	0800c999 	.word	0x0800c999
 800c8e0:	0800c999 	.word	0x0800c999
 800c8e4:	0800c999 	.word	0x0800c999
 800c8e8:	0800c999 	.word	0x0800c999
 800c8ec:	0800c999 	.word	0x0800c999
 800c8f0:	0800c999 	.word	0x0800c999
 800c8f4:	0800c999 	.word	0x0800c999
 800c8f8:	0800c999 	.word	0x0800c999
 800c8fc:	0800c999 	.word	0x0800c999
 800c900:	0800c999 	.word	0x0800c999
 800c904:	0800c999 	.word	0x0800c999
 800c908:	0800c999 	.word	0x0800c999
 800c90c:	0800c999 	.word	0x0800c999
 800c910:	0800c999 	.word	0x0800c999
 800c914:	0800c999 	.word	0x0800c999
 800c918:	0800c98b 	.word	0x0800c98b
 800c91c:	2b40      	cmp	r3, #64	; 0x40
 800c91e:	d037      	beq.n	800c990 <UART_SetConfig+0xa28>
 800c920:	e03a      	b.n	800c998 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c922:	f7fb faf9 	bl	8007f18 <HAL_RCC_GetPCLK1Freq>
 800c926:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c928:	e03c      	b.n	800c9a4 <UART_SetConfig+0xa3c>
 800c92a:	bf00      	nop
 800c92c:	003d0900 	.word	0x003d0900
 800c930:	0800d60c 	.word	0x0800d60c
 800c934:	58024400 	.word	0x58024400
 800c938:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c93c:	f7fb fb02 	bl	8007f44 <HAL_RCC_GetPCLK2Freq>
 800c940:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c942:	e02f      	b.n	800c9a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c944:	f107 0314 	add.w	r3, r7, #20
 800c948:	4618      	mov	r0, r3
 800c94a:	f7fc ff39 	bl	80097c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c952:	e027      	b.n	800c9a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c954:	f107 0308 	add.w	r3, r7, #8
 800c958:	4618      	mov	r0, r3
 800c95a:	f7fd f885 	bl	8009a68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c962:	e01f      	b.n	800c9a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c964:	4b2c      	ldr	r3, [pc, #176]	; (800ca18 <UART_SetConfig+0xab0>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f003 0320 	and.w	r3, r3, #32
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d009      	beq.n	800c984 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c970:	4b29      	ldr	r3, [pc, #164]	; (800ca18 <UART_SetConfig+0xab0>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	08db      	lsrs	r3, r3, #3
 800c976:	f003 0303 	and.w	r3, r3, #3
 800c97a:	4a28      	ldr	r2, [pc, #160]	; (800ca1c <UART_SetConfig+0xab4>)
 800c97c:	fa22 f303 	lsr.w	r3, r2, r3
 800c980:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c982:	e00f      	b.n	800c9a4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c984:	4b25      	ldr	r3, [pc, #148]	; (800ca1c <UART_SetConfig+0xab4>)
 800c986:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c988:	e00c      	b.n	800c9a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c98a:	4b25      	ldr	r3, [pc, #148]	; (800ca20 <UART_SetConfig+0xab8>)
 800c98c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c98e:	e009      	b.n	800c9a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c994:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c996:	e005      	b.n	800c9a4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c998:	2300      	movs	r3, #0
 800c99a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c99c:	2301      	movs	r3, #1
 800c99e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c9a2:	bf00      	nop
    }

    if (pclk != 0U)
 800c9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d021      	beq.n	800c9ee <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ae:	4a1d      	ldr	r2, [pc, #116]	; (800ca24 <UART_SetConfig+0xabc>)
 800c9b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b8:	fbb3 f2f2 	udiv	r2, r3, r2
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	085b      	lsrs	r3, r3, #1
 800c9c2:	441a      	add	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9cc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d0:	2b0f      	cmp	r3, #15
 800c9d2:	d909      	bls.n	800c9e8 <UART_SetConfig+0xa80>
 800c9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9da:	d205      	bcs.n	800c9e8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	60da      	str	r2, [r3, #12]
 800c9e6:	e002      	b.n	800c9ee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2200      	movs	r2, #0
 800ca02:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ca0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3738      	adds	r7, #56	; 0x38
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bdb0      	pop	{r4, r5, r7, pc}
 800ca16:	bf00      	nop
 800ca18:	58024400 	.word	0x58024400
 800ca1c:	03d09000 	.word	0x03d09000
 800ca20:	003d0900 	.word	0x003d0900
 800ca24:	0800d60c 	.word	0x0800d60c

0800ca28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca34:	f003 0301 	and.w	r3, r3, #1
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d00a      	beq.n	800ca52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	430a      	orrs	r2, r1
 800ca50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca56:	f003 0302 	and.w	r3, r3, #2
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d00a      	beq.n	800ca74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	430a      	orrs	r2, r1
 800ca72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca78:	f003 0304 	and.w	r3, r3, #4
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d00a      	beq.n	800ca96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	430a      	orrs	r2, r1
 800ca94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca9a:	f003 0308 	and.w	r3, r3, #8
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d00a      	beq.n	800cab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	430a      	orrs	r2, r1
 800cab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cabc:	f003 0310 	and.w	r3, r3, #16
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d00a      	beq.n	800cada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	689b      	ldr	r3, [r3, #8]
 800caca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	430a      	orrs	r2, r1
 800cad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cade:	f003 0320 	and.w	r3, r3, #32
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00a      	beq.n	800cafc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	689b      	ldr	r3, [r3, #8]
 800caec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	430a      	orrs	r2, r1
 800cafa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d01a      	beq.n	800cb3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	430a      	orrs	r2, r1
 800cb1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb26:	d10a      	bne.n	800cb3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	430a      	orrs	r2, r1
 800cb3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d00a      	beq.n	800cb60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	430a      	orrs	r2, r1
 800cb5e:	605a      	str	r2, [r3, #4]
  }
}
 800cb60:	bf00      	nop
 800cb62:	370c      	adds	r7, #12
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b086      	sub	sp, #24
 800cb70:	af02      	add	r7, sp, #8
 800cb72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2200      	movs	r2, #0
 800cb78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cb7c:	f7f6 f964 	bl	8002e48 <HAL_GetTick>
 800cb80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f003 0308 	and.w	r3, r3, #8
 800cb8c:	2b08      	cmp	r3, #8
 800cb8e:	d10e      	bne.n	800cbae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb94:	9300      	str	r3, [sp, #0]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 f82f 	bl	800cc02 <UART_WaitOnFlagUntilTimeout>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d001      	beq.n	800cbae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbaa:	2303      	movs	r3, #3
 800cbac:	e025      	b.n	800cbfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f003 0304 	and.w	r3, r3, #4
 800cbb8:	2b04      	cmp	r3, #4
 800cbba:	d10e      	bne.n	800cbda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cbbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cbc0:	9300      	str	r3, [sp, #0]
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 f819 	bl	800cc02 <UART_WaitOnFlagUntilTimeout>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d001      	beq.n	800cbda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbd6:	2303      	movs	r3, #3
 800cbd8:	e00f      	b.n	800cbfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2220      	movs	r2, #32
 800cbde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2220      	movs	r2, #32
 800cbe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cbf8:	2300      	movs	r3, #0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b09c      	sub	sp, #112	; 0x70
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	60f8      	str	r0, [r7, #12]
 800cc0a:	60b9      	str	r1, [r7, #8]
 800cc0c:	603b      	str	r3, [r7, #0]
 800cc0e:	4613      	mov	r3, r2
 800cc10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc12:	e0a9      	b.n	800cd68 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc1a:	f000 80a5 	beq.w	800cd68 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc1e:	f7f6 f913 	bl	8002e48 <HAL_GetTick>
 800cc22:	4602      	mov	r2, r0
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	1ad3      	subs	r3, r2, r3
 800cc28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d302      	bcc.n	800cc34 <UART_WaitOnFlagUntilTimeout+0x32>
 800cc2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d140      	bne.n	800ccb6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc3c:	e853 3f00 	ldrex	r3, [r3]
 800cc40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cc42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cc48:	667b      	str	r3, [r7, #100]	; 0x64
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	461a      	mov	r2, r3
 800cc50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc52:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc54:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cc58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc5a:	e841 2300 	strex	r3, r2, [r1]
 800cc5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cc60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d1e6      	bne.n	800cc34 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	3308      	adds	r3, #8
 800cc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc70:	e853 3f00 	ldrex	r3, [r3]
 800cc74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc78:	f023 0301 	bic.w	r3, r3, #1
 800cc7c:	663b      	str	r3, [r7, #96]	; 0x60
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	3308      	adds	r3, #8
 800cc84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc86:	64ba      	str	r2, [r7, #72]	; 0x48
 800cc88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cc8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc8e:	e841 2300 	strex	r3, r2, [r1]
 800cc92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cc94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d1e5      	bne.n	800cc66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2220      	movs	r2, #32
 800cc9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2220      	movs	r2, #32
 800cca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2200      	movs	r2, #0
 800ccae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ccb2:	2303      	movs	r3, #3
 800ccb4:	e069      	b.n	800cd8a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f003 0304 	and.w	r3, r3, #4
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d051      	beq.n	800cd68 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	69db      	ldr	r3, [r3, #28]
 800ccca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ccce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ccd2:	d149      	bne.n	800cd68 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ccdc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce6:	e853 3f00 	ldrex	r3, [r3]
 800ccea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ccec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ccf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccfc:	637b      	str	r3, [r7, #52]	; 0x34
 800ccfe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd04:	e841 2300 	strex	r3, r2, [r1]
 800cd08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d1e6      	bne.n	800ccde <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	3308      	adds	r3, #8
 800cd16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	e853 3f00 	ldrex	r3, [r3]
 800cd1e:	613b      	str	r3, [r7, #16]
   return(result);
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	f023 0301 	bic.w	r3, r3, #1
 800cd26:	66bb      	str	r3, [r7, #104]	; 0x68
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	3308      	adds	r3, #8
 800cd2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cd30:	623a      	str	r2, [r7, #32]
 800cd32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd34:	69f9      	ldr	r1, [r7, #28]
 800cd36:	6a3a      	ldr	r2, [r7, #32]
 800cd38:	e841 2300 	strex	r3, r2, [r1]
 800cd3c:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd3e:	69bb      	ldr	r3, [r7, #24]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d1e5      	bne.n	800cd10 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2220      	movs	r2, #32
 800cd48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2220      	movs	r2, #32
 800cd50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2220      	movs	r2, #32
 800cd58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cd64:	2303      	movs	r3, #3
 800cd66:	e010      	b.n	800cd8a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	69da      	ldr	r2, [r3, #28]
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	4013      	ands	r3, r2
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	bf0c      	ite	eq
 800cd78:	2301      	moveq	r3, #1
 800cd7a:	2300      	movne	r3, #0
 800cd7c:	b2db      	uxtb	r3, r3
 800cd7e:	461a      	mov	r2, r3
 800cd80:	79fb      	ldrb	r3, [r7, #7]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	f43f af46 	beq.w	800cc14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cd88:	2300      	movs	r3, #0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3770      	adds	r7, #112	; 0x70
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
	...

0800cd94 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b096      	sub	sp, #88	; 0x58
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	4613      	mov	r3, r2
 800cda0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	68ba      	ldr	r2, [r7, #8]
 800cda6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	88fa      	ldrh	r2, [r7, #6]
 800cdac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2222      	movs	r2, #34	; 0x22
 800cdbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d02c      	beq.n	800ce22 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdcc:	4a42      	ldr	r2, [pc, #264]	; (800ced8 <UART_Start_Receive_DMA+0x144>)
 800cdce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdd4:	4a41      	ldr	r2, [pc, #260]	; (800cedc <UART_Start_Receive_DMA+0x148>)
 800cdd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cddc:	4a40      	ldr	r2, [pc, #256]	; (800cee0 <UART_Start_Receive_DMA+0x14c>)
 800cdde:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cde4:	2200      	movs	r2, #0
 800cde6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	3324      	adds	r3, #36	; 0x24
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	88fb      	ldrh	r3, [r7, #6]
 800cdfc:	f7f8 f942 	bl	8005084 <HAL_DMA_Start_IT>
 800ce00:	4603      	mov	r3, r0
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d00d      	beq.n	800ce22 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2210      	movs	r2, #16
 800ce0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2200      	movs	r2, #0
 800ce12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2220      	movs	r2, #32
 800ce1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e055      	b.n	800cece <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2200      	movs	r2, #0
 800ce26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	691b      	ldr	r3, [r3, #16]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d018      	beq.n	800ce64 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce3a:	e853 3f00 	ldrex	r3, [r3]
 800ce3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ce40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce46:	657b      	str	r3, [r7, #84]	; 0x54
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce50:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce52:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ce56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce58:	e841 2300 	strex	r3, r2, [r1]
 800ce5c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ce5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d1e6      	bne.n	800ce32 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	3308      	adds	r3, #8
 800ce6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6e:	e853 3f00 	ldrex	r3, [r3]
 800ce72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ce74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce76:	f043 0301 	orr.w	r3, r3, #1
 800ce7a:	653b      	str	r3, [r7, #80]	; 0x50
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	3308      	adds	r3, #8
 800ce82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce84:	637a      	str	r2, [r7, #52]	; 0x34
 800ce86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce8c:	e841 2300 	strex	r3, r2, [r1]
 800ce90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ce92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d1e5      	bne.n	800ce64 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	3308      	adds	r3, #8
 800ce9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	e853 3f00 	ldrex	r3, [r3]
 800cea6:	613b      	str	r3, [r7, #16]
   return(result);
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ceae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	3308      	adds	r3, #8
 800ceb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ceb8:	623a      	str	r2, [r7, #32]
 800ceba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cebc:	69f9      	ldr	r1, [r7, #28]
 800cebe:	6a3a      	ldr	r2, [r7, #32]
 800cec0:	e841 2300 	strex	r3, r2, [r1]
 800cec4:	61bb      	str	r3, [r7, #24]
   return(result);
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d1e5      	bne.n	800ce98 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800cecc:	2300      	movs	r3, #0
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3758      	adds	r7, #88	; 0x58
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	0800d035 	.word	0x0800d035
 800cedc:	0800d157 	.word	0x0800d157
 800cee0:	0800d18f 	.word	0x0800d18f

0800cee4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b08f      	sub	sp, #60	; 0x3c
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cef2:	6a3b      	ldr	r3, [r7, #32]
 800cef4:	e853 3f00 	ldrex	r3, [r3]
 800cef8:	61fb      	str	r3, [r7, #28]
   return(result);
 800cefa:	69fb      	ldr	r3, [r7, #28]
 800cefc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cf00:	637b      	str	r3, [r7, #52]	; 0x34
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	461a      	mov	r2, r3
 800cf08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf0c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf12:	e841 2300 	strex	r3, r2, [r1]
 800cf16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d1e6      	bne.n	800ceec <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	3308      	adds	r3, #8
 800cf24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	e853 3f00 	ldrex	r3, [r3]
 800cf2c:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cf34:	633b      	str	r3, [r7, #48]	; 0x30
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	3308      	adds	r3, #8
 800cf3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf3e:	61ba      	str	r2, [r7, #24]
 800cf40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf42:	6979      	ldr	r1, [r7, #20]
 800cf44:	69ba      	ldr	r2, [r7, #24]
 800cf46:	e841 2300 	strex	r3, r2, [r1]
 800cf4a:	613b      	str	r3, [r7, #16]
   return(result);
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d1e5      	bne.n	800cf1e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2220      	movs	r2, #32
 800cf56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800cf5a:	bf00      	nop
 800cf5c:	373c      	adds	r7, #60	; 0x3c
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr
	...

0800cf68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b095      	sub	sp, #84	; 0x54
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf78:	e853 3f00 	ldrex	r3, [r3]
 800cf7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cf7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cf84:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf8e:	643b      	str	r3, [r7, #64]	; 0x40
 800cf90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cf94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf96:	e841 2300 	strex	r3, r2, [r1]
 800cf9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d1e6      	bne.n	800cf70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	3308      	adds	r3, #8
 800cfa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfaa:	6a3b      	ldr	r3, [r7, #32]
 800cfac:	e853 3f00 	ldrex	r3, [r3]
 800cfb0:	61fb      	str	r3, [r7, #28]
   return(result);
 800cfb2:	69fa      	ldr	r2, [r7, #28]
 800cfb4:	4b1e      	ldr	r3, [pc, #120]	; (800d030 <UART_EndRxTransfer+0xc8>)
 800cfb6:	4013      	ands	r3, r2
 800cfb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	3308      	adds	r3, #8
 800cfc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cfc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cfc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfca:	e841 2300 	strex	r3, r2, [r1]
 800cfce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d1e5      	bne.n	800cfa2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	d118      	bne.n	800d010 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	e853 3f00 	ldrex	r3, [r3]
 800cfea:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	f023 0310 	bic.w	r3, r3, #16
 800cff2:	647b      	str	r3, [r7, #68]	; 0x44
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	461a      	mov	r2, r3
 800cffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cffc:	61bb      	str	r3, [r7, #24]
 800cffe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d000:	6979      	ldr	r1, [r7, #20]
 800d002:	69ba      	ldr	r2, [r7, #24]
 800d004:	e841 2300 	strex	r3, r2, [r1]
 800d008:	613b      	str	r3, [r7, #16]
   return(result);
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d1e6      	bne.n	800cfde <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2220      	movs	r2, #32
 800d014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d024:	bf00      	nop
 800d026:	3754      	adds	r7, #84	; 0x54
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr
 800d030:	effffffe 	.word	0xeffffffe

0800d034 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b09c      	sub	sp, #112	; 0x70
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d040:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	69db      	ldr	r3, [r3, #28]
 800d046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d04a:	d071      	beq.n	800d130 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d04c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d04e:	2200      	movs	r2, #0
 800d050:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d05a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d05c:	e853 3f00 	ldrex	r3, [r3]
 800d060:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d068:	66bb      	str	r3, [r7, #104]	; 0x68
 800d06a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	461a      	mov	r2, r3
 800d070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d072:	65bb      	str	r3, [r7, #88]	; 0x58
 800d074:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d076:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d078:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d07a:	e841 2300 	strex	r3, r2, [r1]
 800d07e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d082:	2b00      	cmp	r3, #0
 800d084:	d1e6      	bne.n	800d054 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	3308      	adds	r3, #8
 800d08c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d090:	e853 3f00 	ldrex	r3, [r3]
 800d094:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d098:	f023 0301 	bic.w	r3, r3, #1
 800d09c:	667b      	str	r3, [r7, #100]	; 0x64
 800d09e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	3308      	adds	r3, #8
 800d0a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d0a6:	647a      	str	r2, [r7, #68]	; 0x44
 800d0a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d0ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d0ae:	e841 2300 	strex	r3, r2, [r1]
 800d0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d1e5      	bne.n	800d086 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	3308      	adds	r3, #8
 800d0c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c4:	e853 3f00 	ldrex	r3, [r3]
 800d0c8:	623b      	str	r3, [r7, #32]
   return(result);
 800d0ca:	6a3b      	ldr	r3, [r7, #32]
 800d0cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0d0:	663b      	str	r3, [r7, #96]	; 0x60
 800d0d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	3308      	adds	r3, #8
 800d0d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d0da:	633a      	str	r2, [r7, #48]	; 0x30
 800d0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0e2:	e841 2300 	strex	r3, r2, [r1]
 800d0e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d1e5      	bne.n	800d0ba <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d0ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0f0:	2220      	movs	r2, #32
 800d0f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0fa:	2b01      	cmp	r3, #1
 800d0fc:	d118      	bne.n	800d130 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	e853 3f00 	ldrex	r3, [r3]
 800d10a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f023 0310 	bic.w	r3, r3, #16
 800d112:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	461a      	mov	r2, r3
 800d11a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d11c:	61fb      	str	r3, [r7, #28]
 800d11e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d120:	69b9      	ldr	r1, [r7, #24]
 800d122:	69fa      	ldr	r2, [r7, #28]
 800d124:	e841 2300 	strex	r3, r2, [r1]
 800d128:	617b      	str	r3, [r7, #20]
   return(result);
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d1e6      	bne.n	800d0fe <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d134:	2b01      	cmp	r3, #1
 800d136:	d107      	bne.n	800d148 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d13a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d13e:	4619      	mov	r1, r3
 800d140:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d142:	f7fe ff05 	bl	800bf50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d146:	e002      	b.n	800d14e <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800d148:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d14a:	f7fe fee3 	bl	800bf14 <HAL_UART_RxCpltCallback>
}
 800d14e:	bf00      	nop
 800d150:	3770      	adds	r7, #112	; 0x70
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d156:	b580      	push	{r7, lr}
 800d158:	b084      	sub	sp, #16
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d162:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d109      	bne.n	800d180 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d172:	085b      	lsrs	r3, r3, #1
 800d174:	b29b      	uxth	r3, r3
 800d176:	4619      	mov	r1, r3
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f7fe fee9 	bl	800bf50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d17e:	e002      	b.n	800d186 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	f7fe fed1 	bl	800bf28 <HAL_UART_RxHalfCpltCallback>
}
 800d186:	bf00      	nop
 800d188:	3710      	adds	r7, #16
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}

0800d18e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d18e:	b580      	push	{r7, lr}
 800d190:	b086      	sub	sp, #24
 800d192:	af00      	add	r7, sp, #0
 800d194:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d19a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1a2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1aa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	689b      	ldr	r3, [r3, #8]
 800d1b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1b6:	2b80      	cmp	r3, #128	; 0x80
 800d1b8:	d109      	bne.n	800d1ce <UART_DMAError+0x40>
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	2b21      	cmp	r3, #33	; 0x21
 800d1be:	d106      	bne.n	800d1ce <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d1c8:	6978      	ldr	r0, [r7, #20]
 800d1ca:	f7ff fe8b 	bl	800cee4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1d8:	2b40      	cmp	r3, #64	; 0x40
 800d1da:	d109      	bne.n	800d1f0 <UART_DMAError+0x62>
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2b22      	cmp	r3, #34	; 0x22
 800d1e0:	d106      	bne.n	800d1f0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d1ea:	6978      	ldr	r0, [r7, #20]
 800d1ec:	f7ff febc 	bl	800cf68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1f6:	f043 0210 	orr.w	r2, r3, #16
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d200:	6978      	ldr	r0, [r7, #20]
 800d202:	f7fe fe9b 	bl	800bf3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d206:	bf00      	nop
 800d208:	3718      	adds	r7, #24
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d20e:	b480      	push	{r7}
 800d210:	b085      	sub	sp, #20
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	d101      	bne.n	800d224 <HAL_UARTEx_DisableFifoMode+0x16>
 800d220:	2302      	movs	r3, #2
 800d222:	e027      	b.n	800d274 <HAL_UARTEx_DisableFifoMode+0x66>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2201      	movs	r2, #1
 800d228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2224      	movs	r2, #36	; 0x24
 800d230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f022 0201 	bic.w	r2, r2, #1
 800d24a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d252:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2220      	movs	r2, #32
 800d266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2200      	movs	r2, #0
 800d26e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d272:	2300      	movs	r3, #0
}
 800d274:	4618      	mov	r0, r3
 800d276:	3714      	adds	r7, #20
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr

0800d280 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d290:	2b01      	cmp	r3, #1
 800d292:	d101      	bne.n	800d298 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d294:	2302      	movs	r3, #2
 800d296:	e02d      	b.n	800d2f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2201      	movs	r2, #1
 800d29c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2224      	movs	r2, #36	; 0x24
 800d2a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f022 0201 	bic.w	r2, r2, #1
 800d2be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	689b      	ldr	r3, [r3, #8]
 800d2c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	683a      	ldr	r2, [r7, #0]
 800d2d0:	430a      	orrs	r2, r1
 800d2d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 f84f 	bl	800d378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	68fa      	ldr	r2, [r7, #12]
 800d2e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2220      	movs	r2, #32
 800d2e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d2f2:	2300      	movs	r3, #0
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3710      	adds	r7, #16
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d101      	bne.n	800d314 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d310:	2302      	movs	r3, #2
 800d312:	e02d      	b.n	800d370 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2201      	movs	r2, #1
 800d318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2224      	movs	r2, #36	; 0x24
 800d320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f022 0201 	bic.w	r2, r2, #1
 800d33a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	683a      	ldr	r2, [r7, #0]
 800d34c:	430a      	orrs	r2, r1
 800d34e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f000 f811 	bl	800d378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	68fa      	ldr	r2, [r7, #12]
 800d35c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2220      	movs	r2, #32
 800d362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d36e:	2300      	movs	r3, #0
}
 800d370:	4618      	mov	r0, r3
 800d372:	3710      	adds	r7, #16
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d378:	b480      	push	{r7}
 800d37a:	b085      	sub	sp, #20
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d384:	2b00      	cmp	r3, #0
 800d386:	d108      	bne.n	800d39a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2201      	movs	r2, #1
 800d38c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2201      	movs	r2, #1
 800d394:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d398:	e031      	b.n	800d3fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d39a:	2310      	movs	r3, #16
 800d39c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d39e:	2310      	movs	r3, #16
 800d3a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	689b      	ldr	r3, [r3, #8]
 800d3a8:	0e5b      	lsrs	r3, r3, #25
 800d3aa:	b2db      	uxtb	r3, r3
 800d3ac:	f003 0307 	and.w	r3, r3, #7
 800d3b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	0f5b      	lsrs	r3, r3, #29
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	f003 0307 	and.w	r3, r3, #7
 800d3c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d3c2:	7bbb      	ldrb	r3, [r7, #14]
 800d3c4:	7b3a      	ldrb	r2, [r7, #12]
 800d3c6:	4911      	ldr	r1, [pc, #68]	; (800d40c <UARTEx_SetNbDataToProcess+0x94>)
 800d3c8:	5c8a      	ldrb	r2, [r1, r2]
 800d3ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d3ce:	7b3a      	ldrb	r2, [r7, #12]
 800d3d0:	490f      	ldr	r1, [pc, #60]	; (800d410 <UARTEx_SetNbDataToProcess+0x98>)
 800d3d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d3d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d3e0:	7bfb      	ldrb	r3, [r7, #15]
 800d3e2:	7b7a      	ldrb	r2, [r7, #13]
 800d3e4:	4909      	ldr	r1, [pc, #36]	; (800d40c <UARTEx_SetNbDataToProcess+0x94>)
 800d3e6:	5c8a      	ldrb	r2, [r1, r2]
 800d3e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d3ec:	7b7a      	ldrb	r2, [r7, #13]
 800d3ee:	4908      	ldr	r1, [pc, #32]	; (800d410 <UARTEx_SetNbDataToProcess+0x98>)
 800d3f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d3f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d3fe:	bf00      	nop
 800d400:	3714      	adds	r7, #20
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr
 800d40a:	bf00      	nop
 800d40c:	0800d624 	.word	0x0800d624
 800d410:	0800d62c 	.word	0x0800d62c

0800d414 <__libc_init_array>:
 800d414:	b570      	push	{r4, r5, r6, lr}
 800d416:	4d0d      	ldr	r5, [pc, #52]	; (800d44c <__libc_init_array+0x38>)
 800d418:	4c0d      	ldr	r4, [pc, #52]	; (800d450 <__libc_init_array+0x3c>)
 800d41a:	1b64      	subs	r4, r4, r5
 800d41c:	10a4      	asrs	r4, r4, #2
 800d41e:	2600      	movs	r6, #0
 800d420:	42a6      	cmp	r6, r4
 800d422:	d109      	bne.n	800d438 <__libc_init_array+0x24>
 800d424:	4d0b      	ldr	r5, [pc, #44]	; (800d454 <__libc_init_array+0x40>)
 800d426:	4c0c      	ldr	r4, [pc, #48]	; (800d458 <__libc_init_array+0x44>)
 800d428:	f000 f820 	bl	800d46c <_init>
 800d42c:	1b64      	subs	r4, r4, r5
 800d42e:	10a4      	asrs	r4, r4, #2
 800d430:	2600      	movs	r6, #0
 800d432:	42a6      	cmp	r6, r4
 800d434:	d105      	bne.n	800d442 <__libc_init_array+0x2e>
 800d436:	bd70      	pop	{r4, r5, r6, pc}
 800d438:	f855 3b04 	ldr.w	r3, [r5], #4
 800d43c:	4798      	blx	r3
 800d43e:	3601      	adds	r6, #1
 800d440:	e7ee      	b.n	800d420 <__libc_init_array+0xc>
 800d442:	f855 3b04 	ldr.w	r3, [r5], #4
 800d446:	4798      	blx	r3
 800d448:	3601      	adds	r6, #1
 800d44a:	e7f2      	b.n	800d432 <__libc_init_array+0x1e>
 800d44c:	0800d63c 	.word	0x0800d63c
 800d450:	0800d63c 	.word	0x0800d63c
 800d454:	0800d63c 	.word	0x0800d63c
 800d458:	0800d640 	.word	0x0800d640

0800d45c <memset>:
 800d45c:	4402      	add	r2, r0
 800d45e:	4603      	mov	r3, r0
 800d460:	4293      	cmp	r3, r2
 800d462:	d100      	bne.n	800d466 <memset+0xa>
 800d464:	4770      	bx	lr
 800d466:	f803 1b01 	strb.w	r1, [r3], #1
 800d46a:	e7f9      	b.n	800d460 <memset+0x4>

0800d46c <_init>:
 800d46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46e:	bf00      	nop
 800d470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d472:	bc08      	pop	{r3}
 800d474:	469e      	mov	lr, r3
 800d476:	4770      	bx	lr

0800d478 <_fini>:
 800d478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d47a:	bf00      	nop
 800d47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d47e:	bc08      	pop	{r3}
 800d480:	469e      	mov	lr, r3
 800d482:	4770      	bx	lr
